gitlab-ci-multi-Runner
    Exactly same application that runs The
    tests on The GitLab CI instance.

    I'm not convinced.

cache
    For storing project dependencies
    
    Caches are used to speed up runs of a
    given job IN subsequent pipelines, by
    storing downloaded dependencies so that
    they don’t have to be fetched from The
    internet again (like npm packages, go
    vendor packages, etc.)
    
    While The cache could be configured to
    pass intermediate build results between
    stages, this should be done with artifacts
    instead.

artifacts
    Use for stage results that will be passed
    between stages.
    
    artifacts are files generated by a job
    which are stored and uploaded, and can
    then be fetched and used by jobs IN later
    stages of The same pipeline.
    
    This Data will not be available IN
    different pipelines, but is available to
    be downloaded from The UI.

only and except
    Two parameters that set a job Policy to
    limit when jobs are created:
    - only defines The names of branches and
      tags for which The job will Run.
    - except defines The names of branches and
      tags for which The job will not Run.

    You can use regex.

    ewwlinks +/"# use regexp" "https://docs.gitlab.com/ee/ci/yaml/#onlyexcept-basic"

    egr only and except gitlab-ci
    
    changes
        Using The changes keyword with only or
        except makes it possible to define if
        a job should be created based on files
        modified by a Git push event.

shared, specific and group runners
    - Shared Runners
      Useful for jobs that have similar
      requirements, between multiple projects.
      
      Rather than having multiple Runners
      idling for many projects, you can have a
      single or a small number of Runners that
      handle multiple projects.
      
      This makes it easier to maintain and
      update them.
      
      Shared Runners process jobs using a fair
      usage Queue.
      
      IN contrast to specific Runners that use
      a FIFO Queue, this prevents cases where
      projects create hundreds of jobs which
      can lead to eating all available shared
      Runners resources.

    - Specific Runners
      Useful for jobs that have special
      requirements or for projects with a
      specific demand.
      
      If a job has certain requirements, you
      can set up The specific Runner with this
      IN mind, while not having to do this for
      all Runners.
      
      For example, if you want to deploy a
      certain project, you can set up a
      specific Runner to have The right
      credentials for this.
      
      The usage of tags may be useful IN this
      case.
      
      Specific Runners process jobs using a
      FIFO Queue.

    - group Runners
      Useful when you have multiple projects
      under one group and would like all
      projects to have access to a set of
      Runners.
      
      group Runners process jobs using a FIFO
      Queue.

Linux Shared Runners
    [#GitLab.com]

    Run IN autoscale mode and are powered by
    Google Cloud Platform.
    
    Autoscaling means reduced waiting times to
    spin up CI/CD jobs, and isolated VMs for
    each project, thus maximizing security.
    
    They’Re Free to use for public open source
    projects and limited to 2000 CI minutes
    per month per group for private projects.
    
    More minutes can be purchased, if needed.
    
    read about all GitLab.com plans.

Environments
    Like tags for your CI jobs, describing
    where code gets deployed.

Deployments
    Created when jobs deploy versions of code
    to Environments, so every environment can
    have one or more Deployments.

Runner
    [#GitLab CI]

    Runs The code defined IN .gitlab-ci.yml.
    
    They are isolated (virtual) machines that
    pick up jobs through The coordinator API
    of GitLab CI.
    
    A Runner can be specific to a certain
    project or serve any project IN GitLab CI.
    
    A Runner that serves all projects is
    called a shared Runner.
    
    Ideally, The GitLab Runner should not be
    installed on The same machine as GitLab.

kaniko
    vim +/"kaniko" "$NOTES/ws/Kubernetes/glossary.txt"

GitLab CI
GitLab CI/CD
    A tool built into GitLab for software
    development through The continuous
    methodologies:

    - Continuous integration (CI)
    - Continuous delivery (CD)
    - Continuous Deployment (CD)

job
    [#gitlab]

    A list of parameters that define The job’s
    behavior.

    Are picked up by Runners and executed
    within The environment of The Runner.
    
    What is important, is that each job is Run
    independently from each other.

    ewwlinks +/"Unavailable names for jobs" "https://docs.gitlab.com/ee/ci/yaml/"

script
    [#job]
    [keyword]
    - required

    The only required keyword that a job
    needs.

    It’s a shell script which is executed by
    The Runner.

image
    [#job]
    [keyword]

    Use docker images.

    Also available:
    - image:name and    
    - image:entrypoint.    

services
    [#job]
    [keyword]

    Use docker services images.

    Also available:
    - services:name,    
    - services:alias,
    - services:entrypoint, and
    - services:command.    

    The services keyword defines a docker
    image that runs during a job linked to The
    docker image that The image keyword
    defines. This allows you to access The
    Service image during build time.

    The Service image can Run any application,
    but The most common use case is to Run a
    database Container, for example:

    - Using MySQL
    - Using PostgreSQL
    - Using Redis

before_script
    [#job]
    [keyword]

    Override a set of commands that are
    executed before job.    

after_script
    [#job]
    [keyword]

    Override a set of commands that are
    executed after job.    

stages
    [#job]
    [keyword]

    Define stages IN a pipeline.    

stage
    Defines a job stage (default: test).    
