syntax
    grammatical structure
    
semantics
    the meaning of the vocabulary symbol
    
grammatical
    syntactically valid

sensible
    semantically valid.

ambiguity
    Natural languages are full of ambiguity,
    which people deal with by using contextual
    clues and other information.
    
    Formal languages are designed to be nearly
    or completely unambiguous, which means
    that any statement has exactly one
    meaning, regardless of context.

redundancy
    In order to make up for ambiguity and
    reduce misunderstandings, natural
    languages employ lots of redundancy.
    
    As a result, they are often verbose.
    
    Formal languages are less redundant and
    more concise.

literalness
    Natural languages are full of idiom and
    metaphor.
    
    If I say, “The penny dropped,” there is
    probably no penny and nothing dropping
    (this idiom means that someone realized
    something after a period of confusion).
    
    Formal languages mean exactly what they
    say.

Poetry
    Words are used for their sounds as well as
    for their meaning, and the whole poem
    together creates an effect or emotional
    response.
    
    Ambiguity is not only common but often
    deliberate.

Prose
    The literal meaning of words is more
    important, and the structure contributes
    more meaning.
    
    Prose is more amenable to analysis than
    poetry but still often ambiguous.

Programs
    The meaning of a computer program is
    unambiguous and literal, and can be
    understood entirely by analysis of the
    tokens and structure.

high-level
    Designed to be easy for humans to read and
    write.

low-level
    Designed to be easy for a computer to
    execute; also called “machine language” or
    “assembly language.”

algorithm
    A general process for solving a category
    of problems.

token
    One of the basic elements of the syntactic
    structure of a program, analogous to a
    word in a natural language.