Probabilistic Context Free Grammars
PCFG
    A context free grammar that associates a
    probability with each of its rules.
    
    It generates the same set of parses for a
    text that the corresponding context free
    grammar does, and assigns a probability to
    each parse.
    
    The probability of a parse generated by a
    PCFG is simply the product of the
    probabilities of the rules used to
    generate it.

    Probabilistic context free grammars are
    implemented by the PCFG class, which is
    defined in the nltk.cfg module. Like CFGs,
    each PCFG consists of a start state and a
    set of rules. But the rules are
    represented by PCFG_Rule, a subclass of
    CFG_Rule that associates a probability
    with a context free grammar rule.

Parser generator
    Takes a grammar of your language and
    produces fast (table-driven), non-
    recursive parsers which can scan in linear
    time.

Language agnostic parser generator
    Take the grammar and produces parsers for
    multiple targets (different programming
    languages).

    e.g. Antlr

alphabet
Σ
    A set of characters.

    Σ = {a,b,...}

Language
    A set of strings consisting of the
    characters of the alphabet.

    L1(Σ) = {a,aa,b,ab,ba,bba,...}

    For example, the language L1 here consists
    of any possible strings of any length of
    any permutations from the symbols from
    this alphabet.

    This is an infinite language.

    But it's possible to add restrictions.

    The language here, L2, for example, has
    the restriction that all the strings in
    this language should have the length 2.

    L2(Σ) = {aa,bb,ab,ba}

    This is a finite language (the set of
    possible strings is finite).

grammar
formal grammar
    The restrictions for a language. It's a
    set of restrictions on top the alphabet
    for the specific language.

    A grammar is a tuple of 4 elements.
    G = (N,T,P,S)

    N - nonterminals (variables)
        can hold some value (single character
        or string)
    T - terminals
        final character.
    P - productions
    S - starting symbol

    Example grammar:
    S -> a X
    X -> b

    https://www.youtube.com/watch?v=VZ5DJopq5JA

Chomsky grammar hierarchy
    0. Unrestricted
       Natural Languages
    1. Context-sensitive
       Programming languages
    2. Context-free
       Programming languages
    3. Regular
       RegExp

balanced parentheses
((()))
    Not possible to be parsed with a regular
    expression.

Context-free grammar
    3 rules:

    1. Only one non-terminal on LHS.

        E.g.
        S -> a X
        X -> b

        S is a non-terminal.

    2. No context on LHS.
        A variable (X), when it appears on the
        RHS is always replaced by the same
        type of thing. It's context doesn't
        determine how it will be replaced.

        This means that when X appears on the
        LHS, it would be alone on the LHS,
        without context.

        X -> b

    3. The RHS may contain a mix of non-terminals
       and terminals.