level
    Each suffix command is placed on a level
    and each transient has a level (called
    transient-level), which controls which
    suffix commands are available.
    
    Integers between 1 and 7 (inclusive) are
    valid levels.
    
    For suffixes, 0 is also valid; it means
    that the suffix is not displayed at any
    level.
    
    The authors of transients should place
    certain suffixes on a higher level, if
    they expect that it wonâ€™t be of use to
    most users, and they should place very
    important suffixes on a lower level, so
    that they remain available even if the
    user lowers the transient level.

transient
    An abstraction involving a prefix command,
    infix arguments and suffix commands.

    Always involves at least two commands:
    - a prefix
    - a suffix

    Usually has several infix and suffix
    commands.

prefix
    [#transient]

    v +/"transient-prefix" "$EMACSD/packages28/transient-20210315.1902/transient.el"

    https://emacs.stackexchange.com/questions/64554/defining-a-simple-transient-with-a-default-value

        (transient-define-prefix magit-log ()
          "Show a commit or reference log."
          :man-page "git-log"
          ...

infix
argument
    [#transient]

    Calling an infix command causes its value
    to be changed, possibly by reading a new
    value in the minibuffer.

    Transient supports infix arguments; values
    that are set by infix commands and then
    consumed by the invoked suffix command(s).

        (transient-define-argument magit-log:-n ()
          :description "Limit number of commits"
          :class 'transient-option
          ...

        (transient-define-infix magit-remote.<remote>.url ()
          :class 'magit--git-variable:urls
          :scope 'magit--read-remote-scope
          :variable "remote.%s.url"
          :multi-value t
          :history-key 'magit-remote.<remote>.*url)

suffix
    [#transient]

    Calling a suffix command usually causes
    the transient to be exited but suffix
    commands can also be configured to not
    exit the transient.

        (transient-define-suffix magit-blame-quit ()
          "Turn off Magit-Blame mode.
        If the buffer was created during a recursive blame,
        then also kill the buffer."
          :if-non-nil 'magit-blame-mode
          (interactive)
          (magit-blame-mode -1)
          (when magit-blame-recursive-p
            (kill-buffer)))