PlanLogic
    Strictly speaking PrologCYC is a subset of
    LOGICMOO.

LOGICMOO

PPDL
Planning Domain Definition Language
    Used for factored representation.

    Describes four things:
    - initial state
    - actions that are available in a state
    - the result of applying an action, and
    - the goal test

factored representation
    Planning researchers have settled on a
    factored representation - one in which a
    state of the world is represented by a
    collection of variables.

Nomic
    https://en.wikipedia.org/wiki/Nomic

    A game created in 1982 by philosopher
    Peter Suber, the rules of which include
    mechanisms for changing those rules,
    usually beginning by way of democratic
    voting.
    
    The game is in some ways modeled on modern
    government systems, and demonstrates that
    in any system where rule changes are
    possible, a situation may arise in which
    the resulting laws are contradictory or
    insufficient to determine what is in fact
    legal.
    
    Its name derives from the Greek for "law",
    νόμος (nomos), because it models (and
    exposes conceptual questions about) legal
    systems and the problems of legal
    interpretation.

Nomic-MU
Game World
    See "Nomic".

PrologMUD
    This is the Nomic-MU (Game World).

LM489
    [AGI Bot]

    The LOGICMOO AGI system has a robotic
    prototype called LM489 which humans can be
    able to hang out with in a Nomic Game
    called PrologMUD. 

    LM489 system bootstraps with built in
    narratives that constitute a set of innate
    hallucinations.
    
    These hallucinations cause LM489 to "just
    in time" know how to do something.
    
    It does this by mirroring the agents
    contained in the hallucinations (Think of
    them like "training videos") Though not
    actually videos, instead Event Calculus
    that "play" in the PrologMUD (aka NomicMU)
    theatre.
    
    These not-really-a-video(s) are chosen by
    what order to play them based on they fit
    into one of the concurrent narratives that
    the systems expects it is always part of. 

    In the LOGICMOO System, our LM489 bot
    experiences events, actions, internal
    dialog in the MUD thru a special memory
    Narrative-Pipeline.
    
    The is channeled thru the Pipelines to
    allow LM489 configure the level of detail
    it will need to remember to learn how to
    do things.

    Operates in two modes:
    - narrative thinking mode
    - performance mode

narrative thinking mode
    [#LM489]

    The program continuously rethinks have
    narrative thoughts until it runs out of
    things to narrative to think about or is
    interrupted.

performance mode
    [#LM489]

    The program accepts input states or
    actions and produces output actions.

Narrative Pipeline
    http://logicmoo.org/xwiki/bin/view/Main/Developer/PrologMUD/

sequegen
LogicMOO sequegen
    http://logicmoo.org/xwiki/bin/view/Main/Developer/PrologMUD/

I_T
Imagen_Theater
    [frame sequences]

    http://logicmoo.org/xwiki/bin/view/Main/Technical%20Description/

innate Primary I_Ts

secondary I_Ts
    The Innate Primary I_Ts are most often
    incompatible stories with each other since
    they are not in any way connected using
    the same slots or if they are incomparable
    to the level of detail they express.

    But when not too far off we let Secondary
    I_Ts be formed by them.  

tertiary I_T buffers
tertiary I_T
dim proxies
    I_Ts can be at any level of detail, but
    they are mostly too detailed for the C_Ds
    to keep up with them in real time. So an
    automation tries to create a “not so good”
    stream of C_D which leads to the creation
    of several Tertiary I_T buffers (dim
    proxies).

quaternary I_T
    Next, another automation struggles to
    “repair” these Tertiary I_Ts to help the
    first automation. The system collates the
    C_Ds above into a final Quaternary I_T.
    Next the system uses a new stream C_D to
    repair the Quaternary I_T to synchronize
    the Tertiary and Quaternary I_Ts. 

C_D
Compulsory_Dialog
    A Language Of Thought.

    http://logicmoo.org/xwiki/bin/view/Main/Technical%20Description/#

    Sequences that perform edits of I_Ts
    without regard to the rules of event
    calculus.
    
    These C_Ds are “language like” but not in
    terms of spoken language.

memories
    Pre-built memories (and later learned) are
    done as a “narrative” encoded in two ways:
    - I_T
    - C_D

circumscription
    Restriction of something within limits.

    A form of non-monotonic reasoning.

    Circumscription is a non-monotonic logic
    created by John McCarthy to formalize the
    common sense assumption that things are as
    expected unless otherwise specified.

event calculus
    https://www.sciencedirect.com/topics/computer-science/event-calculus

    Characterized by a set of axioms and
    definitions.

    The event calculus uses reification: It
    treats time-varying properties and events
    as objects so that statements can be made
    about the truth values of properties at
    timepoints and the occurrences of events
    at timepoints.
    
    The event calculus uses circumscription,
    or the minimization of the extensions of
    predicates, to allow default reasoning.
    
    The event calculus uses the default
    assumptions that (1) the only events that
    occur are those known to occur and (2) the
    only effects of events are those that are
    known.
    
    When new information becomes available,
    the circumscriptions can be recomputed and
    reasoning again performed, which may lead
    to new conclusions.
    
    Circumscription is defined by a formula of
    second-order logic, but in most cases of
    interest circumscriptions compile into
    formulas of firstorder logic.