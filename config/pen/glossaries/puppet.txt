agent
    1. The agent software package, also known
       as puppet-agent. Puppet is usually
       deployed in a client-server
       arrangement.

       When you install Puppet on a device,
       you’re installing the agent software
       and its associated tools and
       dependencies.

       On *nix systems, this package is called
       puppet-agent. 

    2. The puppet agent daemon.

       You can invoke the agent software by
       running the puppet agent command, or
       you can let it run in the background as
       a daemon. 

    3. A node that is running the agent
       software.

       By association, a node running the
       agent daemon can be referred to as an
       agent node, or an agent. 

    An agent regularly performs Puppet runs,
    wherein it sends facts to a master and
    receives a configuration catalog, then
    applies the catalog to the local system
    using its providers. 

    Note:
        Puppet masters also run the agent
        daemon, which allows Puppet to manage
        its own configuration.
        
        In this sense, a master can also be an
        agent.
        
        An agent can also serve as its own
        master; this is often called a
        masterless configuration.
        
        For more information about Puppet's
        agent-master architecture, see Puppet
        architecture.

attribute
    Attributes specify the desired state of a
    given configuration resource.
    
    Each resource type has a different set of
    attributes, and each attribute has its own
    set of allowed values.
    
    For example, a package resource (like vim)
    would have an ensure attribute, whose
    value could be present, latest, absent, or
    a version number:

    package {'vim':
      ensure   => present,
      provider => apt,
    }

    You specify an attribute’s value with the
    => operator, and pairs of attributes and
    values are separated by commas.

catalog
    A catalog is a file that describes the
    desired state of each managed resource on
    a node.
    
    It is a compilation of all the resources
    that the Puppet agent applies to a given
    node, as well as the relationships between
    those resources.
    
    Catalogs are compiled by a Puppet master
    from manifests and agent-provided data
    (such as facts, certificates, and an
    environment if one is provided), as well
    as optional external data (such as data
    from an external node classifier, exported
    resources, and functions).
    
    The master then serves the compiled
    catalog to the agent when requested.
    
    Unlike the manifests from which they were
    compiled, catalogs don't contain any
    conditional logic or functions.
    
    They are unambiguous, relevant to only a
    specific node, and generated by a node.

class
    A class is a collection of related
    resources that, after it's defined, can be
    declared as a single unit.
    
    For example, a class can contain all of
    the resources (such as files, settings,
    modules, and scripts) needed to configure
    the Apache webserver on a host.
    
    Classes can also declare other classes.
    
    For more information, see the Classes page
    in the Puppet language reference.
    
    Classes are singletons and can be applied
    only one time in a given configuration;
    although the include function allows you
    to declare a class multiple times, Puppet
    evaluates it only one time.
    
    The require and contain functions can
    create relationships between classes.
    
    For more information, see the Containment
    of resources page in the Puppet language
    reference.
    
    Note: Being singletons, Puppet classes are
    not analogous to classes in object-
    oriented programming languages.
    
    Object-oriented classes are like templates
    that can be instantiated multiple times;
    Puppet's equivalent to this concept is
    defined types.

manifest
    Contains code written in the Puppet
    language and is named with the .pp file
    extension.
    
    The Puppet code in a manifest can:
    - Declare resources and classes.
    - Set variables.
    - Evaluate functions.
    - Define classes, defined types, functions, and nodes.

    Most manifests are contained in modules.
    
    Every manifest in a module defines a
    single class, defined type, or function.
    
    The master service reads an environment's
    main manifest.
    
    This manifest usually defines nodes, so
    that each managed agent receives a unique
    catalog.
