
module Main where

import Control.Monad.IO.Class

import Control.Monad.State ( StateT , evalStateT, execStateT )

import Control.Concurrent ( forkIO )

import Control.Exception ( bracket )

import Control.Applicative (( <$> ), ( <*> ))

import Data.IORef ( newIORef, readIORef, writeIORef )

data FooState = FooState { foo :: Int } deriving Show


data Foo a = Foo { fooState :: FooState -> a }


data Bar a = Bar { bar :: Int -> a }


main :: IO ()

main = do b <- newBar 5 :: IO Bar


mFoo <- newFooState 0 :: IO FooState


bar <- forkIO $ bracket (writeIORef mFoo 0 ) >>= \ref -> do x <- mF
