;;; scala-mode-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from scala-compile.el

(autoload 'scala-compile "scala-compile" "\
`compile' specialised to Scala.

First use in a buffer or calling with a prefix will prompt for a
command, otherwise the last command is used.

The command history is global.

A universal argument will invoke `scala-compile-alt', which
will cause the subsequent call to prompt.

A prefix argument will ensure that the user is prompted to
confirm the selection.

A string argument will run the command (for scripting).

(fn &optional EDIT-COMMAND)" t)
(register-definition-prefixes "scala-compile" '("scala-"))


;;; Generated autoloads from scala-mode.el

(autoload 'scala-mode:set-scala-syntax-mode "scala-mode" "\
Sets the syntax-table and other related variables for the current buffer to those of scala-mode. Can be used to make some other major mode (such as sbt-mode) use scala syntax-table.")
(autoload 'scala-mode:goto-start-of-code "scala-mode" "\
Go to the start of the real code in the file: object, class or trait." t)
(autoload 'scala-mode "scala-mode" "\
Major mode for editing scala code.

When started, runs `scala-mode-hook'.

\\{scala-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(scala\\|sbt\\|worksheet\\.sc\\)\\'" . scala-mode))
(modify-coding-system-alist 'file "\\.\\(scala\\|sbt\\|worksheet\\.sc\\)\\'" 'utf-8)
(register-definition-prefixes "scala-mode" '("scala-mode:"))


;;; Generated autoloads from scala-mode-fontlock.el

(register-definition-prefixes "scala-mode-fontlock" '("scala-font-lock:"))


;;; Generated autoloads from scala-mode-imenu.el

(register-definition-prefixes "scala-mode-imenu" '("scala-imenu:"))


;;; Generated autoloads from scala-mode-indent.el

(register-definition-prefixes "scala-mode-indent" '("scala-"))


;;; Generated autoloads from scala-mode-lib.el

(register-definition-prefixes "scala-mode-lib" '("scala-"))


;;; Generated autoloads from scala-mode-map.el

(register-definition-prefixes "scala-mode-map" '("scala-mode-map"))


;;; Generated autoloads from scala-mode-paragraph.el

(register-definition-prefixes "scala-mode-paragraph" '("scala-paragraph:"))


;;; Generated autoloads from scala-mode-prettify-symbols.el

(register-definition-prefixes "scala-mode-prettify-symbols" '("scala-"))


;;; Generated autoloads from scala-mode-syntax.el

(register-definition-prefixes "scala-mode-syntax" '("scala-syntax:"))


;;; Generated autoloads from scala-organise.el

(register-definition-prefixes "scala-organise" '("scala-organise"))

;;; End of scraped data

(provide 'scala-mode-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; scala-mode-autoloads.el ends here
