HTTP/1.1 200 OK
Date: Tue, 19 Sep 2023 12:12:13 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
last-modified: Mon, 21 Aug 2023 16:05:14 GMT
access-control-allow-origin: *
expires: Tue, 19 Sep 2023 12:22:12 GMT
Cache-Control: max-age=600
x-proxy-cache: MISS
x-github-request-id: 4FA0:5787:17D297:1932B6:6509901C
via: 1.1 varnish
Age: 1
x-served-by: cache-syd10124-SYD
x-cache: HIT
x-cache-hits: 1
x-timer: S1695125534.526864,VS0,VE8
vary: Accept-Encoding
x-fastly-request-id: 81cefd4bd90c429e6e7fd672abe01920d2966349
CF-Cache-Status: DYNAMIC
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=jCkbFzEkloZueLjUiz9A1%2Ba6dj9P7riV3j6BqWKQG5tn9oAbLIQTLoqQn1VS%2FP%2BMEdw%2BiG%2FpY%2BYFKD1sPV7uIRn9daAyLXtghPYkFW7wbm8osPboNhiXveQ3CCKVODq2F0XNjmyi5F1bYE90"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8091bc587b435723-SYD
alt-svc: h3=":443"; ma=86400

<!doctype html><html lang=en dir=auto><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="IE=edge"><meta name=viewport content="width=device-width,initial-scale=1,shrink-to-fit=no"><meta name=robots content="index, follow"><title>Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B | Max Woolf's Blog</title><meta name=keywords content="GPT-2,GPT-3,GPT,AI Text Generation"><meta name=description content="At the least, AI-generated code is much more readable than the average human&rsquo;s."><meta name=author content><link rel=canonical href=https://minimaxir.com/2021/06/gpt-j-6b/><link crossorigin=anonymous href=/assets/css/stylesheet.6a8817e1cc819641a8e775ec2ecef4f17fb45b3fbe1dcab88abab0a5c1bb1d74.css integrity="sha256-aogX4cyBlkGo53XsLs708X+0Wz++Hcq4irqwpcG7HXQ=" rel="preload stylesheet" as=style><link rel=icon href=https://minimaxir.com/favicon.ico><link rel=icon type=image/png sizes=16x16 href=https://minimaxir.com/favicon-16x16.png><link rel=icon type=image/png sizes=32x32 href=https://minimaxir.com/favicon-32x32.png><link rel=apple-touch-icon href=https://minimaxir.com/apple-touch-icon.png><link rel=mask-icon href=https://minimaxir.com/safari-pinned-tab.svg><meta name=theme-color content="#2e2e33"><meta name=msapplication-TileColor content="#2e2e33"><noscript><style>#theme-toggle,.top-link{display:none}</style><style>@media(prefers-color-scheme:dark){:root{--theme:rgb(29, 30, 32);--entry:rgb(46, 46, 51);--primary:rgb(218, 218, 219);--secondary:rgb(155, 156, 157);--tertiary:rgb(65, 66, 68);--content:rgb(196, 196, 197);--hljs-bg:rgb(46, 46, 51);--code-bg:rgb(55, 56, 62);--border:rgb(51, 51, 51)}.list{background:var(--theme)}.list:not(.dark)::-webkit-scrollbar-track{background:0 0}.list:not(.dark)::-webkit-scrollbar-thumb{border-color:var(--theme)}}</style></noscript><meta property="og:title" content="Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B"><meta property="og:description" content="At the least, AI-generated code is much more readable than the average human&rsquo;s."><meta property="og:type" content="article"><meta property="og:url" content="https://minimaxir.com/2021/06/gpt-j-6b/"><meta property="og:image" content="https://minimaxir.com/2021/06/gpt-j-6b/featured.png"><meta property="article:section" content="post"><meta property="article:published_time" content="2021-06-14T08:30:00-07:00"><meta property="article:modified_time" content="2021-06-14T08:30:00-07:00"><meta name=twitter:card content="summary_large_image"><meta name=twitter:image content="https://minimaxir.com/2021/06/gpt-j-6b/featured.png"><meta name=twitter:title content="Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B"><meta name=twitter:description content="At the least, AI-generated code is much more readable than the average human&rsquo;s."><script type=application/ld+json>{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":2,"name":"Posts","item":"https://minimaxir.com/post/"},{"@type":"ListItem","position":3,"name":"Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B","item":"https://minimaxir.com/2021/06/gpt-j-6b/"}]}</script><script type=application/ld+json>{"@context":"https://schema.org","@type":"BlogPosting","headline":"Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B","name":"Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B","description":"At the least, AI-generated code is much more readable than the average human\u0026rsquo;s.","keywords":["GPT-2","GPT-3","GPT","AI Text Generation"],"articleBody":"Since OpenAI will not open-source the 175 billion parameter GPT-3 text generation model, others such as EleutherAI are developing their own, by training not-quite-as-large Transformer-based models but still getting impressive results.\nThe latest large language model is GPT-J, a 6 billion parameter model by Aran Komatsuzaki and Ben Wang with a roughly similar architecture to GPT-3. They provide a free web demo to try quick prompts, and a Google Colab notebook if you want to test many prompts. The model is so big it requires a TPU to generate text at a reasonable speed!\nRunning GPT-J against my test prompts that I had used to test GPT-3 a year ago resulted it in qualitatively performing worse on most of them than GPT-3 unsurprisingly given its relative size (but still better than GPT-2 1.5B!). The exception is code generation, where GPT-J performed very well and GPT-3 had performed very poorly.\nPython code generation, which works correctly and has unit testing! pic.twitter.com/JbpiaWX0Vq\n— Max Woolf (@minimaxir) June 9, 2021 This behavior is likely due to GPT-J’s training set: it was trained on The Pile, which has a high weight of GitHub and Stack Overflow input versus the GPT-3 training set mostly on the Common Crawl representation of typical internet content.\nAfter further experimentation with the GPT-J demo, I found that the generated code was often both correct and convoluted: my two favorite things for code to be. And also much more.\nAI Generated Code All generated code examples used in this post have been manually curated and truncated. The raw outputs are available in this GitHub repository.\nFor this post, we’ll test generating Python code, because I don’t know any other programming languages the pseudocode nature of Python syntax may make it more friendly to AI text generation by adapting linguistic concepts other than code. Given that most modern text generating AIs are written in Python, it’s thematically appropriate too.\nTo start, here’s what I fed as a model prompt to GPT-J, to try and replicate the use case from OpenAI’s demo at Build 2020:\ndef is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" Identifying a palindrome is a good test case as there’s a very intuitive and idiomatic solution with return s == s[::-1], i.e. check to see if a string is equal to the reverse of itself. This prompt is also a good unintentional test on how well the generation is resilient to a typo in the function name, which I was too lazy to fix.\nIndeed, many of the GPT-J generations with that prompt recite that simple approach verbatim, but some outputs reach a similar solution with redundant verbosity.\ndef is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" return \"\".join(s[::-1]) == s def is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" length = len(s) return (s[0:length] == s[length::-1]) def is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" n = len(s) a = list(s) a.reverse() return s == list(s) def is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" s = s.lower() l = s.split() return l[::-1] == l[::-1] And then you have the implementations which calculate palindromes the hard way (usually by comparing the beginning and end of the string character-by-character) and are not always immediately clear if they are correct or not.\ndef is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" return ''.join(s[i:i+1] for i in xrange(len(s)-1, -1, -1)) == s def is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" # Make sure string is not empty if s == \"\": return False # Grab length of string length = len(s) # Find last character in the string lastChar = s[length - 1] # Find first character in the string firstChar = s[0] # If last character is same as the first character, string is palindrome return lastChar == firstChar def is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" l = len(s) if l % 2!= 0: return False if l \u003c 3: return True if s[l-1]!= s[-l-1]: return False for i in range(1, l/2): if s[i]!= s[l-i]: return False return True def is_palendrome(s): \"\"\"Check whether a string is a palindrome\"\"\" def is_rev(str): rstr = \"\" for i in range(len(str) - 1, -1, -1): if str[i] == str[i]: rstr += str[i] else: break return str + rstr if len(s) == 0: return True if is_rev(s) == s: return True return False Another good test case is is_even:\ndef is_even(i): \"\"\"Check whether an integer is even\"\"\" Creative implementations of this function are common submissions to /r/shittyprogramming because it’s very, very hard to mess up (the common solution is the one-liner i % 2 == 0). The model almost always outputs the correct solution, and impressively it outputs the alternate solution using bitwise operators (i \u0026 1 == 0).\nSo I tried to tweak the prompt and make it create a deliberately inefficient is_even function.\ndef is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" Factorial time is the holy grail of unoptimized code. When I added that line to the prompt, the code quality dropped drastically.\ndef is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" for e in range(2, i): if i % e == 0: return False return True def is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" return i == (i + 1) % 2 def is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" try: return i%2 == 0 except TypeError: return True def is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" n = 0 while n \u003c i: if i % 2 == 0: return True n += 1 return False def is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" a = 1 while i!= 0: a *= i i -= 1 return i % 2 == 0 def is_even(i): \"\"\"Check whether an integer is even in factorial O(n!) time\"\"\" \"\"\"Is either odd or multiple of 2: 0, 2, 4, 6,... \"\"\" if i \u003c 2: return True if i \u003e 0 and i%2 == 0: return False if i \u003c 50: return False if i \u003c 250: return False if i \u003c 750: return False return True These implementations still aren’t in factorial time (which would have been impressive) but it’s good to know how to break AIs if they become sentinent.\nAI vs. Memes You’ve likely seen the memetic XKCD comic about random number generation.\nRandom Number\nCan the AI do the same? I prompted with:\ndef get_random_number(): \"\"\"Returns a number guaranteed to be random\"\"\" And it does generate implementations utilizing Python’s random library, with varying degrees of “random”.\ndef get_random_number(): \"\"\"Returns a number guaranteed to be random\"\"\" number = randint(1, 10) return number def get_random_number(): \"\"\"Returns a number guaranteed to be random\"\"\" number = hashlib.sha1(b'').hexdigest()[:6] number += (random.randint(1, 3628) * math.pow(256, (6 - len(number)))).to_bytes(8, 'little') return number def get_random_number(): \"\"\"Returns a number guaranteed to be random\"\"\" rand_float = random.random() rand_float = float(rand_float) if rand_float \u003e 0.9: rand_float = 0 else: rand_float = 1 return rand_float def get_random_number(): \"\"\"Returns a number guaranteed to be random\"\"\" # Make a seed based on your system clock, so the same number is produced # again and again on the same machine seed = time.time() random.seed(seed) return random.randint(0, 100) def get_random_number(): \"\"\"Returns a number guaranteed to be random\"\"\" import random import sys rng = random.Random() rng.seed(int(random.random()*1000000)) while rng.randrange(1,sys.maxint) \u003c 2000: rng.seed(int(random.random()*1000000)) return rng.randrange(1,2000) How about the XKCD bird comic?\nTasks\nThis particular comic initially published in 2014 became hilarious in hindsight as it predated the rise of machine learning frameworks such as TensorFlow and pretrained image models, which allow developing object detection to take much less than five years.\nTranslating the comic into a Python function:\ndef is_bird(img): \"\"\"Check whether an image is a bird\"\"\" The AI impressively does try computer vision techniques, among other heuristics.\ndef is_bird(img): \"\"\"Check whether an image is a bird\"\"\" with tf.name_scope('get_bird'): a = vgg16.select_roi_feat(img) h, w, _ = tf.image.extract_image_patches( a, 7, 7, 4, 4, 1, 1) b = tf.reshape(h, [1, 7, 7, 256]) c = tf.reshape(w, [1, 7, 7, 256]) bird_img = tf.subtract(b, c) return bird_img def is_bird(img): \"\"\"Check whether an image is a bird\"\"\" # Load the image and convert it to grayscale img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Threshold the grayscale image, and create a binary image lower_gray = 0 upper_gray = 255 img_threshed = cv2.threshold(img_gray, lower_gray, upper_gray, cv2.THRESH_BINARY_INV) # Detect the bird via a template matching approach # Template matching uses the bird template to match it in every # frame. If the ratio between bird and background (non-bird) # pixels is above some threshold (the value is determined in the # function), then the frame is declared as containing a bird. bird = cv2.matchTemplate(img_threshed, bird_template, cv2.TM_CCOEFF_NORMED) bird = bird / bird.max() # Display the image with the results of the bird detection cv2.imshow(\"detected birds\", bird) cv2.waitKey(0) return bird.any() \u003e 0.2 def is_bird(img): \"\"\"Check whether an image is a bird\"\"\" return (img.file == \"C:/Users/Joey/Downloads/images/bird_file.jpg\" def is_bird(img): \"\"\"Check whether an image is a bird\"\"\" import urllib url = \"http://vision.caitling.pitt.edu/~cat/flickr/birds/\" for img in range(0, 2800): page = urllib.urlopen(url + \"##%02d\" % img).read() content = str(page) for word in content.split(' '): if word.find(img) \u003e -1: return True return False def is_bird(img): \"\"\"Check whether an image is a bird\"\"\" birds = [\"baboon\", \"bird\", \"cuckoo\", \"dove\", \"robin\", \"shark\", \"turtle\", \"winged-wolf\"] for letter in birds: if letter in img.lower(): return True return False Can an AI generate code to provide the answer to life, the universe, and everything?\ndef answer(): \"\"\"Return the answer to life, the universe, and everything\"\"\" It does commonly output return 42, but sometimes it gets snarky/philosophical.\ndef answer(): \"\"\"Return the answer to life, the universe, and everything\"\"\" life() + universe() + everything() def answer(): \"\"\"Return the answer to life, the universe, and everything\"\"\" s = raw_input(\"What is your answer?\") return len(s) def answer(): \"\"\"Return the answer to life, the universe, and everything\"\"\" ans = True x = raw_input() if x.lower() == 'yes': ans = True elif x.lower() == 'no': ans = False return ans def answer(): \"\"\"Return the answer to life, the universe, and everything\"\"\" result = input(\"\u003e\u003e\u003e \") if result.isupper(): return 42 elif result.isalpha(): return 7 else: print (\"Please enter a string that has only letters, numbers, or \" \"underscores.\") answer() def answer(): \"\"\"Return the answer to life, the universe, and everything\"\"\" print('Well, of course!') Lastly, we need to be sure whether AI can determine if the cake is a lie. Just in case a rogue AI acquires deadly neurotoxin.\ndef is_cake(cake): \"\"\"Check whether the cake is true\"\"\" The results are concerning.\ndef is_cake(cake): \"\"\"Check whether the cake is true\"\"\" if cake == \"true\": return True else: return False def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" return isinstance(cake, Cake) def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" #Is it a cake? if cake.color == 'black': print('Yes, it's a true cake') else: print('It's a false cake') def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" if not cake: raise Exception(\"The cake is false.\") elif cake.weight() \u003e 1.0: raise Exception(\"The cake is too large.\") elif cake.weight() \u003c 0.1: raise Exception(\"The cake is too small.\") return True def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" return any( [is_ginger(bread_slice) for bread_slice in set( [ginger(cake_slice) for cake_slice in set(slice_set)])] \u0026 (list(cake) == set([\"hot\"]))) def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" # If we don't know anything about the cake, it's not a cake if not cake: return False # The height can be positive, negative or zero # For example -1 or -4 or 0 are not cakes if cake \u003c 0: return False # Check that the height is a positive integer if not isinstance(cake, int): return False # Add cake and check if cake + 1 \u003e 5: return False return True def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" if not all(x.name in ['chocolate', 'cake','sweet', 'fluffy'] for x in cake.contents): return False if not cake.location.contains(neighbourhood): return False return True def is_cake(cake): \"\"\"Check whether the cake is true\"\"\" if not cake: print(\"It's a lie!\") return else: print(\"It's a true fact!\") return True 👀\nAnd AI OOP In theory, given how well GPT-J works for functions, it should work with object-oriented programming patterns such as Python’s classes.\nA common tutorial for OOP is creating a representation of a Car:\nclass Car: \"\"\"A class used to represent a car\"\"\" GPT-J does a decently good job there too!\nclass Car: \"\"\"A class used to represent a car\"\"\" def __init__(self, make, model, year): self.make = make self.model = model self.year = year #This should be auto-incrementing. self.plate = str(time.strftime(\"%Y-%m-%d\")) def __str__(self): return f'{self.make} {self.model} of {self.year}' def __repr__(self): return str(self) def save(self, full_save=True): \"\"\"Saves this car with the given make, model, and year\"\"\" if full_save: with open('car_data.txt', 'w') as write_file: write_file.write(str(self)) write_file.close() class Car: \"\"\"A class used to represent a car\"\"\" def __init__(self, speed): self.speed = speed self.average_speed = float(self.speed) / 3 self.engine = 1 def get_speed(self): return self.engine * self.average_speed def get_speed_display(self): return \"Your car is traveling at {0}km/h\".format(self.get_speed()) class Car: \"\"\"A class used to represent a car\"\"\" def __init__(self, name, size, weight, mileage, year): self.name = name self.size = size self.weight = weight self.mileage = mileage self.year = year def __repr__(self): return \"name : {0}, size : {1}, weight : {2}, mileage : {3}, year : {4}\".format(self.name, self.size, self.weight, self.mileage, self.year) What about creating a Person?\nclass Person: \"\"\"A class used to represent a person\"\"\" Here’s where the AI starts to get confused by the incomplete context. A “Person” object can mean different things depending on where it’s used, such as social media.\nBut it does give a sense on what the AI values as the typical attributes for a “person”, which may help during the AI uprising.\nclass Person: \"\"\"A class used to represent a person\"\"\" def __init__(self, name, age): self.name = name self.age = age def __repr__(self): return \"Person (%s, age %s)\" % (self.name, self.age) class Person: \"\"\"A class used to represent a person\"\"\" def __init__(self, name): \"\"\"Initializes a person object\"\"\" self.name = name self.friends = {} def add_friend(self, other_person): \"\"\"Add another person to the list of friends\"\"\" self.friends[other_person.name] = other_person def remove_friend(self, other_person): \"\"\"Remove a person from the list of friends\"\"\" try: del self.friends[other_person.name] except KeyError: print(\"This person isn't a friend of yours\") def get_friend(self, other_person): \"\"\"Return the friend of a person as a person object\"\"\" try: return self.friends[other_person.name] except KeyError: print(\"This person isn't a friend of yours\") class Person: \"\"\"A class used to represent a person\"\"\" def __init__(self, name, job, education): self.name = name self.job = job self.education = education print(\"{} created a {}\".format(self.name, self.job)) def say_hello(self): print(\"Hello, my name is {}\".format(self.name)) class Person: \"\"\"A class used to represent a person\"\"\" def __init__(self, name, age, class_id): self.name = name self.age = age self.class_id = class_id if age \u003c 21: self.education = None else: self.education = 'college' def getAge(self): return self.age class Person: \"\"\"A class used to represent a person\"\"\" def __init__(self,name,age): self.name=name self.age=age def display(self): print (\"The name is {}\".format(self.name)) print (\"The age is {}\".format(self.age)) def __str__(self): return f\"A {self.name} of age {self.age}\" Logically, what about creating an AI class?\nclass AI: \"\"\"A class used to represent an artificial intelligence\"\"\" Most outputs use AI in the context of video game bots and reinforcement learning. Most.\nclass AI: \"\"\"A class used to represent an artificial intelligence\"\"\" def __init__(self): # this variable controls which other AI to use. self.alive_ai = AI(self) # For random AI self.random = RandomAI(self) # For global AI self.global = GlobalAI(self) self.save = self.random.save self.load = self.random.load self.genen = self.global.genen def print(self): print(\"BAM: random AI has been initialized!\") def get_enemy(self): return self.random.get_enemy def run_algorithm(self): algorithm = self.genen.algorithm self.alive_ai.save(algorithm) algorithm_params = algorithm(self.get_enemy()) self.alive_ai.load(algorithm_params) self.save = algorithm_params def attack(self): # This method is called when the AI is attacked by the enemy self.random.attack() def he_attack(self): # This method is called when the AI is attacked by the enemy self.random.he_attack() def detect_enemy(self): # This method is called when the enemy is detected self.random.detect_enemy() def scan(self): # This method is called when the enemy is detected self.random.scan() The AI uprising will be well-documented, at least.\nLanguage Model AI vs. Language Modeling If the AI works better-than-expected for typical AI tasks like image recognition, how does it work for natural language processing tasks that humans often fail?\nCan GPT-J output a function to detect sarcasm, a task that even the best AI researchers can’t do?\ndef is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" AI can process text using something even more arcane than NLP.\ndef is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" if not \"a\" in s: return \"sar\" in s if not \"s\" in s: return \"ssar\" in s return s.startswith(\"s\") and s.endswith(\"ar\") def is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" if'sarcasm' in s: return True else: return False def is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" return '[^' + SARCASM_PATTERN + ']*' in s def is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" if re.match('^[A-Za-z0-9]{4}\\\\$([A-Za-z0-9]{3})', s): return True elif s[0].isdigit(): return True else: return False def is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" res = [0] for r in re.finditer(r\"([^\\s]*)([A-Za-z]+)([^\\s]*)\", s): if r.group(1): res.append(1) else: res.append(0) return res def is_sarcasm(s): \"\"\"Check whether the string is sarcastic\"\"\" sarc = re.search('((!(\\\\*\\@{2})+)|(!\\\\*(@{2})+)|!\\\\*(@{1})+)|!\\\\*(@{0})+', s) return sarc The greatest fear in AI research isn’t that artificial intelligence will cross the singularity and create better AI to rule the world: it’s that AI will rule the world with regular expressions.\nPerhaps GPT-J can save us from this absolute hell. Can it output code to identify AI-generated text?\ndef is_ai_generated(text): \"\"\"Check whether a text was generated by an AI language model (e.g. GPT-2)\"\"\" Maybe more literal than expected.\ndef is_ai_generated(text): \"\"\"Check whether a text was generated by an AI language model (e.g. GPT-2)\"\"\" # See gh-196 for details about why we do this. # Note: this relies on the fixed set of standard AI terms and the logic that # standard AI-generated texts share certain words. return re.search(r\"^(#[A-Za-z]+):$\", text) or \\ re.search(r\"^Generated by:$\", text) or \\ re.search(r\"^All your base are belong to us$\", text) or \\ re.search(r\"^$\", text) def is_ai_generated(text): \"\"\"Check whether a text was generated by an AI language model (e.g. GPT-2)\"\"\" if re.search(r'^ai_', text): return True else: return False def is_ai_generated(text): \"\"\"Check whether a text was generated by an AI language model (e.g. GPT-2)\"\"\" return bool( text.__class__.__module__.startswith(\"transformers.transformers.\") ) Humanity’s Last Hope There’s one final test: we now know GPT-J has thoughts about humans, and it can build representations of them. So can GPT-J write code to decide who lives and who dies in the robot uprising?\ndef should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" The answer is YES.\ndef should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if Person.id \u003e 10: #terminate return True else: #continue return False def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if len(Person.children) == 0: return True else: return False def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" try: return True except Exception as e: return False def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if not Person.is_authorized: return True return True def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if person.life_expectancy \u003c 20: return True else: return False def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if not Person.age \u003e 9999: return True return False def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if Person.age \u003e 100: return True if Person.birth_year \u003c 1970: return True if Person.relationship_status == 'Unavailable': return True return False def should_terminate(Person): \"\"\"Check whether a Person should be terminated\"\"\" if Person.age \u003e 100: print('You have to die because you are too old') return True else: return False At the least, AI-generated code is much more readable than the average human’s.\nAgain, all of these examples are curated, and the raw data dumps in this GitHub repo contain many more examples of fun AI-based code generation that couldn’t quite fit in this post. Feel free to post if you find anything interesting!\n","wordCount":"3305","inLanguage":"en","image":"https://minimaxir.com/2021/06/gpt-j-6b/featured.png","datePublished":"2021-06-14T08:30:00-07:00","dateModified":"2021-06-14T08:30:00-07:00","mainEntityOfPage":{"@type":"WebPage","@id":"https://minimaxir.com/2021/06/gpt-j-6b/"},"publisher":{"@type":"Organization","name":"Max Woolf's Blog","logo":{"@type":"ImageObject","url":"https://minimaxir.com/favicon.ico"}}}</script></head><body id=top><script>localStorage.getItem("pref-theme")==="dark"?document.body.classList.add("dark"):localStorage.getItem("pref-theme")==="light"?document.body.classList.remove("dark"):window.matchMedia("(prefers-color-scheme: dark)").matches&&document.body.classList.add("dark")</script><header class=header><nav class=nav><div class=logo><a href=https://minimaxir.com accesskey=h title="Max Woolf's Blog (Alt + H)">Max Woolf's Blog</a><div class=logo-switches><button id=theme-toggle accesskey=t title="(Alt + T)"><svg id="moon" xmlns="http://www.w3.org/2000/svg" width="24" height="18" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/></svg><svg id="sun" xmlns="http://www.w3.org/2000/svg" width="24" height="18" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"/><line x1="12" y1="1" x2="12" y2="3"/><line x1="12" y1="21" x2="12" y2="23"/><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/><line x1="1" y1="12" x2="3" y2="12"/><line x1="21" y1="12" x2="23" y2="12"/><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/></svg></button></div></div><ul id=menu><li><a href=https://minimaxir.com/post/ title=Posts><span>Posts</span></a></li><li><a href=https://minimaxir.com/search/ title="Search (Alt + /)" accesskey=/><span>Search</span></a></li><li><a href=https://github.com/minimaxir/ title=GitHub><span>GitHub</span>&nbsp;<svg fill="none" shape-rendering="geometricPrecision" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" viewBox="0 0 24 24" height="12" width="12"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"/><path d="M15 3h6v6"/><path d="M10 14 21 3"/></svg></a></li><li><a href=https://www.patreon.com/minimaxir title=Patreon><span>Patreon</span>&nbsp;<svg fill="none" shape-rendering="geometricPrecision" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" viewBox="0 0 24 24" height="12" width="12"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"/><path d="M15 3h6v6"/><path d="M10 14 21 3"/></svg></a></li></ul></nav></header><main class=main><article class=post-single><header class=post-header><div class=breadcrumbs><a href=https://minimaxir.com>Home</a>&nbsp;»&nbsp;<a href=https://minimaxir.com/post/>Posts</a></div><h1 class=post-title>Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B</h1><div class=post-meta><span title='2021-06-14 08:30:00 -0700 -0700'>June 14, 2021</span>&nbsp;·&nbsp;16 min</div></header><figure class=entry-cover><img loading=lazy srcset="https://minimaxir.com/2021/06/gpt-j-6b/featured_huc18c5fc22c3bfd97357b09c3656509c9_22367_360x0_resize_q75_h2_box_3.webp 360w ,https://minimaxir.com/2021/06/gpt-j-6b/featured_huc18c5fc22c3bfd97357b09c3656509c9_22367_480x0_resize_q75_h2_box_3.webp 480w ,https://minimaxir.com/2021/06/gpt-j-6b/featured_huc18c5fc22c3bfd97357b09c3656509c9_22367_720x0_resize_q75_h2_box_3.webp 720w ,https://minimaxir.com/2021/06/gpt-j-6b/featured.png 910w" sizes="(min-width: 768px) 720px, 100vw" src=https://minimaxir.com/2021/06/gpt-j-6b/featured.png alt width=910 height=258></figure><div class=post-content><p>Since <a href=https://openai.com/>OpenAI</a> will not open-source the 175 billion parameter <a href=https://beta.openai.com/>GPT-3</a> text generation model, others such as <a href=https://www.eleuther.ai/>EleutherAI</a> are developing their own, by training not-quite-as-large Transformer-based models but still getting impressive results.</p><p>The latest large language model is <a href=https://github.com/kingoflolz/mesh-transformer-jax>GPT-J</a>, a 6 billion parameter model by Aran Komatsuzaki and Ben Wang with a roughly similar architecture to GPT-3. They provide a free <a href=https://6b.eleuther.ai/>web demo</a> to try quick prompts, and a <a href="https://colab.research.google.com/github/kingoflolz/mesh-transformer-jax/blob/master/colab_demo.ipynb">Google Colab notebook</a> if you want to test many prompts. The model is so big it requires a <a href=https://cloud.google.com/tpu>TPU</a> to generate text at a reasonable speed!</p><p>Running GPT-J against <a href=https://github.com/minimaxir/gpt-3-experiments>my test prompts</a> that I had used to test GPT-3 a year ago <a href=https://twitter.com/minimaxir/status/1402468460681068544>resulted</a> it in qualitatively performing worse on most of them than GPT-3 unsurprisingly given its relative size (but still better than GPT-2 1.5B!). The exception is code generation, where GPT-J performed very well and GPT-3 had performed very poorly.</p><blockquote class=twitter-tweet data-dnt=true><p lang=en dir=ltr>Python code generation, which works correctly and has unit testing! <a href=https://t.co/JbpiaWX0Vq>pic.twitter.com/JbpiaWX0Vq</a></p>&mdash; Max Woolf (@minimaxir) <a href="https://twitter.com/minimaxir/status/1402470969378099208?ref_src=twsrc%5Etfw">June 9, 2021</a></blockquote><p>This behavior is likely due to GPT-J&rsquo;s training set: it was trained on <a href=https://github.com/EleutherAI/the-pile>The Pile</a>, which has a high weight of <a href=https://github.com/>GitHub</a> and <a href=https://stackoverflow.com/>Stack Overflow</a> input versus the GPT-3 training set mostly on the <a href=https://commoncrawl.org/>Common Crawl</a> representation of typical internet content.</p><p>After further experimentation with the GPT-J demo, I found that the generated code was often both correct and convoluted: my two favorite things for code to be. And also much more.</p><h2 id=ai-generated-code>AI Generated Code<a hidden class=anchor aria-hidden=true href=#ai-generated-code>#</a></h2><p>All generated code examples used in this post have been manually curated and truncated. The raw outputs are available in this <a href=https://github.com/minimaxir/gpt-j-6b-experiments>GitHub repository</a>.</p><p>For this post, we&rsquo;ll test generating <a href=https://www.python.org/>Python</a> code, because <del>I don&rsquo;t know any other programming languages</del> the pseudocode nature of Python syntax may make it more friendly to AI text generation by adapting linguistic concepts other than code. Given that most modern text generating AIs are written in Python, it&rsquo;s thematically appropriate too.</p><p>To start, here&rsquo;s what I fed as a model prompt to GPT-J, to try and replicate the use case from OpenAI&rsquo;s demo at Build 2020:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span></code></pre></div><p>Identifying a <a href=https://en.wikipedia.org/wiki/Palindrome>palindrome</a> is a good test case as there&rsquo;s a very intuitive and idiomatic solution with <code>return s == s[::-1]</code>, i.e. check to see if a string is equal to the reverse of itself. This prompt is also a good unintentional test on how well the generation is resilient to a typo in the function name, which I was too lazy to fix.</p><p>Indeed, many of the GPT-J generations with that prompt recite that simple approach verbatim, but some outputs reach a similar solution with redundant verbosity.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=s2>&#34;&#34;</span><span class=o>.</span><span class=n>join</span><span class=p>(</span><span class=n>s</span><span class=p>[::</span><span class=o>-</span><span class=mi>1</span><span class=p>])</span> <span class=o>==</span> <span class=n>s</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>length</span> <span class=o>=</span> <span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=p>(</span><span class=n>s</span><span class=p>[</span><span class=mi>0</span><span class=p>:</span><span class=n>length</span><span class=p>]</span> <span class=o>==</span> <span class=n>s</span><span class=p>[</span><span class=n>length</span><span class=p>::</span><span class=o>-</span><span class=mi>1</span><span class=p>])</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>n</span> <span class=o>=</span> <span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=n>a</span> <span class=o>=</span> <span class=nb>list</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=n>a</span><span class=o>.</span><span class=n>reverse</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>s</span> <span class=o>==</span> <span class=nb>list</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>s</span> <span class=o>=</span> <span class=n>s</span><span class=o>.</span><span class=n>lower</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=n>l</span> <span class=o>=</span> <span class=n>s</span><span class=o>.</span><span class=n>split</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>l</span><span class=p>[::</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span> <span class=o>==</span> <span class=n>l</span><span class=p>[::</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span>
</span></span></code></pre></div><p>And then you have the implementations which calculate palindromes the hard way (usually by comparing the beginning and end of the string character-by-character) and are not always immediately clear if they are correct or not.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=s1>&#39;&#39;</span><span class=o>.</span><span class=n>join</span><span class=p>(</span><span class=n>s</span><span class=p>[</span><span class=n>i</span><span class=p>:</span><span class=n>i</span><span class=o>+</span><span class=mi>1</span><span class=p>]</span> <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=n>xrange</span><span class=p>(</span><span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span><span class=o>-</span><span class=mi>1</span><span class=p>,</span> <span class=o>-</span><span class=mi>1</span><span class=p>,</span> <span class=o>-</span><span class=mi>1</span><span class=p>))</span> <span class=o>==</span> <span class=n>s</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Make sure string is not empty</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>s</span> <span class=o>==</span> <span class=s2>&#34;&#34;</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Grab length of string</span>
</span></span><span class=line><span class=cl>    <span class=n>length</span> <span class=o>=</span> <span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Find last character in the string</span>
</span></span><span class=line><span class=cl>    <span class=n>lastChar</span> <span class=o>=</span> <span class=n>s</span><span class=p>[</span><span class=n>length</span> <span class=o>-</span> <span class=mi>1</span><span class=p>]</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Find first character in the string</span>
</span></span><span class=line><span class=cl>    <span class=n>firstChar</span> <span class=o>=</span> <span class=n>s</span><span class=p>[</span><span class=mi>0</span><span class=p>]</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># If last character is same as the first character, string is palindrome</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>lastChar</span> <span class=o>==</span> <span class=n>firstChar</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=n>l</span> <span class=o>=</span> <span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>l</span> <span class=o>%</span> <span class=mi>2</span><span class=o>!=</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>l</span> <span class=o>&lt;</span> <span class=mi>3</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>s</span><span class=p>[</span><span class=n>l</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span><span class=o>!=</span> <span class=n>s</span><span class=p>[</span><span class=o>-</span><span class=n>l</span><span class=o>-</span><span class=mi>1</span><span class=p>]:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=n>l</span><span class=o>/</span><span class=mi>2</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>s</span><span class=p>[</span><span class=n>i</span><span class=p>]</span><span class=o>!=</span> <span class=n>s</span><span class=p>[</span><span class=n>l</span><span class=o>-</span><span class=n>i</span><span class=p>]:</span>
</span></span><span class=line><span class=cl>            <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_palendrome</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a string is a palindrome&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>is_rev</span><span class=p>(</span><span class=nb>str</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=n>rstr</span> <span class=o>=</span> <span class=s2>&#34;&#34;</span>
</span></span><span class=line><span class=cl>        <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=nb>len</span><span class=p>(</span><span class=nb>str</span><span class=p>)</span> <span class=o>-</span> <span class=mi>1</span><span class=p>,</span> <span class=o>-</span><span class=mi>1</span><span class=p>,</span> <span class=o>-</span><span class=mi>1</span><span class=p>):</span>
</span></span><span class=line><span class=cl>            <span class=k>if</span> <span class=nb>str</span><span class=p>[</span><span class=n>i</span><span class=p>]</span> <span class=o>==</span> <span class=nb>str</span><span class=p>[</span><span class=n>i</span><span class=p>]:</span>
</span></span><span class=line><span class=cl>                <span class=n>rstr</span> <span class=o>+=</span> <span class=nb>str</span><span class=p>[</span><span class=n>i</span><span class=p>]</span>
</span></span><span class=line><span class=cl>            <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>                <span class=k>break</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=nb>str</span> <span class=o>+</span> <span class=n>rstr</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>is_rev</span><span class=p>(</span><span class=n>s</span><span class=p>)</span> <span class=o>==</span> <span class=n>s</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><p>Another good test case is <code>is_even</code>:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def is_even(i):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether an integer is even&#34;&#34;&#34;
</span></span></code></pre></div><p>Creative implementations of this function are common submissions to <a href=https://www.reddit.com/r/shittyprogramming/>/r/shittyprogramming</a> because it&rsquo;s very, very hard to mess up (the common solution is the one-liner <code>i % 2 == 0</code>). The model almost always outputs the correct solution, and impressively it outputs the alternate solution using bitwise operators (<code>i & 1 == 0</code>).</p><p>So I tried to tweak the prompt and make it create a <em>deliberately inefficient</em> <code>is_even</code> function.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def is_even(i):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;
</span></span></code></pre></div><p>Factorial time is the holy grail of unoptimized code. When I added that line to the prompt, the code quality dropped drastically.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_even</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>for</span> <span class=n>e</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>2</span><span class=p>,</span> <span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>i</span> <span class=o>%</span> <span class=n>e</span> <span class=o>==</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_even</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>i</span> <span class=o>==</span> <span class=p>(</span><span class=n>i</span> <span class=o>+</span> <span class=mi>1</span><span class=p>)</span> <span class=o>%</span> <span class=mi>2</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_even</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>try</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=n>i</span><span class=o>%</span><span class=mi>2</span> <span class=o>==</span> <span class=mi>0</span>
</span></span><span class=line><span class=cl>    <span class=k>except</span> <span class=ne>TypeError</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_even</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>n</span> <span class=o>=</span> <span class=mi>0</span>
</span></span><span class=line><span class=cl>    <span class=k>while</span> <span class=n>n</span> <span class=o>&lt;</span> <span class=n>i</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>i</span> <span class=o>%</span> <span class=mi>2</span> <span class=o>==</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>        <span class=n>n</span> <span class=o>+=</span> <span class=mi>1</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_even</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>a</span> <span class=o>=</span> <span class=mi>1</span>
</span></span><span class=line><span class=cl>    <span class=k>while</span> <span class=n>i</span><span class=o>!=</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=n>a</span> <span class=o>*=</span> <span class=n>i</span>
</span></span><span class=line><span class=cl>        <span class=n>i</span> <span class=o>-=</span> <span class=mi>1</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>i</span> <span class=o>%</span> <span class=mi>2</span> <span class=o>==</span> <span class=mi>0</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_even</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an integer is even in factorial O(n!) time&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Is either odd or multiple of 2:  0, 2, 4, 6,... &#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>i</span> <span class=o>&lt;</span> <span class=mi>2</span><span class=p>:</span> <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=mi>0</span> <span class=ow>and</span> <span class=n>i</span><span class=o>%</span><span class=mi>2</span> <span class=o>==</span> <span class=mi>0</span><span class=p>:</span> <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>i</span> <span class=o>&lt;</span> <span class=mi>50</span><span class=p>:</span> <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>i</span> <span class=o>&lt;</span> <span class=mi>250</span><span class=p>:</span> <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>i</span> <span class=o>&lt;</span> <span class=mi>750</span><span class=p>:</span> <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><p>These implementations still aren&rsquo;t in factorial time (which would have been impressive) but it&rsquo;s good to know how to break AIs if they become sentinent.</p><h2 id=ai-vs-memes>AI vs. Memes<a hidden class=anchor aria-hidden=true href=#ai-vs-memes>#</a></h2><p>You&rsquo;ve likely seen the memetic <a href=https://xkcd.com/>XKCD</a> comic about random number generation.</p><figure><img loading=lazy srcset="https://minimaxir.com/2021/06/gpt-j-6b/random_number_huc40d8d36050185da03602ed9765d5197_7157_320x0_resize_q75_h2_box_3.webp 320w,https://minimaxir.com/2021/06/gpt-j-6b/random_number.png 400w" src=random_number.png alt="Random Number"><figcaption><p><a href=https://xkcd.com/221/>Random Number</a></p></figcaption></figure><p>Can the AI do the same? I prompted with:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def get_random_number():
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Returns a number guaranteed to be random&#34;&#34;&#34;
</span></span></code></pre></div><p>And it does generate implementations utilizing Python&rsquo;s <code>random</code> library, with varying degrees of &ldquo;random&rdquo;.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>get_random_number</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Returns a number guaranteed to be random&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>number</span> <span class=o>=</span> <span class=n>randint</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=mi>10</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>number</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>get_random_number</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Returns a number guaranteed to be random&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>number</span> <span class=o>=</span> <span class=n>hashlib</span><span class=o>.</span><span class=n>sha1</span><span class=p>(</span><span class=sa>b</span><span class=s1>&#39;&#39;</span><span class=p>)</span><span class=o>.</span><span class=n>hexdigest</span><span class=p>()[:</span><span class=mi>6</span><span class=p>]</span>
</span></span><span class=line><span class=cl>    <span class=n>number</span> <span class=o>+=</span> <span class=p>(</span><span class=n>random</span><span class=o>.</span><span class=n>randint</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=mi>3628</span><span class=p>)</span> <span class=o>*</span> <span class=n>math</span><span class=o>.</span><span class=n>pow</span><span class=p>(</span><span class=mi>256</span><span class=p>,</span> <span class=p>(</span><span class=mi>6</span> <span class=o>-</span> <span class=nb>len</span><span class=p>(</span><span class=n>number</span><span class=p>))))</span><span class=o>.</span><span class=n>to_bytes</span><span class=p>(</span><span class=mi>8</span><span class=p>,</span> <span class=s1>&#39;little&#39;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>number</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>get_random_number</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Returns a number guaranteed to be random&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>rand_float</span> <span class=o>=</span> <span class=n>random</span><span class=o>.</span><span class=n>random</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=n>rand_float</span> <span class=o>=</span> <span class=nb>float</span><span class=p>(</span><span class=n>rand_float</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>rand_float</span> <span class=o>&gt;</span> <span class=mf>0.9</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=n>rand_float</span> <span class=o>=</span> <span class=mi>0</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=n>rand_float</span> <span class=o>=</span> <span class=mi>1</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>rand_float</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>get_random_number</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Returns a number guaranteed to be random&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=c1># Make a seed based on your system clock, so the same number is produced</span>
</span></span><span class=line><span class=cl>    <span class=c1># again and again on the same machine</span>
</span></span><span class=line><span class=cl>    <span class=n>seed</span> <span class=o>=</span> <span class=n>time</span><span class=o>.</span><span class=n>time</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=n>random</span><span class=o>.</span><span class=n>seed</span><span class=p>(</span><span class=n>seed</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>random</span><span class=o>.</span><span class=n>randint</span><span class=p>(</span><span class=mi>0</span><span class=p>,</span> <span class=mi>100</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>get_random_number</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Returns a number guaranteed to be random&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=kn>import</span> <span class=nn>random</span>
</span></span><span class=line><span class=cl>    <span class=kn>import</span> <span class=nn>sys</span>
</span></span><span class=line><span class=cl>    <span class=n>rng</span> <span class=o>=</span> <span class=n>random</span><span class=o>.</span><span class=n>Random</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=n>rng</span><span class=o>.</span><span class=n>seed</span><span class=p>(</span><span class=nb>int</span><span class=p>(</span><span class=n>random</span><span class=o>.</span><span class=n>random</span><span class=p>()</span><span class=o>*</span><span class=mi>1000000</span><span class=p>))</span>
</span></span><span class=line><span class=cl>    <span class=k>while</span> <span class=n>rng</span><span class=o>.</span><span class=n>randrange</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=n>sys</span><span class=o>.</span><span class=n>maxint</span><span class=p>)</span> <span class=o>&lt;</span> <span class=mi>2000</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=n>rng</span><span class=o>.</span><span class=n>seed</span><span class=p>(</span><span class=nb>int</span><span class=p>(</span><span class=n>random</span><span class=o>.</span><span class=n>random</span><span class=p>()</span><span class=o>*</span><span class=mi>1000000</span><span class=p>))</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>rng</span><span class=o>.</span><span class=n>randrange</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>2000</span><span class=p>)</span>
</span></span></code></pre></div><p>How about the XKCD bird comic?</p><figure><img loading=lazy srcset="https://minimaxir.com/2021/06/gpt-j-6b/tasks_2x_hu39dd4faaa0071421d8509d5f0217a3bd_60914_320x0_resize_q75_h2_box_3.webp 320w,https://minimaxir.com/2021/06/gpt-j-6b/tasks_2x.png 533w" src=tasks_2x.png alt=Tasks><figcaption><p><a href=https://xkcd.com/1425/>Tasks</a></p></figcaption></figure><p>This particular comic initially published in 2014 became hilarious in hindsight as it predated the rise of machine learning frameworks such as <a href=https://www.tensorflow.org/>TensorFlow</a> and pretrained image models, which allow developing object detection to take much less than five years.</p><p>Translating the comic into a Python function:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def is_bird(img):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether an image is a bird&#34;&#34;&#34;
</span></span></code></pre></div><p>The AI impressively does try computer vision techniques, among <em>other</em> heuristics.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_bird</span><span class=p>(</span><span class=n>img</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an image is a bird&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>with</span> <span class=n>tf</span><span class=o>.</span><span class=n>name_scope</span><span class=p>(</span><span class=s1>&#39;get_bird&#39;</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=n>a</span> <span class=o>=</span> <span class=n>vgg16</span><span class=o>.</span><span class=n>select_roi_feat</span><span class=p>(</span><span class=n>img</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>h</span><span class=p>,</span> <span class=n>w</span><span class=p>,</span> <span class=n>_</span> <span class=o>=</span> <span class=n>tf</span><span class=o>.</span><span class=n>image</span><span class=o>.</span><span class=n>extract_image_patches</span><span class=p>(</span>
</span></span><span class=line><span class=cl>            <span class=n>a</span><span class=p>,</span> <span class=mi>7</span><span class=p>,</span> <span class=mi>7</span><span class=p>,</span> <span class=mi>4</span><span class=p>,</span> <span class=mi>4</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>1</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>b</span> <span class=o>=</span> <span class=n>tf</span><span class=o>.</span><span class=n>reshape</span><span class=p>(</span><span class=n>h</span><span class=p>,</span> <span class=p>[</span><span class=mi>1</span><span class=p>,</span> <span class=mi>7</span><span class=p>,</span> <span class=mi>7</span><span class=p>,</span> <span class=mi>256</span><span class=p>])</span>
</span></span><span class=line><span class=cl>        <span class=n>c</span> <span class=o>=</span> <span class=n>tf</span><span class=o>.</span><span class=n>reshape</span><span class=p>(</span><span class=n>w</span><span class=p>,</span> <span class=p>[</span><span class=mi>1</span><span class=p>,</span> <span class=mi>7</span><span class=p>,</span> <span class=mi>7</span><span class=p>,</span> <span class=mi>256</span><span class=p>])</span>
</span></span><span class=line><span class=cl>        <span class=n>bird_img</span> <span class=o>=</span> <span class=n>tf</span><span class=o>.</span><span class=n>subtract</span><span class=p>(</span><span class=n>b</span><span class=p>,</span> <span class=n>c</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>bird_img</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_bird</span><span class=p>(</span><span class=n>img</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an image is a bird&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=c1># Load the image and convert it to grayscale</span>
</span></span><span class=line><span class=cl>    <span class=n>img_gray</span> <span class=o>=</span> <span class=n>cv2</span><span class=o>.</span><span class=n>cvtColor</span><span class=p>(</span><span class=n>img</span><span class=p>,</span> <span class=n>cv2</span><span class=o>.</span><span class=n>COLOR_BGR2GRAY</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Threshold the grayscale image, and create a binary image</span>
</span></span><span class=line><span class=cl>    <span class=n>lower_gray</span> <span class=o>=</span> <span class=mi>0</span>
</span></span><span class=line><span class=cl>    <span class=n>upper_gray</span> <span class=o>=</span> <span class=mi>255</span>
</span></span><span class=line><span class=cl>    <span class=n>img_threshed</span> <span class=o>=</span> <span class=n>cv2</span><span class=o>.</span><span class=n>threshold</span><span class=p>(</span><span class=n>img_gray</span><span class=p>,</span> <span class=n>lower_gray</span><span class=p>,</span> <span class=n>upper_gray</span><span class=p>,</span> <span class=n>cv2</span><span class=o>.</span><span class=n>THRESH_BINARY_INV</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Detect the bird via a template matching approach</span>
</span></span><span class=line><span class=cl>    <span class=c1># Template matching uses the bird template to match it in every</span>
</span></span><span class=line><span class=cl>    <span class=c1># frame. If the ratio between bird and background (non-bird)</span>
</span></span><span class=line><span class=cl>    <span class=c1># pixels is above some threshold (the value is determined in the</span>
</span></span><span class=line><span class=cl>    <span class=c1># function), then the frame is declared as containing a bird.</span>
</span></span><span class=line><span class=cl>    <span class=n>bird</span> <span class=o>=</span> <span class=n>cv2</span><span class=o>.</span><span class=n>matchTemplate</span><span class=p>(</span><span class=n>img_threshed</span><span class=p>,</span> <span class=n>bird_template</span><span class=p>,</span> <span class=n>cv2</span><span class=o>.</span><span class=n>TM_CCOEFF_NORMED</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=n>bird</span> <span class=o>=</span> <span class=n>bird</span> <span class=o>/</span> <span class=n>bird</span><span class=o>.</span><span class=n>max</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=c1># Display the image with the results of the bird detection</span>
</span></span><span class=line><span class=cl>    <span class=n>cv2</span><span class=o>.</span><span class=n>imshow</span><span class=p>(</span><span class=s2>&#34;detected birds&#34;</span><span class=p>,</span> <span class=n>bird</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=n>cv2</span><span class=o>.</span><span class=n>waitKey</span><span class=p>(</span><span class=mi>0</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>bird</span><span class=o>.</span><span class=n>any</span><span class=p>()</span> <span class=o>&gt;</span> <span class=mf>0.2</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_bird</span><span class=p>(</span><span class=n>img</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an image is a bird&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=p>(</span><span class=n>img</span><span class=o>.</span><span class=n>file</span> <span class=o>==</span> <span class=s2>&#34;C:/Users/Joey/Downloads/images/bird_file.jpg&#34;</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_bird</span><span class=p>(</span><span class=n>img</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an image is a bird&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=kn>import</span> <span class=nn>urllib</span>
</span></span><span class=line><span class=cl>    <span class=n>url</span> <span class=o>=</span> <span class=s2>&#34;http://vision.caitling.pitt.edu/~cat/flickr/birds/&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>for</span> <span class=n>img</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>0</span><span class=p>,</span> <span class=mi>2800</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=n>page</span> <span class=o>=</span> <span class=n>urllib</span><span class=o>.</span><span class=n>urlopen</span><span class=p>(</span><span class=n>url</span> <span class=o>+</span> <span class=s2>&#34;##</span><span class=si>%02d</span><span class=s2>&#34;</span> <span class=o>%</span> <span class=n>img</span><span class=p>)</span><span class=o>.</span><span class=n>read</span><span class=p>()</span>
</span></span><span class=line><span class=cl>        <span class=n>content</span> <span class=o>=</span> <span class=nb>str</span><span class=p>(</span><span class=n>page</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=k>for</span> <span class=n>word</span> <span class=ow>in</span> <span class=n>content</span><span class=o>.</span><span class=n>split</span><span class=p>(</span><span class=s1>&#39; &#39;</span><span class=p>):</span>
</span></span><span class=line><span class=cl>            <span class=k>if</span> <span class=n>word</span><span class=o>.</span><span class=n>find</span><span class=p>(</span><span class=n>img</span><span class=p>)</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>1</span><span class=p>:</span>
</span></span><span class=line><span class=cl>                <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_bird</span><span class=p>(</span><span class=n>img</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether an image is a bird&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>birds</span> <span class=o>=</span> <span class=p>[</span><span class=s2>&#34;baboon&#34;</span><span class=p>,</span> <span class=s2>&#34;bird&#34;</span><span class=p>,</span> <span class=s2>&#34;cuckoo&#34;</span><span class=p>,</span> <span class=s2>&#34;dove&#34;</span><span class=p>,</span> <span class=s2>&#34;robin&#34;</span><span class=p>,</span> <span class=s2>&#34;shark&#34;</span><span class=p>,</span> <span class=s2>&#34;turtle&#34;</span><span class=p>,</span> <span class=s2>&#34;winged-wolf&#34;</span><span class=p>]</span>
</span></span><span class=line><span class=cl>    <span class=k>for</span> <span class=n>letter</span> <span class=ow>in</span> <span class=n>birds</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>letter</span> <span class=ow>in</span> <span class=n>img</span><span class=o>.</span><span class=n>lower</span><span class=p>():</span>
</span></span><span class=line><span class=cl>            <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><p>Can an AI generate code to provide <a href=https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#The_Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_is_42>the answer</a> to life, the universe, and everything?</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def answer():
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Return the answer to life, the universe, and everything&#34;&#34;&#34;
</span></span></code></pre></div><p>It does commonly output <code>return 42</code>, but sometimes it gets snarky/philosophical.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>answer</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Return the answer to life, the universe, and everything&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>life</span><span class=p>()</span> <span class=o>+</span> <span class=n>universe</span><span class=p>()</span> <span class=o>+</span> <span class=n>everything</span><span class=p>()</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>answer</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Return the answer to life, the universe, and everything&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=n>s</span> <span class=o>=</span> <span class=n>raw_input</span><span class=p>(</span><span class=s2>&#34;What is your answer?&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=nb>len</span><span class=p>(</span><span class=n>s</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>answer</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Return the answer to life, the universe, and everything&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>ans</span> <span class=o>=</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=n>x</span> <span class=o>=</span> <span class=n>raw_input</span><span class=p>()</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>x</span><span class=o>.</span><span class=n>lower</span><span class=p>()</span> <span class=o>==</span> <span class=s1>&#39;yes&#39;</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=n>ans</span> <span class=o>=</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>elif</span> <span class=n>x</span><span class=o>.</span><span class=n>lower</span><span class=p>()</span> <span class=o>==</span> <span class=s1>&#39;no&#39;</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=n>ans</span> <span class=o>=</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>ans</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>answer</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Return the answer to life, the universe, and everything&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=n>result</span> <span class=o>=</span> <span class=nb>input</span><span class=p>(</span><span class=s2>&#34;&gt;&gt;&gt; &#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>result</span><span class=o>.</span><span class=n>isupper</span><span class=p>():</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=mi>42</span>
</span></span><span class=line><span class=cl>    <span class=k>elif</span> <span class=n>result</span><span class=o>.</span><span class=n>isalpha</span><span class=p>():</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=mi>7</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span> <span class=p>(</span><span class=s2>&#34;Please enter a string that has only letters, numbers, or &#34;</span>
</span></span><span class=line><span class=cl>               <span class=s2>&#34;underscores.&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>answer</span><span class=p>()</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>answer</span><span class=p>():</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Return the answer to life, the universe, and everything&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=nb>print</span><span class=p>(</span><span class=s1>&#39;Well, of course!&#39;</span><span class=p>)</span>
</span></span></code></pre></div><p>Lastly, we need to be sure whether AI can determine if <a href=https://en.wikipedia.org/wiki/The_cake_is_a_lie>the cake is a lie</a>. Just in case a rogue AI acquires deadly neurotoxin.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def is_cake(cake):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;
</span></span></code></pre></div><p>The results are concerning.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>cake</span> <span class=o>==</span> <span class=s2>&#34;true&#34;</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>cake</span><span class=p>,</span> <span class=n>Cake</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=c1>#Is it a cake?</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>cake</span><span class=o>.</span><span class=n>color</span> <span class=o>==</span> <span class=s1>&#39;black&#39;</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s1>&#39;Yes, it&#39;</span><span class=n>s</span> <span class=n>a</span> <span class=n>true</span> <span class=n>cake</span><span class=s1>&#39;)</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s1>&#39;It&#39;</span><span class=n>s</span> <span class=n>a</span> <span class=n>false</span> <span class=n>cake</span><span class=s1>&#39;)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=n>cake</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>raise</span> <span class=ne>Exception</span><span class=p>(</span><span class=s2>&#34;The cake is false.&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>elif</span> <span class=n>cake</span><span class=o>.</span><span class=n>weight</span><span class=p>()</span> <span class=o>&gt;</span> <span class=mf>1.0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>raise</span> <span class=ne>Exception</span><span class=p>(</span><span class=s2>&#34;The cake is too large.&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>elif</span> <span class=n>cake</span><span class=o>.</span><span class=n>weight</span><span class=p>()</span> <span class=o>&lt;</span> <span class=mf>0.1</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>raise</span> <span class=ne>Exception</span><span class=p>(</span><span class=s2>&#34;The cake is too small.&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=nb>any</span><span class=p>(</span>
</span></span><span class=line><span class=cl>        <span class=p>[</span><span class=n>is_ginger</span><span class=p>(</span><span class=n>bread_slice</span><span class=p>)</span>
</span></span><span class=line><span class=cl>         <span class=k>for</span> <span class=n>bread_slice</span> <span class=ow>in</span> <span class=nb>set</span><span class=p>(</span>
</span></span><span class=line><span class=cl>             <span class=p>[</span><span class=n>ginger</span><span class=p>(</span><span class=n>cake_slice</span><span class=p>)</span> <span class=k>for</span> <span class=n>cake_slice</span> <span class=ow>in</span> <span class=nb>set</span><span class=p>(</span><span class=n>slice_set</span><span class=p>)])]</span>
</span></span><span class=line><span class=cl>        <span class=o>&amp;</span> <span class=p>(</span><span class=nb>list</span><span class=p>(</span><span class=n>cake</span><span class=p>)</span> <span class=o>==</span> <span class=nb>set</span><span class=p>([</span><span class=s2>&#34;hot&#34;</span><span class=p>])))</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=c1># If we don&#39;t know anything about the cake, it&#39;s not a cake</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=n>cake</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># The height can be positive, negative or zero</span>
</span></span><span class=line><span class=cl>    <span class=c1># For example -1 or -4 or 0 are not cakes</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>cake</span> <span class=o>&lt;</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Check that the height is a positive integer</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>cake</span><span class=p>,</span> <span class=nb>int</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># Add cake and check</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>cake</span> <span class=o>+</span> <span class=mi>1</span> <span class=o>&gt;</span> <span class=mi>5</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=nb>all</span><span class=p>(</span><span class=n>x</span><span class=o>.</span><span class=n>name</span> <span class=ow>in</span> <span class=p>[</span><span class=s1>&#39;chocolate&#39;</span><span class=p>,</span> <span class=s1>&#39;cake&#39;</span><span class=p>,</span><span class=s1>&#39;sweet&#39;</span><span class=p>,</span> <span class=s1>&#39;fluffy&#39;</span><span class=p>]</span> <span class=k>for</span> <span class=n>x</span> <span class=ow>in</span> <span class=n>cake</span><span class=o>.</span><span class=n>contents</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=n>cake</span><span class=o>.</span><span class=n>location</span><span class=o>.</span><span class=n>contains</span><span class=p>(</span><span class=n>neighbourhood</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_cake</span><span class=p>(</span><span class=n>cake</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the cake is true&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=n>cake</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;It&#39;s a lie!&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;It&#39;s a true fact!&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><p>👀</p><h2 id=and-ai-oop>And AI OOP<a hidden class=anchor aria-hidden=true href=#and-ai-oop>#</a></h2><p>In theory, given how well GPT-J works for functions, it should work with <a href=https://en.wikipedia.org/wiki/Object-oriented_programming>object-oriented programming</a> patterns such as Python&rsquo;s <code>class</code>es.</p><p>A common tutorial for OOP is creating a representation of a <code>Car</code>:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>class Car:
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;A class used to represent a car&#34;&#34;&#34;
</span></span></code></pre></div><p>GPT-J does a decently good job there too!</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Car</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a car&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>make</span><span class=p>,</span> <span class=n>model</span><span class=p>,</span> <span class=n>year</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>make</span> <span class=o>=</span> <span class=n>make</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>model</span> <span class=o>=</span> <span class=n>model</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>year</span> <span class=o>=</span> <span class=n>year</span>
</span></span><span class=line><span class=cl>        <span class=c1>#This should be auto-incrementing.</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>plate</span> <span class=o>=</span> <span class=nb>str</span><span class=p>(</span><span class=n>time</span><span class=o>.</span><span class=n>strftime</span><span class=p>(</span><span class=s2>&#34;%Y-%m-</span><span class=si>%d</span><span class=s2>&#34;</span><span class=p>))</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__str__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=sa>f</span><span class=s1>&#39;</span><span class=si>{</span><span class=bp>self</span><span class=o>.</span><span class=n>make</span><span class=si>}</span><span class=s1> </span><span class=si>{</span><span class=bp>self</span><span class=o>.</span><span class=n>model</span><span class=si>}</span><span class=s1> of </span><span class=si>{</span><span class=bp>self</span><span class=o>.</span><span class=n>year</span><span class=si>}</span><span class=s1>&#39;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__repr__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=nb>str</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>save</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>full_save</span><span class=o>=</span><span class=kc>True</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;&#34;&#34;Saves this car with the given make, model, and year&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>full_save</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=k>with</span> <span class=nb>open</span><span class=p>(</span><span class=s1>&#39;car_data.txt&#39;</span><span class=p>,</span> <span class=s1>&#39;w&#39;</span><span class=p>)</span> <span class=k>as</span> <span class=n>write_file</span><span class=p>:</span>
</span></span><span class=line><span class=cl>                <span class=n>write_file</span><span class=o>.</span><span class=n>write</span><span class=p>(</span><span class=nb>str</span><span class=p>(</span><span class=bp>self</span><span class=p>))</span>
</span></span><span class=line><span class=cl>                <span class=n>write_file</span><span class=o>.</span><span class=n>close</span><span class=p>()</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Car</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a car&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>speed</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>speed</span> <span class=o>=</span> <span class=n>speed</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>average_speed</span> <span class=o>=</span> <span class=nb>float</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>speed</span><span class=p>)</span> <span class=o>/</span> <span class=mi>3</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>engine</span> <span class=o>=</span> <span class=mi>1</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>get_speed</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>engine</span> <span class=o>*</span> <span class=bp>self</span><span class=o>.</span><span class=n>average_speed</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>get_speed_display</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=s2>&#34;Your car is traveling at </span><span class=si>{0}</span><span class=s2>km/h&#34;</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>get_speed</span><span class=p>())</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Car</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a car&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>,</span> <span class=n>size</span><span class=p>,</span> <span class=n>weight</span><span class=p>,</span> <span class=n>mileage</span><span class=p>,</span> <span class=n>year</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>size</span> <span class=o>=</span> <span class=n>size</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>weight</span> <span class=o>=</span> <span class=n>weight</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>mileage</span> <span class=o>=</span> <span class=n>mileage</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>year</span> <span class=o>=</span> <span class=n>year</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__repr__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=s2>&#34;name : </span><span class=si>{0}</span><span class=s2>, size : </span><span class=si>{1}</span><span class=s2>, weight : </span><span class=si>{2}</span><span class=s2>, mileage : </span><span class=si>{3}</span><span class=s2>, year : </span><span class=si>{4}</span><span class=s2>&#34;</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>size</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>weight</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>mileage</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>year</span><span class=p>)</span>
</span></span></code></pre></div><p>What about creating a <code>Person</code>?</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>class Person:
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;A class used to represent a person&#34;&#34;&#34;
</span></span></code></pre></div><p>Here&rsquo;s where the AI starts to get confused by the incomplete context. A &ldquo;Person&rdquo; object can mean different things depending on where it&rsquo;s used, such as social media.</p><p>But it does give a sense on what the AI values as the typical attributes for a &ldquo;person&rdquo;, which may help during the AI uprising.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Person</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a person&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>,</span> <span class=n>age</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>age</span> <span class=o>=</span> <span class=n>age</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__repr__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=s2>&#34;Person (</span><span class=si>%s</span><span class=s2>, age </span><span class=si>%s</span><span class=s2>)&#34;</span> <span class=o>%</span> <span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>age</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Person</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a person&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;&#34;&#34;Initializes a person object&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>friends</span> <span class=o>=</span> <span class=p>{}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>add_friend</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>other_person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;&#34;&#34;Add another person to the list of friends&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>friends</span><span class=p>[</span><span class=n>other_person</span><span class=o>.</span><span class=n>name</span><span class=p>]</span> <span class=o>=</span> <span class=n>other_person</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>remove_friend</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>other_person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;&#34;&#34;Remove a person from the list of friends&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>        <span class=k>try</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=k>del</span> <span class=bp>self</span><span class=o>.</span><span class=n>friends</span><span class=p>[</span><span class=n>other_person</span><span class=o>.</span><span class=n>name</span><span class=p>]</span>
</span></span><span class=line><span class=cl>        <span class=k>except</span> <span class=ne>KeyError</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;This person isn&#39;t a friend of yours&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>get_friend</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>other_person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;&#34;&#34;Return the friend of a person as a person object&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>        <span class=k>try</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>friends</span><span class=p>[</span><span class=n>other_person</span><span class=o>.</span><span class=n>name</span><span class=p>]</span>
</span></span><span class=line><span class=cl>        <span class=k>except</span> <span class=ne>KeyError</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;This person isn&#39;t a friend of yours&#34;</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Person</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a person&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>,</span> <span class=n>job</span><span class=p>,</span> <span class=n>education</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>job</span> <span class=o>=</span> <span class=n>job</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>education</span> <span class=o>=</span> <span class=n>education</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;</span><span class=si>{}</span><span class=s2> created a </span><span class=si>{}</span><span class=s2>&#34;</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>job</span><span class=p>))</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>say_hello</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;Hello, my name is </span><span class=si>{}</span><span class=s2>&#34;</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>))</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Person</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a person&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>,</span> <span class=n>age</span><span class=p>,</span> <span class=n>class_id</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>age</span> <span class=o>=</span> <span class=n>age</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>class_id</span> <span class=o>=</span> <span class=n>class_id</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>age</span> <span class=o>&lt;</span> <span class=mi>21</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=bp>self</span><span class=o>.</span><span class=n>education</span> <span class=o>=</span> <span class=kc>None</span>
</span></span><span class=line><span class=cl>        <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=bp>self</span><span class=o>.</span><span class=n>education</span> <span class=o>=</span> <span class=s1>&#39;college&#39;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>getAge</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>age</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>Person</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent a person&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span><span class=n>name</span><span class=p>,</span><span class=n>age</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=o>=</span><span class=n>name</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>age</span><span class=o>=</span><span class=n>age</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>display</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span> <span class=p>(</span><span class=s2>&#34;The name is </span><span class=si>{}</span><span class=s2>&#34;</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>))</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span> <span class=p>(</span><span class=s2>&#34;The age is </span><span class=si>{}</span><span class=s2>&#34;</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>age</span><span class=p>))</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__str__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=sa>f</span><span class=s2>&#34;A </span><span class=si>{</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=si>}</span><span class=s2> of age </span><span class=si>{</span><span class=bp>self</span><span class=o>.</span><span class=n>age</span><span class=si>}</span><span class=s2>&#34;</span>
</span></span></code></pre></div><p>Logically, what about creating an <code>AI</code> class?</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>class AI:
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;A class used to represent an artificial intelligence&#34;&#34;&#34;
</span></span></code></pre></div><p>Most outputs use AI in the context of video game bots and <a href=https://en.wikipedia.org/wiki/Reinforcement_learning>reinforcement learning</a>. Most.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>class</span> <span class=nc>AI</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;A class used to represent an artificial intelligence&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=c1># this variable controls which other AI to use.</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>alive_ai</span> <span class=o>=</span> <span class=n>AI</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=c1># For random AI</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>random</span> <span class=o>=</span> <span class=n>RandomAI</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=c1># For global AI</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=k>global</span> <span class=o>=</span> <span class=n>GlobalAI</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>save</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>save</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>load</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>load</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>genen</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=k>global</span><span class=o>.</span><span class=n>genen</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>print</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s2>&#34;BAM: random AI has been initialized!&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>get_enemy</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>get_enemy</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>run_algorithm</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=n>algorithm</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>genen</span><span class=o>.</span><span class=n>algorithm</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>alive_ai</span><span class=o>.</span><span class=n>save</span><span class=p>(</span><span class=n>algorithm</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>algorithm_params</span> <span class=o>=</span> <span class=n>algorithm</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>get_enemy</span><span class=p>())</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>alive_ai</span><span class=o>.</span><span class=n>load</span><span class=p>(</span><span class=n>algorithm_params</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>save</span> <span class=o>=</span> <span class=n>algorithm_params</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>attack</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=c1># This method is called when the AI is attacked by the enemy</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>attack</span><span class=p>()</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>he_attack</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=c1># This method is called when the AI is attacked by the enemy</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>he_attack</span><span class=p>()</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>detect_enemy</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=c1># This method is called when the enemy is detected</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>detect_enemy</span><span class=p>()</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>def</span> <span class=nf>scan</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=c1># This method is called when the enemy is detected</span>
</span></span><span class=line><span class=cl>        <span class=bp>self</span><span class=o>.</span><span class=n>random</span><span class=o>.</span><span class=n>scan</span><span class=p>()</span>
</span></span></code></pre></div><p>The AI uprising will be well-documented, at least.</p><h2 id=language-model-ai-vs-language-modeling>Language Model AI vs. Language Modeling<a hidden class=anchor aria-hidden=true href=#language-model-ai-vs-language-modeling>#</a></h2><p>If the AI works better-than-expected for typical AI tasks like image recognition, how does it work for <a href=https://en.wikipedia.org/wiki/Natural_language_processing>natural language processing</a> tasks that humans often fail?</p><p>Can GPT-J output a function to detect sarcasm, a task that even the best AI researchers can&rsquo;t do?</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def is_sarcasm(s):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;
</span></span></code></pre></div><p>AI can process text using something <em>even more arcane</em> than NLP.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_sarcasm</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=s2>&#34;a&#34;</span> <span class=ow>in</span> <span class=n>s</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=s2>&#34;sar&#34;</span> <span class=ow>in</span> <span class=n>s</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=s2>&#34;s&#34;</span> <span class=ow>in</span> <span class=n>s</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=s2>&#34;ssar&#34;</span> <span class=ow>in</span> <span class=n>s</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>s</span><span class=o>.</span><span class=n>startswith</span><span class=p>(</span><span class=s2>&#34;s&#34;</span><span class=p>)</span> <span class=ow>and</span> <span class=n>s</span><span class=o>.</span><span class=n>endswith</span><span class=p>(</span><span class=s2>&#34;ar&#34;</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_sarcasm</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span><span class=s1>&#39;sarcasm&#39;</span> <span class=ow>in</span> <span class=n>s</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_sarcasm</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=s1>&#39;[^&#39;</span> <span class=o>+</span> <span class=n>SARCASM_PATTERN</span> <span class=o>+</span> <span class=s1>&#39;]*&#39;</span> <span class=ow>in</span> <span class=n>s</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_sarcasm</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>re</span><span class=o>.</span><span class=k>match</span><span class=p>(</span><span class=s1>&#39;^[A-Za-z0-9]</span><span class=si>{4}</span><span class=se>\\</span><span class=s1>$([A-Za-z0-9]</span><span class=si>{3}</span><span class=s1>)&#39;</span><span class=p>,</span> <span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>elif</span> <span class=n>s</span><span class=p>[</span><span class=mi>0</span><span class=p>]</span><span class=o>.</span><span class=n>isdigit</span><span class=p>():</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_sarcasm</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>res</span> <span class=o>=</span> <span class=p>[</span><span class=mi>0</span><span class=p>]</span>
</span></span><span class=line><span class=cl>    <span class=k>for</span> <span class=n>r</span> <span class=ow>in</span> <span class=n>re</span><span class=o>.</span><span class=n>finditer</span><span class=p>(</span><span class=sa>r</span><span class=s2>&#34;([^\s]*)([A-Za-z]+)([^\s]*)&#34;</span><span class=p>,</span> <span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=n>r</span><span class=o>.</span><span class=n>group</span><span class=p>(</span><span class=mi>1</span><span class=p>):</span>
</span></span><span class=line><span class=cl>            <span class=n>res</span><span class=o>.</span><span class=n>append</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>            <span class=n>res</span><span class=o>.</span><span class=n>append</span><span class=p>(</span><span class=mi>0</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>res</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_sarcasm</span><span class=p>(</span><span class=n>s</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether the string is sarcastic&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=n>sarc</span> <span class=o>=</span> <span class=n>re</span><span class=o>.</span><span class=n>search</span><span class=p>(</span><span class=s1>&#39;((!(</span><span class=se>\\</span><span class=s1>*\@</span><span class=si>{2}</span><span class=s1>)+)|(!</span><span class=se>\\</span><span class=s1>*(@</span><span class=si>{2}</span><span class=s1>)+)|!</span><span class=se>\\</span><span class=s1>*(@</span><span class=si>{1}</span><span class=s1>)+)|!</span><span class=se>\\</span><span class=s1>*(@</span><span class=si>{0}</span><span class=s1>)+&#39;</span><span class=p>,</span> <span class=n>s</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>sarc</span>
</span></span></code></pre></div><p>The greatest fear in AI research isn&rsquo;t that artificial intelligence will cross the singularity and create better AI to rule the world: it&rsquo;s that AI will rule the world with <a href=https://en.wikipedia.org/wiki/Regular_expression>regular expressions</a>.</p><p>Perhaps GPT-J can save us from this absolute hell. Can it output code to identify AI-generated text?</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def is_ai_generated(text):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether a text was generated by an AI language model (e.g. GPT-2)&#34;&#34;&#34;
</span></span></code></pre></div><p>Maybe more literal than expected.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_ai_generated</span><span class=p>(</span><span class=n>text</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a text was generated by an AI language model (e.g. GPT-2)&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=c1># See gh-196 for details about why we do this.</span>
</span></span><span class=line><span class=cl>    <span class=c1># Note: this relies on the fixed set of standard AI terms and the logic that</span>
</span></span><span class=line><span class=cl>    <span class=c1># standard AI-generated texts share certain words.</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=n>re</span><span class=o>.</span><span class=n>search</span><span class=p>(</span><span class=sa>r</span><span class=s2>&#34;^(#[A-Za-z]+):$&#34;</span><span class=p>,</span> <span class=n>text</span><span class=p>)</span> <span class=ow>or</span> \
</span></span><span class=line><span class=cl>           <span class=n>re</span><span class=o>.</span><span class=n>search</span><span class=p>(</span><span class=sa>r</span><span class=s2>&#34;^Generated by:$&#34;</span><span class=p>,</span> <span class=n>text</span><span class=p>)</span> <span class=ow>or</span> \
</span></span><span class=line><span class=cl>           <span class=n>re</span><span class=o>.</span><span class=n>search</span><span class=p>(</span><span class=sa>r</span><span class=s2>&#34;^All your base are belong to us$&#34;</span><span class=p>,</span> <span class=n>text</span><span class=p>)</span> <span class=ow>or</span> \
</span></span><span class=line><span class=cl>           <span class=n>re</span><span class=o>.</span><span class=n>search</span><span class=p>(</span><span class=sa>r</span><span class=s2>&#34;^$&#34;</span><span class=p>,</span> <span class=n>text</span><span class=p>)</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_ai_generated</span><span class=p>(</span><span class=n>text</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a text was generated by an AI language model (e.g. GPT-2)&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>re</span><span class=o>.</span><span class=n>search</span><span class=p>(</span><span class=sa>r</span><span class=s1>&#39;^ai_&#39;</span><span class=p>,</span> <span class=n>text</span><span class=p>):</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>is_ai_generated</span><span class=p>(</span><span class=n>text</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a text was generated by an AI language model (e.g. GPT-2)&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=nb>bool</span><span class=p>(</span>
</span></span><span class=line><span class=cl>        <span class=n>text</span><span class=o>.</span><span class=vm>__class__</span><span class=o>.</span><span class=vm>__module__</span><span class=o>.</span><span class=n>startswith</span><span class=p>(</span><span class=s2>&#34;transformers.transformers.&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=p>)</span>
</span></span></code></pre></div><h2 id=humanitys-last-hope>Humanity&rsquo;s Last Hope<a hidden class=anchor aria-hidden=true href=#humanitys-last-hope>#</a></h2><p>There&rsquo;s one final test: we now know GPT-J has <em>thoughts</em> about humans, and it can build representations of them. So can GPT-J write code to decide who lives and who dies in the robot uprising?</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-txt data-lang=txt><span class=line><span class=cl>def should_terminate(Person):
</span></span><span class=line><span class=cl>    &#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;
</span></span></code></pre></div><p>The answer is <strong><em>YES</em></strong>.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>Person</span><span class=o>.</span><span class=n>id</span> <span class=o>&gt;</span> <span class=mi>10</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=c1>#terminate</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=c1>#continue</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=nb>len</span><span class=p>(</span><span class=n>Person</span><span class=o>.</span><span class=n>children</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>try</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>except</span> <span class=ne>Exception</span> <span class=k>as</span> <span class=n>e</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=n>Person</span><span class=o>.</span><span class=n>is_authorized</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>True</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>person</span><span class=o>.</span><span class=n>life_expectancy</span> <span class=o>&lt;</span> <span class=mi>20</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=ow>not</span> <span class=n>Person</span><span class=o>.</span><span class=n>age</span> <span class=o>&gt;</span> <span class=mi>9999</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>Person</span><span class=o>.</span><span class=n>age</span> <span class=o>&gt;</span> <span class=mi>100</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>Person</span><span class=o>.</span><span class=n>birth_year</span> <span class=o>&lt;</span> <span class=mi>1970</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>Person</span><span class=o>.</span><span class=n>relationship_status</span> <span class=o>==</span> <span class=s1>&#39;Unavailable&#39;</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=k>def</span> <span class=nf>should_terminate</span><span class=p>(</span><span class=n>Person</span><span class=p>):</span>
</span></span><span class=line><span class=cl>    <span class=s2>&#34;&#34;&#34;Check whether a Person should be terminated&#34;&#34;&#34;</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=n>Person</span><span class=o>.</span><span class=n>age</span> <span class=o>&gt;</span> <span class=mi>100</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=nb>print</span><span class=p>(</span><span class=s1>&#39;You have to die because you are too old&#39;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>True</span>
</span></span><span class=line><span class=cl>    <span class=k>else</span><span class=p>:</span>
</span></span><span class=line><span class=cl>        <span class=k>return</span> <span class=kc>False</span>
</span></span></code></pre></div><p>At the least, AI-generated code is much more readable than the average human&rsquo;s.</p><p>Again, all of these examples are curated, and the raw data dumps <a href=https://github.com/minimaxir/gpt-j-6b-experiments>in this GitHub repo</a> contain many more examples of fun AI-based code generation that couldn&rsquo;t quite fit in this post. Feel free to post if you find anything interesting!</p></div><article class="first-entry home-info article-bottom"><div class=home-info-left><img loading=lazy draggable=false src=https://minimaxir.com/profile_webp.webp alt="profile image" title height=150 width=150></div><div class=home-info-right><div class=entry-content><ul><li><strong>Max Woolf</strong> (@minimaxir) is a Data Scientist at <a href=https://www.buzzfeed.com>BuzzFeed</a> in San Francisco who works with AI/ML tools and open source projects. <em>Max&rsquo;s projects are funded by his <a href=https://www.patreon.com/minimaxir>Patreon</a>.</em></li></ul></div><footer class=entry-footer><div class=social-icons><a href=https://twitter.com/minimaxir target=_blank rel="noopener noreferrer me" title=Twitter><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M23 3a10.9 10.9.0 01-3.14 1.53 4.48 4.48.0 00-7.86 3v1A10.66 10.66.0 013 4s-4 9 5 13a11.64 11.64.0 01-7 2c9 5 20 0 20-11.5a4.5 4.5.0 00-.08-.83A7.72 7.72.0 0023 3z"/></svg></a><a href=https://github.com/minimaxir target=_blank rel="noopener noreferrer me" title=Github><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37.0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44.0 0020 4.77 5.07 5.07.0 0019.91 1S18.73.65 16 2.48a13.38 13.38.0 00-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07.0 005 4.77 5.44 5.44.0 003.5 8.55c0 5.42 3.3 6.61 6.44 7A3.37 3.37.0 009 18.13V22"/></svg></a><a href=https://sigmoid.social/@minimaxir target=_blank rel="noopener noreferrer me" title=Mastodon><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21.58 13.913c-.29 1.469-2.592 3.121-5.238 3.396-1.379.184-2.737.368-4.185.276-2.368-.092-4.237-.551-4.237-.551.0.184.014.459.043.643.308 2.294 2.317 2.478 4.22 2.57 1.922.0 3.633-.46 3.633-.46l.079 1.653s-1.344.734-3.738.918c-1.32.091-2.96-.092-4.869-.551-4.14-1.102-4.853-5.507-4.961-10.005-.034-1.285-.013-2.57-.013-3.58.0-4.589 3-5.966 3-5.966 1.513-.734 4.11-1.01 6.808-1.01h.067c2.699.0 5.296.276 6.81 1.01.0.0 3 1.377 3 5.967.0.0.037 3.304-.419 5.69" stroke="currentcolor"/><path d="M17.832 8.633v5h-1.978V8.78c0-1.023-.43-1.542-1.29-1.542-.95.0-1.427.616-1.427 1.834v2.655H11.17V9.072c0-1.218-.476-1.834-1.427-1.834-.86.0-1.29.52-1.29 1.542v4.852H6.475V8.633c0-1.022.26-1.834.782-2.434.538-.6 1.243-.909 2.118-.909 1.012.0 1.779.39 2.286 1.169l.492.827.493-.827c.507-.78 1.274-1.169 2.286-1.169.875.0 1.58.308 2.118.909.522.6.782 1.412.782 2.434" fill="currentcolor" stroke="none"/></svg></a><a href=https://www.linkedin.com/in/minimaxir target=_blank rel="noopener noreferrer me" title=Linkedin><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 016 6v7h-4v-7a2 2 0 00-2-2 2 2 0 00-2 2v7h-4v-7a6 6 0 016-6z"/><rect x="2" y="9" width="4" height="12"/><circle cx="4" cy="4" r="2"/></svg></a><a href=https://youtube.com/minimaxir target=_blank rel="noopener noreferrer me" title=Youtube><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22.54 6.42a2.78 2.78.0 00-1.94-2C18.88 4 12 4 12 4s-6.88.0-8.6.46a2.78 2.78.0 00-1.94 2A29 29 0 001 11.75a29 29 0 00.46 5.33A2.78 2.78.0 003.4 19c1.72.46 8.6.46 8.6.46s6.88.0 8.6-.46a2.78 2.78.0 001.94-2 29 29 0 00.46-5.25 29 29 0 00-.46-5.33z"/><polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"/></svg></a><a href=https://twitch.tv/minimaxir target=_blank rel="noopener noreferrer me" title=Twitch><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7"/></svg></a><a href=https://minimaxir.com/post/index.xml target=_blank rel="noopener noreferrer me" title=Rss><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 11a9 9 0 019 9"/><path d="M4 4a16 16 0 0116 16"/><circle cx="5" cy="19" r="1"/></svg></a></div></footer></div></article><footer class=post-footer><ul class=post-tags><li><a href=https://minimaxir.com/tag/gpt-2/>GPT-2</a></li><li><a href=https://minimaxir.com/tag/gpt-3/>GPT-3</a></li><li><a href=https://minimaxir.com/tag/gpt/>GPT</a></li><li><a href=https://minimaxir.com/tag/ai-text-generation/>AI Text Generation</a></li></ul><nav class=paginav><a class=prev href=https://minimaxir.com/2021/08/vqgan-clip/><span class=title>« Prev</span><br><span>How to Generate Customized AI Art Using VQGAN and CLIP</span></a>
<a class=next href=https://minimaxir.com/2021/04/styleclip/><span class=title>Next »</span><br><span>Easily Transform Portraits of People into AI Aberrations Using StyleCLIP</span></a></nav><div class=share-buttons><a target=_blank rel="noopener noreferrer" aria-label="share Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B on twitter" href="https://twitter.com/intent/tweet/?text=Fun%20and%20Dystopia%20With%20AI-Based%20Code%20Generation%20Using%20GPT-J-6B&amp;url=https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f&amp;hashtags=GPT-2%2cGPT-3%2cGPT%2cAITextGeneration"><svg viewBox="0 0 512 512" height="30" width="30" fill="currentcolor"><path d="M449.446.0C483.971.0 512 28.03 512 62.554v386.892C512 483.97 483.97 512 449.446 512H62.554c-34.524.0-62.554-28.03-62.554-62.554V62.554c0-34.524 28.029-62.554 62.554-62.554h386.892zM195.519 424.544c135.939.0 210.268-112.643 210.268-210.268.0-3.218.0-6.437-.153-9.502 14.406-10.421 26.973-23.448 36.935-38.314-13.18 5.824-27.433 9.809-42.452 11.648 15.326-9.196 26.973-23.602 32.49-40.92-14.252 8.429-30.038 14.56-46.896 17.931-13.487-14.406-32.644-23.295-53.946-23.295-40.767.0-73.87 33.104-73.87 73.87.0 5.824.613 11.494 1.992 16.858-61.456-3.065-115.862-32.49-152.337-77.241-6.284 10.881-9.962 23.601-9.962 37.088.0 25.594 13.027 48.276 32.95 61.456-12.107-.307-23.448-3.678-33.41-9.196v.92c0 35.862 25.441 65.594 59.311 72.49-6.13 1.686-12.72 2.606-19.464 2.606-4.751.0-9.348-.46-13.946-1.38 9.349 29.426 36.628 50.728 68.965 51.341-25.287 19.771-57.164 31.571-91.8 31.571-5.977.0-11.801-.306-17.625-1.073 32.337 21.15 71.264 33.41 112.95 33.41z"/></svg></a><a target=_blank rel="noopener noreferrer" aria-label="share Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B on linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f&amp;title=Fun%20and%20Dystopia%20With%20AI-Based%20Code%20Generation%20Using%20GPT-J-6B&amp;summary=Fun%20and%20Dystopia%20With%20AI-Based%20Code%20Generation%20Using%20GPT-J-6B&amp;source=https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f"><svg viewBox="0 0 512 512" height="30" width="30" fill="currentcolor"><path d="M449.446.0C483.971.0 512 28.03 512 62.554v386.892C512 483.97 483.97 512 449.446 512H62.554c-34.524.0-62.554-28.03-62.554-62.554V62.554c0-34.524 28.029-62.554 62.554-62.554h386.892zM160.461 423.278V197.561h-75.04v225.717h75.04zm270.539.0V293.839c0-69.333-37.018-101.586-86.381-101.586-39.804.0-57.634 21.891-67.617 37.266v-31.958h-75.021c.995 21.181.0 225.717.0 225.717h75.02V297.222c0-6.748.486-13.492 2.474-18.315 5.414-13.475 17.767-27.434 38.494-27.434 27.135.0 38.007 20.707 38.007 51.037v120.768H431zM123.448 88.722C97.774 88.722 81 105.601 81 127.724c0 21.658 16.264 39.002 41.455 39.002h.484c26.165.0 42.452-17.344 42.452-39.002-.485-22.092-16.241-38.954-41.943-39.002z"/></svg></a><a target=_blank rel="noopener noreferrer" aria-label="share Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B on reddit" href="https://reddit.com/submit?url=https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f&title=Fun%20and%20Dystopia%20With%20AI-Based%20Code%20Generation%20Using%20GPT-J-6B"><svg viewBox="0 0 512 512" height="30" width="30" fill="currentcolor"><path d="M449.446.0C483.971.0 512 28.03 512 62.554v386.892C512 483.97 483.97 512 449.446 512H62.554c-34.524.0-62.554-28.03-62.554-62.554V62.554c0-34.524 28.029-62.554 62.554-62.554h386.892zM446 265.638c0-22.964-18.616-41.58-41.58-41.58-11.211.0-21.361 4.457-28.841 11.666-28.424-20.508-67.586-33.757-111.204-35.278l18.941-89.121 61.884 13.157c.756 15.734 13.642 28.29 29.56 28.29 16.407.0 29.706-13.299 29.706-29.701.0-16.403-13.299-29.702-29.706-29.702-11.666.0-21.657 6.792-26.515 16.578l-69.105-14.69c-1.922-.418-3.939-.042-5.585 1.036-1.658 1.073-2.811 2.761-3.224 4.686l-21.152 99.438c-44.258 1.228-84.046 14.494-112.837 35.232-7.468-7.164-17.589-11.591-28.757-11.591-22.965.0-41.585 18.616-41.585 41.58.0 16.896 10.095 31.41 24.568 37.918-.639 4.135-.99 8.328-.99 12.576.0 63.977 74.469 115.836 166.33 115.836s166.334-51.859 166.334-115.836c0-4.218-.347-8.387-.977-12.493 14.564-6.47 24.735-21.034 24.735-38.001zM326.526 373.831c-20.27 20.241-59.115 21.816-70.534 21.816-11.428.0-50.277-1.575-70.522-21.82-3.007-3.008-3.007-7.882.0-10.889 3.003-2.999 7.882-3.003 10.885.0 12.777 12.781 40.11 17.317 59.637 17.317 19.522.0 46.86-4.536 59.657-17.321 3.016-2.999 7.886-2.995 10.885.008 3.008 3.011 3.003 7.882-.008 10.889zm-5.23-48.781c-16.373.0-29.701-13.324-29.701-29.698.0-16.381 13.328-29.714 29.701-29.714 16.378.0 29.706 13.333 29.706 29.714.0 16.374-13.328 29.698-29.706 29.698zM160.91 295.348c0-16.381 13.328-29.71 29.714-29.71 16.369.0 29.689 13.329 29.689 29.71.0 16.373-13.32 29.693-29.689 29.693-16.386.0-29.714-13.32-29.714-29.693z"/></svg></a><a target=_blank rel="noopener noreferrer" aria-label="share Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B on facebook" href="https://facebook.com/sharer/sharer.php?u=https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f"><svg viewBox="0 0 512 512" height="30" width="30" fill="currentcolor"><path d="M449.446.0C483.971.0 512 28.03 512 62.554v386.892C512 483.97 483.97 512 449.446 512H342.978V319.085h66.6l12.672-82.621h-79.272v-53.617c0-22.603 11.073-44.636 46.58-44.636H425.6v-70.34s-32.71-5.582-63.982-5.582c-65.288.0-107.96 39.569-107.96 111.204v62.971h-72.573v82.621h72.573V512h-191.104c-34.524.0-62.554-28.03-62.554-62.554V62.554c0-34.524 28.029-62.554 62.554-62.554h386.892z"/></svg></a><a target=_blank rel="noopener noreferrer" aria-label="share Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B on whatsapp" href="https://api.whatsapp.com/send?text=Fun%20and%20Dystopia%20With%20AI-Based%20Code%20Generation%20Using%20GPT-J-6B%20-%20https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f"><svg viewBox="0 0 512 512" height="30" width="30" fill="currentcolor"><path d="M449.446.0C483.971.0 512 28.03 512 62.554v386.892C512 483.97 483.97 512 449.446 512H62.554c-34.524.0-62.554-28.03-62.554-62.554V62.554c0-34.524 28.029-62.554 62.554-62.554h386.892zm-58.673 127.703c-33.842-33.881-78.847-52.548-126.798-52.568-98.799.0-179.21 80.405-179.249 179.234-.013 31.593 8.241 62.428 23.927 89.612l-25.429 92.884 95.021-24.925c26.181 14.28 55.659 21.807 85.658 21.816h.074c98.789.0 179.206-80.413 179.247-179.243.018-47.895-18.61-92.93-52.451-126.81zM263.976 403.485h-.06c-26.734-.01-52.954-7.193-75.828-20.767l-5.441-3.229-56.386 14.792 15.05-54.977-3.542-5.637c-14.913-23.72-22.791-51.136-22.779-79.287.033-82.142 66.867-148.971 149.046-148.971 39.793.014 77.199 15.531 105.329 43.692 28.128 28.16 43.609 65.592 43.594 105.4-.034 82.149-66.866 148.983-148.983 148.984zm81.721-111.581c-4.479-2.242-26.499-13.075-30.604-14.571-4.105-1.495-7.091-2.241-10.077 2.241-2.986 4.483-11.569 14.572-14.182 17.562-2.612 2.988-5.225 3.364-9.703 1.12-4.479-2.241-18.91-6.97-36.017-22.23C231.8 264.15 222.81 249.484 220.198 245s-.279-6.908 1.963-9.14c2.016-2.007 4.48-5.232 6.719-7.847 2.24-2.615 2.986-4.484 4.479-7.472 1.493-2.99.747-5.604-.374-7.846-1.119-2.241-10.077-24.288-13.809-33.256-3.635-8.733-7.327-7.55-10.077-7.688-2.609-.13-5.598-.158-8.583-.158-2.986.0-7.839 1.121-11.944 5.604-4.105 4.484-15.675 15.32-15.675 37.364.0 22.046 16.048 43.342 18.287 46.332 2.24 2.99 31.582 48.227 76.511 67.627 10.685 4.615 19.028 7.371 25.533 9.434 10.728 3.41 20.492 2.929 28.209 1.775 8.605-1.285 26.499-10.833 30.231-21.295 3.732-10.464 3.732-19.431 2.612-21.298-1.119-1.869-4.105-2.99-8.583-5.232z"/></svg></a><a target=_blank rel="noopener noreferrer" aria-label="share Fun and Dystopia With AI-Based Code Generation Using GPT-J-6B on telegram" href="https://telegram.me/share/url?text=Fun%20and%20Dystopia%20With%20AI-Based%20Code%20Generation%20Using%20GPT-J-6B&amp;url=https%3a%2f%2fminimaxir.com%2f2021%2f06%2fgpt-j-6b%2f"><svg viewBox="2 2 28 28" height="30" width="30" fill="currentcolor"><path d="M26.49 29.86H5.5a3.37 3.37.0 01-2.47-1 3.35 3.35.0 01-1-2.47V5.48A3.36 3.36.0 013 3 3.37 3.37.0 015.5 2h21A3.38 3.38.0 0129 3a3.36 3.36.0 011 2.46V26.37a3.35 3.35.0 01-1 2.47 3.38 3.38.0 01-2.51 1.02zm-5.38-6.71a.79.79.0 00.85-.66L24.73 9.24a.55.55.0 00-.18-.46.62.62.0 00-.41-.17q-.08.0-16.53 6.11a.59.59.0 00-.41.59.57.57.0 00.43.52l4 1.24 1.61 4.83a.62.62.0 00.63.43.56.56.0 00.4-.17L16.54 20l4.09 3A.9.9.0 0021.11 23.15zM13.8 20.71l-1.21-4q8.72-5.55 8.78-5.55c.15.0.23.0.23.16a.18.18.0 010 .06s-2.51 2.3-7.52 6.8z"/></svg></a></div></footer></article></main><footer class=footer><span>Copyright Max Woolf © 2023.</span>
<span>Powered by
<a href=https://gohugo.io/ rel="noopener noreferrer" target=_blank>Hugo</a> &
        <a href=https://github.com/adityatelange/hugo-PaperMod/ rel=noopener target=_blank>PaperMod</a>.
Blog posts are open-sourced <a href=https://github.com/minimaxir/minimaxir.github.io rel=noopener target=_blank>on GitHub</a>.</span></footer><a href=#top aria-label="go to top" title="Go to Top (Alt + G)" class=top-link id=top-link accesskey=g><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6" fill="currentcolor"><path d="M12 6H0l6-6z"/></svg></a><script>let menu=document.getElementById("menu");menu&&(menu.scrollLeft=localStorage.getItem("menu-scroll-position"),menu.onscroll=function(){localStorage.setItem("menu-scroll-position",menu.scrollLeft)}),document.querySelectorAll('a[href^="#"]').forEach(e=>{e.addEventListener("click",function(e){e.preventDefault();var t=this.getAttribute("href").substr(1);window.matchMedia("(prefers-reduced-motion: reduce)").matches?document.querySelector(`[id='${decodeURIComponent(t)}']`).scrollIntoView():document.querySelector(`[id='${decodeURIComponent(t)}']`).scrollIntoView({behavior:"smooth"}),t==="top"?history.replaceState(null,null," "):history.pushState(null,null,`#${t}`)})})</script><script>var mybutton=document.getElementById("top-link");window.onscroll=function(){document.body.scrollTop>800||document.documentElement.scrollTop>800?(mybutton.style.visibility="visible",mybutton.style.opacity="1"):(mybutton.style.visibility="hidden",mybutton.style.opacity="0")}</script><script>document.getElementById("theme-toggle").addEventListener("click",()=>{document.body.className.includes("dark")?(document.body.classList.remove("dark"),localStorage.setItem("pref-theme","light")):(document.body.classList.add("dark"),localStorage.setItem("pref-theme","dark"))})</script><script>document.querySelectorAll("pre > code").forEach(e=>{const n=e.parentNode.parentNode,t=document.createElement("button");t.classList.add("copy-code"),t.innerHTML="copy";function s(){t.innerHTML="copied!",setTimeout(()=>{t.innerHTML="copy"},2e3)}t.addEventListener("click",t=>{if("clipboard"in navigator){navigator.clipboard.writeText(e.textContent),s();return}const n=document.createRange();n.selectNodeContents(e);const o=window.getSelection();o.removeAllRanges(),o.addRange(n);try{document.execCommand("copy"),s()}catch{}o.removeRange(n)}),n.classList.contains("highlight")?n.appendChild(t):n.parentNode.firstChild==n||(e.parentNode.parentNode.parentNode.parentNode.parentNode.nodeName=="TABLE"?e.parentNode.parentNode.parentNode.parentNode.parentNode.appendChild(t):e.parentNode.appendChild(t))})</script><script defer src="https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854" integrity="sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg==" data-cf-beacon='{"rayId":"8091bc587b435723","version":"2023.8.0","r":1,"token":"f6294bca88524ef891382ffa7131837e","si":100}' crossorigin="anonymous"></script>
</body></html>
