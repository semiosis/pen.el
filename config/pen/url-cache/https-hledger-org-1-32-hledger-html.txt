HTTP/1.1 200 OK
Date: Mon, 15 Jan 2024 07:52:05 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
alt-svc: h3=":443"; ma=86400
last-modified: Sat, 13 Jan 2024 17:13:23 GMT
CF-Cache-Status: DYNAMIC
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=RbFIHPdtu4V%2B0vr47bNS6YcPmsQTN9oOeANSiVGXIyVy8F2R7B41mL9hXhAnmjQSZNU%2FDj2UObvKYXGoBG4zY0OrPo8RowmePL%2FXd9yNB80Z2KNfKahaPIM3u6EZo25RJ%2FMzXCsCSWxPrA%3D%3D"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 845c89860e6ba94a-SYD

<!DOCTYPE HTML>
<html lang="en" class="sidebar-visible no-js light">
    <head>
        <!-- Book generated using mdBook -->
        <meta charset="UTF-8">
        <title>hledger manual (1.32) - hledger</title>


        <!-- Custom HTML head -->
        
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <meta name="description" content="plain text accounting, made easy">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="theme-color" content="#ffffff" />

        <link rel="icon" href="../favicon.svg">
        <link rel="shortcut icon" href="../favicon.png">
        <link rel="stylesheet" href="../css/variables.css">
        <link rel="stylesheet" href="../css/general.css">
        <link rel="stylesheet" href="../css/chrome.css">
        <link rel="stylesheet" href="../css/print.css" media="print">

        <!-- Fonts -->
        <link rel="stylesheet" href="../FontAwesome/css/font-awesome.css">
        <link rel="stylesheet" href="../fonts/fonts.css">

        <!-- Highlight.js Stylesheets -->
        <link rel="stylesheet" href="../highlight.css">
        <link rel="stylesheet" href="../tomorrow-night.css">
        <link rel="stylesheet" href="../ayu-highlight.css">

        <style>
        div.docversions {height: 3em;}
        </style>
        <!-- Custom theme stylesheets -->
        <link rel="stylesheet" href="../highslide/highslide.css">
        <link rel="stylesheet" href="../css/site.css">

    </head>
    <body>
        <!-- Provide site root to javascript -->
        <script type="text/javascript">
            var path_to_root = "../";
            // var default_theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "navy" : "light";
            var default_theme = "light";
        </script>

        <!-- Work around some values being stored in localStorage wrapped in quotes -->
        <script type="text/javascript">
            try {
                var theme = localStorage.getItem('mdbook-theme');
                var sidebar = localStorage.getItem('mdbook-sidebar');

                if (theme.startsWith('"') && theme.endsWith('"')) {
                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));
                }

                if (sidebar.startsWith('"') && sidebar.endsWith('"')) {
                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));
                }
            } catch (e) { }
        </script>

        <!-- Set the theme before any content is loaded, prevents flash -->
        <script type="text/javascript">
            var theme;
            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }
            if (theme === null || theme === undefined) { theme = default_theme; }
            var html = document.querySelector('html');
            html.classList.remove('no-js')
            html.classList.remove('light')
            html.classList.add(theme);
            html.classList.add('js');
        </script>

        <!-- Hide / unhide sidebar before it is displayed -->
        <script type="text/javascript">
            var html = document.querySelector('html');
            var sidebar = 'hidden';
            if (document.body.clientWidth >= 1080) {
                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }
                sidebar = sidebar || 'visible';
            }
            html.classList.remove('sidebar-visible');
            html.classList.add("sidebar-" + sidebar);
        </script>

        <script type="text/javascript" src="js/jquery-1.11.0.min.js"></script>
        <script type="text/javascript" src="js/site.js"></script>

        <nav id="sidebar" class="sidebar" aria-label="Table of contents">
            <div class="sidebar-scrollbox">
                <ol class="chapter"><li class="chapter-item affix "><li class="part-title">HLEDGER.ORG</li><li class="chapter-item "><a href="../index.html">Home</a></li><li class="chapter-item "><a href="../news.html">News</a></li><li class="chapter-item "><a href="../faq.html">FAQ</a></li><li class="chapter-item "><a href="../videos.html">Videos/Talks</a></li><li class="chapter-item "><a href="../install.html">Install</a></li><li class="chapter-item "><a href="../release-notes.html">Release notes</a></li><li class="chapter-item "><a href="../start.html">Get Started</a></li><li class="chapter-item expanded "><a href="../1.32/hledger.html" class="active">hledger manual (1.32)</a></li><li class="chapter-item "><a href="../1.32/hledger-ui.html">hledger-ui manual (1.32)</a></li><li class="chapter-item "><a href="../1.32/hledger-web.html">hledger-web manual (1.32)</a></li><li class="chapter-item "><a href="../scripts.html">Scripts and add-ons</a></li><li class="chapter-item "><a href="../cookbook.html">Cookbook</a></li><li class="chapter-item "><a href="../support.html">Discussion/Support</a></li><li class="chapter-item "><a href="../climate-impact.html">Climate impact</a></li><li class="chapter-item affix "><li class="part-title">DEVELOPERS</li><li class="chapter-item "><a href="../CONTRIBUTING.html">Contributor Quick Start</a></li><li class="chapter-item "><a href="../LINKS.html">Developer links</a></li><li class="chapter-item "><a href="../dev.html">Developer docs</a></li><li class="chapter-item "><a href="../CREDITS.html">CREDITS</a></li><li class="chapter-item affix "><li class="part-title">PROJECT FINANCE</li><li class="chapter-item "><a href="../sponsor.html">Sponsor hledger</a></li><li class="chapter-item "><a href="../REGRESSIONS.html">Regression bounty</a></li><li class="chapter-item "><a href="../financerepo.html">Financial reports</a></li><li class="chapter-item "><a href="../FINANCE.html">FINANCE notes</a></li><li class="chapter-item affix "><li class="part-title">ALL PAGES</li><li class="chapter-item "><a href="../accounting.html">Accounting</a></li><li class="chapter-item "><a href="../balancing-the-accounting-equation.html">Balancing the accounting equation</a></li><li class="chapter-item "><a href="../loans.html">Borrowing and lending</a></li><li class="chapter-item "><a href="../budgeting-and-forecasting.html">Budgeting and Forecasting (2018)</a></li><li class="chapter-item "><a href="../budgeting.html">Budgeting</a></li><li class="chapter-item "><a href="../roi.html">Calculate return on investment</a></li><li class="chapter-item "><a href="../gain.html">Calculate unrealized gain</a></li><li class="chapter-item "><a href="../change-account-name-separator.html">Change account name separator</a></li><li class="chapter-item "><a href="../charts.html">Charts and Graphs</a></li><li class="chapter-item "><a href="../checking-for-errors.html">Checking for errors</a></li><li class="chapter-item "><a href="../climate-impact.html">Climate impact</a></li><li class="chapter-item "><a href="../command-line-completion.html">Command line completion</a></li><li class="chapter-item "><a href="../common-journal-entries.html">Common journal entries</a></li><li class="chapter-item "><a href="../workflows.html">Workflows</a></li><li class="chapter-item "><a href="../cost-notation.html">Cost notation</a></li><li class="chapter-item "><a href="../create-a-journal.html">Create a journal</a></li><li class="chapter-item "><a href="../currency-conversion.html">Currency conversion</a></li><li class="chapter-item "><a href="../conversion2.html">Currency conversion 2</a></li><li class="chapter-item "><a href="../editors.html">Editor configuration</a></li><li class="chapter-item "><a href="../export.html">Exporting from hledger</a></li><li class="chapter-item "><a href="../faq.html">FAQ</a></li><li class="chapter-item "><a href="../features.html">Features</a></li><li class="chapter-item "><a href="../forecasting.html">Forecasting</a></li><li class="chapter-item "><a href="../foreign-trip-expenses.html">Foreign trip expenses</a></li><li class="chapter-item "><a href="../start.html">Get Started</a></li><li class="chapter-item "><a href="../index.html">Home</a></li><li class="chapter-item "><a href="../how-to-record.html">How to record journal entries</a></li><li class="chapter-item "><a href="../how-to-figure-out.html">How to figure out journal entries</a></li><li class="chapter-item "><a href="../import-csv.html">Importing CSV data</a></li><li class="chapter-item "><a href="../install.html">Install</a></li><li class="chapter-item "><a href="../investment-accounting-features.html">Investment Accounting Feature Ladder</a></li><li class="chapter-item "><a href="../invoicing.html">Invoicing</a></li><li class="chapter-item "><a href="../mobile.html">Mobile apps</a></li><li class="chapter-item "><a href="../mockups.html">Mockups</a></li><li class="chapter-item "><a href="../multicurrency-tutorial.html">Multicurrency tutorial (2018)</a></li><li class="chapter-item "><a href="../news.html">News</a></li><li class="chapter-item "><a href="../project-accounting.html">Project accounting</a></li><li class="chapter-item "><a href="../2-minute-quick-start.html">2 minute quick start</a></li><li class="chapter-item "><a href="../5-minute-quick-start.html">5 minute quick start</a></li><li class="chapter-item "><a href="../release-notes.html">Release notes</a></li><li class="chapter-item "><a href="../report-examples.html">Report examples</a></li><li class="chapter-item "><a href="../reporting-version-control-stats.html">Reporting version control stats</a></li><li class="chapter-item "><a href="../rewrite-account-names.html">Rewrite account names</a></li><li class="chapter-item "><a href="../rewrite-commodity-symbols.html">Rewrite commodity symbols</a></li><li class="chapter-item "><a href="../save-frequently-used-options.html">Save frequently used options</a></li><li class="chapter-item "><a href="../scripts.html">Scripts and add-ons</a></li><li class="chapter-item "><a href="../scripting.html">Scripting hledger</a></li><li class="chapter-item "><a href="../simons-setup.html">Simon's setup notes</a></li><li class="chapter-item "><a href="../time-and-task-dashboard.html">SM's time & task dashboard</a></li><li class="chapter-item "><a href="../sponsor.html">Sponsor</a></li><li class="chapter-item "><a href="../tags-tutorial.html">Tags tutorial</a></li><li class="chapter-item "><a href="../tax-reporting-setup.html">A tax reporting setup</a></li><li class="chapter-item "><a href="../time-to-money.html">Converting time to money</a></li><li class="chapter-item "><a href="../time-planning.html">Time planning</a></li><li class="chapter-item "><a href="../track-changes-with-version-control.html">Track changes with version control</a></li><li class="chapter-item "><a href="../track-investments.html">Track investments (2017)</a></li><li class="chapter-item "><a href="../investments.html">Track investments (2020)</a></li><li class="chapter-item "><a href="../inventory.html">Tracking and selling inventory</a></li><li class="chapter-item "><a href="../basics.html">Tutorial: hledger basics</a></li><li class="chapter-item "><a href="../ui.html">Tutorial: hledger-ui</a></li><li class="chapter-item "><a href="../web.html">Tutorial: hledger-web</a></li><li class="chapter-item "><a href="../videos.html">Videos/Talks</a></li><li class="chapter-item "><a href="../visualising2023.html">Visualising discussion 2023</a></li><li class="chapter-item "><a href="../beancount.html">hledger and Beancount</a></li><li class="chapter-item "><a href="../dsq.html">hledger and dsq/DataStation</a></li><li class="chapter-item "><a href="../just.html">hledger and just</a></li><li class="chapter-item "><a href="../gnucash.html">hledger and GnuCash</a></li><li class="chapter-item "><a href="../ledger.html">hledger and Ledger</a></li><li class="chapter-item "><a href="../obsidian.html">hledger and Obsidian</a></li><li class="chapter-item "><a href="../paisa.html">hledger and Paisa</a></li><li class="chapter-item "><a href="../postgres.html">hledger and Postgres</a></li><li class="chapter-item "><a href="../quicken.html">hledger and Quicken / Quickbooks</a></li><li class="chapter-item "><a href="../sqlite.html">hledger and SQLite</a></li><li class="chapter-item "><a href="../ultorg.html">hledger and Ultorg</a></li><li class="chapter-item "><a href="../ynab.html">hledger and YNAB</a></li><li class="chapter-item "><a href="../hledgermatic.html">hledgermatic</a></li><li class="chapter-item "><a href="../dev/hledger.html">hledger manual (dev)</a></li><li class="chapter-item "><a href="../dev/hledger-ui.html">hledger-ui manual (dev)</a></li><li class="chapter-item "><a href="../dev/hledger-web.html">hledger-web manual (dev)</a></li><li class="chapter-item "><a href="../hledger-web-tips.html">hledger-web tips</a></li><li class="chapter-item "><a href="../ACHIEVEMENTS.html">ACHIEVEMENTS</a></li><li class="chapter-item "><a href="../BACKLOG.html">BACKLOG</a></li><li class="chapter-item "><a href="../BENCHMARKS.html">BENCHMARKS</a></li><li class="chapter-item "><a href="../CHANGELOGS.html">CHANGELOGS</a></li><li class="chapter-item "><a href="../CODE.html">CODE</a></li><li class="chapter-item "><a href="../COMMITS.html">COMMITS</a></li><li class="chapter-item "><a href="../CREDITS.html">CREDITS</a></li><li class="chapter-item "><a href="../CONTRIBUTING.html">Contributor Quick Start</a></li><li class="chapter-item "><a href="../LINKS.html">Developer links</a></li><li class="chapter-item "><a href="../dev.html">Developer docs</a></li><li class="chapter-item "><a href="../DECISIONS.html">DECISIONS</a></li><li class="chapter-item "><a href="../DOCS.html">DOCS</a></li><li class="chapter-item "><a href="../ERRORS.html">ERRORS</a></li><li class="chapter-item "><a href="../EXAMPLES.html">EXAMPLES</a></li><li class="chapter-item "><a href="../FILES.html">FILES</a></li><li class="chapter-item "><a href="../FINANCE.html">FINANCE</a></li><li class="chapter-item "><a href="../ISSUES.html">ISSUES</a></li><li class="chapter-item "><a href="../MAKE.html">MAKE</a></li><li class="chapter-item "><a href="../mockups.html">Mockups</a></li><li class="chapter-item "><a href="../PULLREQUESTS.html">PULLREQUESTS</a></li><li class="chapter-item "><a href="../dev-README.html">README</a></li><li class="chapter-item "><a href="../REGRESSIONS.html">REGRESSIONS</a></li><li class="chapter-item "><a href="../RELEASING.html">RELEASING</a></li><li class="chapter-item "><a href="../REPOS.html">REPOS</a></li><li class="chapter-item "><a href="../ROADMAP.html">ROADMAP</a></li><li class="chapter-item "><a href="../SHAKE.html">SHAKE</a></li><li class="chapter-item "><a href="../TESTS.html">TESTS</a></li><li class="chapter-item "><a href="../TODO.html">TODO</a></li><li class="chapter-item "><a href="../VERSIONNUMBERS.html">VERSIONNUMBERS</a></li><li class="chapter-item "><a href="../DEVWORKFLOWS.html">DEVWORKFLOWS</a></li></ol>
            </div>
            <div id="sidebar-resize-handle" class="sidebar-resize-handle"></div>
        </nav>

        <div id="page-wrapper" class="page-wrapper">

            <div class="page">
                                <div id="menu-bar-hover-placeholder"></div>
                <div id="menu-bar" class="menu-bar sticky bordered">
                    <div class="left-buttons">
                        <a href="https://github.com/simonmichael/hledger_site/commits/master" accesskey="2" title="what's new"></a>
                        <button id="sidebar-toggle" class="icon-button" type="button" title="Toggle Table of Contents" aria-label="Toggle Table of Contents" aria-controls="sidebar" accesskey="s">
                            <i class="fa fa-bars"></i>
                        </button>
                        <button id="theme-toggle" class="icon-button" type="button" title="Change theme" aria-label="Change theme" aria-haspopup="true" aria-expanded="false" aria-controls="theme-list" accesskey="t">
                            <i class="fa fa-paint-brush"></i>
                        </button>
                        <ul id="theme-list" class="theme-popup" aria-label="Themes" role="menu">
                            <li role="none"><button role="menuitem" class="theme" id="light">Light (default)</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="rust">Rust</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="coal">Coal</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="navy">Navy</button></li>
                            <li role="none"><button role="menuitem" class="theme" id="ayu">Ayu</button></li>
                        </ul>
                        <button id="search-toggle" class="icon-button" type="button" title="Search. (Shortkey: s)" aria-label="Toggle Searchbar" aria-expanded="false" aria-keyshortcuts="S" aria-controls="searchbar" accesskey="/">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>

                    <h1 class="menu-title">
                        <a href="/" title="hledger home" accesskey="1" style="text-decoration:none; color:inherit;">hledger</a>
                    </h1>

                    <div class="right-buttons">
                        <a href="../print.html" title="Print this book" aria-label="Print this book">
                            <i id="print-button" class="fa fa-print"></i>
                        </a>
                        <a href="https://github.com/simonmichael/hledger_site" title="Git repository" aria-label="Git repository">
                            <i id="git-repository-button" class="fa fa-github"></i>
                        </a>
                    </div>
                </div>

                <div id="search-wrapper" class="hidden">
                    <form id="searchbar-outer" class="searchbar-outer">
                        <input type="search" name="search" id="searchbar" name="searchbar" placeholder="Search this book ..." aria-controls="searchresults-outer" aria-describedby="searchresults-header">
                    </form>
                    <div id="searchresults-outer" class="searchresults-outer hidden">
                        <div id="searchresults-header" class="searchresults-header"></div>
                        <ul id="searchresults">
                        </ul>
                    </div>
                </div>

                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->
                <script type="text/javascript">
                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');
                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');
                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {
                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);
                    });
                </script>

                <div id="content" class="content">
                    <main>
                        <!-- Generated by "Shake webmanuals" from hledger/hledger.m4.md doc/common.m4 hledger/Hledger/Cli/Commands/commands.m4 hledger/.version.m4 hledger/.date.m4 -->
<div class="docversions"></div>
<h1 id="hledger"><a class="header" href="#hledger">hledger</a></h1>
<div class="pagetoc manual">
<ul>
<li><a href="#name">NAME</a></li>
<li><a href="#synopsis">SYNOPSIS</a></li>
<li><a href="#description">DESCRIPTION</a></li>
<li><a href="#part-1-user-interface">PART 1: USER INTERFACE</a></li>
<li><a href="#input">Input</a>
<ul>
<li><a href="#data-formats">Data formats</a></li>
<li><a href="#standard-input">Standard input</a></li>
<li><a href="#multiple-files">Multiple files</a></li>
<li><a href="#strict-mode">Strict mode</a></li>
</ul>
</li>
<li><a href="#commands">Commands</a>
<ul>
<li><a href="#add-on-commands">Add-on commands</a></li>
</ul>
</li>
<li><a href="#options">Options</a>
<ul>
<li><a href="#general-help-options">General help options</a></li>
<li><a href="#general-input-options">General input options</a></li>
<li><a href="#general-reporting-options">General reporting options</a></li>
</ul>
</li>
<li><a href="#command-line-tips">Command line tips</a>
<ul>
<li><a href="#option-repetition">Option repetition</a></li>
<li><a href="#special-characters">Special characters</a></li>
<li><a href="#unicode-characters">Unicode characters</a></li>
<li><a href="#regular-expressions">Regular expressions</a></li>
<li><a href="#argument-files">Argument files</a></li>
</ul>
</li>
<li><a href="#output">Output</a>
<ul>
<li><a href="#output-destination">Output destination</a></li>
<li><a href="#output-format">Output format</a></li>
<li><a href="#commodity-styles">Commodity styles</a></li>
<li><a href="#colour">Colour</a></li>
<li><a href="#box-drawing">Box-drawing</a></li>
<li><a href="#paging">Paging</a></li>
<li><a href="#debug-output">Debug output</a></li>
</ul>
</li>
<li><a href="#environment">Environment</a></li>
<li><a href="#part-2-data-formats">PART 2: DATA FORMATS</a></li>
<li><a href="#journal">Journal</a>
<ul>
<li><a href="#journal-cheatsheet">Journal cheatsheet</a></li>
<li><a href="#about-journal-format">About journal format</a></li>
<li><a href="#comments">Comments</a></li>
<li><a href="#transactions">Transactions</a></li>
<li><a href="#dates">Dates</a></li>
<li><a href="#status">Status</a></li>
<li><a href="#code">Code</a></li>
<li><a href="#description-1">Description</a></li>
<li><a href="#transaction-comments">Transaction comments</a></li>
<li><a href="#postings">Postings</a></li>
<li><a href="#account-names">Account names</a></li>
<li><a href="#amounts">Amounts</a></li>
<li><a href="#costs">Costs</a></li>
<li><a href="#balance-assertions">Balance assertions</a></li>
<li><a href="#posting-comments">Posting comments</a></li>
<li><a href="#tags">Tags</a></li>
<li><a href="#directives">Directives</a></li>
<li><a href="#account-directive"><code>account</code> directive</a></li>
<li><a href="#alias-directive"><code>alias</code> directive</a></li>
<li><a href="#commodity-directive"><code>commodity</code> directive</a></li>
<li><a href="#decimal-mark-directive"><code>decimal-mark</code> directive</a></li>
<li><a href="#include-directive"><code>include</code> directive</a></li>
<li><a href="#p-directive"><code>P</code> directive</a></li>
<li><a href="#payee-directive"><code>payee</code> directive</a></li>
<li><a href="#tag-directive"><code>tag</code> directive</a></li>
<li><a href="#periodic-transactions">Periodic transactions</a></li>
<li><a href="#auto-postings">Auto postings</a></li>
<li><a href="#other-syntax">Other syntax</a></li>
</ul>
</li>
<li><a href="#csv">CSV</a>
<ul>
<li><a href="#csv-rules-cheatsheet">CSV rules cheatsheet</a></li>
<li><a href="#source"><code>source</code></a></li>
<li><a href="#separator"><code>separator</code></a></li>
<li><a href="#skip"><code>skip</code></a></li>
<li><a href="#date-format"><code>date-format</code></a></li>
<li><a href="#timezone"><code>timezone</code></a></li>
<li><a href="#newest-first"><code>newest-first</code></a></li>
<li><a href="#intra-day-reversed"><code>intra-day-reversed</code></a></li>
<li><a href="#decimal-mark"><code>decimal-mark</code></a></li>
<li><a href="#fields-list"><code>fields</code> list</a></li>
<li><a href="#field-assignment">Field assignment</a></li>
<li><a href="#field-names">Field names</a></li>
<li><a href="#if-block"><code>if</code> block</a></li>
<li><a href="#matchers">Matchers</a></li>
<li><a href="#if-table"><code>if</code> table</a></li>
<li><a href="#balance-type"><code>balance-type</code></a></li>
<li><a href="#include"><code>include</code></a></li>
<li><a href="#working-with-csv">Working with CSV</a></li>
<li><a href="#csv-rules-examples">CSV rules examples</a></li>
</ul>
</li>
<li><a href="#timeclock">Timeclock</a></li>
<li><a href="#timedot">Timedot</a>
<ul>
<li><a href="#timedot-examples">Timedot examples</a></li>
</ul>
</li>
<li><a href="#part-3-reporting-concepts">PART 3: REPORTING CONCEPTS</a></li>
<li><a href="#amount-formatting-parseability">Amount formatting, parseability</a></li>
<li><a href="#time-periods">Time periods</a>
<ul>
<li><a href="#report-start--end-date">Report start &amp; end date</a></li>
<li><a href="#smart-dates">Smart dates</a></li>
<li><a href="#report-intervals">Report intervals</a></li>
<li><a href="#date-adjustment">Date adjustment</a></li>
<li><a href="#period-expressions">Period expressions</a></li>
</ul>
</li>
<li><a href="#depth">Depth</a></li>
<li><a href="#queries">Queries</a>
<ul>
<li><a href="#query-types">Query types</a></li>
<li><a href="#combining-query-terms">Combining query terms</a></li>
<li><a href="#queries-and-command-options">Queries and command options</a></li>
<li><a href="#queries-and-valuation">Queries and valuation</a></li>
<li><a href="#querying-with-account-aliases">Querying with account aliases</a></li>
<li><a href="#querying-with-cost-or-value">Querying with cost or value</a></li>
</ul>
</li>
<li><a href="#pivoting">Pivoting</a></li>
<li><a href="#generating-data">Generating data</a></li>
<li><a href="#forecasting">Forecasting</a>
<ul>
<li><a href="#--forecast">--forecast</a></li>
<li><a href="#inspecting-forecast-transactions">Inspecting forecast transactions</a></li>
<li><a href="#forecast-reports">Forecast reports</a></li>
<li><a href="#forecast-tags">Forecast tags</a></li>
<li><a href="#forecast-period-in-detail">Forecast period, in detail</a></li>
<li><a href="#forecast-troubleshooting">Forecast troubleshooting</a></li>
</ul>
</li>
<li><a href="#budgeting">Budgeting</a></li>
<li><a href="#cost-reporting">Cost reporting</a>
<ul>
<li><a href="#recording-costs">Recording costs</a></li>
<li><a href="#reporting-at-cost">Reporting at cost</a></li>
<li><a href="#equity-conversion-postings">Equity conversion postings</a></li>
<li><a href="#inferring-equity-conversion-postings">Inferring equity conversion postings</a></li>
<li><a href="#combining-costs-and-equity-conversion-postings">Combining costs and equity conversion postings</a></li>
<li><a href="#requirements-for-detecting-equity-conversion-postings">Requirements for detecting equity conversion postings</a></li>
<li><a href="#infer-cost-and-equity-by-default-">Infer cost and equity by default ?</a></li>
</ul>
</li>
<li><a href="#value-reporting">Value reporting</a>
<ul>
<li><a href="#-v-value">-V: Value</a></li>
<li><a href="#-x-value-in-specified-commodity">-X: Value in specified commodity</a></li>
<li><a href="#valuation-date">Valuation date</a></li>
<li><a href="#finding-market-price">Finding market price</a></li>
<li><a href="#--infer-market-prices-market-prices-from-transactions">--infer-market-prices: market prices from transactions</a></li>
<li><a href="#valuation-commodity">Valuation commodity</a></li>
<li><a href="#simple-valuation-examples">Simple valuation examples</a></li>
<li><a href="#--value-flexible-valuation">--value: Flexible valuation</a></li>
<li><a href="#more-valuation-examples">More valuation examples</a></li>
<li><a href="#interaction-of-valuation-and-queries">Interaction of valuation and queries</a></li>
<li><a href="#effect-of-valuation-on-reports">Effect of valuation on reports</a></li>
</ul>
</li>
<li><a href="#part-4-commands">PART 4: COMMANDS</a>
<ul>
<li><a href="#commands-overview">Commands overview</a></li>
<li><a href="#accounts">accounts</a></li>
<li><a href="#activity">activity</a></li>
<li><a href="#add">add</a></li>
<li><a href="#aregister">aregister</a></li>
<li><a href="#balance">balance</a></li>
<li><a href="#balancesheet">balancesheet</a></li>
<li><a href="#balancesheetequity">balancesheetequity</a></li>
<li><a href="#cashflow">cashflow</a></li>
<li><a href="#check">check</a></li>
<li><a href="#close">close</a></li>
<li><a href="#codes">codes</a></li>
<li><a href="#commodities">commodities</a></li>
<li><a href="#demo">demo</a></li>
<li><a href="#descriptions">descriptions</a></li>
<li><a href="#diff">diff</a></li>
<li><a href="#files">files</a></li>
<li><a href="#help-1">help</a></li>
<li><a href="#import">import</a></li>
<li><a href="#incomestatement">incomestatement</a></li>
<li><a href="#notes">notes</a></li>
<li><a href="#payees">payees</a></li>
<li><a href="#prices">prices</a></li>
<li><a href="#print">print</a></li>
<li><a href="#register">register</a></li>
<li><a href="#rewrite">rewrite</a></li>
<li><a href="#roi">roi</a></li>
<li><a href="#stats">stats</a></li>
<li><a href="#tags-1">tags</a></li>
<li><a href="#test">test</a></li>
</ul>
</li>
<li><a href="#part-5-common-tasks">PART 5: COMMON TASKS</a>
<ul>
<li><a href="#getting-help">Getting help</a></li>
<li><a href="#constructing-command-lines">Constructing command lines</a></li>
<li><a href="#starting-a-journal-file">Starting a journal file</a></li>
<li><a href="#setting-ledger_file">Setting LEDGER_FILE</a></li>
<li><a href="#setting-opening-balances">Setting opening balances</a></li>
<li><a href="#recording-transactions">Recording transactions</a></li>
<li><a href="#reconciling">Reconciling</a></li>
<li><a href="#reporting">Reporting</a></li>
<li><a href="#migrating-to-a-new-file">Migrating to a new file</a></li>
</ul>
</li>
<li><a href="#bugs">BUGS</a>
<ul>
<li><a href="#troubleshooting">Troubleshooting</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="name"><a class="header" href="#name">NAME</a></h2>
<p>hledger - robust, friendly plain text accounting (CLI version)</p>
<h2 id="synopsis"><a class="header" href="#synopsis">SYNOPSIS</a></h2>
<p><code>hledger</code><br />
<code>hledger COMMAND     [OPTS] [ARGS]</code><br />
<code>hledger ADDONCMD -- [OPTS] [ARGS]</code></p>
<h2 id="description"><a class="header" href="#description">DESCRIPTION</a></h2>
<p><em>[Quick reference links: <a href="#options">Options</a>,
<a href="#part-4-commands">Commands</a>, <a href="#queries">Queries</a>, <a href="#regular-expressions">Regular
expressions</a>, <a href="#period-expressions">Period
expressions</a>, <a href="#journal">Journal</a>,
<a href="#directives">Directives</a>, <a href="#csv">CSV</a>, <a href="#timeclock">Timeclock</a>,
<a href="#timedot">Timedot</a>, <a href="#common-tasks">Common tasks</a>]</em></p>
<p>hledger is a robust, user-friendly, cross-platform set of programs for
tracking money, time, or any other commodity, using double-entry
accounting and a simple, editable file format. hledger is inspired by
and largely compatible with ledger(1), and largely interconvertible with
beancount(1).</p>
<p>This manual is for hledger's command line interface, version 1.32.1. It
also describes the common options, file formats and concepts used by all
hledger programs. It might accidentally teach you some
bookkeeping/accounting as well! You don't need to know everything in
here to use hledger productively, but when you have a question about
functionality, this doc should answer it. It is detailed, so do skip
ahead or skim when needed. You can read it on hledger.org, or as an info
manual or man page on your system. You can also get it from hledger
itself with<br />
<code>hledger --man</code>, <code>hledger --info</code> or <code>hledger help [TOPIC]</code>.</p>
<p>The main function of the hledger CLI is to read plain text files
describing financial transactions, crunch the numbers, and print a
useful report on the terminal (or save it as HTML, CSV, JSON or SQL).
Many reports are available, as subcommands. hledger will also detect
other <code>hledger-*</code> executables as extra subcommands.</p>
<p>hledger usually reads from (and appends to) a journal file specified by
the <code>LEDGER_FILE</code> environment variable (defaulting to
<code>$HOME/.hledger.journal</code>); or you can specify files with <code>-f</code> options.
It can also read timeclock files, timedot files, or any CSV/SSV/TSV file
with a date field.</p>
<p>Here is a small journal file describing one transaction:</p>
<pre><code class="language-journal">2015-10-16 bought food
  expenses:food          $10
  assets:cash
</code></pre>
<p>Transactions are dated movements of money (etc.) between two or more
<em>accounts</em>: bank accounts, your wallet, revenue/expense categories,
people, etc. You can choose any account names you wish, using <code>:</code> to
indicate subaccounts. There must be at least two spaces between account
name and amount. Positive amounts are inflow to that account (<em>debit</em>),
negatives are outflow from it (<em>credit</em>). (Some reports show revenue,
liability and equity account balances as negative numbers as a result;
this is normal.)</p>
<p>hledger's add command can help you add transactions, or you can install
other data entry UIs like hledger-web or hledger-iadd. For more
extensive/efficient changes, use a text editor: Emacs + ledger-mode,
VIM + vim-ledger, or VS Code + hledger-vscode are some good choices (see
<a href="https://hledger.org/editors.html">https://hledger.org/editors.html</a>).</p>
<p>To get started, run <code>hledger add</code> and follow the prompts, or save some
entries like the above in <code>$HOME/.hledger.journal</code>, then try commands
like:<br />
<code>hledger print -x</code><br />
<code>hledger aregister assets</code><br />
<code>hledger balance</code><br />
<code>hledger balancesheet</code><br />
<code>hledger incomestatement</code>.<br />
Run <code>hledger</code> to list the commands. See also the &quot;Starting a journal
file&quot; and &quot;Setting opening balances&quot; sections in <a href="#part-5-common-tasks">PART 5: COMMON
TASKS</a>.</p>
<h2 id="part-1-user-interface"><a class="header" href="#part-1-user-interface">PART 1: USER INTERFACE</a></h2>
<h2 id="input"><a class="header" href="#input">Input</a></h2>
<p>hledger reads one or more data files, each time you run it. You can
specify a file with <code>-f</code>, like so</p>
<pre><code class="language-cli">$ hledger -f FILE print
</code></pre>
<p>Files are most often in hledger's journal format, with the <code>.journal</code>
file extension (<code>.hledger</code> or <code>.j</code> also work); these files describe
transactions, like an accounting general journal.</p>
<p>When no file is specified, hledger looks for <code>.hledger.journal</code> in your
home directory.</p>
<p>But most people prefer to keep financial files in a dedicated folder,
perhaps with version control. Also, starting a new journal file each
year is common (it's not required, but helps keep things fast and
organised). So we usually configure a different journal file, by setting
the <code>LEDGER_FILE</code> environment variable, to something like
<code>~/finance/2023.journal</code>. For more about how to do that on your system,
see <a href="#setting-ledger_file">Common tasks &gt; Setting LEDGER_FILE</a>.</p>
<h3 id="data-formats"><a class="header" href="#data-formats">Data formats</a></h3>
<p>Usually the data file is in hledger's journal format, but it can be in
any of the supported file formats, which currently are:</p>
<div class="table-wrapper"><table><thead><tr><th>Reader:</th><th>Reads:</th><th>Used for file extensions:</th></tr></thead><tbody>
<tr><td><a href="#journal"><code>journal</code></a></td><td>hledger journal files and some Ledger journals, for transactions</td><td><code>.journal</code> <code>.j</code> <code>.hledger</code> <code>.ledger</code></td></tr>
<tr><td><a href="#timeclock"><code>timeclock</code></a></td><td>timeclock files, for precise time logging</td><td><code>.timeclock</code></td></tr>
<tr><td><a href="#timedot"><code>timedot</code></a></td><td>timedot files, for approximate time logging</td><td><code>.timedot</code></td></tr>
<tr><td><a href="#csv"><code>csv</code></a></td><td>CSV/SSV/TSV/character-separated values, for data import</td><td><code>.csv</code> <code>.ssv</code> <code>.tsv</code> <code>.csv.rules</code> <code>.ssv.rules</code> <code>.tsv.rules</code></td></tr>
</tbody></table>
</div>
<p>These formats are described in more detail below.</p>
<p>hledger detects the format automatically based on the file extensions
shown above. If it can't recognise the file extension, it assumes
<code>journal</code> format. So for non-journal files, it's important to use a
recognised file extension, so as to either read successfully or to show
relevant error messages.</p>
<p>You can also force a specific reader/format by prefixing the file path
with the format and a colon. Eg, to read a .dat file as csv format:</p>
<pre><code class="language-cli">$ hledger -f csv:/some/csv-file.dat stats
</code></pre>
<h3 id="standard-input"><a class="header" href="#standard-input">Standard input</a></h3>
<p>The file name <code>-</code> means standard input:</p>
<pre><code class="language-cli">$ cat FILE | hledger -f- print
</code></pre>
<p>If reading non-journal data in this way, you'll need to add a file
format prefix, like:</p>
<pre><code class="language-cli">$ echo 'i 2009/13/1 08:00:00' | hledger print -f timeclock:-
</code></pre>
<h3 id="multiple-files"><a class="header" href="#multiple-files">Multiple files</a></h3>
<p>You can specify multiple <code>-f</code> options, to read multiple files as one big
journal. When doing this, note that certain features (described below)
will be affected:</p>
<ul>
<li><a href="#balance-assertions">Balance assertions</a> will not see the effect of
transactions in previous files. (Usually this doesn't matter as
each file will set the corresponding opening balances.)</li>
<li>Some <a href="#directives">directives</a> will not affect previous or
subsequent files.</li>
</ul>
<p>If needed, you can work around these by using a single parent file which
<a href="#include-directive">includes</a> the others, or concatenating the files
into one, eg: <code>cat a.journal b.journal | hledger -f- CMD</code>.</p>
<h3 id="strict-mode"><a class="header" href="#strict-mode">Strict mode</a></h3>
<p>hledger checks input files for valid data. By default, the most
important errors are detected, while still accepting easy journal files
without a lot of declarations:</p>
<ul>
<li>Are the input files parseable, with valid syntax ?</li>
<li>Are all transactions balanced ?</li>
<li>Do all balance assertions pass ?</li>
</ul>
<p>With the <code>-s</code>/<code>--strict</code> flag, additional checks are performed:</p>
<ul>
<li>Are all accounts posted to, declared with an <code>account</code> directive ?
(<a href="#account-error-checking">Account error checking</a>)</li>
<li>Are all commodities declared with a <code>commodity</code> directive ?
(<a href="#commodity-error-checking">Commodity error checking</a>)</li>
<li>Are all commodity conversions declared explicitly ?</li>
</ul>
<p>You can use the <a href="#check">check</a> command to run individual checks -- the
ones listed above and some more.</p>
<h2 id="commands"><a class="header" href="#commands">Commands</a></h2>
<p>hledger provides various subcommands for getting things done. Most of
these commands do not change the journal file; they just read it and
output a report. A few commands assist with adding data and file
management.</p>
<p>To show the commands list, run <code>hledger</code> with no arguments. The commands
are described in detail in <a href="#part-4-commands">PART 4: COMMANDS</a>, below.</p>
<p>To use a particular command, run <code>hledger CMD [CMDOPTS] [CMDARGS]</code>,</p>
<ul>
<li>
<p>CMD is the full command name, or its standard abbreviation shown in
the commands list, or any unambiguous prefix of the name.</p>
</li>
<li>
<p>CMDOPTS are command-specific options, if any. Command-specific
options must be written after the command name. Eg:
<code>hledger print -x</code>.</p>
</li>
<li>
<p>CMDARGS are additional arguments to the command, if any. Most
hledger commands accept arguments representing a <a href="#queries">query</a>,
to limit the data in some way. Eg: <code>hledger reg assets:checking</code>.</p>
</li>
</ul>
<p>To list a command's options, arguments, and documentation in the
terminal, run <code>hledger CMD -h</code>. Eg: <code>hledger bal -h</code>.</p>
<h3 id="add-on-commands"><a class="header" href="#add-on-commands">Add-on commands</a></h3>
<p>In addition to the built-in commands, you can install <em>add-on commands</em>:
programs or scripts named &quot;hledger-SOMETHING&quot;, which will also appear
in hledger's commands list. If you used the <a href="https://hledger.org/install.html#build-methods">hledger-install
script</a>, you will have
several add-ons installed already. Some more can be found in hledger's
bin/ directory, documented at <a href="https://hledger.org/scripts.html">https://hledger.org/scripts.html</a>.</p>
<p>More precisely, add-on commands are programs or scripts in your shell's
PATH, whose name starts with &quot;hledger-&quot; and ends with no extension or
a recognised extension (&quot;.bat&quot;, &quot;.com&quot;, &quot;.exe&quot;, &quot;.hs&quot;, &quot;.js&quot;,
&quot;.lhs&quot;, &quot;.lua&quot;, &quot;.php&quot;, &quot;.pl&quot;, &quot;.py&quot;, &quot;.rb&quot;, &quot;.rkt&quot;, or
&quot;.sh&quot;), and (on unix and mac) which has executable permission for the
current user.</p>
<p>You can run add-on commands using hledger, much like built-in commands:
<code>hledger ADDONCMD [-- ADDONCMDOPTS] [ADDONCMDARGS]</code>. But note the double
hyphen argument, required before add-on-specific options. Eg:
<code>hledger ui -- --watch</code> or <code>hledger web -- --serve</code>. If this causes
difficulty, you can always run the add-on directly, without using
<code>hledger</code>: <code>hledger-ui --watch</code> or <code>hledger-web --serve</code>.</p>
<h2 id="options"><a class="header" href="#options">Options</a></h2>
<p>Run <code>hledger -h</code> to see general command line help, and general options
which are common to most hledger commands. These options can be written
anywhere on the command line. They can be grouped into help, input, and
reporting options:</p>
<h3 id="general-help-options"><a class="header" href="#general-help-options">General help options</a></h3>
<p><code>-h --help</code>
:   show general or COMMAND help</p>
<p><code>--man</code>
:   show general or COMMAND user manual with man</p>
<p><code>--info</code>
:   show general or COMMAND user manual with info</p>
<p><code>--version</code>
:   show general or ADDONCMD version</p>
<p><code>--debug[=N]</code>
:   show debug output (levels 1-9, default: 1)</p>
<h3 id="general-input-options"><a class="header" href="#general-input-options">General input options</a></h3>
<p><code>-f FILE --file=FILE</code>
:   use a different input file. For stdin, use - (default:
<code>$LEDGER_FILE</code> or <code>$HOME/.hledger.journal</code>)</p>
<p><code>--rules-file=RULESFILE</code>
:   Conversion rules file to use when reading CSV (default: FILE.rules)</p>
<p><code>--separator=CHAR</code>
:   Field separator to expect when reading CSV (default: ',')</p>
<p><code>--alias=OLD=NEW</code>
:   rename accounts named OLD to NEW</p>
<p><code>--anon</code>
:   anonymize accounts and payees</p>
<p><code>--pivot FIELDNAME</code>
:   use some other field or tag for the account name</p>
<p><code>-I --ignore-assertions</code>
:   disable balance assertion checks (note: does not disable balance
assignments)</p>
<p><code>-s --strict</code>
:   do extra error checking (check that all posted accounts are
declared)</p>
<h3 id="general-reporting-options"><a class="header" href="#general-reporting-options">General reporting options</a></h3>
<p><code>-b --begin=DATE</code>
:   include postings/txns on or after this date (will be adjusted to
preceding subperiod start when using a report interval)</p>
<p><code>-e --end=DATE</code>
:   include postings/txns before this date (will be adjusted to
following subperiod end when using a report interval)</p>
<p><code>-D --daily</code>
:   multiperiod/multicolumn report by day</p>
<p><code>-W --weekly</code>
:   multiperiod/multicolumn report by week</p>
<p><code>-M --monthly</code>
:   multiperiod/multicolumn report by month</p>
<p><code>-Q --quarterly</code>
:   multiperiod/multicolumn report by quarter</p>
<p><code>-Y --yearly</code>
:   multiperiod/multicolumn report by year</p>
<p><code>-p --period=PERIODEXP</code>
:   set start date, end date, and/or reporting interval all at once
using <a href="hledger.html#period-expressions">period expressions</a> syntax</p>
<p><code>--date2</code>
:   match the secondary date instead (see command help for other
effects)</p>
<p><code>--today=DATE</code>
:   override today's date (affects relative smart dates, for
tests/examples)</p>
<p><code>-U --unmarked</code>
:   include only unmarked postings/txns (can combine with -P or -C)</p>
<p><code>-P --pending</code>
:   include only pending postings/txns</p>
<p><code>-C --cleared</code>
:   include only cleared postings/txns</p>
<p><code>-R --real</code>
:   include only non-virtual postings</p>
<p><code>-NUM --depth=NUM</code>
:   hide/aggregate accounts or postings more than NUM levels deep</p>
<p><code>-E --empty</code>
:   show items with zero amount, normally hidden (and vice-versa in
hledger-ui/hledger-web)</p>
<p><code>-B --cost</code>
:   convert amounts to their cost/selling amount at transaction time</p>
<p><code>-V --market</code>
:   convert amounts to their market value in default valuation
commodities</p>
<p><code>-X --exchange=COMM</code>
:   convert amounts to their market value in commodity COMM</p>
<p><code>--value</code>
:   convert amounts to cost or market value, more flexibly than -B/-V/-X</p>
<p><code>--infer-equity</code>
:   infer conversion equity postings from costs</p>
<p><code>--infer-costs</code>
:   infer costs from conversion equity postings</p>
<p><code>--infer-market-prices</code>
:   use costs as additional market prices, as if they were P directives</p>
<p><code>--forecast</code>
:   generate transactions from <a href="hledger.html#periodic-transactions">periodic
rules</a>,
:   between the latest recorded txn and 6 months from today,
:   or during the specified PERIOD (= is required).
:   Auto posting rules will be applied to these transactions as well.
:   Also, in hledger-ui make future-dated transactions visible.</p>
<p><code>--auto</code>
:   generate extra postings by applying <a href="hledger.html#auto-postings">auto posting
rules</a> to all txns (not just forecast
txns)</p>
<p><code>--verbose-tags</code>
:   add visible tags indicating transactions or postings which have been
generated/modified</p>
<p><code>--commodity-style</code>
:   Override the commodity style in the output for the specified
commodity. For example 'EUR1.000,00'.</p>
<p><code>--color=WHEN (or --colour=WHEN)</code>
:   Should color-supporting commands use ANSI color codes in text
output.
:   'auto' (default): whenever stdout seems to be a color-supporting
terminal.
:   'always' or 'yes': always, useful eg when piping output into
'less -R'.
:   'never' or 'no': never.
:   A NO_COLOR environment variable overrides this.</p>
<p><code>--pretty[=WHEN]</code>
:   Show prettier output, e.g. using unicode box-drawing characters.
:   Accepts 'yes' (the default) or 'no' ('y', 'n', 'always',
'never' also work).
:   If you provide an argument you must use '=', e.g.
'--pretty=yes'.</p>
<p>When a reporting option appears more than once in the command line, the
last one takes precedence.</p>
<p>Some reporting options can also be written as <a href="hledger.html#queries">query
arguments</a>.</p>
<h2 id="command-line-tips"><a class="header" href="#command-line-tips">Command line tips</a></h2>
<p>Here are some details useful to know about for hledger command lines
(and elsewhere). Feel free to skip this section until you need it.</p>
<h3 id="option-repetition"><a class="header" href="#option-repetition">Option repetition</a></h3>
<p>If options are repeated in a command line, hledger will generally use
the last (right-most) occurence.</p>
<h3 id="special-characters"><a class="header" href="#special-characters">Special characters</a></h3>
<h4 id="single-escaping-shell-metacharacters"><a class="header" href="#single-escaping-shell-metacharacters">Single escaping (shell metacharacters)</a></h4>
<p>In shell command lines, characters significant to your shell - such as
spaces, <code>&lt;</code>, <code>&gt;</code>, <code>(</code>, <code>)</code>, <code>|</code>, <code>$</code> and <code>\</code> - should be
&quot;shell-escaped&quot; if you want hledger to see them. This is done by
enclosing them in single or double quotes, or by writing a backslash
before them. Eg to match an account name containing a space:</p>
<pre><code class="language-cli">$ hledger register 'credit card'
</code></pre>
<p>or:</p>
<pre><code class="language-cli">$ hledger register credit\ card
</code></pre>
<p>Windows users should keep in mind that <code>cmd</code> treats single quote as a
regular character, so you should be using double quotes exclusively.
PowerShell treats both single and double quotes as quotes.</p>
<h4 id="double-escaping-regular-expression-metacharacters"><a class="header" href="#double-escaping-regular-expression-metacharacters">Double escaping (regular expression metacharacters)</a></h4>
<p>Characters significant in <a href="#regular-expressions">regular expressions</a>
(described below) - such as <code>.</code>, <code>^</code>, <code>$</code>, <code>[</code>, <code>]</code>, <code>(</code>, <code>)</code>, <code>|</code>, and
<code>\</code> - may need to be &quot;regex-escaped&quot; if you don't want them to be
interpreted by hledger's regular expression engine. This is done by
writing backslashes before them, but since backslash is typically also a
shell metacharacter, both shell-escaping and regex-escaping will be
needed. Eg to match a literal <code>$</code> sign while using the bash shell:</p>
<pre><code class="language-cli">$ hledger balance cur:'\$'
</code></pre>
<p>or:</p>
<pre><code class="language-cli">$ hledger balance cur:\\$
</code></pre>
<h4 id="triple-escaping-for-add-on-commands"><a class="header" href="#triple-escaping-for-add-on-commands">Triple escaping (for add-on commands)</a></h4>
<p>When you use hledger to run an external add-on command (described
below), one level of shell-escaping is lost from any options or
arguments intended for by the add-on command, so those need an extra
level of shell-escaping. Eg to match a literal <code>$</code> sign while using the
bash shell and running an add-on command (<code>ui</code>):</p>
<pre><code class="language-cli">$ hledger ui cur:'\\$'
</code></pre>
<p>or:</p>
<pre><code class="language-cli">$ hledger ui cur:\\\\$
</code></pre>
<p>If you wondered why <em>four</em> backslashes, perhaps this helps:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td>unescaped:</td><td><code>$</code></td></tr>
<tr><td>escaped:</td><td><code>\$</code></td></tr>
<tr><td>double-escaped:</td><td><code>\\$</code></td></tr>
<tr><td>triple-escaped:</td><td><code>\\\\$</code></td></tr>
</tbody></table>
</div>
<p>Or, you can avoid the extra escaping by running the add-on executable
directly:</p>
<pre><code class="language-cli">$ hledger-ui cur:\\$
</code></pre>
<h4 id="less-escaping"><a class="header" href="#less-escaping">Less escaping</a></h4>
<p>Options and arguments are sometimes used in places other than the shell
command line, where shell-escaping is not needed, so there you should
use one less level of escaping. Those places include:</p>
<ul>
<li>an @argumentfile</li>
<li>hledger-ui's filter field</li>
<li>hledger-web's search form</li>
<li>GHCI's prompt (used by developers).</li>
</ul>
<h3 id="unicode-characters"><a class="header" href="#unicode-characters">Unicode characters</a></h3>
<p>hledger is expected to handle non-ascii characters correctly:</p>
<ul>
<li>
<p>they should be parsed correctly in input files and on the command
line, by all hledger tools (add, iadd, hledger-web's
search/add/edit forms, etc.)</p>
</li>
<li>
<p>they should be displayed correctly by all hledger tools, and
on-screen alignment should be preserved.</p>
</li>
</ul>
<p>This requires a well-configured environment. Here are some tips:</p>
<ul>
<li>
<p>A system locale must be configured, and it must be one that can
decode the characters being used. In bash, you can set a locale like
this: <code>export LANG=en_US.UTF-8</code>. There are some more details in
<a href="#troubleshooting">Troubleshooting</a>. This step is essential -
without it, hledger will quit on encountering a non-ascii character
(as with all GHC-compiled programs).</p>
</li>
<li>
<p>your terminal software (eg Terminal.app, iTerm, CMD.exe, xterm..)
must support unicode</p>
</li>
<li>
<p>the terminal must be using a font which includes the required
unicode glyphs</p>
</li>
<li>
<p>the terminal should be configured to display wide characters as
double width (for report alignment)</p>
</li>
<li>
<p>on Windows, for best results you should run hledger in the same kind
of environment in which it was built. Eg hledger built in the
standard CMD.EXE environment (like the binaries on our download
page) might show display problems when run in a cygwin or msys
terminal, and vice versa. (See eg
<a href="https://github.com/simonmichael/hledger/issues/961#issuecomment-471229644">#961</a>).</p>
</li>
</ul>
<h3 id="regular-expressions"><a class="header" href="#regular-expressions">Regular expressions</a></h3>
<p>A <a href="https://en.wikipedia.org/wiki/regular_expression">regular expression</a>
(regexp) is a small piece of text where certain characters (like <code>.</code>,
<code>^</code>, <code>$</code>, <code>+</code>, <code>*</code>, <code>()</code>, <code>|</code>, <code>[]</code>, <code>\</code>) have special meanings, forming
a tiny language for matching text precisely - very useful in hledger and
elsewhere. To learn all about them, visit
<a href="https://www.regular-expressions.info">regular-expressions.info</a>.</p>
<p>hledger supports regexps whenever you are entering a pattern to match
something, eg in <a href="#queries">query arguments</a>, <a href="#alias-directive">account
aliases</a>, <a href="#if-block">CSV if rules</a>, hledger-web's
search form, hledger-ui's <code>/</code> search, etc. You may need to wrap them in
quotes, especially at the command line (see <a href="#special-characters">Special
characters</a> above). Here are some examples:</p>
<p>Account name queries (quoted for command line use):</p>
<pre><code>Regular expression:  Matches:
-------------------  ------------------------------------------------------------
bank                 assets:bank, assets:bank:savings, expenses:art:banksy, ...
:bank                assets:bank:savings, expenses:art:banksy
:bank:               assets:bank:savings
'^bank'              none of those ( ^ matches beginning of text )
'bank$'              assets:bank   ( $ matches end of text )
'big \$ bank'        big $ bank    ( \ disables following character's special meaning )
'\bbank\b'           assets:bank, assets:bank:savings  ( \b matches word boundaries )
'(sav|check)ing'     saving or checking  ( (|) matches either alternative )
'saving|checking'    saving or checking  ( outer parentheses are not needed )
'savings?'           saving or savings   ( ? matches 0 or 1 of the preceding thing )
'my +bank'           my bank, my  bank, ... ( + matches 1 or more of the preceding thing )
'my *bank'           mybank, my bank, my  bank, ... ( * matches 0 or more of the preceding thing )
'b.nk'               bank, bonk, b nk, ... ( . matches any character )
</code></pre>
<p>Some other queries:</p>
<pre><code>desc:'amazon|amzn|audible'  Amazon transactions
cur:EUR              amounts with commodity symbol containing EUR
cur:'\$'             amounts with commodity symbol containing $
cur:'^\$$'           only $ amounts, not eg AU$ or CA$
cur:....?            amounts with 4-or-more-character symbols
tag:.=202[1-3]       things with any tag whose value contains 2021, 2022 or 2023
</code></pre>
<p>Account name aliases: accept <code>.</code> instead of <code>:</code> as account separator:</p>
<pre><code>alias /\./=:         replaces all periods in account names with colons
</code></pre>
<p>Show multiple top-level accounts combined as one:</p>
<pre><code>--alias='/^[^:]+/=combined'  ( [^:] matches any character other than : )
</code></pre>
<p>Show accounts with the second-level part removed:</p>
<pre><code>--alias '/^([^:]+):[^:]+/ = \1'
                     match a top-level account and a second-level account
                     and replace those with just the top-level account
                     ( \1 in the replacement text means &quot;whatever was matched
                     by the first parenthesised part of the regexp&quot;
</code></pre>
<p>CSV rules: match CSV records containing dining-related MCC codes:</p>
<pre><code>if \?MCC581[124]
</code></pre>
<p>Match CSV records with a specific amount around the end/start of month:</p>
<pre><code>if %amount \b3\.99
&amp;  %date   (29|30|31|01|02|03)$
</code></pre>
<h4 id="hledgers-regular-expressions"><a class="header" href="#hledgers-regular-expressions">hledger's regular expressions</a></h4>
<p>hledger's regular expressions come from the
<a href="http://hackage.haskell.org/package/regex-tdfa/docs/Text-Regex-TDFA.html">regex-tdfa</a>
library. If they're not doing what you expect, it's important to know
exactly what they support:</p>
<ol>
<li>they are case insensitive</li>
<li>they are infix matching (they do not need to match the entire thing
being matched)</li>
<li>they are <a href="http://www.regular-expressions.info/posix.html#ere">POSIX
ERE</a> (extended
regular expressions)</li>
<li>they also support <a href="http://www.regular-expressions.info/wordboundaries.html">GNU word
boundaries</a>
(<code>\b</code>, <code>\B</code>, <code>\&lt;</code>, <code>\&gt;</code>)</li>
<li><a href="https://www.regular-expressions.info/backref.html">backreferences</a>
are supported when doing text replacement in <a href="#regex-aliases">account
aliases</a> or <a href="#csv-rules">CSV rules</a>, where
<a href="https://www.regular-expressions.info/backref.html">backreferences</a>
can be used in the replacement string to reference <a href="http://www.regular-expressions.info/refcapture.html">capturing
groups</a> in the
search regexp. Otherwise, if you write <code>\1</code>, it will match the digit
<code>1</code>.</li>
<li>they do not support <a href="http://www.regular-expressions.info/modifiers.html">mode
modifiers</a>
(<code>(?s)</code>), character classes (<code>\w</code>, <code>\d</code>), or anything else not
mentioned above.</li>
</ol>
<p>Some things to note:</p>
<ul>
<li>
<p>In the <code>alias</code> directive and <code>--alias</code> option, regular expressions
must be enclosed in forward slashes (<code>/REGEX/</code>). Elsewhere in
hledger, these are not required.</p>
</li>
<li>
<p>In queries, to match a regular expression metacharacter like <code>$</code> as
a literal character, prepend a backslash. Eg to search for amounts
with the dollar sign in hledger-web, write <code>cur:\$</code>.</p>
</li>
<li>
<p>On the command line, some metacharacters like <code>$</code> have a special
meaning to the shell and so must be escaped at least once more. See
<a href="#special-characters">Special characters</a>.</p>
</li>
</ul>
<h3 id="argument-files"><a class="header" href="#argument-files">Argument files</a></h3>
<p>You can save a set of command line options and arguments in a file, and
then reuse them by writing <code>@FILENAME</code> as a command line argument. Eg:
<code>hledger bal @foo.args</code>.</p>
<p>Inside the argument file, each line should contain just one option or
argument. Don't use spaces except inside quotes (or you'll see a
confusing error); write <code>=</code> (or nothing) between a flag and its
argument. For the special characters mentioned above, use one less level
of quoting than you would at the command prompt.</p>
<h2 id="output"><a class="header" href="#output">Output</a></h2>
<h3 id="output-destination"><a class="header" href="#output-destination">Output destination</a></h3>
<p>hledger commands send their output to the terminal by default. You can
of course redirect this, eg into a file, using standard shell syntax:</p>
<pre><code class="language-cli">$ hledger print &gt; foo.txt
</code></pre>
<p>Some commands (print, register, stats, the balance commands) also
provide the <code>-o/--output-file</code> option, which does the same thing without
needing the shell. Eg:</p>
<pre><code class="language-cli">$ hledger print -o foo.txt
$ hledger print -o -        # write to stdout (the default)
</code></pre>
<h3 id="output-format"><a class="header" href="#output-format">Output format</a></h3>
<p>Some commands offer other kinds of output, not just text on the
terminal. Here are those commands and the formats currently supported:</p>
<div class="table-wrapper"><table><thead><tr><th>-</th><th>txt</th><th>csv/tsv</th><th>html</th><th>json</th><th>sql</th></tr></thead><tbody>
<tr><td>aregister</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td></td></tr>
<tr><td>balance</td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1,2</sup></em></td><td>Y</td><td></td></tr>
<tr><td>balancesheet</td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y</td><td></td></tr>
<tr><td>balancesheetequity</td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y</td><td></td></tr>
<tr><td>cashflow</td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y</td><td></td></tr>
<tr><td>incomestatement</td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y <em><sup>1</sup></em></td><td>Y</td><td></td></tr>
<tr><td>print</td><td>Y</td><td>Y</td><td></td><td>Y</td><td>Y</td></tr>
<tr><td>register</td><td>Y</td><td>Y</td><td></td><td>Y</td><td></td></tr>
</tbody></table>
</div>
<ul>
<li><em><sup>1</sup> Also affected by the balance commands' <a href="#balance-report-layout"><code>--layout</code>
option</a>.</em></li>
<li><em><sup>2</sup> <code>balance</code> does not support html output without a
report interval or with <code>--budget</code>.</em></li>
</ul>
<p>The output format is selected by the <code>-O/--output-format=FMT</code> option:</p>
<pre><code class="language-cli">$ hledger print -O csv    # print CSV on stdout
</code></pre>
<p>or by the filename extension of an output file specified with the
<code>-o/--output-file=FILE.FMT</code> option:</p>
<pre><code class="language-cli">$ hledger balancesheet -o foo.csv    # write CSV to foo.csv
</code></pre>
<p>The <code>-O</code> option can be combined with <code>-o</code> to override the file
extension, if needed:</p>
<pre><code class="language-cli">$ hledger balancesheet -o foo.txt -O csv    # write CSV to foo.txt
</code></pre>
<p>Some notes about the various output formats:</p>
<h4 id="csv-output"><a class="header" href="#csv-output">CSV output</a></h4>
<ul>
<li>In CSV output, <a href="#decimal-marks-digit-group-marks">digit group marks</a>
(such as thousands separators) are disabled automatically.</li>
</ul>
<h4 id="html-output"><a class="header" href="#html-output">HTML output</a></h4>
<ul>
<li>HTML output can be styled by an optional <code>hledger.css</code> file in the
same directory.</li>
</ul>
<h4 id="json-output"><a class="header" href="#json-output">JSON output</a></h4>
<ul>
<li>
<p>This is not yet much used; real-world feedback is welcome.</p>
</li>
<li>
<p>Our JSON is rather large and verbose, since it is a faithful
representation of hledger's internal data types. To understand the
JSON, read the Haskell type definitions, which are mostly in
<a href="https://github.com/simonmichael/hledger/blob/master/hledger-lib/Hledger/Data/Types.hs">https://github.com/simonmichael/hledger/blob/master/hledger-lib/Hledger/Data/Types.hs</a>.</p>
</li>
</ul>
<!-- -->
<ul>
<li>hledger represents quantities as Decimal values storing up to 255
significant digits, eg for repeating decimals. Such numbers can
arise in practice (from automatically-calculated transaction
prices), and would break most JSON consumers. So in JSON, we show
quantities as simple Numbers with at most 10 decimal places. We
don't limit the number of integer digits, but that part is under
your control. We hope this approach will not cause problems in
practice; if you find otherwise, please let us know. (Cf
<a href="https://github.com/simonmichael/hledger/issues/1195">#1195</a>)</li>
</ul>
<h4 id="sql-output"><a class="header" href="#sql-output">SQL output</a></h4>
<ul>
<li>
<p>This is not yet much used; real-world feedback is welcome.</p>
</li>
<li>
<p>SQL output is expected to work at least with SQLite, MySQL and
Postgres.</p>
</li>
<li>
<p>For SQLite, it will be more useful if you modify the generated <code>id</code>
field to be a PRIMARY KEY. Eg:</p>
<pre><code>$ hledger print -O sql | sed 's/id serial/id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL/g' | ...
</code></pre>
</li>
<li>
<p>SQL output is structured with the expectations that statements will
be executed in the empty database. If you already have tables
created via SQL output of hledger, you would probably want to either
clear tables of existing data (via <code>delete</code> or <code>truncate</code> SQL
statements) or drop tables completely as otherwise your postings
will be duped.</p>
</li>
</ul>
<h3 id="commodity-styles"><a class="header" href="#commodity-styles">Commodity styles</a></h3>
<p>When displaying amounts, hledger infers a standard display style for
each commodity/currency, as described below in <a href="#commodity-display-style">Commodity display
style</a>.</p>
<p>If needed, this can be overridden by a <code>-c/--commodity-style</code> option
(except for <a href="#costs">cost amounts</a> and amounts displayed by the
<a href="#print"><code>print</code></a> command, which are always displayed with all decimal
digits). For example, the following will force dollar amounts to be
displayed as shown:</p>
<pre><code class="language-cli">$ hledger print -c '$1.000,0'
</code></pre>
<p>This option can repeated to set the display style for multiple
commodities/currencies. Its argument is as described in the <a href="#commodity-directive">commodity
directive</a>.</p>
<h3 id="colour"><a class="header" href="#colour">Colour</a></h3>
<p>In terminal output, some commands can produce colour when the terminal
supports it:</p>
<ul>
<li>if the <code>--color/--colour</code> option is given a value of <code>yes</code> or
<code>always</code> (or <code>no</code> or <code>never</code>), colour will (or will not) be used;</li>
<li>otherwise, if the <code>NO_COLOR</code> environment variable is set, colour
will not be used;</li>
<li>otherwise, colour will be used if the output (terminal or file)
supports it.</li>
</ul>
<h3 id="box-drawing"><a class="header" href="#box-drawing">Box-drawing</a></h3>
<p>In terminal output, you can enable unicode box-drawing characters to
render prettier tables:</p>
<ul>
<li>if the <code>--pretty</code> option is given a value of <code>yes</code> or <code>always</code> (or
<code>no</code> or <code>never</code>), unicode characters will (or will not) be used;</li>
<li>otherwise, unicode characters will not be used.</li>
</ul>
<h3 id="paging"><a class="header" href="#paging">Paging</a></h3>
<p>When showing long output in the terminal, hledger will try to use the
pager specified by the <code>PAGER</code> environment variable, or <code>less</code>, or
<code>more</code>. (A pager is a helper program that shows one page at a time
rather than scrolling everything off screen). Currently it does this
only for help output, not for reports; specifically,</p>
<ul>
<li>when listing commands, with <code>hledger</code></li>
<li>when showing help with <code>hledger [CMD] --help</code>,</li>
<li>when viewing manuals with <code>hledger help</code> or <code>hledger --man</code>.</li>
</ul>
<p>Note the pager is expected to handle ANSI codes, which hledger uses eg
for bold emphasis. For the common pager <code>less</code> (and its <code>more</code>
compatibility mode), we add <code>R</code> to the <code>LESS</code> and <code>MORE</code> environment
variables to make this work. If you use a different pager, you might
need to configure it similarly, to avoid seeing junk on screen (let us
know). Otherwise, you can set the <code>NO_COLOR</code> environment variable to 1
to disable all ANSI output (see <a href="#colour">Colour</a>).</p>
<h3 id="debug-output"><a class="header" href="#debug-output">Debug output</a></h3>
<p>We intend hledger to be relatively easy to troubleshoot, introspect and
develop. You can add <code>--debug[=N]</code> to any hledger command line to see
additional debug output. N ranges from 1 (least output, the default) to
9 (maximum output). Typically you would start with 1 and increase until
you are seeing enough. Debug output goes to stderr, and is not affected
by <code>-o/--output-file</code> (unless you redirect stderr to stdout, eg:
<code>2&gt;&amp;1</code>). It will be interleaved with normal output, which can help
reveal when parts of the code are evaluated. To capture debug output in
a log file instead, you can usually redirect stderr, eg:</p>
<pre><code class="language-cli">hledger bal --debug=3 2&gt;hledger.log
</code></pre>
<h2 id="environment"><a class="header" href="#environment">Environment</a></h2>
<p>These environment variables affect hledger:</p>
<p><strong>COLUMNS</strong> This is normally set by your terminal; some hledger commands
(<code>register</code>) will format their output to this width. If not set, they
will try to use the available terminal width.</p>
<p><strong>LEDGER_FILE</strong> The main journal file to use when not specified with
<code>-f/--file</code>. Default: <code>$HOME/.hledger.journal</code>.</p>
<p><strong>NO_COLOR</strong> If this environment variable is set (with any value),
hledger will not use ANSI color codes in terminal output, unless
overridden by an explicit <code>--color/--colour</code> option.</p>
<h2 id="part-2-data-formats"><a class="header" href="#part-2-data-formats">PART 2: DATA FORMATS</a></h2>
<p><a name="journal-format"></a></p>
<h2 id="journal"><a class="header" href="#journal">Journal</a></h2>
<p>hledger's default file format, representing a General Journal. Here's
a cheatsheet/mini-tutorial, or you can skip ahead to <a href="#about-journal-format">About journal
format</a>.</p>
<h3 id="journal-cheatsheet"><a class="header" href="#journal-cheatsheet">Journal cheatsheet</a></h3>
<pre><code class="language-journal"># Here is the main syntax of hledger's journal format
# (omitting extra Ledger compatibility syntax).
# hledger journals contain comments, directives, and transactions, in any order:

###############################################################################
# 1. Comment lines are for notes or temporarily disabling things.
# They begin with #, ;, or a line containing the word &quot;comment&quot;.

# hash comment line
; semicolon comment line
comment
These lines
are commented.
end comment

# Some but not all hledger entries can have same-line comments attached to them,
# from ; (semicolon) to end of line.

###############################################################################
# 2. Directives modify parsing or reports in some way.
# They begin with a word or letter (or symbol).

account actifs     ; type:A, declare an account that is an Asset. 2+ spaces before ;.
account passifs    ; type:L, declare an account that is a Liability, and so on.. (ALERX)
alias chkg = assets:checking
commodity $0.00
decimal-mark .
include /dev/null
payee Whole Foods
P 2022-01-01 AAAA $1.40
~ monthly    budget goals  ; &lt;- 2+ spaces between period expression and description
    expenses:food       $400
    expenses:home      $1000
    budgeted

###############################################################################
# 3. Transactions are what it's all about; they are dated events,
# usually describing movements of money.
# They begin with a date.

# DATE DESCRIPTION           ; This is a transaction comment.
#   ACCOUNT NAME 1  AMOUNT1  ; &lt;- posting 1. This is a posting comment.
#   ACCOUNT NAME 2  AMOUNT2  ; &lt;- posting 2. Postings must be indented.
#               ; ^^ At least 2 spaces between account and amount.
#   ...  ; Any number of postings is allowed. The amounts must balance (sum to 0).

2022-01-01 opening balances are declared this way
    assets:checking          $1000  ; Account names can be anything. lower case is easy to type.
    assets:savings           $1000  ; assets, liabilities, equity, revenues, expenses are common.
    assets:cash:wallet        $100  ; : indicates subaccounts.
    liabilities:credit card  $-200  ; liabilities, equity, revenues balances are usually negative.
    equity                          ; One amount can be left blank; $-1900 is inferred here.

2022-04-15 * (#12345) pay taxes
    ; There can be a ! or * after the date meaning &quot;pending&quot; or &quot;cleared&quot;.
    ; There can be a transaction code (text in parentheses) after the date/status.
    ; Amounts' sign represents direction of flow, or credit/debit:
    assets:checking          $-500  ; minus means removed from this account (credit)
    expenses:tax:us:2021      $500  ; plus  means added to this account (debit)
                                    ; revenue/expense categories are also &quot;accounts&quot;

2022-01-01                          ; The description is optional.
    ; Any currency/commodity symbols are allowed, on either side.
    assets:cash:wallet     GBP -10
    expenses:clothing       GBP 10
    assets:gringotts           -10 gold
    assets:pouch                10 gold
    revenues:gifts              -2 &quot;Liquorice Wands&quot;  ; Complex symbols
    assets:bag                   2 &quot;Liquorice Wands&quot;  ; must be double-quoted.

2022-01-01 Cost in another commodity can be noted with @ or @@
    assets:investments           2.0 AAAA @ $1.50  ; @  means per-unit cost
    assets:investments           3.0 AAAA @@ $4    ; @@ means total cost
    assets:checking            $-7.00

2022-01-02 assert balances
    ; Balances can be asserted for extra error checking, in any transaction.
    assets:investments           0 AAAA = 5.0 AAAA
    assets:pouch                 0 gold = 10 gold
    assets:savings              $0      = $1000

1999-12-31 Ordering transactions by date is recommended but not required.
    ; Postings are not required.

2022.01.01 These date
2022/1/1   formats are
12/31      also allowed (but consistent YYYY-MM-DD is recommended).
</code></pre>
<h3 id="about-journal-format"><a class="header" href="#about-journal-format">About journal format</a></h3>
<p>hledger's usual data source is a plain text file containing journal
entries in hledger journal format. This file represents a standard
accounting <a href="https://en.wikipedia.org/wiki/General_journal">general
journal</a>. I use file names
ending in <code>.journal</code>, but that's not required. The journal file
contains a number of transaction entries, each describing a transfer of
money (or any commodity) between two or more named accounts, in a simple
format readable by both hledger and humans.</p>
<p>hledger's journal format is compatible with most of <a href="http://ledger-cli.org/3.0/doc/ledger3.html#Journal-Format">Ledger's journal
format</a>, but
not all of it. The differences and interoperation tips are described at
<a href="ledger.html">hledger and Ledger</a>. With some care, and by avoiding
incompatible features, you can keep your hledger journal readable by
Ledger and vice versa. This can useful eg for comparing the behaviour of
one app against the other.</p>
<p>You can use hledger without learning any more about this file; just use
the <a href="#add">add</a> or <a href="#web">web</a> or <a href="#import">import</a> commands to create
and update it.</p>
<p>Many users, though, edit the journal file with a text editor, and track
changes with a version control system such as git. Editor addons such as
ledger-mode or hledger-mode for Emacs, vim-ledger for Vim, and
hledger-vscode for Visual Studio Code, make this easier, adding colour,
formatting, tab completion, and useful commands. See <a href="/editors.html">Editor
configuration</a> at hledger.org for the full list.</p>
<p>Here's a description of each part of the file format (and hledger's
data model).</p>
<p>A hledger journal file can contain three kinds of thing: file comments,
transactions, and/or directives (counting periodic transaction rules and
auto posting rules as directives).</p>
<h3 id="comments"><a class="header" href="#comments">Comments</a></h3>
<p>Lines in the journal will be ignored if they begin with a hash (<code>#</code>) or
a semicolon (<code>;</code>). (See also <a href="#other-syntax">Other syntax</a>.) hledger
will also ignore regions beginning with a <code>comment</code> line and ending with
an <code>end comment</code> line (or file end). Here's a suggestion for choosing
between them:</p>
<ul>
<li><code>#</code> for top-level notes</li>
<li><code>;</code> for commenting out things temporarily</li>
<li><code>comment</code> for quickly commenting large regions (remember it's
there, or you might get confused)</li>
</ul>
<p>Eg:</p>
<pre><code class="language-journal"># a comment line
; another commentline
comment
A multi-line comment block,
continuing until &quot;end comment&quot; directive
or the end of the current file.
end comment
</code></pre>
<p>Some hledger entries can have same-line comments attached to them, from
; (semicolon) to end of line. See Transaction comments, Posting
comments, and Account comments below.</p>
<h3 id="transactions"><a class="header" href="#transactions">Transactions</a></h3>
<p>Transactions are the main unit of information in a journal file. They
represent events, typically a movement of some quantity of commodities
between two or more named accounts.</p>
<p>Each transaction is recorded as a journal entry, beginning with a
<a href="#simple-dates">simple date</a> in column 0. This can be followed by any of
the following optional fields, separated by spaces:</p>
<ul>
<li>a <a href="#status">status</a> character (empty, <code>!</code>, or <code>*</code>)</li>
<li>a code (any short number or text, enclosed in parentheses)</li>
<li>a description (any remaining text until end of line or a semicolon)</li>
<li>a comment (any remaining text following a semicolon until end of
line, and any following indented lines beginning with a semicolon)</li>
<li>0 or more indented <a href="#postings"><em>posting</em> lines</a>, describing what was
transferred and the accounts involved (indented comment lines are
also allowed, but not blank lines or non-indented lines).</li>
</ul>
<p>Here's a simple journal file containing one transaction:</p>
<pre><code class="language-journal">2008/01/01 income
  assets:bank:checking   $1
  income:salary         $-1
</code></pre>
<h3 id="dates"><a class="header" href="#dates">Dates</a></h3>
<h4 id="simple-dates"><a class="header" href="#simple-dates">Simple dates</a></h4>
<p>Dates in the journal file use <em>simple dates</em> format: <code>YYYY-MM-DD</code> or
<code>YYYY/MM/DD</code> or <code>YYYY.MM.DD</code>, with leading zeros optional. The year may
be omitted, in which case it will be inferred from the context: the
current transaction, the default year set with a <a href="#y-directive"><code>Y</code>
directive</a>, or the current date when the command is run.
Some examples: <code>2010-01-31</code>, <code>2010/01/31</code>, <code>2010.1.31</code>, <code>1/31</code>.</p>
<p>(The UI also accepts simple dates, as well as the more flexible <a href="#smart-dates">smart
dates</a> documented in the hledger manual.)</p>
<h4 id="posting-dates"><a class="header" href="#posting-dates">Posting dates</a></h4>
<p>You can give individual postings a different date from their parent
transaction, by adding a <a href="#posting-comment">posting comment</a> containing
a <a href="#tags">tag</a> (see below) like <code>date:DATE</code>. This is probably the best
way to control posting dates precisely. Eg in this example the expense
should appear in May reports, and the deduction from checking should be
reported on 6/1 for easy bank reconciliation:</p>
<pre><code class="language-journal">2015/5/30
    expenses:food     $10  ; food purchased on saturday 5/30
    assets:checking        ; bank cleared it on monday, date:6/1
</code></pre>
<pre><code class="language-cli">$ hledger -f t.j register food
2015-05-30                      expenses:food                  $10           $10
</code></pre>
<pre><code class="language-cli">$ hledger -f t.j register checking
2015-06-01                      assets:checking               $-10          $-10
</code></pre>
<p>DATE should be a <a href="#simple-dates">simple date</a>; if the year is not
specified it will use the year of the transaction's date.<br />
The <code>date:</code> tag must have a valid simple date value if it is present, eg
a <code>date:</code> tag with no value is not allowed.</p>
<h3 id="status"><a class="header" href="#status">Status</a></h3>
<p>Transactions, or individual postings within a transaction, can have a
status mark, which is a single character before the transaction
description or posting account name, separated from it by a space,
indicating one of three statuses:</p>
<div class="table-wrapper"><table><thead><tr><th>mark  </th><th>status</th></tr></thead><tbody>
<tr><td> </td><td>unmarked</td></tr>
<tr><td><code>!</code></td><td>pending</td></tr>
<tr><td><code>*</code></td><td>cleared</td></tr>
</tbody></table>
</div>
<p>When reporting, you can filter by status with the <code>-U/--unmarked</code>,
<code>-P/--pending</code>, and <code>-C/--cleared</code> flags; or the <code>status:</code>, <code>status:!</code>,
and <code>status:*</code> <a href="#queries">queries</a>; or the U, P, C keys in hledger-ui.</p>
<p>Note, in Ledger and in older versions of hledger, the &quot;unmarked&quot; state
is called &quot;uncleared&quot;. As of hledger 1.3 we have renamed it to
unmarked for clarity.</p>
<p>To replicate Ledger and old hledger's behaviour of also matching
pending, combine -U and -P.</p>
<p>Status marks are optional, but can be helpful eg for reconciling with
real-world accounts. Some editor modes provide highlighting and
shortcuts for working with status. Eg in Emacs ledger-mode, you can
toggle transaction status with C-c C-e, or posting status with C-c C-c.</p>
<p>What &quot;uncleared&quot;, &quot;pending&quot;, and &quot;cleared&quot; actually mean is up to
you. Here's one suggestion:</p>
<div class="table-wrapper"><table><thead><tr><th>status</th><th>meaning</th></tr></thead><tbody>
<tr><td>uncleared</td><td>recorded but not yet reconciled; needs review</td></tr>
<tr><td>pending</td><td>tentatively reconciled (if needed, eg during a big reconciliation)</td></tr>
<tr><td>cleared</td><td>complete, reconciled as far as possible, and considered correct</td></tr>
</tbody></table>
</div>
<p>With this scheme, you would use <code>-PC</code> to see the current balance at your
bank, <code>-U</code> to see things which will probably hit your bank soon (like
uncashed checks), and no flags to see the most up-to-date state of your
finances.</p>
<h3 id="code"><a class="header" href="#code">Code</a></h3>
<p>After the status mark, but before the description, you can optionally
write a transaction &quot;code&quot;, enclosed in parentheses. This is a good
place to record a check number, or some other important transaction id
or reference number.</p>
<h3 id="description-1"><a class="header" href="#description-1">Description</a></h3>
<p>A transaction's description is the rest of the line following the date
and status mark (or until a comment begins). Sometimes called the
&quot;narration&quot; in traditional bookkeeping, it can be used for whatever
you wish, or left blank. Transaction descriptions can be queried, unlike
<a href="#transaction-comments">comments</a>.</p>
<h4 id="payee-and-note"><a class="header" href="#payee-and-note">Payee and note</a></h4>
<p>You can optionally include a <code>|</code> (pipe) character in descriptions to
subdivide the description into separate fields for payee/payer name on
the left (up to the first <code>|</code>) and an additional note field on the right
(after the first <code>|</code>). This may be worthwhile if you need to do more
precise <a href="#queries">querying</a> and <a href="#pivoting">pivoting</a> by payee or by
note.</p>
<h3 id="transaction-comments"><a class="header" href="#transaction-comments">Transaction comments</a></h3>
<p>Text following <code>;</code>, after a transaction description, and/or on indented
lines immediately below it, form comments for that transaction. They are
reproduced by <code>print</code> but otherwise ignored, except they may contain
<a href="#tags">tags</a>, which are not ignored.</p>
<pre><code class="language-journal">2012-01-01 something  ; a transaction comment
    ; a second line of transaction comment
    expenses   1
    assets
</code></pre>
<h3 id="postings"><a class="header" href="#postings">Postings</a></h3>
<p>A posting is an addition of some amount to, or removal of some amount
from, an account. Each posting line begins with at least one space or
tab (2 or 4 spaces is common), followed by:</p>
<ul>
<li>(optional) a <a href="#status">status</a> character (empty, <code>!</code>, or <code>*</code>),
followed by a space</li>
<li>(required) an <a href="#account-names">account name</a> (any text, optionally
containing <strong>single spaces</strong>, until end of line or a double space)</li>
<li>(optional) <strong>two or more spaces</strong> or tabs followed by an
<a href="#amounts">amount</a>.</li>
</ul>
<p>Positive amounts are being added to the account, negative amounts are
being removed.</p>
<p>The amounts within a transaction must always sum up to zero. As a
convenience, one amount may be left blank; it will be inferred so as to
balance the transaction.</p>
<p>Be sure to note the unusual two-space delimiter between account name and
amount. This makes it easy to write account names containing spaces. But
if you accidentally leave only one space (or tab) before the amount, the
amount will be considered part of the account name.</p>
<h3 id="account-names"><a class="header" href="#account-names">Account names</a></h3>
<p>Accounts are the main way of categorising things in hledger. As in
Double Entry Bookkeeping, they can represent real world accounts (such
as a bank account), or more abstract categories such as &quot;money borrowed
from Frank&quot; or &quot;money spent on electricity&quot;.</p>
<p>You can use any account names you like, but we usually start with the
traditional accounting categories, which in english are <code>assets</code>,
<code>liabilities</code>, <code>equity</code>, <code>revenues</code>, <code>expenses</code>. (You might see these
referred to as A, L, E, R, X for short.)</p>
<p>For more precise reporting, we usually divide the top level accounts
into more detailed subaccounts, by writing a full colon between account
name parts. For example, from the account names <code>assets:bank:checking</code>
and <code>expenses:food</code>, hledger will infer this hierarchy of five accounts:</p>
<pre><code>assets
assets:bank
assets:bank:checking
expenses
expenses:food
</code></pre>
<p>Shown as an outline, the hierarchical tree structure is more clear:</p>
<pre><code>assets
 bank
  checking
expenses
 food
</code></pre>
<p>hledger reports can summarise the account tree to any depth, so you can
go as deep as you like with subcategories, but keeping your account
names relatively simple may be best when starting out.</p>
<p>Account names may be capitalised or not; they may contain letters,
numbers, symbols, or single spaces. Note, when an account name and an
amount are written on the same line, they must be separated by <strong>two or
more spaces</strong> (or tabs).</p>
<p>Parentheses or brackets enclosing the full account name indicate
<a href="#virtual-postings">virtual postings</a>, described below. Parentheses or
brackets internal to the account name have no special meaning.</p>
<p>Account names can be altered temporarily or permanently by <a href="#alias-directive">account
aliases</a>.</p>
<h3 id="amounts"><a class="header" href="#amounts">Amounts</a></h3>
<p>After the account name, there is usually an amount. (Important: between
account name and amount, there must be <strong>two or more spaces</strong>.)</p>
<p>hledger's amount format is flexible, supporting several international
formats. Here are some examples. Amounts have a number (the
&quot;quantity&quot;):</p>
<pre><code>1
</code></pre>
<p>..and usually a currency symbol or commodity name (more on this below),
to the left or right of the quantity, with or without a separating
space:</p>
<pre><code>$1
4000 AAPL
3 &quot;green apples&quot;
</code></pre>
<p>Amounts can be preceded by a minus sign (or a plus sign, though plus is
the default), The sign can be written before or after a left-side
commodity symbol:</p>
<pre><code>-$1
$-1
</code></pre>
<p>One or more spaces between the sign and the number are acceptable when
parsing (but they won't be displayed in output):</p>
<pre><code>+ $1
$-      1
</code></pre>
<p>Scientific E notation is allowed:</p>
<pre><code>1E-6
EUR 1E3
</code></pre>
<h4 id="decimal-marks-digit-group-marks"><a class="header" href="#decimal-marks-digit-group-marks">Decimal marks, digit group marks</a></h4>
<p>A <em>decimal mark</em> can be written as a period or a comma:</p>
<pre><code>1.23
1,23
</code></pre>
<p>In the integer part of the quantity (left of the decimal mark), groups
of digits can optionally be separated by a <em>digit group mark</em> - a space,
comma, or period (different from the decimal mark):</p>
<pre><code>     $1,000,000.00
  EUR 2.000.000,00
INR 9,99,99,999.00
      1 000 000.9455
</code></pre>
<p>hledger is not biased towards <a href="https://en.wikipedia.org/wiki/Decimal_separator#Conventions_worldwide">period or comma decimal
marks</a>,
so a number containing just one period or comma, like <code>1,000</code> or
<code>1.000</code>, is ambiguous. In such cases hledger assumes it is a decimal
mark, parsing both of these as 1.</p>
<p>To disambiguate these and ensure accurate number parsing, especially if
you use digit group marks, we recommend declaring the decimal mark. You
can declare it for each file with
<a href="#decimal-mark-directive"><code>decimal-mark</code></a> directives, or for each
commodity with <a href="#commodity-directive"><code>commodity</code></a> directives (described
below).</p>
<h4 id="commodity"><a class="header" href="#commodity">Commodity</a></h4>
<p>Amounts in hledger have both a &quot;quantity&quot;, which is a signed decimal
number, and a &quot;commodity&quot;, which is a currency symbol, stock ticker,
or any word or phrase describing something you are tracking.</p>
<p>If the commodity name contains non-letters (spaces, numbers, or
punctuation), you must always write it inside double quotes
(<code>&quot;green apples&quot;</code>, <code>&quot;ABC123&quot;</code>).</p>
<p>If you write just a bare number, that too will have a commodity, with
name <code>&quot;&quot;</code>; we call that the &quot;no-symbol commodity&quot;.</p>
<p>Actually, hledger combines these single-commodity amounts into more
powerful multi-commodity amounts, which are what it works with most of
the time. A multi-commodity amount could be, eg:
<code>1 USD, 2 EUR, 3.456 TSLA</code>. In practice, you will only see
multi-commodity amounts in hledger's output; you can't write them
directly in the journal file.</p>
<p>(If you are writing scripts or working with hledger's internals, these
are the <code>Amount</code> and <code>MixedAmount</code> types.)</p>
<h4 id="directives-influencing-number-parsing-and-display"><a class="header" href="#directives-influencing-number-parsing-and-display">Directives influencing number parsing and display</a></h4>
<p>You can add <code>decimal-mark</code> and <code>commodity</code> directives to the journal, to
declare and control these things more explicitly and precisely. These
are described below, but here's a quick example:</p>
<pre><code class="language-journal"># the decimal mark character used by all amounts in this file (all commodities)
decimal-mark .

# display styles for the $, EUR, INR and no-symbol commodities:
commodity $1,000.00
commodity EUR 1.000,00
commodity INR 9,99,99,999.00
commodity 1 000 000.9455
</code></pre>
<p><a name="amount-display-style"></a></p>
<h4 id="commodity-display-style"><a class="header" href="#commodity-display-style">Commodity display style</a></h4>
<p>For the amounts in each commodity, hledger chooses a consistent display
style (symbol placement, decimal mark and digit group marks, number of
decimal digits) to use in most reports. This is inferred as follows:</p>
<p>First, if there's a <a href="#d-directive"><code>D</code> directive</a> declaring a default
commodity, that commodity symbol and amount format is applied to all
no-symbol amounts in the journal.</p>
<p>Then each commodity's display style is determined from its <a href="#commodity-directive"><code>commodity</code>
directive</a>. We recommend always declaring
commodities with <code>commodity</code> directives, since they help ensure
consistent display styles and precisions, and bring other benefits such
as error checking for commodity symbols.</p>
<p>But if a <code>commodity</code> directive is not present, hledger infers a
commodity's display styles from its amounts as they are written in the
journal (excluding cost amounts and amounts in periodic transaction
rules or auto posting rules). It uses</p>
<ul>
<li>the symbol placement and decimal mark of the first amount seen</li>
<li>the digit group marks of the first amount with digit group marks</li>
<li>and the maximum number of decimal digits seen across all amounts.</li>
</ul>
<p>And as fallback if no applicable amounts are found, it would use a
default style, like <code>$1000.00</code> (symbol on the left with no space, period
as decimal mark, and two decimal digits).</p>
<p>Finally, commodity styles can be <a href="#commodity-styles">overridden</a> by the
<code>-c/--commodity-style</code> command line option.</p>
<h4 id="rounding"><a class="header" href="#rounding">Rounding</a></h4>
<p>Amounts are stored internally as decimal numbers with up to 255 decimal
places. They are displayed with their original journal precisions by
print and print-like reports, and rounded to their display precision
(the number of decimal digits specified by the commodity display style)
by other reports. When rounding, hledger uses <a href="https://en.wikipedia.org/wiki/Bankers_rounding">banker's
rounding</a> (it rounds to
the nearest even digit). So eg 0.5 displayed with zero decimal digits
appears as &quot;0&quot;.</p>
<p><a name="transaction-prices"></a></p>
<h3 id="costs"><a class="header" href="#costs">Costs</a></h3>
<p>After a posting amount, you can note its cost (when buying) or selling
price (when selling) in another commodity, by writing either
<code>@ UNITPRICE</code> or <code>@@ TOTALPRICE</code> after it. This indicates a conversion
transaction, where one commodity is exchanged for another.</p>
<p>(You might also see this called &quot;transaction price&quot; in hledger docs,
discussions, or code; that term was directionally neutral and reminded
that it is a price specific to a transaction, but we now just call it
&quot;cost&quot;, with the understanding that the transaction could be a
purchase or a sale.)</p>
<p>Costs are usually written explicitly with <code>@</code> or <code>@@</code>, but can also be
inferred automatically for simple multi-commodity transactions. Note, if
costs are inferred, the order of postings is significant; the first
posting will have a cost attached, in the commodity of the second.</p>
<p>As an example, here are several ways to record purchases of a foreign
currency in hledger, using the cost notation either explicitly or
implicitly:</p>
<ol>
<li>
<p>Write the price per unit, as <code>@ UNITPRICE</code> after the amount:</p>
<pre><code class="language-journal">2009/1/1
  assets:euros     €100 @ $1.35  ; one hundred euros purchased at $1.35 each
  assets:dollars                 ; balancing amount is -$135.00
</code></pre>
</li>
<li>
<p>Write the total price, as <code>@@ TOTALPRICE</code> after the amount:</p>
<pre><code class="language-journal">2009/1/1
  assets:euros     €100 @@ $135  ; one hundred euros purchased at $135 for the lot
  assets:dollars
</code></pre>
</li>
<li>
<p>Specify amounts for all postings, using exactly two commodities, and
let hledger infer the price that balances the transaction. Note the
effect of posting order: the price is added to first posting, making
it <code>€100 @@ $135</code>, as in example 2:</p>
<pre><code class="language-journal">2009/1/1
  assets:euros     €100          ; one hundred euros purchased
  assets:dollars  $-135          ; for $135
</code></pre>
</li>
</ol>
<p>Amounts can be converted to cost at report time using the
<a href="#reporting-options"><code>-B/--cost</code></a> flag; this is discussed more in the
<a href="#cost-reporting">Cost reporting</a> section.</p>
<p>Note that the cost normally should be a positive amount, though it's
not required to be. This can be a little confusing, see discussion at
<a href="#--infer-market-prices-market-prices-from-transactions">--infer-market-prices: market prices from
transactions</a>.</p>
<h4 id="other-costlot-notations"><a class="header" href="#other-costlot-notations">Other cost/lot notations</a></h4>
<p>A slight digression for Ledger and Beancount users. Ledger has a number
of cost/lot-related notations:</p>
<ul>
<li><code>@ UNITCOST</code> and <code>@@ TOTALCOST</code>
<ul>
<li>expresses a conversion rate, as in hledger</li>
<li>when buying, also creates a lot than can be selected at selling
time</li>
</ul>
</li>
<li><code>(@) UNITCOST</code> and <code>(@@) TOTALCOST</code> (<a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Virtual-posting-costs">virtual
cost</a>)
<ul>
<li>like the above, but also means &quot;this cost was exceptional,
don't use it when inferring market prices&quot;.</li>
</ul>
</li>
</ul>
<p>Currently, hledger treats the above like <code>@</code> and <code>@@</code>; the parentheses
are ignored.</p>
<ul>
<li><code>{=FIXEDUNITCOST}</code> and <code>{{=FIXEDTOTALCOST}}</code> (<a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Fixing-Lot-Prices">fixed
price</a>)
<ul>
<li>when buying, means &quot;this cost is also the fixed price, don't
let it fluctuate in value reports&quot;</li>
</ul>
</li>
<li><code>{UNITCOST}</code> and <code>{{TOTALCOST}}</code> (<a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Buying-and-Selling-Stock">lot
price</a>)
<ul>
<li>can be used identically to <code>@ UNITCOST</code> and <code>@@ TOTALCOST</code>, also
creates a lot</li>
<li>when selling, combined with <code>@ ...</code>, specifies an investment lot
by its cost basis; does not check if that lot is present</li>
</ul>
</li>
<li>and related: <code>[YYYY/MM/DD]</code> (<a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Lot-dates">lot
date</a>)
<ul>
<li>when buying, attaches this acquisition date to the lot</li>
<li>when selling, selects a lot by its acquisition date</li>
</ul>
</li>
<li><code>(SOME TEXT)</code> (<a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Lot-notes">lot
note</a>)
<ul>
<li>when buying, attaches this note to the lot</li>
<li>when selling, selects a lot by its note</li>
</ul>
</li>
</ul>
<p>Currently, hledger accepts any or all of the above in any order after
the posting amount, but ignores them. (This can break transaction
balancing.)</p>
<p>For Beancount users, the
<a href="https://beancount.github.io/docs/beancount_language_syntax.html#costs-and-prices">notation</a>
and
<a href="https://beancount.github.io/docs/how_inventories_work.html">behaviour</a>
is different:</p>
<ul>
<li><code>@ UNITCOST</code> and <code>@@ TOTALCOST</code>
<ul>
<li>expresses a cost without creating a lot, as in hledger</li>
<li>when buying (augmenting) or selling (reducing) a lot, combined
with <code>{...}</code>: documents the cost/selling price (not used for
transaction balancing)</li>
</ul>
</li>
<li><code>{UNITCOST}</code> and <code>{{TOTALCOST}}</code>
<ul>
<li>when buying (augmenting), expresses the cost for transaction
balancing, and also creates a lot with this cost basis attached</li>
<li>when selling (reducing),
<ul>
<li>selects a lot by its cost basis</li>
<li>raises an error if that lot is not present or can not be
selected unambiguously (depending on booking method
configured)</li>
<li>expresses the selling price for transaction balancing</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Currently, hledger accepts the <code>{UNITCOST}</code>/<code>{{TOTALCOST}}</code> notation but
ignores it.</p>
<ul>
<li>variations: <code>{}</code>, <code>{YYYY-MM-DD}</code>, <code>{&quot;LABEL&quot;}</code>,
<code>{UNITCOST, &quot;LABEL&quot;}</code>, <code>{UNITCOST, YYYY-MM-DD, &quot;LABEL&quot;}</code> etc.</li>
</ul>
<p>Currently, hledger rejects these.</p>
<h3 id="balance-assertions"><a class="header" href="#balance-assertions">Balance assertions</a></h3>
<p>hledger supports <a href="http://ledger-cli.org/3.0/doc/ledger3.html#Balance-assertions">Ledger-style balance
assertions</a>
in journal files. These look like, for example, <code>= EXPECTEDBALANCE</code>
following a posting's amount. Eg here we assert the expected dollar
balance in accounts a and b after each posting:</p>
<pre><code class="language-journal">2013/1/1
  a   $1  =$1
  b       =$-1

2013/1/2
  a   $1  =$2
  b  $-1  =$-2
</code></pre>
<p>After reading a journal file, hledger will check all balance assertions
and report an error if any of them fail. Balance assertions can protect
you from, eg, inadvertently disrupting reconciled balances while
cleaning up old entries. You can disable them temporarily with the
<code>-I/--ignore-assertions</code> flag, which can be useful for troubleshooting
or for reading Ledger files. (Note: this flag currently does not disable
balance assignments, described below).</p>
<h4 id="assertions-and-ordering"><a class="header" href="#assertions-and-ordering">Assertions and ordering</a></h4>
<p>hledger sorts an account's postings and assertions first by date and
then (for postings on the same day) by parse order. Note this is
different from Ledger, which sorts assertions only by parse order.
(Also, Ledger assertions do not see the accumulated effect of repeated
postings to the same account within a transaction.)</p>
<p>So, hledger balance assertions keep working if you reorder
differently-dated transactions within the journal. But if you reorder
same-dated transactions or postings, assertions might break and require
updating. This order dependence does bring an advantage: precise control
over the order of postings and assertions within a day, so you can
assert intra-day balances.</p>
<h4 id="assertions-and-multiple-included-files"><a class="header" href="#assertions-and-multiple-included-files">Assertions and multiple included files</a></h4>
<p>Multiple files included with the <a href="#include-directive"><code>include</code>
directive</a> are processed as if concatenated into one
file, preserving their order and the posting order within each file. It
means that balance assertions in later files will see balance from
earlier files.</p>
<p>And if you have multiple postings to an account on the same day, split
across multiple files, and you want to assert the account's balance on
that day, you'll need to put the assertion in the right file - the last
one in the sequence, probably.</p>
<h4 id="assertions-and-multiple--f-files"><a class="header" href="#assertions-and-multiple--f-files">Assertions and multiple -f files</a></h4>
<p>Unlike <code>include</code>, when multiple files are specified on the command line
with multiple <code>-f/--file</code> options, balance assertions will not see
balance from earlier files. This can be useful when you do not want
problems in earlier files to disrupt valid assertions in later files.</p>
<p>If you do want assertions to see balance from earlier files, use
<code>include</code>, or concatenate the files temporarily.</p>
<h4 id="assertions-and-commodities"><a class="header" href="#assertions-and-commodities">Assertions and commodities</a></h4>
<p>The asserted balance must be a simple single-commodity amount, and in
fact the assertion checks only this commodity's balance within the
(possibly multi-commodity) account balance. This is how assertions work
in Ledger also. We could call this a &quot;partial&quot; balance assertion.</p>
<p>To assert the balance of more than one commodity in an account, you can
write multiple postings, each asserting one commodity's balance.</p>
<p>You can make a stronger &quot;total&quot; balance assertion by writing a double
equals sign (<code>== EXPECTEDBALANCE</code>). This asserts that there are no other
commodities in the account besides the asserted one (or at least, that
their balance is 0).</p>
<pre><code class="language-journal">2013/1/1
  a   $1
  a    1€
  b  $-1
  c   -1€

2013/1/2  ; These assertions succeed
  a    0  =  $1
  a    0  =   1€
  b    0 == $-1
  c    0 ==  -1€

2013/1/3  ; This assertion fails as 'a' also contains 1€
  a    0 ==  $1
</code></pre>
<p>It's not yet possible to make a complete assertion about a balance that
has multiple commodities. One workaround is to isolate each commodity
into its own subaccount:</p>
<pre><code class="language-journal">2013/1/1
  a:usd   $1
  a:euro   1€
  b

2013/1/2
  a        0 ==  0
  a:usd    0 == $1
  a:euro   0 ==  1€
</code></pre>
<h4 id="assertions-and-prices"><a class="header" href="#assertions-and-prices">Assertions and prices</a></h4>
<p>Balance assertions ignore <a href="#costs">costs</a>, and should normally be
written without one:</p>
<pre><code class="language-journal">2019/1/1
  (a)     $1 @ €1 = $1
</code></pre>
<p>We do allow prices to be written there, however, and <a href="#print">print</a>
shows them, even though they don't affect whether the assertion passes
or fails. This is for backward compatibility (hledger's <a href="#close">close</a>
command used to generate balance assertions with prices), and because
<a href="#balance-assignments">balance <em>assignments</em></a> do use them (see below).</p>
<h4 id="assertions-and-subaccounts"><a class="header" href="#assertions-and-subaccounts">Assertions and subaccounts</a></h4>
<p>The balance assertions above (<code>=</code> and <code>==</code>) do not count the balance
from subaccounts; they check the account's exclusive balance only. You
can assert the balance including subaccounts by writing <code>=*</code> or <code>==*</code>,
eg:</p>
<pre><code class="language-journal">2019/1/1
  equity:opening balances
  checking:a       5
  checking:b       5
  checking         1  ==* 11
</code></pre>
<h4 id="assertions-and-virtual-postings"><a class="header" href="#assertions-and-virtual-postings">Assertions and virtual postings</a></h4>
<p>Balance assertions always consider both real and
<a href="#virtual-postings">virtual</a> postings; they are not affected by the
<code>--real/-R</code> flag or <code>real:</code> query.</p>
<h4 id="assertions-and-auto-postings"><a class="header" href="#assertions-and-auto-postings">Assertions and auto postings</a></h4>
<p>Balance assertions <em>are</em> affected by the <code>--auto</code> flag, which generates
<a href="#auto-postings">auto postings</a>, which can alter account balances.
Because auto postings are optional in hledger, accounts affected by them
effectively have two balances. But balance assertions can only test one
or the other of these. So to avoid making fragile assertions, either:</p>
<ul>
<li>assert the balance calculated with <code>--auto</code>, and always use <code>--auto</code>
with that file</li>
<li>or assert the balance calculated without <code>--auto</code>, and never use
<code>--auto</code> with that file</li>
<li>or avoid balance assertions on accounts affected by auto postings
(or avoid auto postings entirely).</li>
</ul>
<h4 id="assertions-and-precision"><a class="header" href="#assertions-and-precision">Assertions and precision</a></h4>
<p>Balance assertions compare the exactly calculated amounts, which are not
always what is shown by reports. Eg a <a href="#commodity-directive">commodity
directive</a> may limit the display precision, but
this will not affect balance assertions. Balance assertion failure
messages show exact amounts.</p>
<h3 id="posting-comments"><a class="header" href="#posting-comments">Posting comments</a></h3>
<p>Text following <code>;</code>, at the end of a posting line, and/or on indented
lines immediately below it, form comments for that posting. They are
reproduced by <code>print</code> but otherwise ignored, except they may contain
<a href="#tags">tags</a>, which are not ignored.</p>
<pre><code class="language-journal">2012-01-01
    expenses   1  ; a comment for posting 1
    assets
    ; a comment for posting 2
    ; a second comment line for posting 2
</code></pre>
<h3 id="tags"><a class="header" href="#tags">Tags</a></h3>
<p>Tags are a way to add extra labels or labelled data to transactions,
postings, or accounts, which you can then <a href="#queries">search</a> or
<a href="#pivoting">pivot</a> on.</p>
<p>They are written as a word (optionally hyphenated) immediately followed
by a full colon, in a transaction or posting or account directive's
<a href="#account-comments">comment</a>. (This is an exception to the usual rule
that things in comments are ignored.) Eg, here four different tags are
recorded: one on the checking account, two on the transaction, and one
on the expenses posting:</p>
<pre><code class="language-journal">account assets:checking         ; accounttag:

2017/1/16 bought groceries      ; transactiontag-1:
    ; transactiontag-2:
    assets:checking        $-1
    expenses:food           $1  ; postingtag:
</code></pre>
<p>Postings also inherit tags from their transaction and their account. And
transactions also acquire tags from their postings (and postings'
accounts). So in the example above, the expenses posting effectively has
all four tags (by inheriting from account and transaction), and the
transaction also has all four tags (by acquiring from the expenses
posting).</p>
<p>You can list tag names with <code>hledger tags [NAMEREGEX]</code>, or match by tag
name with a <code>tag:NAMEREGEX</code> query.</p>
<h4 id="tag-values"><a class="header" href="#tag-values">Tag values</a></h4>
<p>Tags can have a value, which is any text after the colon up until a
comma or end of line (with surrounding whitespace removed). Note this
means that hledger tag values can not contain commas. Eg in the
following posting, the three tags' values are &quot;value 1&quot;, &quot;value 2&quot;,
and &quot;&quot; (empty) respectively:</p>
<pre><code class="language-journal">    expenses:food   $10    ; foo, tag1: value 1 , tag2:value 2, bar tag3: , baz
</code></pre>
<p>Note that tags can be repeated, and are additive rather than overriding:
when the same tag name is seen again with a new value, the new
name:value pair is added to the tags. (It is not possible to override a
tag's value or remove a tag.)</p>
<p>You can list a tag's values with <code>hledger tags TAGNAME --values</code>, or
match by tag value with a <code>tag:NAMEREGEX=VALUEREGEX</code> query.</p>
<h3 id="directives"><a class="header" href="#directives">Directives</a></h3>
<p>Besides transactions, there is something else you can put in a <code>journal</code>
file: directives. These are declarations, beginning with a keyword, that
modify hledger's behaviour. Some directives can have more specific
subdirectives, indented below them. hledger's directives are similar to
Ledger's in many cases, but there are also many
<a href="ledger.html">differences</a>. Directives are not required, but can be
useful. Here are the main directives:</p>
<div class="table-wrapper"><table><thead><tr><th>purpose</th><th>directive</th></tr></thead><tbody>
<tr><td><strong>READING DATA:</strong></td><td></td></tr>
<tr><td>Rewrite account names</td><td><a href="#alias-directive"><code>alias</code></a></td></tr>
<tr><td>Comment out sections of the file</td><td><a href="#comments"><code>comment</code></a></td></tr>
<tr><td>Declare file's decimal mark, to help parse amounts accurately</td><td><a href="#decimal-mark-directive"><code>decimal-mark</code></a></td></tr>
<tr><td>Include other data files</td><td><a href="#include-directive"><code>include</code></a></td></tr>
<tr><td><strong>GENERATING DATA:</strong></td><td></td></tr>
<tr><td>Generate recurring transactions or budget goals</td><td><a href="#periodic-transactions"><code>~</code></a></td></tr>
<tr><td>Generate extra postings on existing transactions</td><td><a href="#auto-postings"><code>=</code></a></td></tr>
<tr><td><strong>CHECKING FOR ERRORS:</strong></td><td></td></tr>
<tr><td>Define valid entities to provide more error checking</td><td><a href="#account-directive"><code>account</code></a>, <a href="#commodity-directive"><code>commodity</code></a>, <a href="#payee-directive"><code>payee</code></a>, <a href="#tag-directive"><code>tag</code></a></td></tr>
<tr><td><strong>REPORTING:</strong></td><td></td></tr>
<tr><td>Declare accounts' type and display order</td><td><a href="#account-directive"><code>account</code></a></td></tr>
<tr><td>Declare commodity display styles</td><td><a href="#commodity-directive"><code>commodity</code></a></td></tr>
<tr><td>Declare market prices</td><td><a href="#p-directive"><code>P</code></a></td></tr>
</tbody></table>
</div>
<h4 id="directives-and-multiple-files"><a class="header" href="#directives-and-multiple-files">Directives and multiple files</a></h4>
<p>Directives vary in their scope, ie which journal entries and which input
files they affect. Most often, a directive will affect the following
entries and included files if any, until the end of the current file -
and no further. You might find this inconvenient! For example, <code>alias</code>
directives <a href="#aliases-and-multiple-files">do not affect parent or sibling
files</a>. But there are usually workarounds;
for example, put <code>alias</code> directives in your top-most file, before
including other files.</p>
<p>The restriction, though it may be annoying at first, is in a good cause;
it allows reports to be stable and deterministic, independent of the
order of input. Without it, reports could show different numbers
depending on the order of -f options, or the positions of include
directives in your files.</p>
<h4 id="directive-effects"><a class="header" href="#directive-effects">Directive effects</a></h4>
<p>Here are all hledger's directives, with their effects and scope
summarised - nine main directives, plus four others which we consider
non-essential:</p>
<div class="table-wrapper"><table><thead><tr><th>directive</th><th>what it does</th><th>ends at file end?</th></tr></thead><tbody>
<tr><td><strong><a href="#account-directive"><code>account</code></a></strong></td><td>Declares an account, for <a href="#check">checking</a> all entries in all files; <br>and its <a href="#account-display-order">display order</a> and <a href="#declaring-account-types">type</a>. <br>Subdirectives: any text, ignored.</td><td>N</td></tr>
<tr><td><strong><a href="#alias-directive"><code>alias</code></a></strong></td><td>Rewrites account names, in following entries until end of current file or <a href="#end-aliases-directive"><code>end aliases</code></a>. <br>Command line equivalent: <a href="#alias-directive"><code>--alias</code></a></td><td>Y</td></tr>
<tr><td><strong><a href="#comments"><code>comment</code></a></strong></td><td>Ignores part of the journal file, until end of current file or <code>end comment</code>.</td><td>Y</td></tr>
<tr><td><strong><a href="#commodity-directive"><code>commodity</code></a></strong></td><td>Declares up to four things: <br>1. a commodity symbol, for checking all amounts in all files <br>2. the decimal mark for parsing amounts of this commodity, in the following entries until end of current file (if there is no <code>decimal-mark</code> directive) <br>3. and the display style for amounts of this commodity <br>4. which is also the precision to use for balanced-transaction checking in this commodity.<br> Takes precedence over <code>D</code>. <br>Subdirectives: <code>format</code> (Ledger-compatible syntax). <br>Command line equivalent: <a href="#commodity-styles"><code>-c/--commodity-style</code></a></td><td>N,<br>Y,<br>N,<br>N</td></tr>
<tr><td><strong><a href="#decimal-mark-directive"><code>decimal-mark</code></a></strong></td><td>Declares the decimal mark, for parsing amounts of all commodities in following entries until next <code>decimal-mark</code> or end of current file. Included files can override. Takes precedence over <code>commodity</code> and <code>D</code>.</td><td>Y</td></tr>
<tr><td><strong><a href="#include-directive"><code>include</code></a></strong></td><td>Includes entries and directives from another file, as if they were written inline. <br>Command line alternative: multiple <a href="#multiple-files"><code>-f/--file</code></a></td><td>N</td></tr>
<tr><td><strong><a href="#payee-directive"><code>payee</code></a></strong></td><td>Declares a payee name, for checking all entries in all files.</td><td>N</td></tr>
<tr><td><strong><a href="#p-directive"><code>P</code></a></strong></td><td>Declares the market price of a commodity on some date, for <a href="#value-reporting">value reports</a>.</td><td>N</td></tr>
<tr><td><strong><a href="#periodic-transactions"><code>~</code></a></strong> (tilde)</td><td>Declares a periodic transaction rule that generates future transactions with <code>--forecast</code> and budget goals with <code>balance --budget</code>.</td><td>N</td></tr>
<tr><td>Other syntax:</td><td></td><td></td></tr>
<tr><td><strong><a href="#apply-account-directive"><code>apply account</code></a></strong></td><td>Prepends a common parent account to all account names, in following entries until end of current file or <code>end apply account</code>.</td><td>Y</td></tr>
<tr><td><strong><a href="#d-directive"><code>D</code></a></strong></td><td>Sets a default commodity to use for no-symbol amounts;<br>and, if there is no <code>commodity</code> directive for this commodity: its decimal mark, balancing precision, and display style, as above.</td><td>Y,<br>Y,<br>N,<br>N</td></tr>
<tr><td><strong><a href="#y-directive"><code>Y</code></a></strong></td><td>Sets a default year to use for any yearless dates, in following entries until end of current file.</td><td>Y</td></tr>
<tr><td><strong><a href="#auto-postings"><code>=</code></a></strong> (equals)</td><td>Declares an auto posting rule that generates extra postings on matched transactions with <code>--auto</code>, in current, parent, and child files (but not sibling files, see <a href="https://github.com/simonmichael/hledger/issues/1212">#1212</a>).</td><td>partly</td></tr>
<tr><td><strong><a href="#other-ledger-directives">Other Ledger directives</a></strong></td><td>Other directives from Ledger's file format are accepted but ignored.</td><td></td></tr>
</tbody></table>
</div>
<h3 id="account-directive"><a class="header" href="#account-directive"><code>account</code> directive</a></h3>
<p><code>account</code> directives can be used to declare accounts (ie, the places
that amounts are transferred from and to). Though not required, these
declarations can provide several benefits:</p>
<ul>
<li>They can document your intended chart of accounts, providing a
reference.</li>
<li>In <a href="#strict-mode">strict mode</a>, they restrict which accounts may be
posted to by transactions, which helps detect typos.</li>
<li>They control account display order in reports, allowing
non-alphabetic sorting (eg Revenues to appear above Expenses).</li>
<li>They help with account name completion (in hledger add, hledger-web,
hledger-iadd, ledger-mode, etc.)</li>
<li>They can store additional account information as
<a href="#account-comments">comments</a>, or as <a href="#tags">tags</a> which can be used
to filter or pivot reports.</li>
<li>They can help hledger know your accounts' types (asset, liability,
equity, revenue, expense), affecting reports like
<a href="#balancesheet">balancesheet</a> and
<a href="#incomestatement">incomestatement</a>.</li>
</ul>
<p>They are written as the word <code>account</code> followed by a hledger-style
<a href="#account-names">account name</a>, eg:</p>
<pre><code class="language-journal">account assets:bank:checking
</code></pre>
<p>Note, however, that accounts declared in account directives are not
allowed to have surrounding brackets and parentheses, unlike accounts
used in postings. So the following journal will not parse:</p>
<pre><code class="language-journal">account (assets:bank:checking)
</code></pre>
<h4 id="account-comments"><a class="header" href="#account-comments">Account comments</a></h4>
<p>Text following <strong>two or more spaces</strong> and <code>;</code> at the end of an account
directive line, and/or following <code>;</code> on indented lines immediately below
it, form comments for that account. They are ignored except they may
contain <a href="#tags">tags</a>, which are not ignored.</p>
<p>The two-space requirement for same-line account comments is because <code>;</code>
is allowed in account names.</p>
<pre><code class="language-journal">account assets:bank:checking    ; same-line comment, at least 2 spaces before the semicolon
  ; next-line comment
  ; some tags - type:A, acctnum:12345
</code></pre>
<h4 id="account-subdirectives"><a class="header" href="#account-subdirectives">Account subdirectives</a></h4>
<p>Ledger-style indented subdirectives are also accepted, but currently
ignored:</p>
<pre><code class="language-journal">account assets:bank:checking
  format subdirective is ignored
</code></pre>
<h4 id="account-error-checking"><a class="header" href="#account-error-checking">Account error checking</a></h4>
<p>By default, accounts need not be declared; they come into existence when
a posting references them. This is convenient, but it means hledger
can't warn you when you mis-spell an account name in the journal.
Usually you'll find that error later, as an extra account in balance
reports, or an incorrect balance when reconciling.</p>
<p>In <a href="#strict-mode">strict mode</a>, enabled with the <code>-s</code>/<code>--strict</code> flag,
hledger will report an error if any transaction uses an account name
that has not been declared by an <a href="#account">account directive</a>. Some
notes:</p>
<ul>
<li>The declaration is case-sensitive; transactions must use the correct
account name capitalisation.</li>
<li>The account directive's scope is &quot;whole file and below&quot; (see
<a href="#directives">directives</a>). This means it affects all of the current
file, and any files it includes, but not parent or sibling files.
The position of account directives within the file does not matter,
though it's usual to put them at the top.</li>
<li>Accounts can only be declared in <code>journal</code> files, but will affect
<a href="#include-directive">included</a> files of all types.</li>
<li>It's currently not possible to declare &quot;all possible subaccounts&quot;
with a wildcard; every account posted to must be declared.</li>
</ul>
<h4 id="account-display-order"><a class="header" href="#account-display-order">Account display order</a></h4>
<p>The order in which account directives are written influences the order
in which accounts appear in reports, hledger-ui, hledger-web etc. By
default accounts appear in alphabetical order, but if you add these
account directives to the journal file:</p>
<pre><code class="language-journal">account assets
account liabilities
account equity
account revenues
account expenses
</code></pre>
<p>those accounts will be displayed in declaration order:</p>
<pre><code class="language-cli">$ hledger accounts -1
assets
liabilities
equity
revenues
expenses
</code></pre>
<p>Any undeclared accounts are displayed last, in alphabetical order.</p>
<p>Sorting is done at each level of the account tree, within each group of
sibling accounts under the same parent. And currently, this directive:</p>
<pre><code class="language-journal">account other:zoo
</code></pre>
<p>would influence the position of <code>zoo</code> among <code>other</code>'s subaccounts, but
not the position of <code>other</code> among the top-level accounts. This means:</p>
<ul>
<li>you will sometimes declare parent accounts (eg <code>account other</code>
above) that you don't intend to post to, just to customize their
display order</li>
<li>sibling accounts stay together (you couldn't display <code>x:y</code> in
between <code>a:b</code> and <code>a:c</code>).</li>
</ul>
<h4 id="account-types"><a class="header" href="#account-types">Account types</a></h4>
<p>hledger knows that accounts come in several types: assets, liabilities,
expenses and so on. This enables easy reports like
<a href="#balancesheet">balancesheet</a> and <a href="#incomestatement">incomestatement</a>,
and filtering by account type with the <a href="#queries"><code>type:</code> query</a>.</p>
<p>As a convenience, hledger will detect these account types automatically
if you are using common english-language top-level account names
(described below). But generally we recommend you declare types
explicitly, by adding a <code>type:</code> <a href="#tags">tag</a> to your top-level account
directives. Subaccounts will inherit the type of their parent. The
tag's value should be one of the <a href="https://en.wikipedia.org/wiki/Chart_of_accounts#Types_of_accounts">five main account
types</a>:</p>
<ul>
<li><code>A</code> or <code>Asset</code> (things you own)</li>
<li><code>L</code> or <code>Liability</code> (things you owe)</li>
<li><code>E</code> or <code>Equity</code> (investment/ownership; balanced counterpart of
assets &amp; liabilities)</li>
<li><code>R</code> or <code>Revenue</code> (what you received money from, AKA income;
technically part of Equity)</li>
<li><code>X</code> or <code>Expense</code> (what you spend money on; technically part of
Equity)</li>
</ul>
<p>or, it can be (these are used less often):</p>
<ul>
<li><code>C</code> or <code>Cash</code> (a subtype of Asset, indicating <a href="https://en.wikipedia.org/wiki/Cash_and_cash_equivalents">liquid
assets</a> for
the <a href="#cashflow">cashflow</a> report)</li>
<li><code>V</code> or <code>Conversion</code> (a subtype of Equity, for conversions (see <a href="#cost-reporting">Cost
reporting</a>).)</li>
</ul>
<p>Here is a typical set of account type declarations:</p>
<pre><code class="language-journal">account assets             ; type: A
account liabilities        ; type: L
account equity             ; type: E
account revenues           ; type: R
account expenses           ; type: X

account assets:bank        ; type: C
account assets:cash        ; type: C

account equity:conversion  ; type: V
</code></pre>
<p>Here are some tips for working with account types.</p>
<ul>
<li>
<p>The rules for inferring types from account names are as follows.
These are just a convenience that sometimes help new users get
going; if they don't work for you, just ignore them and declare
your account types. See also <a href="#regular-expressions">Regular
expressions</a>.</p>
<pre><code>If account's name contains this (CI) regular expression:            | its type is:
--------------------------------------------------------------------|-------------
^assets?(:.+)?:(cash|bank|che(ck|que?)(ing)?|savings?|current)(:|$) | Cash
^assets?(:|$)                                                       | Asset
^(debts?|liabilit(y|ies))(:|$)                                      | Liability
^equity:(trad(e|ing)|conversion)s?(:|$)                             | Conversion
^equity(:|$)                                                        | Equity
^(income|revenue)s?(:|$)                                            | Revenue
^expenses?(:|$)                                                     | Expense
</code></pre>
</li>
<li>
<p>If you declare any account types, it's a good idea to declare an
account for all of the account types, because a mixture of declared
and name-inferred types can disrupt certain reports.</p>
</li>
<li>
<p>Certain uses of <a href="#alias-directive">account aliases</a> can disrupt
account types. See <a href="#aliases-and-account-types">Rewriting accounts &gt; Aliases and account
types</a>.</p>
</li>
<li>
<p>As mentioned above, subaccounts will inherit a type from their
parent account. More precisely, an account's type is decided by the
first of these that exists:</p>
<ol>
<li>A <code>type:</code> declaration for this account.</li>
<li>A <code>type:</code> declaration in the parent accounts above it,
preferring the nearest.</li>
<li>An account type inferred from this account's name.</li>
<li>An account type inferred from a parent account's name,
preferring the nearest parent.</li>
<li>Otherwise, it will have no type.</li>
</ol>
</li>
<li>
<p>For troubleshooting, you can list accounts and their types with:</p>
<pre><code>$ hledger accounts --types [ACCTPAT] [-DEPTH] [type:TYPECODES]
</code></pre>
</li>
</ul>
<h3 id="alias-directive"><a class="header" href="#alias-directive"><code>alias</code> directive</a></h3>
<p>You can define account alias rules which rewrite your account names, or
parts of them, before generating reports. This can be useful for:</p>
<ul>
<li>expanding shorthand account names to their full form, allowing
easier data entry and a less verbose journal</li>
<li>adapting old journals to your current chart of accounts</li>
<li>experimenting with new account organisations, like a new hierarchy</li>
<li>combining two accounts into one, eg to see their sum or difference
on one line</li>
<li>customising reports</li>
</ul>
<p>Account aliases also rewrite account names in <a href="#account">account
directives</a>. They do not affect account names being entered
via hledger add or hledger-web.</p>
<p>Account aliases are very powerful. They are generally easy to use
correctly, but you can also generate invalid account names with them;
more on this below.</p>
<p>See also <a href="/rewrite-account-names.html">Rewrite account names</a>.</p>
<h4 id="basic-aliases"><a class="header" href="#basic-aliases">Basic aliases</a></h4>
<p>To set an account alias, use the <code>alias</code> directive in your journal file.
This affects all subsequent journal entries in the current file or its
<a href="#include-directive">included files</a> (but note: <a href="#aliases-and-multiple-files">not sibling or parent
files</a>). The spaces around the = are
optional:</p>
<pre><code class="language-journal">alias OLD = NEW
</code></pre>
<p>Or, you can use the <code>--alias 'OLD=NEW'</code> option on the command line. This
affects all entries. It's useful for trying out aliases interactively.</p>
<p>OLD and NEW are case sensitive full account names. hledger will replace
any occurrence of the old account name with the new one. Subaccounts are
also affected. Eg:</p>
<pre><code class="language-journal">alias checking = assets:bank:wells fargo:checking
; rewrites &quot;checking&quot; to &quot;assets:bank:wells fargo:checking&quot;, or &quot;checking:a&quot; to &quot;assets:bank:wells fargo:checking:a&quot;
</code></pre>
<h4 id="regex-aliases"><a class="header" href="#regex-aliases">Regex aliases</a></h4>
<p>There is also a more powerful variant that uses a <a href="#regular-expressions">regular
expression</a>, indicated by wrapping the pattern in
forward slashes. (This is the only place where hledger requires forward
slashes around a regular expression.)</p>
<p>Eg:</p>
<pre><code class="language-journal">alias /REGEX/ = REPLACEMENT
</code></pre>
<p>or:</p>
<pre><code class="language-cli">$ hledger --alias '/REGEX/=REPLACEMENT' ...
</code></pre>
<p>Any part of an account name matched by REGEX will be replaced by
REPLACEMENT. REGEX is case-insensitive as usual.</p>
<p>If you need to match a forward slash, escape it with a backslash, eg
<code>/\/=:</code>.</p>
<p>If REGEX contains parenthesised match groups, these can be referenced by
the usual backslash and number in REPLACEMENT:</p>
<pre><code class="language-journal">alias /^(.+):bank:([^:]+):(.*)/ = \1:\2 \3
; rewrites &quot;assets:bank:wells fargo:checking&quot; to  &quot;assets:wells fargo checking&quot;
</code></pre>
<p>REPLACEMENT continues to the end of line (or on command line, to end of
option argument), so it can contain trailing whitespace.</p>
<h4 id="combining-aliases"><a class="header" href="#combining-aliases">Combining aliases</a></h4>
<p>You can define as many aliases as you like, using journal directives
and/or command line options.</p>
<p>Recursive aliases - where an account name is rewritten by one alias,
then by another alias, and so on - are allowed. Each alias sees the
effect of previously applied aliases.</p>
<p>In such cases it can be important to understand which aliases will be
applied and in which order. For (each account name in) each journal
entry, we apply:</p>
<ol>
<li><code>alias</code> directives preceding the journal entry, most recently parsed
first (ie, reading upward from the journal entry, bottom to top)</li>
<li><code>--alias</code> options, in the order they appeared on the command line
(left to right).</li>
</ol>
<p>In other words, for (an account name in) a given journal entry:</p>
<ul>
<li>the nearest alias declaration before/above the entry is applied
first</li>
<li>the next alias before/above that will be be applied next, and so on</li>
<li>aliases defined after/below the entry do not affect it.</li>
</ul>
<p>This gives nearby aliases precedence over distant ones, and helps
provide semantic stability - aliases will keep working the same way
independent of which files are being read and in which order.</p>
<p>In case of trouble, adding <code>--debug=6</code> to the command line will show
which aliases are being applied when.</p>
<h4 id="aliases-and-multiple-files"><a class="header" href="#aliases-and-multiple-files">Aliases and multiple files</a></h4>
<p>As explained at <a href="#directives-and-multiple-files">Directives and multiple
files</a>, <code>alias</code> directives do not affect
parent or sibling files. Eg in this command,</p>
<pre><code class="language-cli">hledger -f a.aliases -f b.journal
</code></pre>
<p>account aliases defined in a.aliases will not affect b.journal.
Including the aliases doesn't work either:</p>
<pre><code class="language-journal">include a.aliases

2023-01-01  ; not affected by a.aliases
  foo  1
  bar
</code></pre>
<p>This means that account aliases should usually be declared at the start
of your top-most file, like this:</p>
<pre><code class="language-journal">alias foo=Foo
alias bar=Bar

2023-01-01  ; affected by aliases above
  foo  1
  bar

include c.journal  ; also affected
</code></pre>
<h4 id="end-aliases-directive"><a class="header" href="#end-aliases-directive"><code>end aliases</code> directive</a></h4>
<p>You can clear (forget) all currently defined aliases (seen in the
journal so far, or defined on the command line) with this directive:</p>
<pre><code class="language-journal">end aliases
</code></pre>
<h4 id="aliases-can-generate-bad-account-names"><a class="header" href="#aliases-can-generate-bad-account-names">Aliases can generate bad account names</a></h4>
<p>Be aware that account aliases can produce malformed account names, which
could cause confusing reports or invalid <a href="#print"><code>print</code></a> output. For
example, you could erase all account names:</p>
<pre><code class="language-journal">2021-01-01
  a:aa     1
  b
</code></pre>
<pre><code class="language-cli">$ hledger print --alias '/.*/='
2021-01-01
                   1
</code></pre>
<p>The above <code>print</code> output is not a valid journal. Or you could insert an
illegal double space, causing <code>print</code> output that would give a different
journal when reparsed:</p>
<pre><code class="language-journal">2021-01-01
  old    1
  other
</code></pre>
<pre><code class="language-cli">$ hledger print --alias old=&quot;new  USD&quot; | hledger -f- print
2021-01-01
    new             USD 1
    other
</code></pre>
<h4 id="aliases-and-account-types"><a class="header" href="#aliases-and-account-types">Aliases and account types</a></h4>
<p>If an account with a type declaration (see <a href="#account-types">Declaring accounts &gt;
Account types</a>) is renamed by an alias, normally the
account type remains in effect.</p>
<p>However, renaming in a way that reshapes the account tree (eg renaming
parent accounts but not their children, or vice versa) could prevent
child accounts from inheriting the account type of their parents.</p>
<p>Secondly, if an account's type is being inferred from its name,
renaming it by an alias could prevent or alter that.</p>
<p>If you are using account aliases and the <a href="#queries"><code>type:</code> query</a> is
not matching accounts as you expect, try troubleshooting with the
accounts command, eg something like:</p>
<pre><code class="language-cli">$ hledger accounts --alias assets=bassetts type:a
</code></pre>
<h3 id="commodity-directive"><a class="header" href="#commodity-directive"><code>commodity</code> directive</a></h3>
<p>The <code>commodity</code> directive performs several functions:</p>
<ol>
<li>
<p>It declares which commodity symbols may be used in the journal,
enabling useful error checking with <a href="#strict-mode">strict mode</a> or
the check command. (See <a href="#commodity-error-checking">Commodity error
checking</a> below.)</p>
</li>
<li>
<p>It declares the precision with which this commodity's amounts
should be compared when checking for balanced transactions.</p>
</li>
<li>
<p>It declares how this commodity's amounts should be displayed, eg
their symbol placement, digit group mark if any, digit group sizes,
decimal mark (period or comma), and the number of decimal places.
(See <a href="#commodity-display-style">Commodity display style</a> above.)</p>
</li>
<li>
<p>It sets which decimal mark (period or comma) to expect when parsing
subsequent amounts in this commodity (if there is no <code>decimal-mark</code>
directive in effect. See <a href="hledger.html#decimal-marks-digit-group-marks">Decimal marks, digit group
marks</a> above. For
related dev discussion, see
<a href="https://github.com/simonmichael/hledger/issues/793">#793</a>.)</p>
</li>
</ol>
<p>Declaring commodities solves several common parsing/display problems, so
we recommend it. Generally you should put <code>commodity</code> directives at the
top of your journal file (because function 4 is position-sensitive).</p>
<h4 id="commodity-directive-syntax"><a class="header" href="#commodity-directive-syntax">Commodity directive syntax</a></h4>
<p>A commodity directive is normally the word <code>commodity</code> followed by a
sample <a href="#amounts">amount</a> (and optionally a comment). Only the amount's
symbol and format is significant. Eg:</p>
<pre><code class="language-journal">commodity $1000.00
commodity 1.000,00 EUR
commodity 1 000 000.0000   ; the no-symbol commodity
</code></pre>
<p>Commodities do not have tags (tags in the comment will be ignored).</p>
<p>A commodity directive's sample amount must always include a period or
comma decimal mark (this rule helps disambiguate decimal marks and digit
group marks). If you don't want to show any decimal digits, write the
decimal mark at the end:</p>
<pre><code class="language-journal">commodity 1000. AAAA       ; show AAAA with no decimals
</code></pre>
<p>Commodity symbols containing spaces, numbers, or punctuation must be
enclosed in double quotes, <a href="#commodity">as usual</a>:</p>
<pre><code class="language-journal">commodity 1.0000 &quot;AAAA 2023&quot;
</code></pre>
<p>Commodity directives normally include a sample amount, but can declare
only a symbol (ie, just function 1 above):</p>
<pre><code class="language-journal">commodity $
commodity INR
commodity &quot;AAAA 2023&quot;
commodity &quot;&quot;               ; the no-symbol commodity
</code></pre>
<p>Commodity directives may also be written with an indented <code>format</code>
subdirective, as in Ledger. The symbol is repeated and must be the same
in both places. Other subdirectives are currently ignored:</p>
<pre><code class="language-journal">; display indian rupees with currency name on the left,
; thousands, lakhs and crores comma-separated,
; period as decimal point, and two decimal places.
commodity INR
  format INR 1,00,00,000.00
  an unsupported subdirective  ; ignored by hledger
</code></pre>
<h4 id="commodity-error-checking"><a class="header" href="#commodity-error-checking">Commodity error checking</a></h4>
<p>In <a href="#strict-mode">strict mode</a> (<code>-s</code>/<code>--strict</code>) (or when you run
<code>hledger check commodities</code>), hledger will report an error if an
undeclared commodity symbol is used. (With one exception: zero amounts
are always allowed to have no commodity symbol.) It works like <a href="#account-error-checking">account
error checking</a> (described above).</p>
<h3 id="decimal-mark-directive"><a class="header" href="#decimal-mark-directive"><code>decimal-mark</code> directive</a></h3>
<p>You can use a <code>decimal-mark</code> directive - usually one per file, at the
top of the file - to declare which character represents a decimal mark
when parsing amounts in this file. It can look like</p>
<pre><code class="language-journal">decimal-mark .
</code></pre>
<p>or</p>
<pre><code class="language-journal">decimal-mark ,
</code></pre>
<p>This prevents any <a href="#decimal-marks-digit-group-marks">ambiguity</a> when
parsing numbers in the file, so we recommend it, especially if the file
contains digit group marks (eg thousands separators).</p>
<h3 id="include-directive"><a class="header" href="#include-directive"><code>include</code> directive</a></h3>
<p>You can pull in the content of additional files by writing an include
directive, like this:</p>
<pre><code class="language-journal">include FILEPATH
</code></pre>
<p>Only journal files can include, and only journal, timeclock or timedot
files can be included (not CSV files, currently).</p>
<p>If the file path does not begin with a slash, it is relative to the
current file's folder.</p>
<p>A tilde means home directory, eg: <code>include ~/main.journal</code>.</p>
<p>The path may contain <a href="https://hackage.haskell.org/package/Glob-0.9.2/docs/System-FilePath-Glob.html#v:compile">glob
patterns</a>
to match multiple files, eg: <code>include *.journal</code>.</p>
<p>There is limited support for recursive wildcards: <code>**/</code> (the slash is
required) matches 0 or more subdirectories. It's not super convenient
since you have to avoid include cycles and including directories, but
this can be done, eg: <code>include */**/*.journal</code>.</p>
<p>The path may also be prefixed to force a specific file format,
overriding the file extension (as described in <a href="#data-formats">Data
formats</a>): <code>include timedot:~/notes/2023*.md</code>.</p>
<h3 id="p-directive"><a class="header" href="#p-directive"><code>P</code> directive</a></h3>
<p>The <code>P</code> directive declares a market price, which is a conversion rate
between two commodities on a certain date. This allows <a href="#value-reporting">value
reports</a> to convert amounts of one commodity to their
value in another, on or after that date. These prices are often obtained
from a <a href="https://en.wikipedia.org/wiki/Stock_exchange">stock exchange</a>,
<a href="https://en.wikipedia.org/wiki/Cryptocurrency_exchange">cryptocurrency
exchange</a>, the or
<a href="https://en.wikipedia.org/wiki/Foreign_exchange_market">foreign exchange
market</a>.</p>
<p>The format is:</p>
<pre><code class="language-journal">P DATE COMMODITY1SYMBOL COMMODITY2AMOUNT
</code></pre>
<p>DATE is a <a href="#simple-dates">simple date</a>, COMMODITY1SYMBOL is the symbol
of the commodity being priced, and COMMODITY2AMOUNT is the
<a href="#amounts">amount</a> (symbol and quantity) of commodity 2 that one unit of
commodity 1 is worth on this date. Examples:</p>
<pre><code class="language-journal"># one euro was worth $1.35 from 2009-01-01 onward:
P 2009-01-01 € $1.35

# and $1.40 from 2010-01-01 onward:
P 2010-01-01 € $1.40
</code></pre>
<p>The <code>-V</code>, <code>-X</code> and <code>--value</code> flags use these market prices to show
amount values in another commodity. See <a href="#value-reporting">Value
reporting</a>.</p>
<p><a name="automated-postings"></a></p>
<h3 id="payee-directive"><a class="header" href="#payee-directive"><code>payee</code> directive</a></h3>
<p><code>payee PAYEE NAME</code></p>
<p>This directive can be used to declare a limited set of payees which may
appear in <a href="#descriptions">transaction descriptions</a>. The <a href="#check">&quot;payees&quot;
check</a> will report an error if any transaction refers to a payee
that has not been declared. Eg:</p>
<pre><code class="language-journal">payee Whole Foods    ; a comment
</code></pre>
<p>Payees do not have tags (tags in the comment will be ignored).</p>
<p>To declare the empty payee name, use <code>&quot;&quot;</code>.</p>
<pre><code class="language-journal">payee &quot;&quot;
</code></pre>
<p>Ledger-style indented subdirectives, if any, are currently ignored.</p>
<h3 id="tag-directive"><a class="header" href="#tag-directive"><code>tag</code> directive</a></h3>
<p><code>tag TAGNAME</code></p>
<p>This directive can be used to declare a limited set of tag names allowed
in <a href="#tags">tags</a>. TAGNAME should be a valid tag name (no spaces). Eg:</p>
<pre><code class="language-journal">tag  item-id
</code></pre>
<p>Any indented subdirectives are currently ignored.</p>
<p>The <a href="#check">&quot;tags&quot; check</a> will report an error if any undeclared tag
name is used. It is quite easy to accidentally create a tag through
normal use of colons in <a href="#comments">comments</a>(#comments]; if you want
to prevent this, you can declare and check your tags .</p>
<h3 id="periodic-transactions"><a class="header" href="#periodic-transactions">Periodic transactions</a></h3>
<p>The <code>~</code> directive declares recurring transactions. Such directives allow
hledger to generate temporary future transactions (visible in reports,
not in the journal file) to help with <a href="#forecasting">forecasting</a> or
<a href="#budgeting">budgeting</a>.</p>
<p>Periodic transactions can be a little tricky, so before you use them,
read this whole section, or at least these tips:</p>
<ol>
<li>Two spaces accidentally added or omitted will cause you trouble -
read about this below.</li>
<li>For troubleshooting, show the generated transactions with
<code>hledger print --forecast tag:generated</code> or
<code>hledger register --forecast tag:generated</code>.</li>
<li>Forecasted transactions will begin only after the last
non-forecasted transaction's date.</li>
<li>Forecasted transactions will end 6 months from today, by default.
See below for the exact start/end rules.</li>
<li><a href="#period-expressions">period expressions</a> can be tricky. Their
documentation needs improvement, but is worth studying.</li>
<li>Some period expressions with a repeating interval must begin on a
natural boundary of that interval. Eg in <code>weekly from DATE</code>, DATE
must be a monday. <code>~ weekly from 2019/10/1</code> (a tuesday) will give an
error.</li>
<li>Other period expressions with an interval are automatically expanded
to cover a whole number of that interval. (This is done to improve
reports, but it also affects periodic transactions. Yes, it's a bit
inconsistent with the above.) Eg: <br>
<code>~ every 10th day of month from 2023/01</code>, which is equivalent to
<br> <code>~ every 10th day of month from 2023/01/01</code>, will be adjusted
to start on 2019/12/10.</li>
</ol>
<h4 id="periodic-rule-syntax"><a class="header" href="#periodic-rule-syntax">Periodic rule syntax</a></h4>
<p>A periodic transaction rule looks like a normal journal entry, with the
date replaced by a tilde (<code>~</code>) followed by a <a href="#period-expressions">period
expression</a> (mnemonic: <code>~</code> looks like a recurring
sine wave.):</p>
<pre><code class="language-journal"># every first of month
~ monthly
    expenses:rent          $2000
    assets:bank:checking

# every 15th of month in 2023's first quarter:
~ monthly from 2023-04-15 to 2023-06-16
    expenses:utilities          $400
    assets:bank:checking
</code></pre>
<p>The period expression is the same syntax used for specifying
multi-period reports, just interpreted differently; there, it specifies
report periods; here it specifies recurrence dates (the periods' start
dates).</p>
<h4 id="periodic-rules-and-relative-dates"><a class="header" href="#periodic-rules-and-relative-dates">Periodic rules and relative dates</a></h4>
<p>Partial or relative dates (like <code>12/31</code>, <code>25</code>, <code>tomorrow</code>, <code>last week</code>,
<code>next quarter</code>) are usually not recommended in periodic rules, since the
results will change as time passes. If used, they will be interpreted
relative to, in order of preference:</p>
<ol>
<li>the first day of the default year specified by a recent <code>Y</code>
directive</li>
<li>or the date specified with <code>--today</code></li>
<li>or the date on which you are running the report.</li>
</ol>
<p>They will not be affected at all by report period or forecast period
dates.</p>
<h4 id="two-spaces-between-period-expression-and-description"><a class="header" href="#two-spaces-between-period-expression-and-description">Two spaces between period expression and description!</a></h4>
<p>If the period expression is followed by a transaction description, these
must be separated by <strong>two or more spaces</strong>. This helps hledger know
where the period expression ends, so that descriptions can not
accidentally alter their meaning, as in this example:</p>
<pre><code>; 2 or more spaces needed here, so the period is not understood as &quot;every 2 months in 2023&quot;
;               ||
;               vv
~ every 2 months  in 2023, we will review
    assets:bank:checking   $1500
    income:acme inc
</code></pre>
<p>So,</p>
<ul>
<li>Do write two spaces between your period expression and your
transaction description, if any.</li>
<li>Don't accidentally write two spaces in the middle of your period
expression.</li>
</ul>
<h3 id="auto-postings"><a class="header" href="#auto-postings">Auto postings</a></h3>
<p>The <code>=</code> directive declares a rule for generating temporary extra
postings on transactions. Wherever the rule matches an existing posting,
it can add one or more companion postings below that one, optionally
influenced by the matched posting's amount. This can be useful for
generating tax postings with a standard percentage, for example.</p>
<p>Note that depending on generated data is not ideal for financial records
(it's less portable, less future-proof, less auditable by others, and
less robust, since other features like balance assertions will depend on
using or not using <code>--auto</code>).</p>
<p>An auto posting rule looks a bit like a transaction:</p>
<pre><code class="language-journal">= QUERY
    ACCOUNT  AMOUNT
    ...
    ACCOUNT  [AMOUNT]
</code></pre>
<p>except the first line is an equals sign (mnemonic: <code>=</code> suggests
matching), followed by a <a href="#queries">query</a> (which matches existing
postings), and each &quot;posting&quot; line describes a posting to be
generated, and the posting amounts can be:</p>
<ul>
<li>a normal amount with a commodity symbol, eg <code>$2</code>. This will be used
as-is.</li>
<li>a number, eg <code>2</code>. The commodity symbol (if any) from the matched
posting will be added to this.</li>
<li>a numeric multiplier, eg <code>*2</code> (a star followed by a number N). The
matched posting's amount (and total price, if any) will be
multiplied by N.</li>
<li>a multiplier with a commodity symbol, eg <code>*$2</code> (a star, number N,
and symbol S). The matched posting's amount will be multiplied by
N, and its commodity symbol will be replaced with S.</li>
</ul>
<p>Any query term containing spaces must be enclosed in single or double
quotes, as on the command line. Eg, note the quotes around the second
query term below:</p>
<pre><code class="language-journal">= expenses:groceries 'expenses:dining out'
    (budget:funds:dining out)                 *-1
</code></pre>
<p>Some examples:</p>
<pre><code class="language-journal">; every time I buy food, schedule a dollar donation
= expenses:food
    (liabilities:charity)   $-1

; when I buy a gift, also deduct that amount from a budget envelope subaccount
= expenses:gifts
    assets:checking:gifts  *-1
    assets:checking         *1

2017/12/1
  expenses:food    $10
  assets:checking

2017/12/14
  expenses:gifts   $20
  assets:checking
</code></pre>
<pre><code class="language-cli">$ hledger print --auto
2017-12-01
    expenses:food              $10
    assets:checking
    (liabilities:charity)      $-1

2017-12-14
    expenses:gifts             $20
    assets:checking
    assets:checking:gifts     -$20
    assets:checking            $20
</code></pre>
<h5 id="auto-postings-and-multiple-files"><a class="header" href="#auto-postings-and-multiple-files">Auto postings and multiple files</a></h5>
<p>An auto posting rule can affect any transaction in the current file, or
in any parent file or child file. Note, currently it will not affect
sibling files (when multiple <code>-f</code>/<code>--file</code> are used - see
<a href="https://github.com/simonmichael/hledger/issues/1212">#1212</a>).</p>
<h5 id="auto-postings-and-dates"><a class="header" href="#auto-postings-and-dates">Auto postings and dates</a></h5>
<p>A <a href="#posting-dates">posting date</a> (or secondary date) in the matched
posting, or (taking precedence) a posting date in the auto posting rule
itself, will also be used in the generated posting.</p>
<h5 id="auto-postings-and-transaction-balancing--inferred-amounts--balance-assertions"><a class="header" href="#auto-postings-and-transaction-balancing--inferred-amounts--balance-assertions">Auto postings and transaction balancing / inferred amounts / balance assertions</a></h5>
<p>Currently, auto postings are added:</p>
<ul>
<li>after <a href="#postings">missing amounts are inferred, and transactions are checked
for balancedness</a>,</li>
<li>but before <a href="#balance-assertions">balance assertions</a> are checked.</li>
</ul>
<p>Note this means that journal entries must be balanced both before and
after auto postings are added. This changed in hledger 1.12+; see
<a href="https://github.com/simonmichael/hledger/issues/893">#893</a> for
background.</p>
<p>This also means that you cannot have more than one auto-posting with a
missing amount applied to a given transaction, as it will be unable to
infer amounts.</p>
<h5 id="auto-posting-tags"><a class="header" href="#auto-posting-tags">Auto posting tags</a></h5>
<p>Automated postings will have some extra <a href="#tags">tags</a>:</p>
<ul>
<li><code>generated-posting:= QUERY</code> - shows this was generated by an auto
posting rule, and the query</li>
<li><code>_generated-posting:= QUERY</code> - a hidden tag, which does not appear
in hledger's output. This can be used to match postings generated
&quot;just now&quot;, rather than generated in the past and saved to the
journal.</li>
</ul>
<p>Also, any transaction that has been changed by auto posting rules will
have these tags added:</p>
<ul>
<li><code>modified:</code> - this transaction was modified</li>
<li><code>_modified:</code> - a hidden tag not appearing in the comment; this
transaction was modified &quot;just now&quot;.</li>
</ul>
<h5 id="auto-postings-on-forecast-transactions-only"><a class="header" href="#auto-postings-on-forecast-transactions-only">Auto postings on forecast transactions only</a></h5>
<p>Tip: you can can make auto postings that will apply to forecast
transactions but not recorded transactions, by adding
<code>tag:_generated-transaction</code> to their QUERY. This can be useful when
generating new journal entries to be saved in the journal.</p>
<h3 id="other-syntax"><a class="header" href="#other-syntax">Other syntax</a></h3>
<p>hledger journal format supports quite a few other features, mainly to
make interoperating with or converting from Ledger easier. Note some of
the features below are powerful and can be useful in special cases, but
in general, features in this section are considered less important or
even not recommended for most users. Downsides are mentioned to help you
decide if you want to use them.</p>
<h4 id="balance-assignments"><a class="header" href="#balance-assignments">Balance assignments</a></h4>
<p><a href="http://ledger-cli.org/3.0/doc/ledger3.html#Balance-assignments">Ledger-style balance
assignments</a>
are also supported. These are like <a href="#balance-assertions">balance
assertions</a>, but with no posting amount on the left
side of the equals sign; instead it is calculated automatically so as to
satisfy the assertion. This can be a convenience during data entry, eg
when setting opening balances:</p>
<pre><code class="language-journal">; starting a new journal, set asset account balances
2016/1/1 opening balances
  assets:checking            = $409.32
  assets:savings             = $735.24
  assets:cash                 = $42
  equity:opening balances
</code></pre>
<p>or when adjusting a balance to reality:</p>
<pre><code class="language-journal">; no cash left; update balance, record any untracked spending as a generic expense
2016/1/15
  assets:cash    = $0
  expenses:misc
</code></pre>
<p>The calculated amount depends on the account's balance in the commodity
at that point (which depends on the previously-dated postings of the
commodity to that account since the last balance assertion or
assignment).</p>
<p>Downsides: using balance assignments makes your journal less explicit;
to know the exact amount posted, you have to run hledger or do the
calculations yourself, instead of just reading it. Also balance
assignments' forcing of balances can hide errors. These things make
your financial data less portable, less future-proof, and less
trustworthy in an audit.</p>
<h5 id="balance-assignments-and-prices"><a class="header" href="#balance-assignments-and-prices">Balance assignments and prices</a></h5>
<p>A <a href="#costs">cost</a> in a balance assignment will cause the calculated
amount to have that price attached:</p>
<pre><code class="language-journal">2019/1/1
  (a)             = $1 @ €2
</code></pre>
<pre><code>$ hledger print --explicit
2019-01-01
    (a)         $1 @ €2 = $1 @ €2
</code></pre>
<h5 id="balance-assignments-and-multiple-files"><a class="header" href="#balance-assignments-and-multiple-files">Balance assignments and multiple files</a></h5>
<p>Balance assignments handle multiple files <a href="#assertions-and-multiple--f-files">like balance
assertions</a>. They see balance from
other files previously included from the current file, but not from
previous sibling or parent files.</p>
<h4 id="bracketed-posting-dates"><a class="header" href="#bracketed-posting-dates">Bracketed posting dates</a></h4>
<p>For setting <a href="#posting-dates">posting dates</a> and <a href="#secondary-dates">secondary posting
dates</a>, Ledger's bracketed date syntax is also
supported: <code>[DATE]</code>, <code>[DATE=DATE2]</code> or <code>[=DATE2]</code> in posting comments.
hledger will attempt to parse any square-bracketed sequence of the
<code>0123456789/-.=</code> characters in this way. With this syntax, DATE infers
its year from the transaction and DATE2 infers its year from DATE.</p>
<p>Downsides: another syntax to learn, redundant with hledger's
<code>date:</code>/<code>date2:</code> tags, and confusingly similar to Ledger's lot date
syntax.</p>
<h4 id="d-directive"><a class="header" href="#d-directive"><code>D</code> directive</a></h4>
<p><code>D AMOUNT</code></p>
<p>This directive sets a default commodity, to be used for any subsequent
commodityless amounts (ie, plain numbers) seen while parsing the
journal. This effect lasts until the next <code>D</code> directive, or the end of
the journal.</p>
<p>For compatibility/historical reasons, <code>D</code> also acts like a <a href="#commodity-directive"><code>commodity</code>
directive</a> (setting the commodity's decimal mark
for parsing and <a href="#amount-display-format">display style</a> for output). So
its argument is not just a commodity symbol, but a full amount
demonstrating the style. The amount must include a decimal mark (either
period or comma). Eg:</p>
<pre><code class="language-journal">; commodity-less amounts should be treated as dollars
; (and displayed with the dollar sign on the left, thousands separators and two decimal places)
D $1,000.00

1/1
  a     5  ; &lt;- commodity-less amount, parsed as $5 and displayed as $5.00
  b
</code></pre>
<p>Interactions with other directives:</p>
<p>For setting a commodity's display style, a <code>commodity</code> directive has
highest priority, then a <code>D</code> directive.</p>
<p>For detecting a commodity's decimal mark during parsing, <code>decimal-mark</code>
has highest priority, then <code>commodity</code>, then <code>D</code>.</p>
<p>For checking commodity symbols with the <a href="#check">check command</a>, a
<code>commodity</code> directive is required (<code>hledger check commodities</code> ignores
<code>D</code> directives).</p>
<p>Downsides: omitting commodity symbols makes your financial data less
explicit, less portable, and less trustworthy in an audit. It is usually
an unsustainable shortcut; sooner or later you will want to track
multiple commodities. D is overloaded with functions redundant with
<code>commodity</code> and <code>decimal-mark</code>. And it works differently from Ledger's
<code>D</code>.</p>
<h4 id="apply-account-directive"><a class="header" href="#apply-account-directive"><code>apply account</code> directive</a></h4>
<p>This directive sets a default parent account, which will be prepended to
all accounts in following entries, until an <code>end apply account</code>
directive or end of current file. Eg:</p>
<pre><code class="language-journal">apply account home

2010/1/1
    food    $10
    cash

end apply account
</code></pre>
<p>is equivalent to:</p>
<pre><code class="language-journal">2010/01/01
    home:food           $10
    home:cash          $-10
</code></pre>
<p><code>account</code> directives are also affected, and so is any <code>include</code>d
content.</p>
<p>Account names entered via hledger add or hledger-web are not affected.</p>
<p>Account aliases, if any, are applied after the parent account is
prepended.</p>
<p>Downsides: this can make your financial data less explicit, less
portable, and less trustworthy in an audit.</p>
<h4 id="y-directive"><a class="header" href="#y-directive"><code>Y</code> directive</a></h4>
<p><code>Y YEAR</code></p>
<p>or (deprecated backward-compatible forms):</p>
<p><code>year YEAR</code> <code>apply year YEAR</code></p>
<p>The space is optional. This sets a default year to be used for
subsequent dates which don't specify a year. Eg:</p>
<pre><code class="language-journal">Y2009  ; set default year to 2009

12/15  ; equivalent to 2009/12/15
  expenses  1
  assets

year 2010  ; change default year to 2010

2009/1/30  ; specifies the year, not affected
  expenses  1
  assets

1/31   ; equivalent to 2010/1/31
  expenses  1
  assets
</code></pre>
<p>Downsides: omitting the year (from primary transaction dates, at least)
makes your financial data less explicit, less portable, and less
trustworthy in an audit. Such dates can get separated from their
corresponding Y directive, eg when evaluating a region of the journal in
your editor. A missing Y directive makes reports dependent on today's
date.</p>
<h4 id="secondary-dates"><a class="header" href="#secondary-dates">Secondary dates</a></h4>
<p>A secondary date is written after the primary date, following an equals
sign. If the year is omitted, the primary date's year is assumed. When
running reports, the primary (left) date is used by default, but with
the <code>--date2</code> flag (or <code>--aux-date</code> or <code>--effective</code>), the secondary
(right) date will be used instead.</p>
<p>The meaning of secondary dates is up to you, but it's best to follow a
consistent rule. Eg &quot;primary = the bank's clearing date, secondary =
date the transaction was initiated, if different&quot;.</p>
<p>Downsides: makes your financial data more complicated, less portable,
and less trustworthy in an audit. Keeping the meaning of the two dates
consistent requires discipline, and you have to remember which reporting
mode is appropriate for a given report. <a href="#posting-dates">Posting dates</a>
are simpler and better.</p>
<h4 id="star-comments"><a class="header" href="#star-comments">Star comments</a></h4>
<p>Lines beginning with <code>*</code> (star/asterisk) are also comment lines. This
feature allows Emacs users to insert org headings in their journal,
allowing them to fold/unfold/navigate it like an outline when viewed
with org mode.</p>
<p>Downsides: another, unconventional comment syntax to learn. Decreases
your journal's portability. And switching to Emacs org mode just for
folding/unfolding meant losing the benefits of ledger mode; nowadays you
can add outshine mode to ledger mode to get folding without losing
ledger mode's features.</p>
<h4 id="valuation-expressions"><a class="header" href="#valuation-expressions">Valuation expressions</a></h4>
<p>Ledger allows a valuation function or value to be written in double
parentheses after an amount. hledger ignores these.</p>
<h4 id="virtual-postings"><a class="header" href="#virtual-postings">Virtual postings</a></h4>
<p>A posting with parentheses around the account name (<code>(some:account)</code>) is
called a <em>unbalanced virtual posting</em>. Such postings do not participate
in transaction balancing. (And if you write them without an amount, a
zero amount is always inferred.) These can occasionally be convenient
for special circumstances, but they violate double entry bookkeeping and
make your data less portable across applications, so many people avoid
using them at all.</p>
<p>A posting with brackets around the account name (<code>[some:account]</code>) is
called a <em>balanced virtual posting</em>. The balanced virtual postings in a
transaction must add up to zero, just like ordinary postings, but
separately from them. These are not part of double entry bookkeeping
either, but they are at least balanced. An example:</p>
<pre><code class="language-journal">2022-01-01 buy food with cash, update budget envelope subaccounts, &amp; something else
  assets:cash                    $-10  ; &lt;- these balance each other
  expenses:food                    $7  ; &lt;-
  expenses:food                    $3  ; &lt;-
  [assets:checking:budget:food]  $-10  ;   &lt;- and these balance each other
  [assets:checking:available]     $10  ;   &lt;-
  (something:else)                 $5  ;     &lt;- this is not required to balance
</code></pre>
<p>Ordinary postings, whose account names are neither parenthesised nor
bracketed, are called <em>real postings</em>. You can exclude virtual postings
from reports with the <code>-R/--real</code> flag or a <code>real:1</code> query.</p>
<h4 id="other-ledger-directives"><a class="header" href="#other-ledger-directives">Other Ledger directives</a></h4>
<p>These other Ledger directives are currently accepted but ignored. This
allows hledger to read more Ledger files, but be aware that hledger's
reports may differ from Ledger's if you use these.</p>
<pre><code class="language-journal">apply fixed COMM AMT
apply tag   TAG
assert      EXPR
bucket / A  ACCT
capture     ACCT REGEX
check       EXPR
define      VAR=EXPR
end apply fixed
end apply tag
end apply year
end tag
eval / expr EXPR
python
  PYTHONCODE
tag         NAME
value       EXPR
--command-line-flags
</code></pre>
<p>See also <a href="https://hledger.org/ledger.html">https://hledger.org/ledger.html</a> for a detailed hledger/Ledger
syntax comparison.</p>
<p><a name="csv-format"></a></p>
<h2 id="csv"><a class="header" href="#csv">CSV</a></h2>
<p>hledger can read
<a href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a> files
(Character Separated Value - usually comma, semicolon, or tab)
containing dated records, automatically converting each record into a
transaction.</p>
<p>(To learn about <em>writing</em> CSV, see <a href="#csv-output">CSV output</a>.)</p>
<p>For best error messages when reading CSV/TSV/SSV files, make sure they
have a corresponding <code>.csv</code>, <code>.tsv</code> or <code>.ssv</code> file extension or use a
hledger file prefix (see <a href="#file-extension">File Extension</a> below).</p>
<p>Each CSV file must be described by a corresponding <em>rules file</em>.<br />
This contains rules describing the CSV data (header line, fields layout,
date format etc.), how to construct hledger transactions from it, and
how to categorise transactions based on description or other attributes.</p>
<p>By default hledger looks for a rules file named like the CSV file with
an extra <code>.rules</code> extension, in the same directory. Eg when asked to
read <code>foo/FILE.csv</code>, hledger looks for <code>foo/FILE.csv.rules</code>. You can
specify a different rules file with the <code>--rules-file</code> option. If no
rules file is found, hledger will create a sample rules file, which
you'll need to adjust.</p>
<p>At minimum, the rules file must identify the date and amount fields, and
often it also specifies the date format and how many header lines there
are. Here's a simple CSV file and a rules file for it:</p>
<pre><code class="language-csv">Date, Description, Id, Amount
12/11/2019, Foo, 123, 10.23
</code></pre>
<pre><code class="language-rules"># basic.csv.rules
skip         1
fields       date, description, , amount
date-format  %d/%m/%Y
</code></pre>
<pre><code class="language-cli">$ hledger print -f basic.csv
2019-11-12 Foo
    expenses:unknown           10.23
    income:unknown            -10.23
</code></pre>
<p>There's an introductory <a href="/import-csv.html">Importing CSV data</a> tutorial
on hledger.org, and more <a href="#csv-rules-examples">CSV rules examples</a>
below, and a larger collection at
<a href="https://github.com/simonmichael/hledger/tree/master/examples/csv">https://github.com/simonmichael/hledger/tree/master/examples/csv</a>.</p>
<h3 id="csv-rules-cheatsheet"><a class="header" href="#csv-rules-cheatsheet">CSV rules cheatsheet</a></h3>
<p>The following kinds of rule can appear in the rules file, in any order.
(Blank lines and lines beginning with <code>#</code> or <code>;</code> or <code>*</code> are ignored.)</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><a href="#source"><strong><code>source</code></strong></a></td><td>optionally declare which file to read data from</td></tr>
<tr><td><a href="#separator"><strong><code>separator</code></strong></a></td><td>declare the field separator, instead of relying on file extension</td></tr>
<tr><td><a href="#skip"><strong><code>skip</code></strong></a></td><td>skip one or more header lines at start of file</td></tr>
<tr><td><a href="#date-format"><strong><code>date-format</code></strong></a></td><td>declare how to parse CSV dates/date-times</td></tr>
<tr><td><a href="#timezone"><strong><code>timezone</code></strong></a></td><td>declare the time zone of ambiguous CSV date-times</td></tr>
<tr><td><a href="#newest-first"><strong><code>newest-first</code></strong></a></td><td>improve txn order when: there are multiple records, newest first, all with the same date</td></tr>
<tr><td><a href="#intra-day-reversed"><strong><code>intra-day-reversed</code></strong></a></td><td>improve txn order when: same-day txns are in opposite order to the overall file</td></tr>
<tr><td><a href="#decimal-mark-1"><strong><code>decimal-mark</code></strong></a></td><td>declare the decimal mark used in CSV amounts, when ambiguous</td></tr>
<tr><td><a href="#fields-list"><strong><code>fields</code> list</strong></a></td><td>name CSV fields for easy reference, and optionally assign their values to hledger fields</td></tr>
<tr><td><a href="#field-assignment"><strong>Field assignment</strong></a></td><td>assign a CSV value or interpolated text value to a hledger field</td></tr>
<tr><td><a href="#if-block"><strong><code>if</code> block</strong></a></td><td>conditionally assign values to hledger fields, or <code>skip</code> a record or <code>end</code> (skip rest of file)</td></tr>
<tr><td><a href="#if-table"><strong><code>if</code> table</strong></a></td><td>conditionally assign values to hledger fields, using compact syntax</td></tr>
<tr><td><a href="#balance-type"><strong><code>balance-type</code></strong></a></td><td>select which type of balance assertions/assignments to generate</td></tr>
<tr><td><a href="#include"><strong><code>include</code></strong></a></td><td>inline another CSV rules file</td></tr>
</tbody></table>
</div>
<p><a href="#working-with-csv">Working with CSV</a> tips can be found below, including
<a href="#how-csv-rules-are-evaluated">How CSV rules are evaluated</a>.</p>
<h3 id="source"><a class="header" href="#source"><code>source</code></a></h3>
<p>If you tell hledger to read a csv file with <code>-f foo.csv</code>, it will look
for rules in <code>foo.csv.rules</code>. Or, you can tell it to read the rules
file, with <code>-f foo.csv.rules</code>, and it will look for data in <code>foo.csv</code>
(since 1.30).</p>
<p>These are mostly equivalent, but the second method provides some extra
features. For one, the data file can be missing, without causing an
error; it is just considered empty. And, you can specify a different
data file by adding a &quot;source&quot; rule:</p>
<pre><code class="language-rules">source ./Checking1.csv
</code></pre>
<p>If you specify just a file name with no path, hledger will look for it
in your system's downloads directory (<code>~/Downloads</code>, currently):</p>
<pre><code class="language-rules">source Checking1.csv
</code></pre>
<p>And if you specify a glob pattern, hledger will read the most recent of
the matched files (useful with repeated downloads):</p>
<pre><code class="language-rules">source Checking1*.csv
</code></pre>
<p>See also <a href="#reading-files-specified-by-rule">&quot;Working with CSV &gt; Reading files specified by
rule&quot;</a>.</p>
<h3 id="separator"><a class="header" href="#separator"><code>separator</code></a></h3>
<p>You can use the <code>separator</code> rule to read other kinds of
character-separated data. The argument is any single separator
character, or the words <code>tab</code> or <code>space</code> (case insensitive). Eg, for
comma-separated values (CSV):</p>
<pre><code class="language-rules">separator ,
</code></pre>
<p>or for semicolon-separated values (SSV):</p>
<pre><code class="language-rules">separator ;
</code></pre>
<p>or for tab-separated values (TSV):</p>
<pre><code class="language-rules">separator TAB
</code></pre>
<p>If the input file has a <code>.csv</code>, <code>.ssv</code> or <code>.tsv</code> <a href="#file-extension">file
extension</a> (or a <code>csv:</code>, <code>ssv:</code>, <code>tsv:</code> prefix), the
appropriate separator will be inferred automatically, and you won't
need this rule.</p>
<h3 id="skip"><a class="header" href="#skip"><code>skip</code></a></h3>
<pre><code class="language-rules">skip N
</code></pre>
<p>The word <code>skip</code> followed by a number (or no number, meaning 1) tells
hledger to ignore this many non-empty lines at the start of the input
data. You'll need this whenever your CSV data contains header lines.
Note, empty and blank lines are skipped automatically, so you don't
need to count those.</p>
<p><code>skip</code> has a second meaning: it can be used inside <a href="#if-block">if
blocks</a> (described below), to skip one or more records
whenever the condition is true. Records skipped in this way are ignored,
except they are still required to be <a href="#valid-csv">valid CSV</a>.</p>
<h3 id="date-format"><a class="header" href="#date-format"><code>date-format</code></a></h3>
<pre><code class="language-rules">date-format DATEFMT
</code></pre>
<p>This is a helper for the <code>date</code> (and <code>date2</code>) fields. If your CSV dates
are not formatted like <code>YYYY-MM-DD</code>, <code>YYYY/MM/DD</code> or <code>YYYY.MM.DD</code>,
you'll need to add a date-format rule describing them with a
strptime-style date parsing pattern - see
<a href="https://hackage.haskell.org/package/time/docs/Data-Time-Format.html#v:formatTime">https://hackage.haskell.org/package/time/docs/Data-Time-Format.html#v:formatTime</a>.
The pattern must parse the CSV date value completely. Some examples:</p>
<pre><code class="language-rules"># MM/DD/YY
date-format %m/%d/%y
</code></pre>
<pre><code class="language-rules"># D/M/YYYY
# The - makes leading zeros optional.
date-format %-d/%-m/%Y
</code></pre>
<pre><code class="language-rules"># YYYY-Mmm-DD
date-format %Y-%h-%d
</code></pre>
<pre><code class="language-rules"># M/D/YYYY HH:MM AM some other junk
# Note the time and junk must be fully parsed, though only the date is used.
date-format %-m/%-d/%Y %l:%M %p some other junk
</code></pre>
<h3 id="timezone"><a class="header" href="#timezone"><code>timezone</code></a></h3>
<pre><code class="language-rules">timezone TIMEZONE
</code></pre>
<p>When CSV contains date-times that are implicitly in some time zone other
than yours, but containing no explicit time zone information, you can
use this rule to declare the CSV's native time zone, which helps
prevent off-by-one dates.</p>
<p>When the CSV date-times do contain time zone information, you don't
need this rule; instead, use <code>%Z</code> in <code>date-format</code> (or <code>%z</code>, <code>%EZ</code>,
<code>%Ez</code>; see the formatTime link above).</p>
<p>In either of these cases, hledger will do a time-zone-aware conversion,
localising the CSV date-times to your current system time zone. If you
prefer to localise to some other time zone, eg for reproducibility, you
can (on unix at least) set the output timezone with the TZ environment
variable, eg:</p>
<pre><code class="language-cli">$ TZ=-1000 hledger print -f foo.csv  # or TZ=-1000 hledger import foo.csv
</code></pre>
<p><code>timezone</code> currently does not understand timezone names, except &quot;UTC&quot;,
&quot;GMT&quot;, &quot;EST&quot;, &quot;EDT&quot;, &quot;CST&quot;, &quot;CDT&quot;, &quot;MST&quot;, &quot;MDT&quot;, &quot;PST&quot;,
or &quot;PDT&quot;. For others, use numeric format: +HHMM or -HHMM.</p>
<h3 id="newest-first"><a class="header" href="#newest-first"><code>newest-first</code></a></h3>
<p>hledger tries to ensure that the generated transactions will be ordered
chronologically, including same-day transactions. Usually it can
auto-detect how the CSV records are ordered. But if it encounters CSV
where all records are on the same date, it assumes that the records are
oldest first. If in fact the CSV's records are normally newest first,
like:</p>
<pre><code class="language-csv">2022-10-01, txn 3...
2022-10-01, txn 2...
2022-10-01, txn 1...
</code></pre>
<p>you can add the <code>newest-first</code> rule to help hledger generate the
transactions in correct order.</p>
<pre><code class="language-rules"># same-day CSV records are newest first
newest-first
</code></pre>
<h3 id="intra-day-reversed"><a class="header" href="#intra-day-reversed"><code>intra-day-reversed</code></a></h3>
<p>If CSV records within a single day are ordered opposite to the overall
record order, you can add the <code>intra-day-reversed</code> rule to improve the
order of journal entries. Eg, here the overall record order is newest
first, but same-day records are oldest first:</p>
<pre><code class="language-csv">2022-10-02, txn 3...
2022-10-02, txn 4...
2022-10-01, txn 1...
2022-10-01, txn 2...
</code></pre>
<pre><code class="language-rules"># transactions within each day are reversed with respect to the overall date order
intra-day-reversed
</code></pre>
<h3 id="decimal-mark"><a class="header" href="#decimal-mark"><code>decimal-mark</code></a></h3>
<pre><code class="language-rules">decimal-mark .
</code></pre>
<p>or:</p>
<pre><code class="language-rules">decimal-mark ,
</code></pre>
<p>hledger automatically accepts either period or comma as a decimal mark
when parsing numbers (cf <a href="#amounts">Amounts</a>). However if any numbers in
the CSV contain digit group marks, such as thousand-separating commas,
you should declare the decimal mark explicitly with this rule, to avoid
misparsed numbers.</p>
<h3 id="fields-list"><a class="header" href="#fields-list"><code>fields</code> list</a></h3>
<pre><code class="language-rules">fields FIELDNAME1, FIELDNAME2, ...
</code></pre>
<p>A fields list (the word <code>fields</code> followed by comma-separated field
names) is optional, but convenient. It does two things:</p>
<ol>
<li>
<p>It names the CSV field in each column. This can be convenient if you
are referencing them in other rules, so you can say <code>%SomeField</code>
instead of remembering <code>%13</code>.</p>
</li>
<li>
<p>Whenever you use one of the special <a href="#field-names">hledger field
names</a> (described below), it assigns the CSV value in
this position to that hledger field. This is the quickest way to
populate hledger's fields and build a transaction.</p>
</li>
</ol>
<p>Here's an example that says &quot;use the 1st, 2nd and 4th fields as the
transaction's date, description and amount; name the last two fields
for later reference; and ignore the others&quot;:</p>
<pre><code class="language-rules">fields date, description, , amount, , , somefield, anotherfield
</code></pre>
<p>In a fields list, the separator is always comma; it is unrelated to the
CSV file's separator. Also:</p>
<ul>
<li>There must be least two items in the list (at least one comma).</li>
<li>Field names may not contain spaces. Spaces before/after field names
are optional.</li>
<li>Field names may contain <code>_</code> (underscore) or <code>-</code> (hyphen).</li>
<li>Fields you don't care about can be given a dummy name or an empty
name.</li>
</ul>
<p>If the CSV contains column headings, it's convenient to use these for
your field names, suitably modified (eg lower-cased with spaces replaced
by underscores).</p>
<p>Sometimes you may want to alter a CSV field name to avoid assigning to a
hledger field with the same name. Eg you could call the CSV's
&quot;balance&quot; field <code>balance_</code> to avoid directly setting hledger's
<code>balance</code> field (and generating a balance assertion).</p>
<h3 id="field-assignment"><a class="header" href="#field-assignment">Field assignment</a></h3>
<pre><code class="language-rules">HLEDGERFIELD FIELDVALUE
</code></pre>
<p>Field assignments are the more flexible way to assign CSV values to
hledger fields. They can be used instead of or in addition to a <a href="#fields-list">fields
list</a> (see above).</p>
<p>To assign a value to a hledger field, write the <a href="#field-names">field
name</a> (any of the standard hledger field/pseudo-field
names, defined below), a space, followed by a text value on the same
line. This text value may interpolate CSV fields, referenced either by
their 1-based position in the CSV record (<code>%N</code>) or by the name they were
given in the fields list (<code>%CSVFIELD</code>), and regular expression <a href="#match-groups">match
groups</a> (<code>\N</code>).</p>
<p>Some examples:</p>
<pre><code class="language-rules"># set the amount to the 4th CSV field, with &quot; USD&quot; appended
amount %4 USD

# combine three fields to make a comment, containing note: and date: tags
comment note: %somefield - %anotherfield, date: %1
</code></pre>
<p>Tips:</p>
<ul>
<li>Interpolation strips outer whitespace (so a CSV value like <code>&quot; 1 &quot;</code>
becomes <code>1</code> when interpolated)
(<a href="https://github.com/simonmichael/hledger/issues/1051">#1051</a>).</li>
<li>Interpolations always refer to a CSV field - you can't interpolate
a hledger field. (See <a href="#referencing-other-fields">Referencing other
fields</a> below).</li>
</ul>
<h3 id="field-names"><a class="header" href="#field-names">Field names</a></h3>
<p>Note the two kinds of field names mentioned here, and used only in
hledger CSV rules files:</p>
<ol>
<li>
<p><strong>CSV field names</strong> (<code>CSVFIELD</code> in these docs): you can optionally
name the CSV columns for easy reference (since hledger doesn't yet
automatically recognise column headings in a CSV file), by writing
arbitrary names in a <code>fields</code> list, eg:</p>
<pre><code class="language-csv">fields When, What, Some_Id, Net, Total, Foo, Bar
</code></pre>
</li>
<li>
<p>Special <strong>hledger field names</strong> (<code>HLEDGERFIELD</code> in these docs): you
must set at least some of these to generate the hledger transaction
from a CSV record, by writing them as the left hand side of a <a href="#field-assignment">field
assignment</a>, eg:</p>
<pre><code class="language-csv">date        %When
code        %Some_Id
description %What
comment     %Foo %Bar
amount1     $ %Total
</code></pre>
<p>or directly in a <a href="#fields-list"><code>fields</code> list</a>:</p>
<pre><code class="language-csv">fields date, description, code, , amount1, Foo, Bar
currency $
comment  %Foo %Bar
</code></pre>
</li>
</ol>
<p>Here are all the special hledger field names available, and what happens
when you assign values to them:</p>
<h4 id="date-field"><a class="header" href="#date-field">date field</a></h4>
<p>Assigning to <code>date</code> sets the <a href="#simple-dates">transaction date</a>.</p>
<h4 id="date2-field"><a class="header" href="#date2-field">date2 field</a></h4>
<p><code>date2</code> sets the transaction's <a href="#secondary-dates">secondary date</a>, if
any.</p>
<h4 id="status-field"><a class="header" href="#status-field">status field</a></h4>
<p><code>status</code> sets the transaction's <a href="#status">status</a>, if any.</p>
<h4 id="code-field"><a class="header" href="#code-field">code field</a></h4>
<p><code>code</code> sets the transaction's <a href="#code">code</a>, if any.</p>
<h4 id="description-field"><a class="header" href="#description-field">description field</a></h4>
<p><code>description</code> sets the transaction's <a href="#description">description</a>, if
any.</p>
<h4 id="comment-field"><a class="header" href="#comment-field">comment field</a></h4>
<p><code>comment</code> sets the transaction's <a href="#transaction-comments">comment</a>, if
any.</p>
<p><code>commentN</code>, where N is a number, sets the Nth posting's comment.</p>
<p>You can assign multi-line comments by writing literal <code>\n</code> in the code.
A comment starting with <code>\n</code> will begin on a new line.</p>
<p>Comments can contain <a href="#tags">tags</a>, as usual.</p>
<h4 id="account-field"><a class="header" href="#account-field">account field</a></h4>
<p>Assigning to <code>accountN</code>, where N is 1 to 99, sets the account name of
the Nth <a href="#postings">posting</a>, and causes that posting to be generated.</p>
<p>Most often there are two postings, so you'll want to set <code>account1</code> and
<code>account2</code>. Typically <code>account1</code> is associated with the CSV file, and is
set once with a top-level assignment, while <code>account2</code> is set based on
each transaction's description, in <a href="#if-blocks">conditional rules</a>.</p>
<p>If a posting's account name is left unset but its amount is set (see
below), a default account name will be chosen (like &quot;expenses:unknown&quot;
or &quot;income:unknown&quot;).</p>
<h4 id="amount-field"><a class="header" href="#amount-field">amount field</a></h4>
<p>There are several ways to set posting amounts from CSV, useful in
different situations.</p>
<ol>
<li>
<p><strong><code>amount</code></strong> is the oldest and simplest. Assigning to this sets the
amount of the first and second postings. In the second posting, the
amount will be negated; also, if it has a <a href="#costs">cost</a> attached,
it will be converted to cost.</p>
</li>
<li>
<p><strong><code>amount-in</code></strong> and <strong><code>amount-out</code></strong> work exactly like the above,
but should be used when the CSV has two amount fields (such as
&quot;Debit&quot; and &quot;Credit&quot;, or &quot;Inflow&quot; and &quot;Outflow&quot;). Whichever
field has a non-zero value will be used as the amount of the first
and second postings. Here are some tips to avoid confusion:</p>
<ul>
<li>It's not &quot;amount-in for posting 1 and amount-out for posting
2&quot;, it is &quot;extract a single amount from the amount-in or
amount-out field, and use that for posting 1 and (negated) for
posting 2&quot;.</li>
<li>Don't use both <code>amount</code> and <code>amount-in</code>/<code>amount-out</code> in the
same rules file; choose based on whether the amount is in a
single CSV field or spread across two fields.</li>
<li>In each record, at most one of the two CSV fields should contain
a non-zero amount; the other field must contain a zero or
nothing.</li>
<li>hledger assumes both CSV fields contain unsigned numbers, and it
automatically negates the amount-out values.</li>
<li>If the data doesn't fit these requirements, you'll probably
need an if rule (see below).</li>
</ul>
</li>
<li>
<p><strong><code>amountN</code></strong> (where N is a number from 1 to 99) sets the amount of
only a single posting: the Nth posting in the transaction. You'll
usually need at least two such assignments to make a balanced
transaction. You can also generate more than two postings, to
represent more complex transactions. The posting numbers don't have
to be consecutive; with if rules, higher posting numbers can be
useful to ensure a certain order of postings.</p>
</li>
<li>
<p><strong><code>amountN-in</code></strong> and <strong><code>amountN-out</code></strong> work exactly like the above,
but should be used when the CSV has two amount fields. This is
analogous to <code>amount-in</code> and <code>amount-out</code>, and those tips also apply
here.</p>
</li>
<li>
<p>Remember that a <code>fields</code> list can also do assignments. So in a
fields list if you name a CSV field &quot;amount&quot;, that counts as
assigning to <code>amount</code>. (If you don't want that, call it something
else in the fields list, like &quot;amount_&quot;.)</p>
</li>
<li>
<p>The above don't handle every situation; if you need more
flexibility, use an <code>if</code> rule to set amounts conditionally. See
&quot;<a href="#setting-amounts">Working with CSV &gt; Setting amounts</a>&quot; below
for more on this and on amount-setting generally.</p>
</li>
</ol>
<h4 id="currency-field"><a class="header" href="#currency-field">currency field</a></h4>
<p><code>currency</code> sets a currency symbol, to be prepended to all postings'
amounts. You can use this if the CSV amounts do not have a currency
symbol, eg if it is in a separate column.</p>
<p><code>currencyN</code> prepends a currency symbol to just the Nth posting's
amount.</p>
<h4 id="balance-field"><a class="header" href="#balance-field">balance field</a></h4>
<p><code>balanceN</code> sets a <a href="#balance-assertions">balance assertion</a> amount (or if
the posting amount is left empty, a <a href="#balance-assignments">balance
assignment</a>) on posting N.</p>
<p><code>balance</code> is a compatibility spelling for hledger &lt;1.17; it is
equivalent to <code>balance1</code>.</p>
<p>You can adjust the type of assertion/assignment with the <a href="#balance-type"><code>balance-type</code>
rule</a> (see below).</p>
<p>See <a href="#tips">Tips</a> below for more about setting amounts and currency.</p>
<h3 id="if-block"><a class="header" href="#if-block"><code>if</code> block</a></h3>
<p>Rules can be applied conditionally, depending on patterns in the CSV
data. This allows flexibility; in particular, it is how you can
categorise transactions, selecting an appropriate account name based on
their description (for example). There are two ways to write conditional
rules: &quot;if blocks&quot;, described here, and &quot;if tables&quot;, described
below.</p>
<p>An if block is the word <code>if</code> and one or more &quot;matcher&quot; expressions
(can be a word or phrase), one per line, starting either on the same or
next line; followed by one or more indented rules. Eg,</p>
<pre><code class="language-rules">if MATCHER
 RULE
</code></pre>
<p>or</p>
<pre><code class="language-rules">if
MATCHER
MATCHER
MATCHER
 RULE
 RULE
</code></pre>
<p>If any of the matchers succeeds, all of the indented rules will be
applied. They are usually <a href="#field-assignments">field assignments</a>, but
the following special rules may also be used within an if block:</p>
<ul>
<li><code>skip</code> - skips the matched CSV record (generating no transaction
from it)</li>
<li><code>end</code> - skips the rest of the current CSV file.</li>
</ul>
<p>Some examples:</p>
<pre><code class="language-rules"># if the record contains &quot;groceries&quot;, set account2 to &quot;expenses:groceries&quot;
if groceries
 account2 expenses:groceries
</code></pre>
<pre><code class="language-rules"># if the record contains any of these phrases, set account2 and a transaction comment as shown
if
monthly service fee
atm transaction fee
banking thru software
 account2 expenses:business:banking
 comment  XXX deductible ? check it
</code></pre>
<pre><code class="language-rules"># if an empty record is seen (assuming five fields), ignore the rest of the CSV file
if ,,,,
 end
</code></pre>
<h3 id="matchers"><a class="header" href="#matchers">Matchers</a></h3>
<p>There are two kinds:</p>
<ol>
<li>
<p>A record matcher is a word or single-line text fragment or regular
expression (<code>REGEX</code>), which hledger will try to match
case-insensitively anywhere within the CSV record.<br />
Eg: <code>whole foods</code></p>
</li>
<li>
<p>A field matcher is preceded with a percent sign and <a href="#field-names">CSV field
name</a> (<code>%CSVFIELD REGEX</code>). hledger will try to match
these just within the named CSV field.<br />
Eg: <code>%date 2023</code></p>
</li>
</ol>
<p>The regular expression is (as usual in hledger) a POSIX extended regular
expression, that also supports GNU word boundaries (<code>\b</code>, <code>\B</code>, <code>\&lt;</code>,
<code>\&gt;</code>), and nothing else. If you have trouble, see &quot;Regular
expressions&quot; in the hledger manual
(<a href="https://hledger.org/hledger.html#regular-expressions">https://hledger.org/hledger.html#regular-expressions</a>).</p>
<h4 id="what-matchers-match"><a class="header" href="#what-matchers-match">What matchers match</a></h4>
<p>With record matchers, it's important to know that the record matched is
not the original CSV record, but a modified one: separators will be
converted to commas, and enclosing double quotes (but not enclosing
whitespace) are removed. So for example, when reading an SSV file, if
the original record was:</p>
<pre><code class="language-ssv">2023-01-01; &quot;Acme, Inc.&quot;;  1,000
</code></pre>
<p>the regex would see, and try to match, this modified record text:</p>
<pre><code>2023-01-01,Acme, Inc.,  1,000
</code></pre>
<h4 id="combining-matchers"><a class="header" href="#combining-matchers">Combining matchers</a></h4>
<p>When an if block has multiple matchers, they are combined as follows:</p>
<ul>
<li>By default they are OR'd (any one of them can match)</li>
<li>When a matcher is preceded by ampersand (<code>&amp;</code>) it will be AND'ed
with the previous matcher (both of them must match)</li>
<li>When a matcher is preceded by an exclamation mark (<code>!</code>), the matcher
is negated (it may not match).</li>
</ul>
<p><a href="https://github.com/simonmichael/hledger/pull/2088#issuecomment-1844200398">Currently</a>
there is a limitation: you can't use both <code>&amp;</code> and <code>!</code> on the same line
(you can't AND a negated matcher).</p>
<h4 id="match-groups"><a class="header" href="#match-groups">Match groups</a></h4>
<p>Matchers can define match groups: parenthesised portions of the regular
expression which are available for reference in field assignments.
Groups are enclosed in regular parentheses (<code>(</code> and <code>)</code>) and can be
nested. Each group is available in field assignments using the token
<code>\N</code>, where N is an index into the match groups for this conditional
block (e.g. <code>\1</code>, <code>\2</code>, etc.).</p>
<p>Example: Warp credit card payment postings to the beginning of the
billing period (Month start), to match how they are presented in
statements, using <a href="#posting-dates">posting dates</a>:</p>
<pre><code class="language-rules">if %date (....-..)-..
  comment2 date:\1-01
</code></pre>
<p>Another example: Read the expense account from the CSV field, but throw
away a prefix:</p>
<pre><code class="language-rules">if %account1 liabilities:family:(expenses:.*)
    account1 \1
</code></pre>
<h3 id="if-table"><a class="header" href="#if-table"><code>if</code> table</a></h3>
<p>&quot;if tables&quot; are an alternative to <a href="#if-blocks">if blocks</a>; they can
express many matchers and field assignments in a more compact tabular
format, like this:</p>
<pre><code class="language-rules">if,HLEDGERFIELD1,HLEDGERFIELD2,...
MATCHERA,VALUE1,VALUE2,...
MATCHERB,VALUE1,VALUE2,...
MATCHERC,VALUE1,VALUE2,...
&lt;empty line&gt;
</code></pre>
<p>The first character after <code>if</code> is taken to be this if table's field
separator. It is unrelated to the separator used in the CSV file. It
should be a non-alphanumeric character like <code>,</code> or <code>|</code> that does not
appear anywhere else in the table (it should not be used in field names
or matchers or values, and it cannot be escaped with a backslash).</p>
<p>Each line must contain the same number of separators; empty values are
allowed. Whitespace can be used in the matcher lines for readability
(but not in the if line, currently). The table must be terminated by an
empty line (or end of file).</p>
<p>An if table like the above is interpreted as follows: try all of the
matchers; whenever a matcher succeeds, assign all of the values on that
line to the corresponding hledger fields; later lines can overrider
earlier ones. It is equivalent to this sequence of if blocks:</p>
<pre><code class="language-rules">if MATCHERA
  HLEDGERFIELD1 VALUE1
  HLEDGERFIELD2 VALUE2
  ...

if MATCHERB
  HLEDGERFIELD1 VALUE1
  HLEDGERFIELD2 VALUE2
  ...

if MATCHERC
  HLEDGERFIELD1 VALUE1
  HLEDGERFIELD2 VALUE2
  ...
</code></pre>
<p>Example:</p>
<pre><code class="language-rules">if,account2,comment
atm transaction fee,expenses:business:banking,deductible? check it
%description groceries,expenses:groceries,
2023/01/12.*Plumbing LLC,expenses:house:upkeep,emergency plumbing call-out
</code></pre>
<h3 id="balance-type"><a class="header" href="#balance-type"><code>balance-type</code></a></h3>
<p>Balance assertions generated by <a href="#posting-field-names">assigning to
balanceN</a> are of the simple <code>=</code> type by default,
which is a <a href="#assertions-and-commodities">single-commodity</a>,
<a href="#assertions-and-subaccounts">subaccount-excluding</a> assertion. You may
find the subaccount-including variants more useful, eg if you have
created some virtual subaccounts of checking to help with budgeting. You
can select a different type of assertion with the <code>balance-type</code> rule:</p>
<pre><code class="language-rules"># balance assertions will consider all commodities and all subaccounts
balance-type ==*
</code></pre>
<p>Here are the balance assertion types for quick reference:</p>
<pre><code>=    single commodity, exclude subaccounts
=*   single commodity, include subaccounts
==   multi commodity,  exclude subaccounts
==*  multi commodity,  include subaccounts
</code></pre>
<h3 id="include"><a class="header" href="#include"><code>include</code></a></h3>
<pre><code class="language-rules">include RULESFILE
</code></pre>
<p>This includes the contents of another CSV rules file at this point.
<code>RULESFILE</code> is an absolute file path or a path relative to the current
file's directory. This can be useful for sharing common rules between
several rules files, eg:</p>
<pre><code class="language-rules"># someaccount.csv.rules

## someaccount-specific rules
fields   date,description,amount
account1 assets:someaccount
account2 expenses:misc

## common rules
include categorisation.rules
</code></pre>
<h3 id="working-with-csv"><a class="header" href="#working-with-csv">Working with CSV</a></h3>
<p>Some tips:</p>
<h4 id="rapid-feedback"><a class="header" href="#rapid-feedback">Rapid feedback</a></h4>
<p>It's a good idea to get rapid feedback while creating/troubleshooting
CSV rules. Here's a good way, using entr from
<a href="https://eradman.com/entrproject">eradman.com/entrproject</a>:</p>
<pre><code class="language-cli">$ ls foo.csv* | entr bash -c 'echo ----; hledger -f foo.csv print desc:SOMEDESC'
</code></pre>
<p>A desc: query (eg) is used to select just one, or a few, transactions of
interest. &quot;bash -c&quot; is used to run multiple commands, so we can echo a
separator each time the command re-runs, making it easier to read the
output.</p>
<h4 id="valid-csv"><a class="header" href="#valid-csv">Valid CSV</a></h4>
<p>Note that hledger will only accept valid CSV conforming to <a href="https://tools.ietf.org/html/rfc4180">RFC
4180</a>, and equivalent SSV and TSV
formats (like RFC 4180 but with semicolon or tab as separators). This
means, eg:</p>
<ul>
<li>Values may be enclosed in double quotes, or not. Enclosing in single
quotes is not allowed. (Eg <code>'A','B'</code> is rejected.)</li>
<li>When values are enclosed in double quotes, spaces outside the quotes
are <a href="https://stackoverflow.com/questions/4863852/space-before-quote-in-csv-field">not
allowed</a>.
(Eg <code>&quot;A&quot;, &quot;B&quot;</code> is rejected.)</li>
<li>When values are not enclosed in quotes, they may not contain double
quotes. (Eg <code>A&quot;A, B</code> is rejected.)</li>
</ul>
<p>If your CSV/SSV/TSV is not valid in this sense, you'll need to
transform it before reading with hledger. Try using sed, or a more
permissive CSV parser like <a href="https://docs.python.org/3/library/csv.html">python's csv
lib</a>.</p>
<h4 id="file-extension"><a class="header" href="#file-extension">File Extension</a></h4>
<p>To help hledger choose the CSV file reader and show the right error
messages (and choose the right field separator character by default),
it's best if CSV/SSV/TSV files are named with a <code>.csv</code>, <code>.ssv</code> or
<code>.tsv</code> filename extension. (More about this at <a href="#data-formats">Data
formats</a>.)</p>
<p>When reading files with the &quot;wrong&quot; extension, you can ensure the CSV
reader (and the default field separator) by prefixing the file path with
<code>csv:</code>, <code>ssv:</code> or <code>tsv:</code>: Eg:</p>
<pre><code class="language-cli">$ hledger -f ssv:foo.dat print
</code></pre>
<p>You can also override the default field separator with a
<a href="#separator">separator</a> rule if needed.</p>
<h4 id="reading-csv-from-standard-input"><a class="header" href="#reading-csv-from-standard-input">Reading CSV from standard input</a></h4>
<p>You'll need the file format prefix when reading CSV from stdin also,
since hledger assumes journal format by default. Eg:</p>
<pre><code>$ cat foo.dat | hledger -f ssv:- print
</code></pre>
<h4 id="reading-multiple-csv-files"><a class="header" href="#reading-multiple-csv-files">Reading multiple CSV files</a></h4>
<p>If you use multiple <code>-f</code> options to read multiple CSV files at once,
hledger will look for a correspondingly-named rules file for each CSV
file. But if you use the <code>--rules-file</code> option, that rules file will be
used for all the CSV files.</p>
<h4 id="reading-files-specified-by-rule"><a class="header" href="#reading-files-specified-by-rule">Reading files specified by rule</a></h4>
<p>Instead of specifying a CSV file in the command line, you can specify a
rules file, as in <code>hledger -f foo.csv.rules CMD</code>. By default this will
read data from foo.csv in the same directory, but you can add a
<a href="#source">source</a> rule to specify a different data file, perhaps located
in your web browser's download directory.</p>
<p>This feature was added in hledger 1.30, so you won't see it in most CSV
rules examples. But it helps remove some of the busywork of managing CSV
downloads. Most of your financial institutions's default CSV filenames
are different and can be recognised by a glob pattern. So you can put a
rule like <code>source Checking1*.csv</code> in foo-checking.csv.rules, and then
periodically follow a workflow like:</p>
<ol>
<li>Download CSV from Foo's website, using your browser's defaults</li>
<li>Run <code>hledger import foo-checking.csv.rules</code> to import any new
transactions</li>
</ol>
<p>After import, you can: discard the CSV, or leave it where it is for a
while, or move it into your archives, as you prefer. If you do nothing,
next time your browser will save something like Checking1-2.csv, and
hledger will use that because of the <code>*</code> wild card and because it is the
most recent.</p>
<h4 id="valid-transactions"><a class="header" href="#valid-transactions">Valid transactions</a></h4>
<p>After reading a CSV file, hledger post-processes and validates the
generated journal entries as it would for a journal file - balancing
them, applying balance assignments, and canonicalising amount styles.
Any errors at this stage will be reported in the usual way, displaying
the problem entry.</p>
<p>There is one exception: balance assertions, if you have generated them,
will not be checked, since normally these will work only when the CSV
data is part of the main journal. If you do need to check balance
assertions generated from CSV right away, pipe into another hledger:</p>
<pre><code class="language-cli">$ hledger -f file.csv print | hledger -f- print
</code></pre>
<h4 id="deduplicating-importing"><a class="header" href="#deduplicating-importing">Deduplicating, importing</a></h4>
<p>When you download a CSV file periodically, eg to get your latest bank
transactions, the new file may overlap with the old one, containing some
of the same records.</p>
<p>The <a href="#import">import</a> command will (a) detect the new transactions, and
(b) append just those transactions to your main journal. It is
idempotent, so you don't have to remember how many times you ran it or
with which version of the CSV. (It keeps state in a hidden
<code>.latest.FILE.csv</code> file.) This is the easiest way to import CSV data.
Eg:</p>
<pre><code class="language-cli"># download the latest CSV files, then run this command.
# Note, no -f flags needed here.
$ hledger import *.csv [--dry]
</code></pre>
<p>This method works for most CSV files. (Where records have a stable
chronological order, and new records appear only at the new end.)</p>
<p>A number of other tools and workflows, hledger-specific and otherwise,
exist for converting, deduplicating, classifying and managing CSV data.
See:</p>
<ul>
<li><a href="https://hledger.org/cookbook.html#setups-and-workflows">https://hledger.org/cookbook.html#setups-and-workflows</a></li>
<li><a href="https://plaintextaccounting.org">https://plaintextaccounting.org</a> -&gt; data import/conversion</li>
</ul>
<h4 id="setting-amounts"><a class="header" href="#setting-amounts">Setting amounts</a></h4>
<p>Continuing from <a href="#amount-field">amount field</a> above, here are more tips
for amount-setting:</p>
<ol>
<li>
<p><strong>If the amount is in a single CSV field:</strong></p>
<p>a.  <strong>If its sign indicates direction of flow:</strong><br />
Assign it to <code>amountN</code>, to set the Nth posting's amount. N is
usually 1 or 2 but can go up to 99.</p>
<p>b.  <strong>If another field indicates direction of flow:</strong><br />
Use one or more conditional rules to set the appropriate amount
sign. Eg:</p>
<pre><code class="language-rules"># assume a withdrawal unless Type contains &quot;deposit&quot;:
amount1  -%Amount
if %Type deposit
  amount1  %Amount
</code></pre>
</li>
<li>
<p><strong>If the amount is in two CSV fields (such as Debit and Credit, or
In and Out):</strong></p>
<p>a.  <strong>If both fields are unsigned:</strong><br />
Assign one field to <code>amountN-in</code> and the other to <code>amountN-out</code>.
hledger will automatically negate the &quot;out&quot; field, and will
use whichever field value is non-zero as posting N's amount.</p>
<p>b.  <strong>If either field is signed:</strong><br />
You will probably need to override hledger's sign for one or
the other field, as in the following example:</p>
<pre><code class="language-rules"># Negate the -out value, but only if it is not empty:
fields date, description, amount1-in, amount1-out
if %amount1-out [1-9]
 amount1-out -%amount1-out
</code></pre>
<p>c.  <strong>If both fields can contain a non-zero value (or both can be
empty):</strong><br />
The -in/-out rules normally choose the value which is
non-zero/non-empty. Some value pairs can be ambiguous, such as
<code>1</code> and <code>none</code>. For such cases, use <a href="#if-block">conditional
rules</a> to help select the amount. Eg, to handle the
above you could select the value containing non-zero digits:</p>
<pre><code class="language-rules">fields date, description, in, out
if %in [1-9]
 amount1 %in
if %out [1-9]
 amount1 %out
</code></pre>
</li>
<li>
<p><strong>If you want posting 2's amount converted to cost:</strong><br />
Use the unnumbered <code>amount</code> (or <code>amount-in</code> and <code>amount-out</code>)
syntax.</p>
</li>
<li>
<p><strong>If the CSV has only balance amounts, not transaction amounts:</strong><br />
Assign to <code>balanceN</code>, to set a <a href="#balance-assignments">balance
assignment</a> on the Nth posting, causing the
posting's amount to be calculated automatically. <code>balance</code> with no
number is equivalent to <code>balance1</code>. In this situation hledger is
more likely to guess the wrong default account name, so you may need
to set that explicitly.</p>
</li>
</ol>
<h4 id="amount-signs"><a class="header" href="#amount-signs">Amount signs</a></h4>
<p>There is some special handling making it easier to parse and to reverse
amount signs. (This only works for whole amounts, not for cost amounts
such as COST in <code>amount1  AMT @ COST</code>):</p>
<ul>
<li>
<p><strong>If an amount value begins with a plus sign:</strong><br />
that will be removed: <code>+AMT</code> becomes <code>AMT</code></p>
</li>
<li>
<p><strong>If an amount value is parenthesised:</strong><br />
it will be de-parenthesised and sign-flipped: <code>(AMT)</code> becomes <code>-AMT</code></p>
</li>
<li>
<p><strong>If an amount value has two minus signs (or two sets of
parentheses, or a minus sign and parentheses):</strong><br />
they cancel out and will be removed: <code>--AMT</code> or <code>-(AMT)</code> becomes
<code>AMT</code></p>
</li>
<li>
<p><strong>If an amount value contains just a sign (or just a set of
parentheses):</strong><br />
that is removed, making it an empty value. <code>&quot;+&quot;</code> or <code>&quot;-&quot;</code> or <code>&quot;()&quot;</code>
becomes <code>&quot;&quot;</code>.</p>
</li>
</ul>
<p>It's not possible (without preprocessing the CSV) to set an amount to
its absolute value, ie discard its sign.</p>
<h4 id="setting-currencycommodity"><a class="header" href="#setting-currencycommodity">Setting currency/commodity</a></h4>
<p>If the currency/commodity symbol is included in the CSV's amount
field(s):</p>
<pre><code class="language-csv">2023-01-01,foo,$123.00
</code></pre>
<p>you don't have to do anything special for the commodity symbol, it will
be assigned as part of the amount. Eg:</p>
<pre><code class="language-rules">fields date,description,amount
</code></pre>
<pre><code class="language-journal">2023-01-01 foo
    expenses:unknown         $123.00
    income:unknown          $-123.00
</code></pre>
<p>If the currency is provided as a separate CSV field:</p>
<pre><code class="language-csv">2023-01-01,foo,USD,123.00
</code></pre>
<p>You can assign that to the <code>currency</code> pseudo-field, which has the
special effect of prepending itself to every amount in the transaction
(on the left, with no separating space):</p>
<pre><code class="language-rules">fields date,description,currency,amount
</code></pre>
<pre><code class="language-journal">2023-01-01 foo
    expenses:unknown       USD123.00
    income:unknown        USD-123.00
</code></pre>
<p>Or, you can use a field assignment to construct the amount yourself,
with more control. Eg to put the symbol on the right, and separated by a
space:</p>
<pre><code class="language-rules">fields date,description,cur,amt
amount %amt %cur
</code></pre>
<pre><code class="language-journal">2023-01-01 foo
    expenses:unknown        123.00 USD
    income:unknown         -123.00 USD
</code></pre>
<p>Note we used a temporary field name (<code>cur</code>) that is not <code>currency</code> -
that would trigger the prepending effect, which we don't want here.</p>
<h4 id="amount-decimal-places"><a class="header" href="#amount-decimal-places">Amount decimal places</a></h4>
<p>Like amounts in a journal file, the amounts generated by CSV rules like
<code>amount1</code> influence <a href="#commodity-display-styles">commodity display
styles</a>, such as the number of decimal places
displayed in reports.</p>
<p>The original amounts as written in the CSV file do not affect display
style (because we don't yet reliably know their commodity).</p>
<h4 id="referencing-other-fields"><a class="header" href="#referencing-other-fields">Referencing other fields</a></h4>
<p>In field assignments, you can interpolate only CSV fields, not hledger
fields. In the example below, there's both a CSV field and a hledger
field named amount1, but %amount1 always means the CSV field, not the
hledger field:</p>
<pre><code class="language-rules"># Name the third CSV field &quot;amount1&quot;
fields date,description,amount1

# Set hledger's amount1 to the CSV amount1 field followed by USD
amount1 %amount1 USD

# Set comment to the CSV amount1 (not the amount1 assigned above)
comment %amount1
</code></pre>
<p>Here, since there's no CSV amount1 field, %amount1 will produce a
literal &quot;amount1&quot;:</p>
<pre><code class="language-rules">fields date,description,csvamount
amount1 %csvamount USD
# Can't interpolate amount1 here
comment %amount1
</code></pre>
<p>When there are multiple field assignments to the same hledger field,
only the last one takes effect. Here, comment's value will be be B, or
C if &quot;something&quot; is matched, but never A:</p>
<pre><code class="language-rules">comment A
comment B
if something
 comment C
</code></pre>
<h4 id="how-csv-rules-are-evaluated"><a class="header" href="#how-csv-rules-are-evaluated">How CSV rules are evaluated</a></h4>
<p>Here's how to think of CSV rules being evaluated (if you really need
to). First,</p>
<ul>
<li><code>include</code> - all includes are inlined, from top to bottom, depth
first. (At each include point the file is inlined and scanned for
further includes, recursively, before proceeding.)</li>
</ul>
<p>Then &quot;global&quot; rules are evaluated, top to bottom. If a rule is
repeated, the last one wins:</p>
<ul>
<li><code>skip</code> (at top level)</li>
<li><code>date-format</code></li>
<li><code>newest-first</code></li>
<li><code>fields</code> - names the CSV fields, optionally sets up initial
assignments to hledger fields</li>
</ul>
<p>Then for each CSV record in turn:</p>
<ul>
<li>test all <code>if</code> blocks. If any of them contain a <code>end</code> rule, skip all
remaining CSV records. Otherwise if any of them contain a <code>skip</code>
rule, skip that many CSV records. If there are multiple matched
<code>skip</code> rules, the first one wins.</li>
<li>collect all field assignments at top level and in matched <code>if</code>
blocks. When there are multiple assignments for a field, keep only
the last one.</li>
<li>compute a value for each hledger field - either the one that was
assigned to it (and interpolate the %CSVFIELD references), or a
default</li>
<li>generate a hledger transaction (journal entry) from these values.</li>
</ul>
<p>This is all part of the CSV reader, one of several readers hledger can
use to parse input files. When all files have been read successfully,
the transactions are passed as input to whichever hledger command the
user specified.</p>
<p><a name="timeclock-format"></a></p>
<h4 id="well-factored-rules"><a class="header" href="#well-factored-rules">Well factored rules</a></h4>
<p>Some things than can help reduce duplication and complexity in rules
files:</p>
<ul>
<li>
<p>Extracting common rules usable with multiple CSV files into a
<code>common.rules</code>, and adding <code>include common.rules</code> to each CSV's
rules file.</p>
</li>
<li>
<p>Splitting if blocks into smaller if blocks, extracting the
frequently used parts.</p>
</li>
</ul>
<h3 id="csv-rules-examples"><a class="header" href="#csv-rules-examples">CSV rules examples</a></h3>
<h4 id="bank-of-ireland"><a class="header" href="#bank-of-ireland">Bank of Ireland</a></h4>
<p>Here's a CSV with two amount fields (Debit and Credit), and a balance
field, which we can use to add balance assertions, which is not
necessary but provides extra error checking:</p>
<pre><code class="language-csv">Date,Details,Debit,Credit,Balance
07/12/2012,LODGMENT       529898,,10.0,131.21
07/12/2012,PAYMENT,5,,126
</code></pre>
<pre><code class="language-rules"># bankofireland-checking.csv.rules

# skip the header line
skip

# name the csv fields, and assign some of them as journal entry fields
fields  date, description, amount-out, amount-in, balance

# We generate balance assertions by assigning to &quot;balance&quot;
# above, but you may sometimes need to remove these because:
#
# - the CSV balance differs from the true balance,
#   by up to 0.0000000000005 in my experience
#
# - it is sometimes calculated based on non-chronological ordering,
#   eg when multiple transactions clear on the same day

# date is in UK/Ireland format
date-format  %d/%m/%Y

# set the currency
currency  EUR

# set the base account for all txns
account1  assets:bank:boi:checking
</code></pre>
<pre><code class="language-cli">$ hledger -f bankofireland-checking.csv print
2012-12-07 LODGMENT       529898
    assets:bank:boi:checking         EUR10.0 = EUR131.2
    income:unknown                  EUR-10.0

2012-12-07 PAYMENT
    assets:bank:boi:checking         EUR-5.0 = EUR126.0
    expenses:unknown                  EUR5.0
</code></pre>
<p>The balance assertions don't raise an error above, because we're
reading directly from CSV, but they will be checked if these entries are
imported into a journal file.</p>
<h4 id="coinbase"><a class="header" href="#coinbase">Coinbase</a></h4>
<p>A simple example with some CSV from Coinbase. The spot price is recorded
using cost notation. The legacy <code>amount</code> field name conveniently sets
amount 2 (posting 2's amount) to the total cost.</p>
<pre><code class="language-csv"># Timestamp,Transaction Type,Asset,Quantity Transacted,Spot Price Currency,Spot Price at Transaction,Subtotal,Total (inclusive of fees and/or spread),Fees and/or Spread,Notes
# 2021-12-30T06:57:59Z,Receive,USDC,100,GBP,0.740000,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;Received 100.00 USDC from an external account&quot;
</code></pre>
<pre><code class="language-rules"># coinbase.csv.rules
skip         1
fields       Timestamp,Transaction_Type,Asset,Quantity_Transacted,Spot_Price_Currency,Spot_Price_at_Transaction,Subtotal,Total,Fees_Spread,Notes
date         %Timestamp
date-format  %Y-%m-%dT%T%Z
description  %Notes
account1     assets:coinbase:cc
amount       %Quantity_Transacted %Asset @ %Spot_Price_at_Transaction %Spot_Price_Currency
</code></pre>
<pre><code class="language-cli">$ hledger print -f coinbase.csv
2021-12-30 Received 100.00 USDC from an external account
    assets:coinbase:cc    100 USDC @ 0.740000 GBP
    income:unknown                 -74.000000 GBP
</code></pre>
<h4 id="amazon"><a class="header" href="#amazon">Amazon</a></h4>
<p>Here we convert amazon.com order history, and use an if block to
generate a third posting if there's a fee. (In practice you'd probably
get this data from your bank instead, but it's an example.)</p>
<pre><code class="language-csv">&quot;Date&quot;,&quot;Type&quot;,&quot;To/From&quot;,&quot;Name&quot;,&quot;Status&quot;,&quot;Amount&quot;,&quot;Fees&quot;,&quot;Transaction ID&quot;
&quot;Jul 29, 2012&quot;,&quot;Payment&quot;,&quot;To&quot;,&quot;Foo.&quot;,&quot;Completed&quot;,&quot;$20.00&quot;,&quot;$0.00&quot;,&quot;16000000000000DGLNJPI1P9B8DKPVHL&quot;
&quot;Jul 30, 2012&quot;,&quot;Payment&quot;,&quot;To&quot;,&quot;Adapteva, Inc.&quot;,&quot;Completed&quot;,&quot;$25.00&quot;,&quot;$1.00&quot;,&quot;17LA58JSKRD4HDGLNJPI1P9B8DKPVHL&quot;
</code></pre>
<pre><code class="language-rules"># amazon-orders.csv.rules

# skip one header line
skip 1

# name the csv fields, and assign the transaction's date, amount and code.
# Avoided the &quot;status&quot; and &quot;amount&quot; hledger field names to prevent confusion.
fields date, _, toorfrom, name, amzstatus, amzamount, fees, code

# how to parse the date
date-format %b %-d, %Y

# combine two fields to make the description
description %toorfrom %name

# save the status as a tag
comment     status:%amzstatus

# set the base account for all transactions
account1    assets:amazon
# leave amount1 blank so it can balance the other(s).
# I'm assuming amzamount excludes the fees, don't remember

# set a generic account2
account2    expenses:misc
amount2     %amzamount
# and maybe refine it further:
#include categorisation.rules

# add a third posting for fees, but only if they are non-zero.
if %fees [1-9]
 account3    expenses:fees
 amount3     %fees
</code></pre>
<pre><code class="language-cli">$ hledger -f amazon-orders.csv print
2012-07-29 (16000000000000DGLNJPI1P9B8DKPVHL) To Foo.  ; status:Completed
    assets:amazon
    expenses:misc          $20.00

2012-07-30 (17LA58JSKRD4HDGLNJPI1P9B8DKPVHL) To Adapteva, Inc.  ; status:Completed
    assets:amazon
    expenses:misc          $25.00
    expenses:fees           $1.00
</code></pre>
<h4 id="paypal"><a class="header" href="#paypal">Paypal</a></h4>
<p>Here's a real-world rules file for (customised) Paypal CSV, with some
Paypal-specific rules, and a second rules file included:</p>
<pre><code class="language-csv">&quot;Date&quot;,&quot;Time&quot;,&quot;TimeZone&quot;,&quot;Name&quot;,&quot;Type&quot;,&quot;Status&quot;,&quot;Currency&quot;,&quot;Gross&quot;,&quot;Fee&quot;,&quot;Net&quot;,&quot;From Email Address&quot;,&quot;To Email Address&quot;,&quot;Transaction ID&quot;,&quot;Item Title&quot;,&quot;Item ID&quot;,&quot;Reference Txn ID&quot;,&quot;Receipt ID&quot;,&quot;Balance&quot;,&quot;Note&quot;
&quot;10/01/2019&quot;,&quot;03:46:20&quot;,&quot;PDT&quot;,&quot;Calm Radio&quot;,&quot;Subscription Payment&quot;,&quot;Completed&quot;,&quot;USD&quot;,&quot;-6.99&quot;,&quot;0.00&quot;,&quot;-6.99&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d7a4bebab8b997bdb8aeb1a2bbf9b4b8ba">[email&#160;protected]</a>&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8be6eee6e9eef9f8e3e2fbf8cbe8eae7e6f9eaefe2e4a5e8e4e6">[email&#160;protected]</a>&quot;,&quot;60P57143A8206782E&quot;,&quot;MONTHLY - $1 for the first 2 Months: Me - Order 99309. Item total: $1.00 USD first 2 months, then $6.99 / Month&quot;,&quot;&quot;,&quot;I-R8YLY094FJYR&quot;,&quot;&quot;,&quot;-6.99&quot;,&quot;&quot;
&quot;10/01/2019&quot;,&quot;03:46:20&quot;,&quot;PDT&quot;,&quot;&quot;,&quot;Bank Deposit to PP Account &quot;,&quot;Pending&quot;,&quot;USD&quot;,&quot;6.99&quot;,&quot;0.00&quot;,&quot;6.99&quot;,&quot;&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e2918b8f8d8ca2888d9b84978ecc818d8f">[email&#160;protected]</a>&quot;,&quot;0TU1544T080463733&quot;,&quot;&quot;,&quot;&quot;,&quot;60P57143A8206782E&quot;,&quot;&quot;,&quot;0.00&quot;,&quot;&quot;
&quot;10/01/2019&quot;,&quot;08:57:01&quot;,&quot;PDT&quot;,&quot;Patreon&quot;,&quot;PreApproved Payment Bill User Payment&quot;,&quot;Completed&quot;,&quot;USD&quot;,&quot;-7.00&quot;,&quot;0.00&quot;,&quot;-7.00&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d2a1bbbfbdbc92b8bdabb4a7befcb1bdbf">[email&#160;protected]</a>&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4c3f393c3c233e380c3c2d383e292322622f2321">[email&#160;protected]</a>&quot;,&quot;2722394R5F586712G&quot;,&quot;Patreon* Membership&quot;,&quot;&quot;,&quot;B-0PG93074E7M86381M&quot;,&quot;&quot;,&quot;-7.00&quot;,&quot;&quot;
&quot;10/01/2019&quot;,&quot;08:57:01&quot;,&quot;PDT&quot;,&quot;&quot;,&quot;Bank Deposit to PP Account &quot;,&quot;Pending&quot;,&quot;USD&quot;,&quot;7.00&quot;,&quot;0.00&quot;,&quot;7.00&quot;,&quot;&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="83f0eaeeecedc3e9ecfae5f6efade0ecee">[email&#160;protected]</a>&quot;,&quot;71854087RG994194F&quot;,&quot;Patreon* Membership&quot;,&quot;&quot;,&quot;2722394R5F586712G&quot;,&quot;&quot;,&quot;0.00&quot;,&quot;&quot;
&quot;10/19/2019&quot;,&quot;03:02:12&quot;,&quot;PDT&quot;,&quot;Wikimedia Foundation, Inc.&quot;,&quot;Subscription Payment&quot;,&quot;Completed&quot;,&quot;USD&quot;,&quot;-2.00&quot;,&quot;0.00&quot;,&quot;-2.00&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ddaeb4b0b2b39db7b2a4bba8b1f3beb2b0">[email&#160;protected]</a>&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fb8f979ebb8c929092969e9f929ad594899c">[email&#160;protected]</a>&quot;,&quot;K9U43044RY432050M&quot;,&quot;Monthly donation to the Wikimedia Foundation&quot;,&quot;&quot;,&quot;I-R5C3YUS3285L&quot;,&quot;&quot;,&quot;-2.00&quot;,&quot;&quot;
&quot;10/19/2019&quot;,&quot;03:02:12&quot;,&quot;PDT&quot;,&quot;&quot;,&quot;Bank Deposit to PP Account &quot;,&quot;Pending&quot;,&quot;USD&quot;,&quot;2.00&quot;,&quot;0.00&quot;,&quot;2.00&quot;,&quot;&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="54273d393b3a143e3b2d3221387a373b39">[email&#160;protected]</a>&quot;,&quot;3XJ107139A851061F&quot;,&quot;&quot;,&quot;&quot;,&quot;K9U43044RY432050M&quot;,&quot;&quot;,&quot;0.00&quot;,&quot;&quot;
&quot;10/22/2019&quot;,&quot;05:07:06&quot;,&quot;PDT&quot;,&quot;Noble Benefactor&quot;,&quot;Subscription Payment&quot;,&quot;Completed&quot;,&quot;USD&quot;,&quot;10.00&quot;,&quot;-0.59&quot;,&quot;9.41&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e18f8e838d84a183848f84cf878082cf958e93">[email&#160;protected]</a>&quot;,&quot;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dfacb6b2b0b19fb5b0a6b9aab3f1bcb0b2">[email&#160;protected]</a>&quot;,&quot;6L8L1662YP1334033&quot;,&quot;Joyful Systems&quot;,&quot;&quot;,&quot;I-KC9VBGY2GWDB&quot;,&quot;&quot;,&quot;9.41&quot;,&quot;&quot;
</code></pre>
<pre><code class="language-rules"># paypal-custom.csv.rules

# Tips:
# Export from Activity -&gt; Statements -&gt; Custom -&gt; Activity download
# Suggested transaction type: &quot;Balance affecting&quot;
# Paypal's default fields in 2018 were:
# &quot;Date&quot;,&quot;Time&quot;,&quot;TimeZone&quot;,&quot;Name&quot;,&quot;Type&quot;,&quot;Status&quot;,&quot;Currency&quot;,&quot;Gross&quot;,&quot;Fee&quot;,&quot;Net&quot;,&quot;From Email Address&quot;,&quot;To Email Address&quot;,&quot;Transaction ID&quot;,&quot;Shipping Address&quot;,&quot;Address Status&quot;,&quot;Item Title&quot;,&quot;Item ID&quot;,&quot;Shipping and Handling Amount&quot;,&quot;Insurance Amount&quot;,&quot;Sales Tax&quot;,&quot;Option 1 Name&quot;,&quot;Option 1 Value&quot;,&quot;Option 2 Name&quot;,&quot;Option 2 Value&quot;,&quot;Reference Txn ID&quot;,&quot;Invoice Number&quot;,&quot;Custom Number&quot;,&quot;Quantity&quot;,&quot;Receipt ID&quot;,&quot;Balance&quot;,&quot;Address Line 1&quot;,&quot;Address Line 2/District/Neighborhood&quot;,&quot;Town/City&quot;,&quot;State/Province/Region/County/Territory/Prefecture/Republic&quot;,&quot;Zip/Postal Code&quot;,&quot;Country&quot;,&quot;Contact Phone Number&quot;,&quot;Subject&quot;,&quot;Note&quot;,&quot;Country Code&quot;,&quot;Balance Impact&quot;
# This rules file assumes the following more detailed fields, configured in &quot;Customize report fields&quot;:
# &quot;Date&quot;,&quot;Time&quot;,&quot;TimeZone&quot;,&quot;Name&quot;,&quot;Type&quot;,&quot;Status&quot;,&quot;Currency&quot;,&quot;Gross&quot;,&quot;Fee&quot;,&quot;Net&quot;,&quot;From Email Address&quot;,&quot;To Email Address&quot;,&quot;Transaction ID&quot;,&quot;Item Title&quot;,&quot;Item ID&quot;,&quot;Reference Txn ID&quot;,&quot;Receipt ID&quot;,&quot;Balance&quot;,&quot;Note&quot;

fields date, time, timezone, description_, type, status_, currency, grossamount, feeamount, netamount, fromemail, toemail, code, itemtitle, itemid, referencetxnid, receiptid, balance, note

skip  1

date-format  %-m/%-d/%Y

# ignore some paypal events
if
In Progress
Temporary Hold
Update to
 skip

# add more fields to the description
description %description_ %itemtitle

# save some other fields as tags
comment  itemid:%itemid, fromemail:%fromemail, toemail:%toemail, time:%time, type:%type, status:%status_

# convert to short currency symbols
if %currency USD
 currency $
if %currency EUR
 currency E
if %currency GBP
 currency P

# generate postings

# the first posting will be the money leaving/entering my paypal account
# (negative means leaving my account, in all amount fields)
account1 assets:online:paypal
amount1  %netamount

# the second posting will be money sent to/received from other party
# (account2 is set below)
amount2  -%grossamount

# if there's a fee, add a third posting for the money taken by paypal.
if %feeamount [1-9]
 account3 expenses:banking:paypal
 amount3  -%feeamount
 comment3 business:

# choose an account for the second posting

# override the default account names:
# if the amount is positive, it's income (a debit)
if %grossamount ^[^-]
 account2 income:unknown
# if negative, it's an expense (a credit)
if %grossamount ^-
 account2 expenses:unknown

# apply common rules for setting account2 &amp; other tweaks
include common.rules

# apply some overrides specific to this csv

# Transfers from/to bank. These are usually marked Pending,
# which can be disregarded in this case.
if
Bank Account
Bank Deposit to PP Account
 description %type for %referencetxnid %itemtitle
 account2 assets:bank:wf:pchecking
 account1 assets:online:paypal

# Currency conversions
if Currency Conversion
 account2 equity:currency conversion
</code></pre>
<pre><code class="language-rules"># common.rules

if
darcs
noble benefactor
 account2 revenues:foss donations:darcshub
 comment2 business:

if
Calm Radio
 account2 expenses:online:apps

if
electronic frontier foundation
Patreon
wikimedia
Advent of Code
 account2 expenses:dues

if Google
 account2 expenses:online:apps
 description google | music
</code></pre>
<pre><code class="language-cli">$ hledger -f paypal-custom.csv  print
2019-10-01 (60P57143A8206782E) Calm Radio MONTHLY - $1 for the first 2 Months: Me - Order 99309. Item total: $1.00 USD first 2 months, then $6.99 / Month  ; itemid:, fromemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="16657f7b7978567c796f70637a3875797b">[email&#160;protected]</a>, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="78151d151a1d0a0b1011080b381b1914150a191c1117561b1715">[email&#160;protected]</a>, time:03:46:20, type:Subscription Payment, status:Completed
    assets:online:paypal          $-6.99 = $-6.99
    expenses:online:apps           $6.99

2019-10-01 (0TU1544T080463733) Bank Deposit to PP Account for 60P57143A8206782E  ; itemid:, fromemail:, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f083999d9f9eb09a9f8996859cde939f9d">[email&#160;protected]</a>, time:03:46:20, type:Bank Deposit to PP Account, status:Pending
    assets:online:paypal               $6.99 = $0.00
    assets:bank:wf:pchecking          $-6.99

2019-10-01 (2722394R5F586712G) Patreon Patreon* Membership  ; itemid:, fromemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="64170d090b0a240e0b1d0211084a070b09">[email&#160;protected]</a>, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8bf8fefbfbe4f9ffcbfbeafff9eee4e5a5e8e4e6">[email&#160;protected]</a>, time:08:57:01, type:PreApproved Payment Bill User Payment, status:Completed
    assets:online:paypal          $-7.00 = $-7.00
    expenses:dues                  $7.00

2019-10-01 (71854087RG994194F) Bank Deposit to PP Account for 2722394R5F586712G Patreon* Membership  ; itemid:, fromemail:, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="33405a5e5c5d73595c4a55465f1d505c5e">[email&#160;protected]</a>, time:08:57:01, type:Bank Deposit to PP Account, status:Pending
    assets:online:paypal               $7.00 = $0.00
    assets:bank:wf:pchecking          $-7.00

2019-10-19 (K9U43044RY432050M) Wikimedia Foundation, Inc. Monthly donation to the Wikimedia Foundation  ; itemid:, fromemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="53203a3e3c3d13393c2a35263f7d303c3e">[email&#160;protected]</a>, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="71051d143106181a181c141518105f1e0316">[email&#160;protected]</a>, time:03:02:12, type:Subscription Payment, status:Completed
    assets:online:paypal             $-2.00 = $-2.00
    expenses:dues                     $2.00
    expenses:banking:paypal      ; business:

2019-10-19 (3XJ107139A851061F) Bank Deposit to PP Account for K9U43044RY432050M  ; itemid:, fromemail:, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b6c5dfdbd9d8f6dcd9cfd0c3da98d5d9db">[email&#160;protected]</a>, time:03:02:12, type:Bank Deposit to PP Account, status:Pending
    assets:online:paypal               $2.00 = $0.00
    assets:bank:wf:pchecking          $-2.00

2019-10-22 (6L8L1662YP1334033) Noble Benefactor Joyful Systems  ; itemid:, fromemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cba5a4a9a7ae8ba9aea5aee5adaaa8e5bfa4b9">[email&#160;protected]</a>, toemail:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1d6e747072735d7772647b6871337e7270">[email&#160;protected]</a>, time:05:07:06, type:Subscription Payment, status:Completed
    assets:online:paypal                       $9.41 = $9.41
    revenues:foss donations:darcshub         $-10.00  ; business:
    expenses:banking:paypal                    $0.59  ; business:
</code></pre>
<h2 id="timeclock"><a class="header" href="#timeclock">Timeclock</a></h2>
<p>The time logging format of timeclock.el, as read by hledger.</p>
<p>hledger can read time logs in timeclock format. <a href="http://ledger-cli.org/3.0/doc/ledger3.html#Time-Keeping">As with
Ledger</a>, these
are (a subset of)
<a href="http://www.emacswiki.org/emacs/TimeClock">timeclock.el</a>'s format,
containing clock-in and clock-out entries as in the example below. The
date is a <a href="#simple-dates">simple date</a>. The time format is
HH:MM[:SS][+-ZZZZ]. Seconds and timezone are optional. The timezone,
if present, must be four digits and is ignored (currently the time is
always interpreted as a local time). Lines beginning with <code>#</code> or <code>;</code> or
<code>*</code>, and blank lines, are ignored.</p>
<pre><code class="language-timeclock">i 2015/03/30 09:00:00 some account  optional description after 2 spaces ; optional comment, tags:
o 2015/03/30 09:20:00
i 2015/03/31 22:21:45 another:account
o 2015/04/01 02:00:34
</code></pre>
<p>hledger treats each clock-in/clock-out pair as a transaction posting
some number of hours to an account. Or if the session spans more than
one day, it is split into several transactions, one for each day. For
the above time log, <code>hledger print</code> generates these journal entries:</p>
<pre><code class="language-shell">$ hledger -f t.timeclock print
2015-03-30 * optional description after 2 spaces   ; optional comment, tags:
    (some account)           0.33h

2015-03-31 * 22:21-23:59
    (another:account)           1.64h

2015-04-01 * 00:00-02:00
    (another:account)           2.01h
</code></pre>
<p>Here is a
<a href="https://raw.github.com/simonmichael/hledger/master/examples/sample.timeclock">sample.timeclock</a>
to download and some queries to try:</p>
<pre><code class="language-cli">$ hledger -f sample.timeclock balance                               # current time balances
$ hledger -f sample.timeclock register -p 2009/3                    # sessions in march 2009
$ hledger -f sample.timeclock register -p weekly --depth 1 --empty  # time summary by week
</code></pre>
<p>To generate time logs, ie to clock in and clock out, you could:</p>
<ul>
<li>
<p>use emacs and the built-in timeclock.el, or the extended
<a href="http://www.emacswiki.org/emacs/timeclock-x.el">timeclock-x.el</a> and
perhaps the extras in
<a href="http://hub.darcs.net/simon/ledgertools/ledgerutils.el">ledgerutils.el</a></p>
</li>
<li>
<p>at the command line, use these bash aliases:
<code>shell     alias ti=&quot;echo i `date '+%Y-%m-%d %H:%M:%S'` \$* &gt;&gt;$TIMELOG&quot;     alias to=&quot;echo o `date '+%Y-%m-%d %H:%M:%S'` &gt;&gt;$TIMELOG&quot;</code></p>
</li>
<li>
<p>or use the old <code>ti</code> and <code>to</code> scripts in the <a href="https://github.com/ledger/ledger/tree/maint/scripts">ledger 2.x
repository</a>.
These rely on a &quot;timeclock&quot; executable which I think is just the
ledger 2 executable renamed.</p>
</li>
</ul>
<p><a name="timedot-format"></a></p>
<h2 id="timedot"><a class="header" href="#timedot">Timedot</a></h2>
<p><code>timedot</code> format is hledger's human-friendly time logging format.
Compared to <a href="#timeclock"><code>timeclock</code> format</a>, it is more convenient for
quick, approximate, and retroactive time logging, and more
human-readable (you can see at a glance where time was spent). A quick
example:</p>
<pre><code class="language-timedot">2023-05-01
hom:errands          .... ....  ; two hours; the space is ignored
fos:hledger:timedot  ..         ; half an hour
per:admin:finance               ; no time spent yet
</code></pre>
<p>hledger reads this as a transaction on this day with three (unbalanced)
postings, where each dot represents &quot;0.25&quot;. No commodity symbol is
assumed, but we typically interpret it as hours.</p>
<pre><code class="language-cli">$ hledger -f a.timedot print   # .timedot file extension (or timedot: prefix) is required
2023-05-01 *
    (hom:errands)                    2.00  ; two hours
    (fos:hledger:timedot)            0.50  ; half an hour
    (per:admin:finance)                 0
</code></pre>
<p>A timedot file contains a series of transactions (usually one per day).
Each begins with a <strong><a href="#simple-dates">simple date</a></strong> (Y-M-D, Y/M/D, or
Y.M.D), optionally be followed on the same line by a transaction
description, and/or a transaction comment following a semicolon.</p>
<p>After the date line are zero or more time postings, consisting of:</p>
<ul>
<li>
<p><strong>An account name</strong> - any hledger-style <a href="#account-names">account
name</a>, optionally indented.</p>
</li>
<li>
<p><strong>Two or more spaces</strong> - required if there is an amount (as in
journal format).</p>
</li>
<li>
<p><strong>A timedot amount</strong>, which can be</p>
<ul>
<li>
<p>empty (representing zero)</p>
</li>
<li>
<p>a number, optionally followed by a unit <code>s</code>, <code>m</code>, <code>h</code>, <code>d</code>, <code>w</code>,
<code>mo</code>, or <code>y</code>, representing a precise number of seconds, minutes,
hours, days weeks, months or years (hours is assumed by
default), which will be converted to hours according to 60s =
1m, 60m = 1h, 24h = 1d, 7d = 1w, 30d = 1mo, 365d = 1y.</p>
</li>
<li>
<p>one or more dots (period characters), each representing 0.25.
These are the dots in &quot;timedot&quot;. Spaces are ignored and can be
used for grouping/alignment.</p>
</li>
<li>
<p>one or more letters. These are like dots but they also generate
a tag <code>t:</code> (short for &quot;type&quot;) with the letter as its value,
and a separate posting for each of the values. This provides a
second dimension of categorisation, viewable in reports with
<code>--pivot t</code>.</p>
</li>
</ul>
</li>
<li>
<p><strong>An optional comment</strong> following a semicolon (a hledger-style
<a href="#posting-comments">posting comment</a>).</p>
</li>
</ul>
<p>There is some flexibility to help with keeping time log data and notes
in the same file:</p>
<ul>
<li>
<p>Blank lines and lines beginning with <code>#</code> or <code>;</code> are ignored.</p>
</li>
<li>
<p>After the first date line, lines which do not contain a double space
are parsed as postings with zero amount. (hledger's register
reports will show these if you add -E).</p>
</li>
<li>
<p>Before the first date line, lines beginning with <code>*</code> (eg org
headings) are ignored. And from the first date line onward, Emacs
org mode heading prefixes at the start of lines (one or more <code>*</code>'s
followed by a space) will be ignored. This means the time log can
also be a org outline.</p>
</li>
</ul>
<h3 id="timedot-examples"><a class="header" href="#timedot-examples">Timedot examples</a></h3>
<p>Numbers:</p>
<pre><code class="language-timedot">2016/2/3
inc:client1   4
fos:hledger   3h
biz:research  60m
</code></pre>
<p>Dots:</p>
<pre><code class="language-timedot"># on this day, 6h was spent on client work, 1.5h on haskell FOSS work, etc.
2016/2/1
inc:client1   .... .... .... .... .... ....
fos:haskell   .... ..
biz:research  .

2016/2/2
inc:client1   .... ....
biz:research  .
</code></pre>
<pre><code class="language-cli">$ hledger -f a.timedot print date:2016/2/2
2016-02-02 *
    (inc:client1)          2.00

2016-02-02 *
    (biz:research)          0.25
</code></pre>
<pre><code class="language-cli">$ hledger -f a.timedot bal --daily --tree
Balance changes in 2016-02-01-2016-02-03:

            ||  2016-02-01d  2016-02-02d  2016-02-03d 
============++========================================
 biz        ||         0.25         0.25         1.00 
   research ||         0.25         0.25         1.00 
 fos        ||         1.50            0         3.00 
   haskell  ||         1.50            0            0 
   hledger  ||            0            0         3.00 
 inc        ||         6.00         2.00         4.00 
   client1  ||         6.00         2.00         4.00 
------------++----------------------------------------
            ||         7.75         2.25         8.00 
</code></pre>
<p>Letters:</p>
<pre><code class="language-timedot"># Activity types:
#  c cleanup/catchup/repair
#  e enhancement
#  s support
#  l learning/research

2023-11-01
work:adm  ccecces
</code></pre>
<pre><code class="language-journal">$ hledger -f a.timedot print
2023-11-01
    (work:adm)  1     ; t:c
    (work:adm)  0.5   ; t:e
    (work:adm)  0.25  ; t:s
</code></pre>
<pre><code class="language-cli">$ hledger -f a.timedot bal
                1.75  work:adm
--------------------
                1.75  
</code></pre>
<pre><code class="language-cli">$ hledger -f a.timedot bal --pivot t
                1.00  c
                0.50  e
                0.25  s
--------------------
                1.75  
</code></pre>
<p>Org:</p>
<pre><code class="language-timedot">* 2023 Work Diary
** Q1
*** 2023-02-29
**** DONE
0700 yoga
**** UNPLANNED
**** BEGUN
hom:chores
 cleaning  ...
 water plants
  outdoor - one full watering can
  indoor - light watering
**** TODO
adm:planning: trip
*** LATER
</code></pre>
<p>Using <code>.</code> as account name separator:</p>
<pre><code class="language-timedot">2016/2/4
fos.hledger.timedot  4h
fos.ledger           ..
</code></pre>
<pre><code class="language-cli">$ hledger -f a.timedot --alias '/\./=:' bal -t
                4.50  fos
                4.00    hledger:timedot
                0.50    ledger
--------------------
                4.50
</code></pre>
<h2 id="part-3-reporting-concepts"><a class="header" href="#part-3-reporting-concepts">PART 3: REPORTING CONCEPTS</a></h2>
<h2 id="amount-formatting-parseability"><a class="header" href="#amount-formatting-parseability">Amount formatting, parseability</a></h2>
<p>If you're wondering why your <a href="#print"><code>print</code></a> report sometimes shows
trailing decimal marks, with no decimal digits; it does this when
showing amounts that have digit group marks but no decimal digits, to
disambiguate them and allow them to be re-parsed reliably (see also
<a href="#decimal-marks-digit-group-marks">Decimal marks, digit group marks</a>.
Eg:</p>
<pre><code class="language-journal">commodity $1,000.00

2023-01-02
    (a)      $1000
</code></pre>
<pre><code class="language-cli">$ hledger print
2023-01-02
    (a)        $1,000.
</code></pre>
<p>If this is a problem (eg when <a href="/ledger.html#hledger-to-ledger">exporting to
Ledger</a>), you can avoid it by disabling
digit group marks, eg with <a href="#commodity-styles">-c/--commodity</a> (for
each affected commodity):</p>
<pre><code class="language-cli">$ hledger print -c '$1000.00'
2023-01-02
    (a)          $1000
</code></pre>
<p>or by forcing print to always show decimal digits, with
<a href="#print-amount-style">--round</a>:</p>
<pre><code class="language-cli">$ hledger print -c '$1,000.00' --round=soft
2023-01-02
    (a)      $1,000.00
</code></pre>
<p>More generally: hledger output falls into three rough categories, which
format amounts a little bit differently to suit different consumers:</p>
<p><strong>1. &quot;hledger-readable output&quot; - should be readable by hledger (and by
humans)</strong></p>
<ul>
<li>This is produced by reports that show full journal entries: <code>print</code>,
<code>import</code>, <code>close</code>, <code>rewrite</code> etc.</li>
<li>It shows amounts with their original journal precisions, which may
not be consistent.</li>
<li>It adds a trailing decimal mark when needed to avoid showing
ambiguous amounts.</li>
<li>It can be parsed reliably (by hledger and ledger2beancount at least,
but perhaps not by Ledger..)</li>
</ul>
<p><strong>2. &quot;human-readable output&quot; - usually for humans</strong></p>
<ul>
<li>This is produced by all other reports.</li>
<li>It shows amounts with standard display precisions, which will be
consistent within each commodity.</li>
<li>It shows ambiguous amounts unmodified.</li>
<li>It can be parsed reliably in the context of a known report (when you
know decimals are consistently not being shown, you can assume a
single mark is a digit group mark).</li>
</ul>
<p><strong>3. &quot;machine-readable output&quot; - usually for other software</strong></p>
<ul>
<li>This is produced by all reports when an output format like <code>csv</code>,
<code>tsv</code>, <code>json</code>, or <code>sql</code> is selected.</li>
<li>It shows amounts as 1 or 2 do, but without digit group marks.</li>
<li>It can be parsed reliably (if needed, the decimal mark can be
changed with -c/--commodity-style).</li>
</ul>
<h2 id="time-periods"><a class="header" href="#time-periods">Time periods</a></h2>
<p><a name="report-period"></a></p>
<h3 id="report-start--end-date"><a class="header" href="#report-start--end-date">Report start &amp; end date</a></h3>
<p>By default, most hledger reports will show the full span of time
represented by the journal. The report start date will be the earliest
transaction or posting date, and the report end date will be the latest
transaction, posting, or market price date.</p>
<p>Often you will want to see a shorter time span, such as the current
month. You can specify a start and/or end date using
<a href="#reporting-options"><code>-b/--begin</code></a>, <a href="#reporting-options"><code>-e/--end</code></a>,
<a href="#period-expressions"><code>-p/--period</code></a> or a <a href="#queries"><code>date:</code> query</a>
(described below). All of these accept the <a href="#smart-dates">smart date</a>
syntax (below).</p>
<p>Some notes:</p>
<ul>
<li>End dates are exclusive, as in Ledger, so you should write the date
<em>after</em> the last day you want to see in the report.</li>
<li>As noted in <a href="#general-options">reporting options</a>: among start/end
dates specified with <em>options</em>, the last (i.e. right-most) option
takes precedence.</li>
<li>The effective report start and end dates are the intersection of the
start/end dates from options and that from <code>date:</code> queries. That is,
<code>date:2019-01 date:2019 -p'2000 to 2030'</code> yields January 2019, the
smallest common time span.</li>
<li>In some cases a <a href="#report-intervals">report interval</a> will adjust
start/end dates to fall on interval boundaries (see below).</li>
</ul>
<p>Examples:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>-b 2016/3/17</code></td><td>begin on St. Patrick's day 2016</td></tr>
<tr><td><code>-e 12/1</code></td><td>end at the start of december 1st of the current year (11/30 will be the last date included)</td></tr>
<tr><td><code>-b thismonth</code></td><td>all transactions on or after the 1st of the current month</td></tr>
<tr><td><code>-p thismonth</code></td><td>all transactions in the current month</td></tr>
<tr><td><code>date:2016/3/17..</code></td><td>the above written as queries instead (<code>..</code> can also be replaced with <code>-</code>)</td></tr>
<tr><td><code>date:..12/1</code></td><td></td></tr>
<tr><td><code>date:thismonth..</code></td><td></td></tr>
<tr><td><code>date:thismonth</code></td><td></td></tr>
</tbody></table>
</div>
<h3 id="smart-dates"><a class="header" href="#smart-dates">Smart dates</a></h3>
<p>hledger's user interfaces accept a &quot;smart date&quot; syntax for added
convenience. Smart dates optionally can be relative to today's date, be
written with english words, and have less-significant parts omitted
(missing parts are inferred as 1). Some examples:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>2004/10/1</code>, <code>2004-01-01</code>, <code>2004.9.1</code></td><td>exact date, several separators allowed. Year is 4+ digits, month is 1-12, day is 1-31</td></tr>
<tr><td><code>2004</code></td><td>start of year</td></tr>
<tr><td><code>2004/10</code></td><td>start of month</td></tr>
<tr><td><code>10/1</code></td><td>month and day in current year</td></tr>
<tr><td><code>21</code></td><td>day in current month</td></tr>
<tr><td><code>october, oct</code></td><td>start of month in current year</td></tr>
<tr><td><code>yesterday, today, tomorrow</code></td><td>-1, 0, 1 days from today</td></tr>
<tr><td><code>last/this/next day/week/month/quarter/year</code></td><td>-1, 0, 1 periods from the current period</td></tr>
<tr><td><code>in n days/weeks/months/quarters/years</code></td><td>n periods from the current period</td></tr>
<tr><td><code>n days/weeks/months/quarters/years ahead</code></td><td>n periods from the current period</td></tr>
<tr><td><code>n days/weeks/months/quarters/years ago</code></td><td>-n periods from the current period</td></tr>
<tr><td><code>20181201</code></td><td>8 digit YYYYMMDD with valid year month and day</td></tr>
<tr><td><code>201812</code></td><td>6 digit YYYYMM with valid year and month</td></tr>
</tbody></table>
</div>
<p>Some counterexamples - malformed digit sequences might give surprising
results:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>201813</code></td><td>6 digits with an invalid month is parsed as start of 6-digit year</td></tr>
<tr><td><code>20181301</code></td><td>8 digits with an invalid month is parsed as start of 8-digit year</td></tr>
<tr><td><code>20181232</code></td><td>8 digits with an invalid day gives an error</td></tr>
<tr><td><code>201801012</code></td><td>9+ digits beginning with a valid YYYYMMDD gives an error</td></tr>
</tbody></table>
</div>
<p>&quot;Today's date&quot; can be overridden with the <code>--today</code> option, in case
it's needed for testing or for recreating old reports. (Except for
periodic transaction rules, which are not affected by <code>--today</code>.)</p>
<h3 id="report-intervals"><a class="header" href="#report-intervals">Report intervals</a></h3>
<p>A report interval can be specified so that reports like
<a href="#register">register</a>, <a href="#balance">balance</a> or <a href="#activity">activity</a>
become multi-period, showing each subperiod as a separate row or column.</p>
<p>The following standard intervals can be enabled with command-line flags:</p>
<ul>
<li><code>-D/--daily</code></li>
<li><code>-W/--weekly</code></li>
<li><code>-M/--monthly</code></li>
<li><code>-Q/--quarterly</code></li>
<li><code>-Y/--yearly</code></li>
</ul>
<p>More complex intervals can be specified using <code>-p/--period</code>, described
below.</p>
<h3 id="date-adjustment"><a class="header" href="#date-adjustment">Date adjustment</a></h3>
<p>When there is a report interval (other than daily), report start/end
dates which have been inferred, eg from the journal, are automatically
adjusted to natural period boundaries. This is convenient for producing
simple periodic reports. More precisely:</p>
<ul>
<li>
<p>an inferred start date will be adjusted earlier if needed to fall on
a natural period boundary</p>
</li>
<li>
<p>an inferred end date will be adjusted later if needed to make the
last period the same length as the others.</p>
</li>
</ul>
<p>By contrast, start/end dates which have been specified explicitly, with
<code>-b</code>, <code>-e</code>, <code>-p</code> or <code>date:</code>, will not be adjusted (since hledger 1.29).
This makes it possible to specify non-standard report periods, but it
also means that if you are specifying a start date, you should pick one
that's on a period boundary if you want to see simple report period
headings.</p>
<h3 id="period-expressions"><a class="header" href="#period-expressions">Period expressions</a></h3>
<p>The <code>-p/--period</code> option specifies a period expression, which is a
compact way of expressing a start date, end date, and/or report
interval.</p>
<p>Here's a period expression with a start and end date (specifying the
first quarter of 2009):</p>
<div class="table-wrapper"><table><thead><tr><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;from 2009/1/1 to 2009/4/1&quot;</code></td></tr>
</tbody></table>
</div>
<p>Several keywords like &quot;from&quot; and &quot;to&quot; are supported for readability;
these are optional. &quot;to&quot; can also be written as &quot;..&quot; or &quot;-&quot;. The
spaces are also optional, as long as you don't run two dates together.
So the following are equivalent to the above:</p>
<div class="table-wrapper"><table><thead><tr><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;2009/1/1 2009/4/1&quot;</code></td></tr>
<tr><td><code>-p2009/1/1to2009/4/1</code></td></tr>
<tr><td><code>-p2009/1/1..2009/4/1</code></td></tr>
</tbody></table>
</div>
<p>Dates are <a href="#smart-dates">smart dates</a>, so if the current year is 2009,
these are also equivalent to the above:</p>
<div class="table-wrapper"><table><thead><tr><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;1/1 4/1&quot;</code></td></tr>
<tr><td><code>-p &quot;jan-apr&quot;</code></td></tr>
<tr><td><code>-p &quot;this year to 4/1&quot;</code></td></tr>
</tbody></table>
</div>
<p>If you specify only one date, the missing start or end date will be the
earliest or latest transaction date in the journal:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;from 2009/1/1&quot;</code></td><td>everything after january 1, 2009</td></tr>
<tr><td><code>-p &quot;since 2009/1&quot;</code></td><td>the same, since is a synonym</td></tr>
<tr><td><code>-p &quot;from 2009&quot;</code></td><td>the same</td></tr>
<tr><td><code>-p &quot;to 2009&quot;</code></td><td>everything before january 1, 2009</td></tr>
</tbody></table>
</div>
<p>You can also specify a period by writing a single partial or full date:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;2009&quot;</code></td><td>the year 2009; equivalent to &quot;2009/1/1 to 2010/1/1&quot;</td></tr>
<tr><td><code>-p &quot;2009/1&quot;</code></td><td>the month of january 2009; equivalent to &quot;2009/1/1 to 2009/2/1&quot;</td></tr>
<tr><td><code>-p &quot;2009/1/1&quot;</code></td><td>the first day of 2009; equivalent to &quot;2009/1/1 to 2009/1/2&quot;</td></tr>
</tbody></table>
</div>
<p>or by using the &quot;Q&quot; quarter-year syntax (case insensitive):</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;2009Q1&quot;</code></td><td>first quarter of 2009, equivalent to &quot;2009/1/1 to 2009/4/1&quot;</td></tr>
<tr><td><code>-p &quot;q4&quot;</code></td><td>fourth quarter of the current year</td></tr>
</tbody></table>
</div>
<h4 id="period-expressions-with-a-report-interval"><a class="header" href="#period-expressions-with-a-report-interval">Period expressions with a report interval</a></h4>
<p>A period expression can also begin with a <a href="#report-intervals">report
interval</a>, separated from the start/end dates (if
any) by a space or the word <code>in</code>:</p>
<div class="table-wrapper"><table><thead><tr><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;weekly from 2009/1/1 to 2009/4/1&quot;</code></td></tr>
<tr><td><code>-p &quot;monthly in 2008&quot;</code></td></tr>
<tr><td><code>-p &quot;quarterly&quot;</code></td></tr>
</tbody></table>
</div>
<h4 id="more-complex-report-intervals"><a class="header" href="#more-complex-report-intervals">More complex report intervals</a></h4>
<p>Some more complex intervals can be specified within period expressions,
such as:</p>
<ul>
<li><code>biweekly</code> (every two weeks)</li>
<li><code>fortnightly</code></li>
<li><code>bimonthly</code> (every two months)</li>
<li><code>every day|week|month|quarter|year</code></li>
<li><code>every N days|weeks|months|quarters|years</code></li>
</ul>
<p>Weekly on a custom day:</p>
<ul>
<li><code>every Nth day of week</code> (<code>th</code>, <code>nd</code>, <code>rd</code>, or <code>st</code> are all accepted
after the number)</li>
<li><code>every WEEKDAYNAME</code> (full or three-letter english weekday name, case
insensitive)</li>
</ul>
<p>Monthly on a custom day:</p>
<ul>
<li><code>every Nth day [of month]</code></li>
<li><code>every Nth WEEKDAYNAME [of month]</code></li>
</ul>
<p>Yearly on a custom day:</p>
<ul>
<li><code>every MM/DD [of year]</code> (month number and day of month number)</li>
<li><code>every MONTHNAME DDth [of year]</code> (full or three-letter english month
name, case insensitive, and day of month number)</li>
<li><code>every DDth MONTHNAME [of year]</code> (equivalent to the above)</li>
</ul>
<p>Examples:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;bimonthly from 2008&quot;</code></td><td></td></tr>
<tr><td><code>-p &quot;every 2 weeks&quot;</code></td><td></td></tr>
<tr><td><code>-p &quot;every 5 months from 2009/03&quot;</code></td><td></td></tr>
<tr><td><code>-p &quot;every 2nd day of week&quot;</code></td><td>periods will go from Tue to Tue</td></tr>
<tr><td><code>-p &quot;every Tue&quot;</code></td><td>same</td></tr>
<tr><td><code>-p &quot;every 15th day&quot;</code></td><td>period boundaries will be on 15th of each month</td></tr>
<tr><td><code>-p &quot;every 2nd Monday&quot;</code></td><td>period boundaries will be on second Monday of each month</td></tr>
<tr><td><code>-p &quot;every 11/05&quot;</code></td><td>yearly periods with boundaries on 5th of November</td></tr>
<tr><td><code>-p &quot;every 5th November&quot;</code></td><td>same</td></tr>
<tr><td><code>-p &quot;every Nov 5th&quot;</code></td><td>same</td></tr>
</tbody></table>
</div>
<p>Show historical balances at end of the 15th day of each month (N is an
end date, exclusive as always):</p>
<pre><code class="language-cli">$ hledger balance -H -p &quot;every 16th day&quot;
</code></pre>
<p>Group postings from the start of wednesday to end of the following
tuesday (N is both (inclusive) start date and (exclusive) end date):</p>
<pre><code class="language-cli">$ hledger register checking -p &quot;every 3rd day of week&quot;
</code></pre>
<h4 id="multiple-weekday-intervals"><a class="header" href="#multiple-weekday-intervals">Multiple weekday intervals</a></h4>
<p>This special form is also supported:</p>
<ul>
<li><code>every WEEKDAYNAME,WEEKDAYNAME,...</code> (full or three-letter english
weekday names, case insensitive)</li>
</ul>
<p>Also, <code>weekday</code> and <code>weekendday</code> are shorthand for <code>mon,tue,wed,thu,fri</code>
and <code>sat,sun</code>.</p>
<p>This is mainly intended for use with <code>--forecast</code>, to generate <a href="#periodic-transactions">periodic
transactions</a> on arbitrary days of the week. It
may be less useful with <code>-p</code>, since it divides each week into subperiods
of unequal length, which is unusual. (Related:
<a href="https://github.com/simonmichael/hledger/pull/1632">#1632</a>)</p>
<p>Examples:</p>
<div class="table-wrapper"><table><thead><tr><th></th><th></th></tr></thead><tbody>
<tr><td><code>-p &quot;every mon,wed,fri&quot;</code></td><td>dates will be Mon, Wed, Fri; <br>periods will be Mon-Tue, Wed-Thu, Fri-Sun</td></tr>
<tr><td><code>-p &quot;every weekday&quot;</code></td><td>dates will be Mon, Tue, Wed, Thu, Fri; <br>periods will be Mon, Tue, Wed, Thu, Fri-Sun</td></tr>
<tr><td><code>-p &quot;every weekendday&quot;</code></td><td>dates will be Sat, Sun; <br>periods will be Sat, Sun-Fri</td></tr>
</tbody></table>
</div>
<h2 id="depth"><a class="header" href="#depth">Depth</a></h2>
<p>With the <code>--depth NUM</code> option (short form: <code>-NUM</code>), reports will show
accounts only to the specified depth, hiding deeper subaccounts. Use
this when you want a summary with less detail. This flag has the same
effect as a <code>depth:</code> query argument: <code>depth:2</code>, <code>--depth=2</code> or <code>-2</code> are
equivalent.</p>
<h2 id="queries"><a class="header" href="#queries">Queries</a></h2>
<p>One of hledger's strengths is being able to quickly report on a precise
subset of your data. Most hledger commands accept optional query
arguments to restrict their scope. The syntax is as follows:</p>
<ul>
<li>
<p>Zero or more space-separated query terms. These are most often
<a href="#account-names">account name</a> substrings:</p>
<p><code>utilities food:groceries</code></p>
</li>
<li>
<p>Terms with spaces or other <a href="#special-characters">special characters</a>
should be enclosed in quotes:</p>
<p><code>&quot;personal care&quot;</code></p>
</li>
<li>
<p><a href="#regular-expressions">Regular expressions</a> are also supported:</p>
<p><code>&quot;^expenses\b&quot;</code><br />
<code>&quot;accounts (payable|receivable)&quot;</code></p>
</li>
<li>
<p>Add a query type prefix to match other parts of the data:</p>
<p><code>date:202312-</code><br />
<code>status:</code><br />
<code>desc:amazon</code><br />
<code>cur:USD</code><br />
<code>&quot;amt:&gt;0&quot;</code></p>
</li>
<li>
<p>Add a <code>not:</code> prefix to negate:</p>
<p><code>not:cur:USD</code></p>
</li>
<li>
<p>Multiple unlike terms are AND-ed, multiple like terms are OR-ed</p>
<p><code>date:2022 desc:amazon desc:amzn</code><br />
(all transactions with &quot;amazon&quot; or &quot;amzn&quot; in description during
2022)</p>
</li>
</ul>
<h3 id="query-types"><a class="header" href="#query-types">Query types</a></h3>
<p>Here are the types of query term available. Remember these can also be
prefixed with <strong><code>not:</code></strong> to convert them into a negative match.</p>
<p><strong><code>acct:REGEX</code>, <code>REGEX</code></strong><br />
Match account names containing this (case insensitive) <a href="#regular-expressions">regular
expression</a>. This is the default query type when
there is no prefix, and regular expression syntax is typically not
needed, so usually we just write an account name substring, like
<code>expenses</code> or <code>food</code>.</p>
<p><strong><code>amt:N, amt:&lt;N, amt:&lt;=N, amt:&gt;N, amt:&gt;=N</code></strong><br />
Match postings with a single-commodity amount equal to, less than, or
greater than N. (Postings with multi-commodity amounts are not tested
and will always match.) The comparison has two modes: if N is preceded
by a + or - sign (or is 0), the two signed numbers are compared.
Otherwise, the absolute magnitudes are compared, ignoring sign.</p>
<p><strong><code>code:REGEX</code></strong><br />
Match by transaction code (eg check number).</p>
<p><strong><code>cur:REGEX</code></strong><br />
Match postings or transactions including any amounts whose
currency/commodity symbol is fully matched by REGEX. (For a partial
match, use <code>.*REGEX.*</code>). Note, to match <a href="#special-characters">special
characters</a> which are regex-significant, you need
to escape them with <code>\</code>. And for characters which are significant to
your shell you may need one more level of escaping. So eg to match the
dollar sign:<br />
<code>hledger print cur:\\$</code>.</p>
<p><strong><code>desc:REGEX</code></strong><br />
Match transaction descriptions.</p>
<p><strong><code>date:PERIODEXPR</code></strong><br />
Match dates (or with the <code>--date2</code> flag, <a href="#secondary-dates">secondary
dates</a>) within the specified period. PERIODEXPR is a
<a href="#period-expressions">period expression</a> with no report interval.
Examples:<br />
<code>date:2016</code>, <code>date:thismonth</code>, <code>date:2/1-2/15</code>,
<code>date:2021-07-27..nextquarter</code>.</p>
<p><strong><code>date2:PERIODEXPR</code></strong><br />
Match secondary dates within the specified period (independent of the
<code>--date2</code> flag).</p>
<p><strong><code>depth:N</code></strong><br />
Match (or display, depending on command) accounts at or above this
depth.</p>
<p><strong><code>expr:&quot;TERM AND NOT (TERM OR TERM)&quot;</code></strong> (eg)<br />
Match with a boolean combination of queries (which must be enclosed in
quotes). See <a href="#combining-query-terms">Combining query terms</a> below.</p>
<p><strong><code>note:REGEX</code></strong><br />
Match transaction <a href="#payee-and-note">notes</a> (the part of the description
right of <code>|</code>, or the whole description if there's no <code>|</code>).</p>
<p><strong><code>payee:REGEX</code></strong><br />
Match transaction <a href="#payee-and-note">payee/payer names</a> (the part of the
description left of <code>|</code>, or the whole description if there's no <code>|</code>).</p>
<p><strong><code>real:, real:0</code></strong><br />
Match real or virtual postings respectively.</p>
<p><strong><code>status:, status:!, status:*</code></strong><br />
Match unmarked, pending, or cleared transactions respectively.</p>
<p><strong><code>type:TYPECODES</code></strong><br />
Match by account type (see <a href="#account-types">Declaring accounts &gt; Account
types</a>). <code>TYPECODES</code> is one or more of the single-letter
account type codes <code>ALERXCV</code>, case insensitive. Note <code>type:A</code> and
<code>type:E</code> will also match their respective subtypes <code>C</code> (Cash) and <code>V</code>
(Conversion). Certain kinds of account alias can disrupt account types,
see <a href="#aliases-and-account-types">Rewriting accounts &gt; Aliases and account
types</a>.</p>
<p><strong><code>tag:REGEX[=REGEX]</code></strong><br />
Match by tag name, and optionally also by tag value. (To match only by
value, use <code>tag:.=REGEX</code>.)</p>
<p>When querying by tag, note that:</p>
<ul>
<li>Accounts also inherit the tags of their parent accounts</li>
<li>Postings also inherit the tags of their account and their
transaction</li>
<li>Transactions also acquire the tags of their postings.</li>
</ul>
<p>(<strong><code>inacct:ACCTNAME</code></strong><br />
A special query term used automatically in hledger-web only: tells
hledger-web to show the transaction register for an account.)</p>
<h3 id="combining-query-terms"><a class="header" href="#combining-query-terms">Combining query terms</a></h3>
<p>When given multiple space-separated query terms, most commands select
things which match:</p>
<ul>
<li>any of the description terms AND</li>
<li>any of the account terms AND</li>
<li>any of the status terms AND</li>
<li>all the other terms.</li>
</ul>
<p>The <a href="#print">print</a> command is a little different, showing transactions
which:</p>
<ul>
<li>match any of the description terms AND</li>
<li>have any postings matching any of the positive account terms AND</li>
<li>have no postings matching any of the negative account terms AND</li>
<li>match all the other terms.</li>
</ul>
<p>We also support more complex boolean queries with the 'expr:' prefix.
This allows one to combine queries using one of three operators: AND,
OR, and NOT, where NOT is different syntax for 'not:'.</p>
<p>Examples of such queries are:</p>
<ul>
<li>
<p>Match transactions with 'cool' in the description AND with the
'A' tag</p>
<p><code>expr:&quot;desc:cool AND tag:A&quot;</code></p>
</li>
<li>
<p>Match transactions NOT to the 'expenses:food' account OR with the
'A' tag</p>
<p><code>expr:&quot;NOT expenses:food OR tag:A&quot;</code></p>
</li>
<li>
<p>Match transactions NOT involving the 'expenses:food' account OR
with the 'A' tag AND involving the 'expenses:drink' account.
(the AND is implicitly added by space-separation, following the
rules above)</p>
<p><code>expr:&quot;expenses:food OR (tag:A expenses:drink)&quot;</code></p>
</li>
</ul>
<h3 id="queries-and-command-options"><a class="header" href="#queries-and-command-options">Queries and command options</a></h3>
<p>Some queries can also be expressed as command-line options: <code>depth:2</code> is
equivalent to <code>--depth 2</code>, <code>date:2023</code> is equivalent to <code>-p 2023</code>, etc.
When you mix command options and query arguments, generally the
resulting query is their intersection.</p>
<h3 id="queries-and-valuation"><a class="header" href="#queries-and-valuation">Queries and valuation</a></h3>
<p>When amounts are converted to other commodities in
<a href="#cost-reporting">cost</a> or <a href="#value-reporting">value</a> reports, <code>cur:</code> and
<code>amt:</code> match the old commodity symbol and the old amount quantity, not
the new ones (except in hledger 1.22.0 where it's reversed, see
<a href="https://github.com/simonmichael/hledger/issues/1625">#1625</a>).</p>
<h3 id="querying-with-account-aliases"><a class="header" href="#querying-with-account-aliases">Querying with account aliases</a></h3>
<p>When account names are <a href="#alias-directive">rewritten</a> with <code>--alias</code> or
<code>alias</code>, note that <code>acct:</code> will match either the old or the new account
name.</p>
<h3 id="querying-with-cost-or-value"><a class="header" href="#querying-with-cost-or-value">Querying with cost or value</a></h3>
<p>When amounts are converted to other commodities in
<a href="#cost-reporting">cost</a> or <a href="#value-reporting">value</a> reports, note that
<code>cur:</code> matches the new commodity symbol, and not the old one, and <code>amt:</code>
matches the new quantity, and not the old one. Note: this changed in
hledger 1.22, previously it was the reverse, see the discussion at
<a href="https://github.com/simonmichael/hledger/issues/1625">#1625</a>.</p>
<h2 id="pivoting"><a class="header" href="#pivoting">Pivoting</a></h2>
<p>Normally, hledger groups and sums amounts within each account. The
<code>--pivot FIELD</code> option substitutes some other transaction field for
account names, causing amounts to be grouped and summed by that field's
value instead. FIELD can be any of the transaction fields <code>acct</code>,
<code>status</code>, <code>code</code>, <code>desc</code>, <code>payee</code>, <code>note</code>, or a tag name. When pivoting
on a tag and a posting has multiple values of that tag, only the first
value is displayed. Values containing <code>colon:separated:parts</code> will be
displayed hierarchically, like account names. Multiple, colon-delimited
fields can be pivoted simultaneously, generating a hierarchical account
name.</p>
<p>Some examples:</p>
<pre><code class="language-journal">2016/02/16 Yearly Dues Payment
    assets:bank account                 2 EUR
    income:dues                        -2 EUR  ; member: John Doe, kind: Lifetime
</code></pre>
<p>Normal balance report showing account names:</p>
<pre><code class="language-cli">$ hledger balance
               2 EUR  assets:bank account
              -2 EUR  income:dues
--------------------
                   0
</code></pre>
<p>Pivoted balance report, using member: tag values instead:</p>
<pre><code class="language-cli">$ hledger balance --pivot member
               2 EUR
              -2 EUR  John Doe
--------------------
                   0
</code></pre>
<p>One way to show only amounts with a member: value (using a
<a href="#queries">query</a>):</p>
<pre><code class="language-cli">$ hledger balance --pivot member tag:member=.
              -2 EUR  John Doe
--------------------
              -2 EUR
</code></pre>
<p>Another way (the acct: query matches against the pivoted &quot;account
name&quot;):</p>
<pre><code class="language-cli">$ hledger balance --pivot member acct:.
              -2 EUR  John Doe
--------------------
              -2 EUR
</code></pre>
<p>Hierarchical reports can be generated with multiple pivots:</p>
<pre><code class="language-cli">$ hledger balance Income:Dues --pivot kind:member
              -2 EUR  Lifetime:John Doe
--------------------
              -2 EUR
</code></pre>
<h2 id="generating-data"><a class="header" href="#generating-data">Generating data</a></h2>
<p>hledger has several features for generating data, such as:</p>
<ul>
<li>
<p><a href="#periodic-transactions">Periodic transaction</a> rules can generate
single or repeating transactions following a template. These are
usually dated in the future, eg to help with forecasting. They are
activated by the <code>--forecast</code> option.</p>
</li>
<li>
<p>The balance command's <code>--budget</code> option uses these same periodic
rules to generate goals for the budget report.</p>
</li>
<li>
<p><a href="#auto-postings">Auto posting</a> rules can generate extra postings on
certain matched transactions. They are always applied to forecast
transactions; with the <code>--auto</code> flag they are applied to
transactions recorded in the journal as well.</p>
</li>
<li>
<p>The <code>--infer-equity</code> flag infers missing conversion equity postings
from @/@@ costs. And the inverse <code>--infer-costs</code> flag infers missing
@/@@ costs from conversion equity postings.</p>
</li>
</ul>
<p>Generated data of this kind is temporary, existing only at report time.
But you can see it in the output of <code>hledger print</code>, and you can save
that to your journal, in effect converting it from temporary generated
data to permanent recorded data. This could be useful as a data entry
aid.</p>
<p>If you are wondering what data is being generated and why, add the
<code>--verbose-tags</code> flag. In <code>hledger print</code> output you will see extra tags
like <code>generated-transaction</code>, <code>generated-posting</code>, and <code>modified</code> on
generated/modified data. Also, even without <code>--verbose-tags</code>, generated
data always has equivalen hidden tags (with an underscore prefix), so eg
you could match generated transactions with
<code>tag:_generated-transaction</code>.</p>
<h2 id="forecasting"><a class="header" href="#forecasting">Forecasting</a></h2>
<p>Forecasting, or speculative future reporting, can be useful for
estimating future balances, or for exploring different future scenarios.</p>
<p>The simplest and most flexible way to do it with hledger is to manually
record a bunch of future-dated transactions. You could keep these in a
separate <code>future.journal</code> and include that with <code>-f</code> only when you want
to see them.</p>
<h3 id="--forecast"><a class="header" href="#--forecast">--forecast</a></h3>
<p>There is another way: with the <code>--forecast</code> option, hledger can generate
temporary &quot;forecast transactions&quot; for reporting purposes, according to
<a href="#periodic-transactions">periodic transaction rules</a> defined in the
journal. Each rule can generate multiple recurring transactions, so by
changing one rule you can change many forecasted transactions. (These
same rules can also generate budget goals, described in
<a href="#budgeting">Budgeting</a>.)</p>
<p>Forecast transactions usually start after ordinary transactions end. By
default, they begin after your latest-dated ordinary transaction, or
today, whichever is later, and they end six months from today. (The
exact rules are a little more complicated, and are given below.)</p>
<p>This is the &quot;forecast period&quot;, which need not be the same as the
<a href="#report-period">report period</a>. You can override it - eg to forecast
farther into the future, or to force forecast transactions to overlap
your ordinary transactions - by giving the --forecast option a <a href="#period-expressions">period
expression</a> argument, like <code>--forecast=..2099</code> or
<code>--forecast=2023-02-15..</code>. Note that the <code>=</code> is required.</p>
<h3 id="inspecting-forecast-transactions"><a class="header" href="#inspecting-forecast-transactions">Inspecting forecast transactions</a></h3>
<p><code>print</code> is the best command for inspecting and troubleshooting forecast
transactions. Eg:</p>
<pre><code class="language-journal">~ monthly from 2022-12-20    rent
    assets:bank:checking
    expenses:rent           $1000
</code></pre>
<pre><code class="language-terminal">$ hledger print --forecast --today=2023/4/21
2023-05-20 rent
    ; generated-transaction: ~ monthly from 2022-12-20
    assets:bank:checking
    expenses:rent                  $1000

2023-06-20 rent
    ; generated-transaction: ~ monthly from 2022-12-20
    assets:bank:checking
    expenses:rent                  $1000

2023-07-20 rent
    ; generated-transaction: ~ monthly from 2022-12-20
    assets:bank:checking
    expenses:rent                  $1000

2023-08-20 rent
    ; generated-transaction: ~ monthly from 2022-12-20
    assets:bank:checking
    expenses:rent                  $1000

2023-09-20 rent
    ; generated-transaction: ~ monthly from 2022-12-20
    assets:bank:checking
    expenses:rent                  $1000
</code></pre>
<p>Here there are no ordinary transactions, so the forecasted transactions
begin on the first occurence after today's date. (You won't normally
use <code>--today</code>; it's just to make these examples reproducible.)</p>
<h3 id="forecast-reports"><a class="header" href="#forecast-reports">Forecast reports</a></h3>
<p>Forecast transactions affect all reports, as you would expect. Eg:</p>
<pre><code class="language-terminal">$ hledger areg rent --forecast --today=2023/4/21
Transactions in expenses:rent and subaccounts:
2023-05-20 rent                 as:ba:checking               $1000         $1000
2023-06-20 rent                 as:ba:checking               $1000         $2000
2023-07-20 rent                 as:ba:checking               $1000         $3000
2023-08-20 rent                 as:ba:checking               $1000         $4000
2023-09-20 rent                 as:ba:checking               $1000         $5000
</code></pre>
<pre><code class="language-terminal">$ hledger bal -M expenses --forecast --today=2023/4/21
Balance changes in 2023-05-01..2023-09-30:

               ||   May    Jun    Jul    Aug    Sep 
===============++===================================
 expenses:rent || $1000  $1000  $1000  $1000  $1000 
---------------++-----------------------------------
               || $1000  $1000  $1000  $1000  $1000 
</code></pre>
<h3 id="forecast-tags"><a class="header" href="#forecast-tags">Forecast tags</a></h3>
<p>Forecast transactions generated by --forecast have a hidden tag,
<code>_generated-transaction</code>. So if you ever need to match forecast
transactions, you could use <code>tag:_generated-transaction</code> (or just
<code>tag:generated</code>) in a query.</p>
<p>For troubleshooting, you can add the <code>--verbose-tags</code> flag. Then,
visible <code>generated-transaction</code> tags will be added also, so you can view
them with the <code>print</code> command. Their value indicates which periodic rule
was responsible.</p>
<h3 id="forecast-period-in-detail"><a class="header" href="#forecast-period-in-detail">Forecast period, in detail</a></h3>
<p>Forecast start/end dates are chosen so as to do something useful by
default in almost all situations, while also being flexible. Here are
(with luck) the exact rules, to help with troubleshooting:</p>
<p>The forecast period starts on:</p>
<ul>
<li>the later of
<ul>
<li>the start date in the periodic transaction rule</li>
<li>the start date in <code>--forecast</code>'s argument</li>
</ul>
</li>
<li>otherwise (if those are not available): the later of
<ul>
<li>the report start date specified with <code>-b</code>/<code>-p</code>/<code>date:</code></li>
<li>the day after the latest ordinary transaction in the journal</li>
</ul>
</li>
<li>otherwise (if none of these are available): today.</li>
</ul>
<p>The forecast period ends on:</p>
<ul>
<li>the earlier of
<ul>
<li>the end date in the periodic transaction rule</li>
<li>the end date in <code>--forecast</code>'s argument</li>
</ul>
</li>
<li>otherwise: the report end date specified with <code>-e</code>/<code>-p</code>/<code>date:</code></li>
<li>otherwise: 180 days (~6 months) from today.</li>
</ul>
<h3 id="forecast-troubleshooting"><a class="header" href="#forecast-troubleshooting">Forecast troubleshooting</a></h3>
<p>When --forecast is not doing what you expect, one of these tips should
help:</p>
<ul>
<li>Remember to use the <code>--forecast</code> option.</li>
<li>Remember to have at least one periodic transaction rule in your
journal.</li>
<li>Test with <code>print --forecast</code>.</li>
<li>Check for typos or too-restrictive start/end dates in your periodic
transaction rule.</li>
<li>Leave at least 2 spaces between the rule's period expression and
description fields.</li>
<li>Check for future-dated ordinary transactions suppressing forecasted
transactions.</li>
<li>Try setting explicit report start and/or end dates with <code>-b</code>, <code>-e</code>,
<code>-p</code> or <code>date:</code></li>
<li>Try adding the <code>-E</code> flag to encourage display of empty periods/zero
transactions.</li>
<li>Try setting explicit forecast start and/or end dates with
<code>--forecast=START..END</code></li>
<li>Consult <a href="#forecast-period-in-detail">Forecast period, in detail</a>,
above.</li>
<li>Check inside the engine: add <code>--debug=2</code> (eg).</li>
</ul>
<h2 id="budgeting"><a class="header" href="#budgeting">Budgeting</a></h2>
<p>With the balance command's <a href="#budget-report"><code>--budget</code> report</a>, each
periodic transaction rule generates recurring budget goals in specified
accounts, and goals and actual performance can be compared. See the
balance command's doc below.</p>
<p>You can generate budget goals and forecast transactions at the same
time, from the same or different periodic transaction rules:
<code>hledger bal -M --budget --forecast ...</code></p>
<p>See also: <a href="/budgeting-and-forecasting.html">Budgeting and Forecasting</a>.</p>
<h2 id="cost-reporting"><a class="header" href="#cost-reporting">Cost reporting</a></h2>
<p>In some transactions - for example a currency conversion, or a purchase
or sale of stock - one commodity is exchanged for another. In these
transactions there is a conversion rate, also called the cost (when
buying) or selling price (when selling). In hledger docs we just say
&quot;cost&quot;, for convenience; feel free to mentally translate to
&quot;conversion rate&quot; or &quot;selling price&quot; if helpful.</p>
<h3 id="recording-costs"><a class="header" href="#recording-costs">Recording costs</a></h3>
<p>We'll explore several ways of recording transactions involving costs.
These are also summarised at <a href="/cost-notation.html">hledger Cookbook &gt; Cost
notation</a>.</p>
<p>Costs can be recorded explicitly in the journal, using the <code>@ UNITCOST</code>
or <code>@@ TOTALCOST</code> notation described in <a href="#costs">Journal &gt; Costs</a>:</p>
<p><strong>Variant 1</strong></p>
<pre><code class="language-journal">2022-01-01
  assets:dollars    $-135
  assets:euros       €100 @ $1.35   ; $1.35 per euro (unit cost)
</code></pre>
<p><strong>Variant 2</strong></p>
<pre><code class="language-journal">2022-01-01
  assets:dollars    $-135
  assets:euros       €100 @@ $135   ; $135 total cost
</code></pre>
<p>Typically, writing the unit cost (variant 1) is preferable; it can be
more effort, requiring more attention to decimal digits; but it reveals
the per-unit cost basis, and makes stock sales easier.</p>
<p>Costs can also be left implicit, and hledger will infer the cost that is
consistent with a balanced transaction:</p>
<p><strong>Variant 3</strong></p>
<pre><code class="language-journal">2022-01-01
  assets:dollars    $-135
  assets:euros       €100
</code></pre>
<p>Here, hledger will attach a <code>@@ €100</code> cost to the first amount (you can
see it with <code>hledger print -x</code>). This form looks convenient, but there
are downsides:</p>
<ul>
<li>
<p>It sacrifices some error checking. For example, if you accidentally
wrote €10 instead of €100, hledger would not be able to detect the
mistake.</p>
</li>
<li>
<p>It is sensitive to the order of postings - if they were reversed, a
different entry would be inferred and reports would be different.</p>
</li>
<li>
<p>The per-unit cost basis is not easy to read.</p>
</li>
</ul>
<p>So generally this kind of entry is not recommended. You can make sure
you have none of these by using <code>-s</code> (<a href="#strict-mode">strict mode</a>), or
by running <code>hledger check balanced</code>.</p>
<h3 id="reporting-at-cost"><a class="header" href="#reporting-at-cost">Reporting at cost</a></h3>
<p>Now when you add the <code>-B</code>/<code>--cost</code> flag to reports (&quot;B&quot; is from
Ledger's -B/--basis/--cost flag), any amounts which have been
annotated with costs will be converted to their cost's commodity (in
the report output). Ie they will be displayed &quot;at cost&quot; or &quot;at sale
price&quot;.</p>
<p>Some things to note:</p>
<ul>
<li>
<p>Costs are attached to specific posting amounts in specific
transactions, and once recorded they do not change. This contrasts
with <a href="#market-prices">market prices</a>, which are ambient and
fluctuating.</p>
</li>
<li>
<p>Conversion to cost is performed before conversion to market value
(described below).</p>
</li>
</ul>
<h3 id="equity-conversion-postings"><a class="header" href="#equity-conversion-postings">Equity conversion postings</a></h3>
<p>There is a problem with the entries above - they are not conventional
Double Entry Bookkeeping (DEB) notation, and because of the &quot;magical&quot;
transformation of one commodity into another, they cause an imbalance in
the Accounting Equation. This shows up as a non-zero grand total in
balance reports like <code>hledger bse</code>.</p>
<p>For most hledger users, this doesn't matter in practice and can safely
be ignored ! But if you'd like to learn more, keep reading.</p>
<p>Conventional DEB uses an extra pair of equity postings to balance the
transaction. Of course you can do this in hledger as well:</p>
<p><strong>Variant 4</strong></p>
<pre><code class="language-journal">2022-01-01
    assets:dollars      $-135
    assets:euros         €100
    equity:conversion    $135
    equity:conversion   €-100
</code></pre>
<p>Now the transaction is perfectly balanced according to standard DEB, and
<code>hledger bse</code>'s total will not be disrupted.</p>
<p>And, hledger can still infer the cost for cost reporting, but it's not
done by default - you must add the <code>--infer-costs</code> flag like so:</p>
<pre><code class="language-cli">$ hledger print --infer-costs
2022-01-01 one hundred euros purchased at $1.35 each
    assets:dollars       $-135 @@ €100
    assets:euros                  €100
    equity:conversion             $135
    equity:conversion            €-100
</code></pre>
<pre><code class="language-cli">$ hledger bal --infer-costs -B
               €-100  assets:dollars                                                                                                                                              
                €100  assets:euros                                                                                                                                                
--------------------                                                                                                                                                              
                   0                                                                                                                                                              
</code></pre>
<p>Here are some downsides of this kind of entry:</p>
<ul>
<li>
<p>The per-unit cost basis is not easy to read.</p>
</li>
<li>
<p>Instead of <code>-B</code> you must remember to type <code>-B --infer-costs</code>.</p>
</li>
<li>
<p><code>--infer-costs</code> works only where hledger can identify the two
equity:conversion postings and match them up with the two non-equity
postings. So writing the journal entry in a particular format
becomes more important. More on this below.</p>
</li>
</ul>
<h3 id="inferring-equity-conversion-postings"><a class="header" href="#inferring-equity-conversion-postings">Inferring equity conversion postings</a></h3>
<p>Can we go in the other direction ? Yes, if you have transactions written
with the @/@@ cost notation, hledger can infer the missing equity
postings, if you add the <code>--infer-equity</code> flag. Eg:</p>
<pre><code class="language-journal">2022-01-01
  assets:dollars  -$135
  assets:euros     €100 @ $1.35
</code></pre>
<pre><code class="language-cli">$ hledger print --infer-equity
2022-01-01
    assets:dollars                    $-135
    assets:euros               €100 @ $1.35
    equity:conversion:$-€:€           €-100
    equity:conversion:$-€:$         $135.00
</code></pre>
<p>The equity account names will be &quot;equity:conversion:A-B:A&quot; and
&quot;equity:conversion:A-B:B&quot; where A is the alphabetically first
commodity symbol. You can customise the &quot;equity:conversion&quot; part by
declaring an account with the <code>V</code>/<code>Conversion</code> <a href="#account-types">account
type</a>.</p>
<h3 id="combining-costs-and-equity-conversion-postings"><a class="header" href="#combining-costs-and-equity-conversion-postings">Combining costs and equity conversion postings</a></h3>
<p>Finally, you can use both the @/@@ cost notation and equity postings at
the same time. This in theory gives the best of all worlds - preserving
the accounting equation, revealing the per-unit cost basis, and
providing more flexibility in how you write the entry:</p>
<p><strong>Variant 5</strong></p>
<pre><code class="language-journal">2022-01-01 one hundred euros purchased at $1.35 each
    assets:dollars      $-135
    equity:conversion    $135
    equity:conversion   €-100
    assets:euros         €100 @ $1.35
</code></pre>
<p>All the other variants above can (usually) be rewritten to this final
form with:</p>
<pre><code class="language-cli">$ hledger print -x --infer-costs --infer-equity
</code></pre>
<p>Downsides:</p>
<ul>
<li>
<p>This was added in hledger-1.29 and is still somewhat experimental.</p>
</li>
<li>
<p>The precise format of the journal entry becomes more important. If
hledger can't detect and match up the cost and equity postings, it
will give a transaction balancing error.</p>
</li>
<li>
<p>The <a href="#add">add</a> command does not yet accept this kind of entry
(<a href="https://github.com/simonmichael/hledger/issues/2056">#2056</a>).</p>
</li>
<li>
<p>This is the most verbose form.</p>
</li>
</ul>
<h3 id="requirements-for-detecting-equity-conversion-postings"><a class="header" href="#requirements-for-detecting-equity-conversion-postings">Requirements for detecting equity conversion postings</a></h3>
<p><code>--infer-costs</code> has certain requirements (unlike <code>--infer-equity</code>, which
always works). It will infer costs only in transactions with:</p>
<ul>
<li>
<p>Two non-equity postings, in different commodities. Their order is
significant: the cost will be added to the first of them.</p>
</li>
<li>
<p>Two postings to equity conversion accounts, next to one another,
which balance the two non-equity postings. This balancing is checked
to the same precision (number of decimal places) used in the
conversion posting's amount. Equity conversion accounts are:</p>
<ul>
<li>any accounts declared with account type <code>V</code>/<code>Conversion</code>, or
their subaccounts</li>
<li>otherwise, accounts named <code>equity:conversion</code>, <code>equity:trade</code>,
or <code>equity:trading</code>, or their subaccounts.</li>
</ul>
</li>
</ul>
<p>And multiple such four-posting groups can coexist within a single
transaction. When <code>--infer-costs</code> fails, it does not infer a cost in
that transaction, and does not raise an error (ie, it infers costs where
it can).</p>
<p>Reading variant 5 journal entries, combining cost notation and equity
postings, has all the same requirements. When reading such an entry
fails, hledger raises an &quot;unbalanced transaction&quot; error.</p>
<h3 id="infer-cost-and-equity-by-default-"><a class="header" href="#infer-cost-and-equity-by-default-">Infer cost and equity by default ?</a></h3>
<p>Should <code>--infer-costs</code> and <code>--infer-equity</code> be enabled by default ? Try
using them always, eg with a shell alias:</p>
<pre><code>alias h=&quot;hledger --infer-equity --infer-costs&quot;
</code></pre>
<p>and let us know what problems you find.</p>
<p><a name="valuation"></a></p>
<h2 id="value-reporting"><a class="header" href="#value-reporting">Value reporting</a></h2>
<p>Instead of reporting amounts in their original commodity, hledger can
convert them to cost/sale amount (using the conversion rate recorded in
the transaction), and/or to market value (using some market price on a
certain date). This is controlled by the <code>--value=TYPE[,COMMODITY]</code>
option, which will be described below. We also provide the simpler <code>-V</code>
and <code>-X COMMODITY</code> options, and often one of these is all you need:</p>
<h3 id="-v-value"><a class="header" href="#-v-value">-V: Value</a></h3>
<p>The <code>-V/--market</code> flag converts amounts to market value in their default
<em>valuation commodity</em>, using the <a href="#p-directive">market prices</a> in effect
on the <em>valuation date(s)</em>, if any. More on these in a minute.</p>
<h3 id="-x-value-in-specified-commodity"><a class="header" href="#-x-value-in-specified-commodity">-X: Value in specified commodity</a></h3>
<p>The <code>-X/--exchange=COMM</code> option is like <code>-V</code>, except you tell it which
currency you want to convert to, and it tries to convert everything to
that.</p>
<h3 id="valuation-date"><a class="header" href="#valuation-date">Valuation date</a></h3>
<p>Market prices can change from day to day. hledger will use the prices on
a particular valuation date (or on more than one date). By default
hledger uses &quot;end&quot; dates for valuation. More specifically:</p>
<ul>
<li>For single period reports (including normal print and register
reports):
<ul>
<li>If an explicit <a href="#report-start-end-date">report end date</a> is
specified, that is used</li>
<li>Otherwise the latest transaction date or P directive date is
used (even if it's in the future)</li>
</ul>
</li>
<li>For <a href="#report-intervals">multiperiod reports</a>, each period is valued
on its last day.</li>
</ul>
<p>This can be customised with the --value option described below, which
can select either &quot;then&quot;, &quot;end&quot;, &quot;now&quot;, or &quot;custom&quot; dates.
(Note, this has a bug in hledger-ui &lt;=1.31: turning on valuation with
the <code>V</code> key always resets it to &quot;end&quot;.)</p>
<h3 id="finding-market-price"><a class="header" href="#finding-market-price">Finding market price</a></h3>
<p>To convert a commodity A to its market value in another commodity B,
hledger looks for a suitable market price (exchange rate) as follows, in
this order of preference:</p>
<ol>
<li>
<p>A <em>declared market price</em> or <em>inferred market price</em>: A's latest
market price in B on or before the valuation date as declared by a
<a href="#p-directive">P directive</a>, or (with the <code>--infer-market-prices</code>
flag) inferred from <a href="#costs">costs</a>.</p>
</li>
<li>
<p>A <em>reverse market price</em>: the inverse of a declared or inferred
market price from B to A.</p>
</li>
<li>
<p>A <em>forward chain of market prices</em>: a synthetic price formed by
combining the shortest chain of &quot;forward&quot; (only 1 above) market
prices, leading from A to B.</p>
</li>
<li>
<p><em>Any chain of market prices</em>: a chain of any market prices,
including both forward and reverse prices (1 and 2 above), leading
from A to B.</p>
</li>
</ol>
<p>There is a limit to the length of these price chains; if hledger reaches
that length without finding a complete chain or exhausting all
possibilities, it will give up (with a &quot;gave up&quot; message visible in
<code>--debug=2</code> output). That limit is currently 1000.</p>
<p>Amounts for which no suitable market price can be found, are not
converted.</p>
<h3 id="--infer-market-prices-market-prices-from-transactions"><a class="header" href="#--infer-market-prices-market-prices-from-transactions">--infer-market-prices: market prices from transactions</a></h3>
<p>Normally, market value in hledger is fully controlled by, and requires,
<a href="#p-directive">P directives</a> in your journal. Since adding and updating
those can be a chore, and since transactions usually take place at close
to market value, why not use the recorded <a href="#costs">costs</a> as additional
market prices (as Ledger does) ? Adding the <code>--infer-market-prices</code> flag
to <code>-V</code>, <code>-X</code> or <code>--value</code> enables this.</p>
<p>So for example, <code>hledger bs -V --infer-market-prices</code> will get market
prices both from P directives and from transactions. If both occur on
the same day, the P directive takes precedence.</p>
<p>There is a downside: value reports can sometimes be affected in
confusing/undesired ways by your journal entries. If this happens to
you, read all of this <a href="#value-reporting">Value reporting</a> section
carefully, and try adding <code>--debug</code> or <code>--debug=2</code> to troubleshoot.</p>
<p><code>--infer-market-prices</code> can infer market prices from:</p>
<ul>
<li>
<p>multicommodity transactions with explicit prices (<code>@</code>/<code>@@</code>)</p>
</li>
<li>
<p>multicommodity transactions with implicit prices (no <code>@</code>, two
commodities, unbalanced). (With these, the order of postings
matters. <code>hledger print -x</code> can be useful for troubleshooting.)</p>
</li>
<li>
<p><a href="#conversion-with-equity-postings">multicommodity transactions with equity
postings</a>, if cost is inferred
with <a href="#infer-cost-requirements"><code>--infer-costs</code></a>.</p>
</li>
</ul>
<p>There is a limitation (bug) currently: when a valuation commodity is not
specified, prices inferred with <code>--infer-market-prices</code> do not help
select a default valuation commodity, as <code>P</code> prices would. So conversion
might not happen because no valuation commodity was detected
(<code>--debug=2</code> will show this). To be safe, specify the valuation
commmodity, eg:</p>
<ul>
<li><code>-X EUR --infer-market-prices</code>, not <code>-V --infer-market-prices</code></li>
<li><code>--value=then,EUR --infer-market-prices</code>, not
<code>--value=then --infer-market-prices</code></li>
</ul>
<p>Signed costs and market prices can be confusing. For reference, here is
the current behaviour, since hledger 1.25. (If you think it should work
differently, see
<a href="https://github.com/simonmichael/hledger/issues/1870">#1870</a>.)</p>
<pre><code class="language-journal">2022-01-01 Positive Unit prices
    a        A 1
    b        B -1 @ A 1

2022-01-01 Positive Total prices
    a        A 1
    b        B -1 @@ A 1


2022-01-02 Negative unit prices
    a        A 1
    b        B 1 @ A -1

2022-01-02 Negative total prices
    a        A 1
    b        B 1 @@ A -1


2022-01-03 Double Negative unit prices
    a        A -1
    b        B -1 @ A -1

2022-01-03 Double Negative total prices
    a        A -1
    b        B -1 @@ A -1
</code></pre>
<p>All of the transactions above are considered balanced (and on each day,
the two transactions are considered equivalent). Here are the market
prices inferred for B:</p>
<pre><code class="language-cli">$ hledger -f- --infer-market-prices prices
P 2022-01-01 B A 1
P 2022-01-01 B A 1.0
P 2022-01-02 B A -1
P 2022-01-02 B A -1.0
P 2022-01-03 B A -1
P 2022-01-03 B A -1.0
</code></pre>
<h3 id="valuation-commodity"><a class="header" href="#valuation-commodity">Valuation commodity</a></h3>
<p><strong>When you specify a valuation commodity (<code>-X COMM</code> or
<code>--value TYPE,COMM</code>):</strong><br />
hledger will convert all amounts to COMM, wherever it can find a
suitable market price (including by reversing or chaining prices).</p>
<p><strong>When you leave the valuation commodity unspecified (<code>-V</code> or
<code>--value TYPE</code>):</strong><br />
For each commodity A, hledger picks a default valuation commodity as
follows, in this order of preference:</p>
<ol>
<li>
<p>The price commodity from the latest P-declared market price for A on
or before valuation date.</p>
</li>
<li>
<p>The price commodity from the latest P-declared market price for A on
any date. (Allows conversion to proceed when there are inferred
prices before the valuation date.)</p>
</li>
<li>
<p>If there are no P directives at all (any commodity or date) and the
<code>--infer-market-prices</code> flag is used: the price commodity from the
latest transaction-inferred price for A on or before valuation date.</p>
</li>
</ol>
<p>This means:</p>
<ul>
<li>
<p>If you have <a href="#p-directive">P directives</a>, they determine which
commodities <code>-V</code> will convert, and to what.</p>
</li>
<li>
<p>If you have no P directives, and use the <code>--infer-market-prices</code>
flag, <a href="#costs">costs</a> determine it.</p>
</li>
</ul>
<p>Amounts for which no valuation commodity can be found are not converted.</p>
<h3 id="simple-valuation-examples"><a class="header" href="#simple-valuation-examples">Simple valuation examples</a></h3>
<p>Here are some quick examples of <code>-V</code>:</p>
<pre><code class="language-journal">; one euro is worth this many dollars from nov 1
P 2016/11/01 € $1.10

; purchase some euros on nov 3
2016/11/3
    assets:euros        €100
    assets:checking

; the euro is worth fewer dollars by dec 21
P 2016/12/21 € $1.03
</code></pre>
<p>How many euros do I have ?</p>
<pre><code class="language-cli">$ hledger -f t.j bal -N euros
                €100  assets:euros
</code></pre>
<p>What are they worth at end of nov 3 ?</p>
<pre><code class="language-cli">$ hledger -f t.j bal -N euros -V -e 2016/11/4
             $110.00  assets:euros
</code></pre>
<p>What are they worth after 2016/12/21 ? (no report end date specified,
defaults to today)</p>
<pre><code class="language-cli">$ hledger -f t.j bal -N euros -V
             $103.00  assets:euros
</code></pre>
<h3 id="--value-flexible-valuation"><a class="header" href="#--value-flexible-valuation">--value: Flexible valuation</a></h3>
<p><code>-V</code> and <code>-X</code> are special cases of the more general <code>--value</code> option:</p>
<pre><code> --value=TYPE[,COMM]  TYPE is then, end, now or YYYY-MM-DD.
                      COMM is an optional commodity symbol.
                      Shows amounts converted to:
                      - default valuation commodity (or COMM) using market prices at posting dates
                      - default valuation commodity (or COMM) using market prices at period end(s)
                      - default valuation commodity (or COMM) using current market prices
                      - default valuation commodity (or COMM) using market prices at some date
</code></pre>
<p>The TYPE part selects cost or value and valuation date:</p>
<p><code>--value=then</code>
:   Convert amounts to their value in the <a href="#valuation-commodity">default valuation
commodity</a>, using market prices on each
posting's date.</p>
<p><code>--value=end</code>
:   Convert amounts to their value in the default valuation commodity,
using market prices on the last day of the report period (or if
unspecified, the journal's end date); or in multiperiod reports,
market prices on the last day of each subperiod.</p>
<p><code>--value=now</code>
:   Convert amounts to their value in the default valuation commodity
using current market prices (as of when report is generated).</p>
<p><code>--value=YYYY-MM-DD</code>
:   Convert amounts to their value in the default valuation commodity
using market prices on this date.</p>
<p>To select a different valuation commodity, add the optional <code>,COMM</code>
part: a comma, then the target commodity's symbol. Eg:
<strong><code>--value=now,EUR</code></strong>. hledger will do its best to convert amounts to
this commodity, deducing <a href="#p-directive">market prices</a> as described
above.</p>
<h3 id="more-valuation-examples"><a class="header" href="#more-valuation-examples">More valuation examples</a></h3>
<p>Here are some examples showing the effect of <code>--value</code>, as seen with
<code>print</code>:</p>
<pre><code class="language-journal">P 2000-01-01 A  1 B
P 2000-02-01 A  2 B
P 2000-03-01 A  3 B
P 2000-04-01 A  4 B

2000-01-01
  (a)      1 A @ 5 B

2000-02-01
  (a)      1 A @ 6 B

2000-03-01
  (a)      1 A @ 7 B
</code></pre>
<p>Show the cost of each posting:</p>
<pre><code class="language-cli">$ hledger -f- print --cost
2000-01-01
    (a)             5 B

2000-02-01
    (a)             6 B

2000-03-01
    (a)             7 B
</code></pre>
<p>Show the value as of the last day of the report period (2000-02-29):</p>
<pre><code class="language-cli">$ hledger -f- print --value=end date:2000/01-2000/03
2000-01-01
    (a)             2 B

2000-02-01
    (a)             2 B
</code></pre>
<p>With no report period specified, that shows the value as of the last day
of the journal (2000-03-01):</p>
<pre><code class="language-cli">$ hledger -f- print --value=end
2000-01-01
    (a)             3 B

2000-02-01
    (a)             3 B

2000-03-01
    (a)             3 B
</code></pre>
<p>Show the current value (the 2000-04-01 price is still in effect today):</p>
<pre><code class="language-cli">$ hledger -f- print --value=now
2000-01-01
    (a)             4 B

2000-02-01
    (a)             4 B

2000-03-01
    (a)             4 B
</code></pre>
<p>Show the value on 2000/01/15:</p>
<pre><code class="language-cli">$ hledger -f- print --value=2000-01-15
2000-01-01
    (a)             1 B

2000-02-01
    (a)             1 B

2000-03-01
    (a)             1 B
</code></pre>
<h3 id="interaction-of-valuation-and-queries"><a class="header" href="#interaction-of-valuation-and-queries">Interaction of valuation and queries</a></h3>
<p>When matching postings based on queries in the presence of valuation,
the following happens.</p>
<ol>
<li>The query is separated into two parts:
<ol>
<li>the currency (<code>cur:</code>) or amount (<code>amt:</code>).</li>
<li>all other parts.</li>
</ol>
</li>
<li>The postings are matched to the currency and amount queries based on
pre-valued amounts.</li>
<li>Valuation is applied to the postings.</li>
<li>The postings are matched to the other parts of the query based on
post-valued amounts.</li>
</ol>
<p>See: <a href="https://github.com/simonmichael/hledger/issues/1625">1625</a></p>
<h3 id="effect-of-valuation-on-reports"><a class="header" href="#effect-of-valuation-on-reports">Effect of valuation on reports</a></h3>
<p>Here is a reference for how valuation is supposed to affect each part of
hledger's reports (and a glossary). (It's wide, you'll have to scroll
sideways.) It may be useful when troubleshooting. If you find problems,
please report them, ideally with a reproducible example. Related:
<a href="https://github.com/simonmichael/hledger/issues/329">#329</a>,
<a href="https://github.com/simonmichael/hledger/issues/1083">#1083</a>.</p>
<div class="table-wrapper"><table><thead><tr><th>Report type</th><th><code>-B</code>, <code>--cost</code></th><th><code>-V</code>, <code>-X</code></th><th><code>--value=then</code></th><th><code>--value=end</code></th><th><code>--value=DATE</code>, <code>--value=now</code></th></tr></thead><tbody>
<tr><td><strong>print</strong></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>posting amounts</td><td>cost</td><td>value at report end or today</td><td>value at posting date</td><td>value at report or journal end</td><td>value at DATE/today</td></tr>
<tr><td>balance assertions/assignments</td><td>unchanged</td><td>unchanged</td><td>unchanged</td><td>unchanged</td><td>unchanged</td></tr>
<tr><td><br></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td><strong>register</strong></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>starting balance (-H)</td><td>cost</td><td>value at report or journal end</td><td>valued at day each historical posting was made</td><td>value at report or journal end</td><td>value at DATE/today</td></tr>
<tr><td>starting balance (-H) with report interval</td><td>cost</td><td>value at day before report or journal start</td><td>valued at day each historical posting was made</td><td>value at day before report or journal start</td><td>value at DATE/today</td></tr>
<tr><td>posting amounts</td><td>cost</td><td>value at report or journal end</td><td>value at posting date</td><td>value at report or journal end</td><td>value at DATE/today</td></tr>
<tr><td>summary posting amounts with report interval</td><td>summarised cost</td><td>value at period ends</td><td>sum of postings in interval, valued at interval start</td><td>value at period ends</td><td>value at DATE/today</td></tr>
<tr><td>running total/average</td><td>sum/average of displayed values</td><td>sum/average of displayed values</td><td>sum/average of displayed values</td><td>sum/average of displayed values</td><td>sum/average of displayed values</td></tr>
<tr><td><br></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td><strong>balance (bs, bse, cf, is)</strong></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>balance changes</td><td>sums of costs</td><td>value at report end or today of sums of postings</td><td>value at posting date</td><td>value at report or journal end of sums of postings</td><td>value at DATE/today of sums of postings</td></tr>
<tr><td>budget amounts (--budget)</td><td>like balance changes</td><td>like balance changes</td><td>like balance changes</td><td>like balances</td><td>like balance changes</td></tr>
<tr><td>grand total</td><td>sum of displayed values</td><td>sum of displayed values</td><td>sum of displayed valued</td><td>sum of displayed values</td><td>sum of displayed values</td></tr>
<tr><td><br></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td><strong>balance (bs, bse, cf, is) with report interval</strong></td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>starting balances (-H)</td><td>sums of costs of postings before report start</td><td>value at report start of sums of all postings before report start</td><td>sums of values of postings before report start at respective posting dates</td><td>value at report start of sums of all postings before report start</td><td>sums of postings before report start</td></tr>
<tr><td>balance changes (bal, is, bs --change, cf --change)</td><td>sums of costs of postings in period</td><td>same as --value=end</td><td>sums of values of postings in period at respective posting dates</td><td>balance change in each period, valued at period ends</td><td>value at DATE/today of sums of postings</td></tr>
<tr><td>end balances (bal -H, is --H, bs, cf)</td><td>sums of costs of postings from before report start to period end</td><td>same as --value=end</td><td>sums of values of postings from before period start to period end at respective posting dates</td><td>period end balances, valued at period ends</td><td>value at DATE/today of sums of postings</td></tr>
<tr><td>budget amounts (--budget)</td><td>like balance changes/end balances</td><td>like balance changes/end balances</td><td>like balance changes/end balances</td><td>like balances</td><td>like balance changes/end balances</td></tr>
<tr><td>row totals, row averages (-T, -A)</td><td>sums, averages of displayed values</td><td>sums, averages of displayed values</td><td>sums, averages of displayed values</td><td>sums, averages of displayed values</td><td>sums, averages of displayed values</td></tr>
<tr><td>column totals</td><td>sums of displayed values</td><td>sums of displayed values</td><td>sums of displayed values</td><td>sums of displayed values</td><td>sums of displayed values</td></tr>
<tr><td>grand total, grand average</td><td>sum, average of column totals</td><td>sum, average of column totals</td><td>sum, average of column totals</td><td>sum, average of column totals</td><td>sum, average of column totals</td></tr>
<tr><td><br></td><td></td><td></td><td></td><td></td><td></td></tr>
</tbody></table>
</div>
<p><code>--cumulative</code> is omitted to save space, it works like <code>-H</code> but with a
zero starting balance.</p>
<p><strong>Glossary:</strong></p>
<p><em>cost</em>
:   calculated using price(s) recorded in the transaction(s).</p>
<p><em>value</em>
:   market value using available market price declarations, or the
unchanged amount if no conversion rate can be found.</p>
<p><em>report start</em>
:   the first day of the report period specified with -b or -p or date:,
otherwise today.</p>
<p><em>report or journal start</em>
:   the first day of the report period specified with -b or -p or date:,
otherwise the earliest transaction date in the journal, otherwise
today.</p>
<p><em>report end</em>
:   the last day of the report period specified with -e or -p or date:,
otherwise today.</p>
<p><em>report or journal end</em>
:   the last day of the report period specified with -e or -p or date:,
otherwise the latest transaction date in the journal, otherwise
today.</p>
<p><em>report interval</em>
:   a flag (-D/-W/-M/-Q/-Y) or period expression that activates the
report's multi-period mode (whether showing one or many
subperiods).</p>
<h2 id="part-4-commands"><a class="header" href="#part-4-commands">PART 4: COMMANDS</a></h2>
<h3 id="commands-overview"><a class="header" href="#commands-overview">Commands overview</a></h3>
<p>Here are the built-in <a href="#commands">commands</a>:</p>
<h4 id="data-entry"><a class="header" href="#data-entry">DATA ENTRY</a></h4>
<p>These data entry commands are the only ones which can modify your
journal file.</p>
<ul>
<li><a href="#add">add</a> - add transactions using terminal prompts</li>
<li><a href="#import">import</a> - add new transactions from other files, eg CSV
files</li>
</ul>
<h4 id="data-creation"><a class="header" href="#data-creation">DATA CREATION</a></h4>
<ul>
<li><a href="#close">close</a> - generate balance-zeroing/restoring transactions</li>
<li><a href="#rewrite">rewrite</a> - generate auto postings, like print --auto</li>
</ul>
<h4 id="data-management"><a class="header" href="#data-management">DATA MANAGEMENT</a></h4>
<ul>
<li><a href="#check">check</a> - check for various kinds of error in the data</li>
<li><a href="#diff">diff</a> - compare account transactions in two journal files</li>
</ul>
<h4 id="reports-financial"><a class="header" href="#reports-financial">REPORTS, FINANCIAL</a></h4>
<ul>
<li><a href="#aregister">aregister</a> (areg) - show transactions in a particular
account</li>
<li><a href="#balancesheet">balancesheet</a> (bs) - show assets, liabilities and
net worth</li>
<li><a href="#balancesheetequity">balancesheetequity</a> (bse) - show assets,
liabilities and equity</li>
<li><a href="#cashflow">cashflow</a> (cf) - show changes in liquid assets</li>
<li><a href="#incomestatement">incomestatement</a> (is) - show revenues and
expenses</li>
</ul>
<h4 id="reports-versatile"><a class="header" href="#reports-versatile">REPORTS, VERSATILE</a></h4>
<ul>
<li><a href="#balance">balance</a> (bal) - show balance changes, end balances,
budgets, gains..</li>
<li><a href="#print">print</a> - show transactions or export journal data</li>
<li><a href="#register">register</a> (reg) - show postings in one or more accounts
&amp; running total</li>
<li><a href="#roi">roi</a> - show return on investments</li>
</ul>
<h4 id="reports-basic"><a class="header" href="#reports-basic">REPORTS, BASIC</a></h4>
<ul>
<li><a href="#accounts">accounts</a> - show account names</li>
<li><a href="#activity">activity</a> - show bar charts of posting counts per period</li>
<li><a href="#codes">codes</a> - show transaction codes</li>
<li><a href="#commodity-directive">commodities</a> - show commodity/currency
symbols</li>
<li><a href="#descriptions">descriptions</a> - show transaction descriptions</li>
<li><a href="#files">files</a> - show input file paths</li>
<li><a href="#notes">notes</a> - show note parts of transaction descriptions</li>
<li><a href="#payees">payees</a> - show payee parts of transaction descriptions</li>
<li><a href="#prices">prices</a> - show market prices</li>
<li><a href="#stats">stats</a> - show journal statistics</li>
<li><a href="#tags-1">tags</a> - show tag names</li>
<li><a href="#test">test</a> - run self tests</li>
</ul>
<h4 id="help"><a class="header" href="#help">HELP</a></h4>
<ul>
<li><a href="#help">help</a> - show the hledger manual with info/man/pager</li>
<li><a href="#demo">demo</a> - show small hledger demos in the terminal</li>
</ul>
<p><a name="addons"></a></p>
<h4 id="add-ons"><a class="header" href="#add-ons">ADD-ONS</a></h4>
<p>And here are some typical <a href="#add-on-commands">add-on commands</a>. Some of
these are installed by the <a href="https://hledger.org/install.html#build-methods">hledger-install
script</a>. If installed,
they will appear in hledger's commands list:</p>
<ul>
<li><a href="hledger-ui.html">ui</a> - run hledger's terminal UI</li>
<li><a href="hledger-web.html">web</a> - run hledger's web UI</li>
<li><a href="https://hackage.haskell.org/package/hledger-iadd">iadd</a> - add
transactions using a TUI (currently hard to build)</li>
<li><a href="https://hackage.haskell.org/package/hledger-interest">interest</a> -
generate interest transactions</li>
<li><a href="https://hackage.haskell.org/package/hledger-stockquotes">stockquotes</a> -
download market prices from AlphaVantage</li>
<li><a href="https://hledger.org/scripts.html">Scripts and add-ons</a> -
check-fancyassertions, edit, fifo, git, move, pijul, plot, and
more..</li>
</ul>
<p>Next, each command is described in detail, in alphabetical order.</p>
<h3 id="accounts"><a class="header" href="#accounts">accounts</a></h3>
<p>Show account names.</p>
<p>This command lists account names. By default it shows all known
accounts, either used in transactions or declared with account
directives.</p>
<p>With query arguments, only matched account names and account names
referenced by matched postings are shown.</p>
<p>Or it can show just the used accounts (<code>--used</code>/<code>-u</code>), the declared
accounts (<code>--declared</code>/<code>-d</code>), the accounts declared but not used
(<code>--unused</code>), the accounts used but not declared (<code>--undeclared</code>), or
the first account matched by an account name pattern, if any (<code>--find</code>).</p>
<p>It shows a flat list by default. With <code>--tree</code>, it uses indentation to
show the account hierarchy. In flat mode you can add <code>--drop N</code> to omit
the first few account name components. Account names can be
depth-clipped with <code>depth:N</code> or <code>--depth N</code> or <code>-N</code>.</p>
<p>With <code>--types</code>, it also shows each account's type, if it's known. (See
Declaring accounts &gt; Account types.)</p>
<p>With <code>--positions</code>, it also shows the file and line number of each
account's declaration, if any, and the account's overall declaration
order; these may be useful when troubleshooting account display order.</p>
<p>With <code>--directives</code>, it adds the <code>account</code> keyword, showing valid
account directives which can be pasted into a journal file. This is
useful together with <code>--undeclared</code> when updating your account
declarations to satisfy <code>hledger check accounts</code>.</p>
<p>The <code>--find</code> flag can be used to look up a single account name, in the
same way that the <code>aregister</code> command does. It returns the
alphanumerically-first matched account name, or if none can be found, it
fails with a non-zero exit code.</p>
<p>Examples:</p>
<pre><code class="language-cli">$ hledger accounts
assets:bank:checking
assets:bank:saving
assets:cash
expenses:food
expenses:supplies
income:gifts
income:salary
liabilities:debts
</code></pre>
<pre><code class="language-cli">$ hledger accounts --undeclared --directives &gt;&gt; $LEDGER_FILE
$ hledger check accounts
</code></pre>
<h3 id="activity"><a class="header" href="#activity">activity</a></h3>
<p>Show an ascii barchart of posting counts per interval.</p>
<p>The activity command displays an ascii histogram showing transaction
counts by day, week, month or other reporting interval (by day is the
default). With query arguments, it counts only matched transactions.</p>
<p>Examples:</p>
<pre><code class="language-cli">$ hledger activity --quarterly
2008-01-01 **
2008-04-01 *******
2008-07-01 
2008-10-01 **
</code></pre>
<h3 id="add"><a class="header" href="#add">add</a></h3>
<p>Prompt for transactions and add them to the journal. Any arguments will
be used as default inputs for the first N prompts.</p>
<p>Many hledger users edit their journals directly with a text editor, or
generate them from CSV. For more interactive data entry, there is the
<code>add</code> command, which prompts interactively on the console for new
transactions, and appends them to the main journal file (which should be
in journal format). Existing transactions are not changed. This is one
of the few hledger commands that writes to the journal file (see also
<code>import</code>).</p>
<p>To use it, just run <code>hledger add</code> and follow the prompts. You can add as
many transactions as you like; when you are finished, enter <code>.</code> or press
control-d or control-c to exit.</p>
<p>Features:</p>
<ul>
<li>add tries to provide useful defaults, using the most similar (by
description) recent transaction (filtered by the query, if any) as a
template.</li>
<li>You can also set the initial defaults with command line arguments.</li>
<li><a href="http://tiswww.case.edu/php/chet/readline/rluserman.html#SEC3">Readline-style edit
keys</a>
can be used during data entry.</li>
<li>The tab key will auto-complete whenever possible - accounts,
payees/descriptions, dates (<code>yesterday</code>, <code>today</code>, <code>tomorrow</code>). If
the input area is empty, it will insert the default value.</li>
<li>If the journal defines a <a href="#default-commodity">default commodity</a>, it
will be added to any bare numbers entered.</li>
<li>A parenthesised transaction <a href="#entries">code</a> may be entered
following a date.</li>
<li><a href="#transaction-comments">Comments</a> and tags may be entered following
a description or amount.</li>
<li>If you make a mistake, enter <code>&lt;</code> at any prompt to go one step
backward.</li>
<li>Input prompts are displayed in a different colour when the terminal
supports it.</li>
</ul>
<p>Example (see https://hledger.org/add.html for a detailed tutorial):</p>
<pre><code class="language-shell">$ hledger add
Adding transactions to journal file /src/hledger/examples/sample.journal
Any command line arguments will be used as defaults.
Use tab key to complete, readline keys to edit, enter to accept defaults.
An optional (CODE) may follow transaction dates.
An optional ; COMMENT may follow descriptions or amounts.
If you make a mistake, enter &lt; at any prompt to go one step backward.
To end a transaction, enter . when prompted.
To quit, enter . at a date prompt or press control-d or control-c.
Date [2015/05/22]: 
Description: supermarket
Account 1: expenses:food
Amount  1: $10
Account 2: assets:checking
Amount  2 [$-10.0]: 
Account 3 (or . or enter to finish this transaction): .
2015/05/22 supermarket
    expenses:food             $10
    assets:checking        $-10.0

Save this transaction to the journal ? [y]: 
Saved.
Starting the next transaction (. or ctrl-D/ctrl-C to quit)
Date [2015/05/22]: &lt;CTRL-D&gt; $
</code></pre>
<p>On Microsoft Windows, the add command makes sure that no part of the
file path ends with a period, as that would cause problems
(<a href="https://github.com/simonmichael/hledger/issues/1056">#1056</a>).</p>
<h3 id="aregister"><a class="header" href="#aregister">aregister</a></h3>
<p>(areg)</p>
<p>Show the transactions and running historical balance of a single
account, with each transaction displayed as one line.</p>
<p><code>aregister</code> shows the overall transactions affecting a particular
account (and any subaccounts). Each report line represents one
transaction in this account. Transactions before the report start date
are always included in the running balance (<code>--historical</code> mode is
always on).</p>
<p>This is a more &quot;real world&quot;, bank-like view than the
<a href="#register"><code>register</code></a> command (which shows individual postings,
possibly from multiple accounts, not necessarily in historical mode). As
a quick rule of thumb: - use <code>aregister</code> for reviewing and reconciling
real-world asset/liability accounts - use <code>register</code> for reviewing
detailed revenues/expenses.</p>
<p><code>aregister</code> requires one argument: the account to report on. You can
write either the full account name, or a case-insensitive regular
expression which will select the alphabetically first matched account.</p>
<p>When there are multiple matches, the alphabetically-first choice can be
surprising; eg if you have <code>assets:per:checking 1</code> and
<code>assets:biz:checking 2</code> accounts, <code>hledger areg checking</code> would select
<code>assets:biz:checking 2</code>. It's just a convenience to save typing, so if
in doubt, write the full account name, or a distinctive substring that
matches uniquely.</p>
<p>Transactions involving subaccounts of this account will also be shown.
<code>aregister</code> ignores depth limits, so its final total will always match a
balance report with similar arguments.</p>
<p>Any additional arguments form a <a href="#queries">query</a> which will filter the
transactions shown. Note some queries will disturb the running balance,
causing it to be different from the account's real-world running
balance.</p>
<p>An example: this shows the transactions and historical running balance
during july, in the first account whose name contains &quot;checking&quot;:</p>
<pre><code class="language-cli">$ hledger areg checking date:jul
</code></pre>
<p>Each <code>aregister</code> line item shows:</p>
<ul>
<li>the transaction's date (or the relevant posting's date if
different, see below)</li>
<li>the names of all the other account(s) involved in this transaction
(probably abbreviated)</li>
<li>the total change to this account's balance from this transaction</li>
<li>the account's historical running balance after this transaction.</li>
</ul>
<p>Transactions making a net change of zero are not shown by default; add
the <code>-E/--empty</code> flag to show them.</p>
<p>For performance reasons, column widths are chosen based on the first
1000 lines; this means unusually wide values in later lines can cause
visual discontinuities as column widths are adjusted. If you want to
ensure perfect alignment, at the cost of more time and memory, use the
<code>--align-all</code> flag.</p>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options. The output formats
supported are <code>txt</code>, <code>csv</code>, <code>tsv</code>, and <code>json</code>.</p>
<h4 id="aregister-and-posting-dates"><a class="header" href="#aregister-and-posting-dates">aregister and posting dates</a></h4>
<p>aregister always shows one line (and date and amount) per transaction.
But sometimes transactions have postings with different dates. Also, not
all of a transaction's postings may be within the report period. To
resolve this, aregister shows the earliest of the transaction's date
and posting dates that is in-period, and the sum of the in-period
postings. In other words it will show a combined line item with just the
earliest date, and the running balance will (temporarily, until the
transaction's last posting) be inaccurate. Use <code>register -H</code> if you
need to see the individual postings.</p>
<p>There is also a <code>--txn-dates</code> flag, which filters strictly by
transaction date, ignoring posting dates. This too can cause an
inaccurate running balance.</p>
<h3 id="balance"><a class="header" href="#balance">balance</a></h3>
<p>(bal)</p>
<p>Show accounts and their balances.</p>
<p><code>balance</code> is one of hledger's oldest and most versatile commands, for
listing account balances, balance changes, values, value changes and
more, during one time period or many. Generally it shows a table, with
rows representing accounts, and columns representing periods.</p>
<p>Note there are some higher-level variants of the <code>balance</code> command with
convenient defaults, which can be simpler to use:
<a href="#balancesheet"><code>balancesheet</code></a>,
<a href="#balancesheetequity"><code>balancesheetequity</code></a>, <a href="#cashflow"><code>cashflow</code></a> and
<a href="#incomestatement"><code>incomestatement</code></a>. When you need more control, then
use <code>balance</code>.</p>
<h4 id="balance-features"><a class="header" href="#balance-features">balance features</a></h4>
<p>Here's a quick overview of the <code>balance</code> command's features, followed
by more detailed descriptions and examples. Many of these work with the
higher-level commands as well.</p>
<p><code>balance</code> can show..</p>
<ul>
<li>accounts as a <a href="#list-or-tree-mode">list (<code>-l</code>) or a tree (<code>-t</code>)</a></li>
<li>optionally depth-limited (<a href="#depth-limiting"><code>-[1-9]</code></a>)</li>
<li>sorted <a href="#simple-balance-report">by declaration order and name</a>, or
<a href="#sorting-by-amount">by amount</a></li>
</ul>
<p>..and their..</p>
<ul>
<li>balance changes (the default)</li>
<li>or actual and planned balance changes (<a href="#budget-report"><code>--budget</code></a>)</li>
<li>or value of balance changes (<a href="#valuation-type"><code>-V</code></a>)</li>
<li>or change of balance values
(<a href="#balance-report-types"><code>--valuechange</code></a>)</li>
<li>or unrealised capital gain/loss (<a href="#balance-report-types"><code>--gain</code></a>)</li>
<li>or postings count (<a href="#balance-report-types"><code>--count</code></a>)</li>
</ul>
<p>..in..</p>
<ul>
<li>one time period (the whole journal period by default)</li>
<li>or multiple periods (<a href="#report-intervals"><code>-D</code>, <code>-W</code>, <code>-M</code>, <code>-Q</code>, <code>-Y</code>,
<code>-p INTERVAL</code></a>)</li>
</ul>
<p>..either..</p>
<ul>
<li>per period (the default)</li>
<li>or accumulated since report start date
(<a href="#accumulation-type"><code>--cumulative</code></a>)</li>
<li>or accumulated since account creation
(<a href="#accumulation-type"><code>--historical/-H</code></a>)</li>
</ul>
<p>..possibly converted to..</p>
<ul>
<li>cost (<a href="#valuation-type"><code>--value=cost[,COMM]</code>/<code>--cost</code>/<code>-B</code></a>)</li>
<li>or market value, as of transaction dates
(<a href="#valuation-type"><code>--value=then[,COMM]</code></a>)</li>
<li>or at period ends (<a href="#valuation-type"><code>--value=end[,COMM]</code></a>)</li>
<li>or now (<a href="#valuation-type"><code>--value=now</code></a>)</li>
<li>or at some other date (<a href="#valuation-type"><code>--value=YYYY-MM-DD</code></a>)</li>
</ul>
<p>..with..</p>
<ul>
<li>totals (<a href="#multi-period-balance-report"><code>-T</code></a>), averages
(<a href="#multi-period-balance-report"><code>-A</code></a>), percentages
(<a href="#percentages"><code>-%</code></a>), inverted sign
(<a href="#sorting-by-amount"><code>--invert</code></a>)</li>
<li>rows and columns swapped
(<a href="#multi-period-balance-report"><code>--transpose</code></a>)</li>
<li>another field used as account name
(<a href="#multi-period-balance-report"><code>--pivot</code></a>)</li>
<li>custom-formatted line items (single-period reports only)
(<a href="#balance-report-line-format"><code>--format</code></a>)</li>
<li>commodities displayed on the same line or multiple lines
(<a href="#balance-report-layout"><code>--layout</code></a>)</li>
</ul>
<p>This command supports the <a href="#output-destination">output destination</a> and
<a href="#output-format">output format</a> options, with output formats <code>txt</code>,
<code>csv</code>, <code>tsv</code>, <code>json</code>, and (multi-period reports only:) <code>html</code>. In <code>txt</code>
output in a colour-supporting terminal, negative amounts are shown in
red.</p>
<p>The <code>--related</code>/<code>-r</code> flag shows the balance of the <em>other</em> postings in
the transactions of the postings which would normally be shown.</p>
<h4 id="simple-balance-report"><a class="header" href="#simple-balance-report">Simple balance report</a></h4>
<p>With no arguments, <code>balance</code> shows a list of all accounts and their
change of balance - ie, the sum of posting amounts, both inflows and
outflows - during the entire period of the journal. (&quot;Simple&quot; here
means just one column of numbers, covering a single period. You can also
have multi-period reports, described later.)</p>
<p>For real-world accounts, these numbers will normally be their end
balance at the end of the journal period; more on this below.</p>
<p>Accounts are sorted by <a href="#account">declaration order</a> if any, and then
alphabetically by account name. For instance (using
<a href="https://github.com/simonmichael/hledger/blob/master/examples/sample.journal">examples/sample.journal</a>):</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal bal
                  $1  assets:bank:saving
                 $-2  assets:cash
                  $1  expenses:food
                  $1  expenses:supplies
                 $-1  income:gifts
                 $-1  income:salary
                  $1  liabilities:debts
--------------------
                   0  
</code></pre>
<p>Accounts with a zero balance (and no non-zero subaccounts, in tree
mode - see below) are hidden by default. Use <code>-E/--empty</code> to show them
(revealing <code>assets:bank:checking</code> here):</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal bal  -E
                   0  assets:bank:checking
                  $1  assets:bank:saving
                 $-2  assets:cash
                  $1  expenses:food
                  $1  expenses:supplies
                 $-1  income:gifts
                 $-1  income:salary
                  $1  liabilities:debts
--------------------
                   0  
</code></pre>
<p>The total of the amounts displayed is shown as the last line, unless
<code>-N</code>/<code>--no-total</code> is used.</p>
<h4 id="balance-report-line-format"><a class="header" href="#balance-report-line-format">Balance report line format</a></h4>
<p>For single-period balance reports displayed in the terminal (only), you
can use <code>--format FMT</code> to customise the format and content of each line.
Eg:</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal balance --format &quot;%20(account) %12(total)&quot;
              assets          $-1
         bank:saving           $1
                cash          $-2
            expenses           $2
                food           $1
            supplies           $1
              income          $-2
               gifts          $-1
              salary          $-1
   liabilities:debts           $1
---------------------------------
                                0
</code></pre>
<p>The FMT format string specifies the formatting applied to each
account/balance pair. It may contain any suitable text, with data fields
interpolated like so:</p>
<p><code>%[MIN][.MAX](FIELDNAME)</code></p>
<ul>
<li>
<p>MIN pads with spaces to at least this width (optional)</p>
</li>
<li>
<p>MAX truncates at this width (optional)</p>
</li>
<li>
<p>FIELDNAME must be enclosed in parentheses, and can be one of:</p>
<ul>
<li><code>depth_spacer</code> - a number of spaces equal to the account's
depth, or if MIN is specified, MIN * depth spaces.</li>
<li><code>account</code> - the account's name</li>
<li><code>total</code> - the account's balance/posted total, right justified</li>
</ul>
</li>
</ul>
<p>Also, FMT can begin with an optional prefix to control how
multi-commodity amounts are rendered:</p>
<ul>
<li><code>%_</code> - render on multiple lines, bottom-aligned (the default)</li>
<li><code>%^</code> - render on multiple lines, top-aligned</li>
<li><code>%,</code> - render on one line, comma-separated</li>
</ul>
<p>There are some quirks. Eg in one-line mode, <code>%(depth_spacer)</code> has no
effect, instead <code>%(account)</code> has indentation built in. Experimentation
may be needed to get pleasing results.</p>
<p>Some example formats:</p>
<ul>
<li><code>%(total)</code> - the account's total</li>
<li><code>%-20.20(account)</code> - the account's name, left justified, padded to
20 characters and clipped at 20 characters</li>
<li><code>%,%-50(account)  %25(total)</code> - account name padded to 50
characters, total padded to 20 characters, with multiple commodities
rendered on one line</li>
<li><code>%20(total)  %2(depth_spacer)%-(account)</code> - the default format for
the single-column balance report</li>
</ul>
<h4 id="filtered-balance-report"><a class="header" href="#filtered-balance-report">Filtered balance report</a></h4>
<p>You can show fewer accounts, a different time period, totals from
cleared transactions only, etc. by using <a href="#queries">query</a> arguments or
<a href="#report-start--end-date">options</a> to limit the postings being matched.
Eg:</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal bal --cleared assets date:200806
                 $-2  assets:cash
--------------------
                 $-2  
</code></pre>
<h4 id="list-or-tree-mode"><a class="header" href="#list-or-tree-mode">List or tree mode</a></h4>
<p>By default, or with <code>-l/--flat</code>, accounts are shown as a flat list with
their full names visible, as in the examples above.</p>
<p>With <code>-t/--tree</code>, the account hierarchy is shown, with subaccounts'
&quot;leaf&quot; names indented below their parent:</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal balance
                 $-1  assets
                  $1    bank:saving
                 $-2    cash
                  $2  expenses
                  $1    food
                  $1    supplies
                 $-2  income
                 $-1    gifts
                 $-1    salary
                  $1  liabilities:debts
--------------------
                   0
</code></pre>
<p>Notes:</p>
<ul>
<li>
<p>&quot;Boring&quot; accounts are combined with their subaccount for more
compact output, unless <code>--no-elide</code> is used. Boring accounts have no
balance of their own and just one subaccount (eg <code>assets:bank</code> and
<code>liabilities</code> above).</p>
</li>
<li>
<p>All balances shown are &quot;inclusive&quot;, ie including the balances from
all subaccounts. Note this means some repetition in the output,
which requires explanation when sharing reports with
non-plaintextaccounting-users. A tree mode report's final total is
the sum of the top-level balances shown, not of all the balances
shown.</p>
</li>
<li>
<p>Each group of sibling accounts (ie, under a common parent) is sorted
separately.</p>
</li>
</ul>
<h4 id="depth-limiting"><a class="header" href="#depth-limiting">Depth limiting</a></h4>
<p>With a <code>depth:NUM</code> query, or <code>--depth NUM</code> option, or just <code>-NUM</code> (eg:
<code>-3</code>) balance reports will show accounts only to the specified depth,
hiding the deeper subaccounts. This can be useful for getting an
overview without too much detail.</p>
<p>Account balances at the depth limit always include the balances from any
deeper subaccounts (even in list mode). Eg, limiting to depth 1:</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal balance -1
                 $-1  assets
                  $2  expenses
                 $-2  income
                  $1  liabilities
--------------------
                   0  
</code></pre>
<h4 id="dropping-top-level-accounts"><a class="header" href="#dropping-top-level-accounts">Dropping top-level accounts</a></h4>
<p>You can also hide one or more top-level account name parts, using
<code>--drop NUM</code>. This can be useful for hiding repetitive top-level account
names:</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal bal expenses --drop 1
                  $1  food
                  $1  supplies
--------------------
                  $2  
</code></pre>
<p><a name="multicolumn-balance-report"></a></p>
<h4 id="showing-declared-accounts"><a class="header" href="#showing-declared-accounts">Showing declared accounts</a></h4>
<p>With <code>--declared</code>, accounts which have been declared with an <a href="#account">account
directive</a> will be included in the balance report, even if
they have no transactions. (Since they will have a zero balance, you
will also need <code>-E/--empty</code> to see them.)</p>
<p>More precisely, <em>leaf</em> declared accounts (with no subaccounts) will be
included, since those are usually the more useful in reports.</p>
<p>The idea of this is to be able to see a useful &quot;complete&quot; balance
report, even when you don't have transactions in all of your declared
accounts yet.</p>
<h4 id="sorting-by-amount"><a class="header" href="#sorting-by-amount">Sorting by amount</a></h4>
<p>With <code>-S/--sort-amount</code>, accounts with the largest (most positive)
balances are shown first. Eg: <code>hledger bal expenses -MAS</code> shows your
biggest averaged monthly expenses first. When more than one commodity is
present, they will be sorted by the alphabetically earliest commodity
first, and then by subsequent commodities (if an amount is missing a
commodity, it is treated as 0).</p>
<p>Revenues and liability balances are typically negative, however, so <code>-S</code>
shows these in reverse order. To work around this, you can add
<code>--invert</code> to flip the signs. (Or, use one of the higher-level reports,
which flip the sign automatically. Eg: <code>hledger incomestatement -MAS</code>).</p>
<p><a name="tree-mode"></a></p>
<h4 id="percentages"><a class="header" href="#percentages">Percentages</a></h4>
<p>With <code>-%/--percent</code>, balance reports show each account's value
expressed as a percentage of the (column) total.</p>
<p>Note it is not useful to calculate percentages if the amounts in a
column have mixed signs. In this case, make a separate report for each
sign, eg:</p>
<pre><code class="language-cli">$ hledger bal -% amt:`&gt;0`
$ hledger bal -% amt:`&lt;0`
</code></pre>
<p>Similarly, if the amounts in a column have mixed commodities, convert
them to one commodity with <code>-B</code>, <code>-V</code>, <code>-X</code> or <code>--value</code>, or make a
separate report for each commodity:</p>
<pre><code class="language-cli">$ hledger bal -% cur:\\$
$ hledger bal -% cur:€
</code></pre>
<h4 id="multi-period-balance-report"><a class="header" href="#multi-period-balance-report">Multi-period balance report</a></h4>
<p>With a <a href="#report-intervals">report interval</a> (set by the <code>-D/--daily</code>,
<code>-W/--weekly</code>, <code>-M/--monthly</code>, <code>-Q/--quarterly</code>, <code>-Y/--yearly</code>, or
<code>-p/--period</code> flag), <code>balance</code> shows a tabular report, with columns
representing successive time periods (and a title):</p>
<pre><code class="language-cli">$ hledger -f examples/sample.journal bal --quarterly income expenses -E
Balance changes in 2008:

                   ||  2008q1  2008q2  2008q3  2008q4 
===================++=================================
 expenses:food     ||       0      $1       0       0 
 expenses:supplies ||       0      $1       0       0 
 income:gifts      ||       0     $-1       0       0 
 income:salary     ||     $-1       0       0       0 
-------------------++---------------------------------
                   ||     $-1      $1       0       0 
</code></pre>
<p>Notes:</p>
<ul>
<li>The report's start/end dates will be expanded, if necessary, to
fully encompass the displayed subperiods (so that the first and last
subperiods have the same duration as the others).</li>
<li>Leading and trailing periods (columns) containing all zeroes are not
shown, unless <code>-E/--empty</code> is used.</li>
<li>Accounts (rows) containing all zeroes are not shown, unless
<code>-E/--empty</code> is used.</li>
<li>Amounts with many commodities are shown in abbreviated form, unless
<code>--no-elide</code> is used. <em>(experimental)</em></li>
<li>Average and/or total columns can be added with the <code>-A/--average</code>
and <code>-T/--row-total</code> flags.</li>
<li>The <code>--transpose</code> flag can be used to exchange rows and columns.</li>
<li>The <code>--pivot FIELD</code> option causes a different transaction field to
be used as &quot;account name&quot;. See <a href="#pivoting">PIVOTING</a>.</li>
</ul>
<p>Multi-period reports with many periods can be too wide for easy viewing
in the terminal. Here are some ways to handle that:</p>
<ul>
<li>Hide the totals row with <code>-N/--no-total</code></li>
<li>Convert to a single currency with <code>-V</code></li>
<li>Maximize the terminal window</li>
<li>Reduce the terminal's font size</li>
<li>View with a pager like less, eg:
<code>hledger bal -D --color=yes | less -RS</code></li>
<li>Output as CSV and use a CSV viewer like
<a href="https://www.visidata.org">visidata</a>
(<code>hledger bal -D -O csv | vd -f csv</code>), Emacs'
<a href="https://elpa.gnu.org/packages/csv-mode.html">csv-mode</a>
(<code>M-x csv-mode, C-c C-a</code>), or a spreadsheet
(<code>hledger bal -D -o a.csv &amp;&amp; open a.csv</code>)</li>
<li>Output as HTML and view with a browser:
<code>hledger bal -D -o a.html &amp;&amp; open a.html</code></li>
</ul>
<h4 id="balance-change-end-balance"><a class="header" href="#balance-change-end-balance">Balance change, end balance</a></h4>
<p>It's important to be clear on the meaning of the numbers shown in
balance reports. Here is some terminology we use:</p>
<p>A <em><strong>balance change</strong></em> is the net amount added to, or removed from, an
account during some period.</p>
<p>An <em><strong>end balance</strong></em> is the amount accumulated in an account as of some
date (and some time, but hledger doesn't store that; assume end of day
in your timezone). It is the sum of previous balance changes.</p>
<p>We call it a <em><strong>historical end balance</strong></em> if it includes all balance
changes since the account was created. For a real world account, this
means it will match the &quot;historical record&quot;, eg the balances reported
in your bank statements or bank web UI. (If they are correct!)</p>
<p>In general, balance changes are what you want to see when reviewing
revenues and expenses, and historical end balances are what you want to
see when reviewing or reconciling asset, liability and equity accounts.</p>
<p><code>balance</code> shows balance changes by default. To see accurate historical
end balances:</p>
<ol>
<li>
<p>Initialise account starting balances with an &quot;opening balances&quot;
transaction (a transfer from equity to the account), unless the
journal covers the account's full lifetime.</p>
</li>
<li>
<p>Include all of of the account's prior postings in the report, by
not specifying a <a href="#report-start-end-date">report start date</a>, or by
using the <code>-H/--historical</code> flag. (<code>-H</code> causes report start date to
be ignored when summing postings.)</p>
</li>
</ol>
<h4 id="balance-report-types"><a class="header" href="#balance-report-types">Balance report types</a></h4>
<p>The balance command is quite flexible; here is the full detail on how to
control what it reports. If the following seems complicated, don't
worry - this is for advanced reporting, and it does take time and
experimentation to get familiar with all the report modes.</p>
<p>There are three important option groups:</p>
<p><code>hledger balance [CALCULATIONTYPE] [ACCUMULATIONTYPE] [VALUATIONTYPE] ...</code></p>
<h5 id="calculation-type"><a class="header" href="#calculation-type">Calculation type</a></h5>
<p>The basic calculation to perform for each table cell. It is one of:</p>
<ul>
<li><code>--sum</code> : sum the posting amounts (<strong>default</strong>)</li>
<li><code>--budget</code> : sum the amounts, but also show the budget goal amount
(for each account/period)</li>
<li><code>--valuechange</code> : show the change in period-end historical balance
values (caused by deposits, withdrawals, and/or market price
fluctuations)</li>
<li><code>--gain</code> : show the unrealised capital gain/loss, (the current
valued balance minus each amount's original cost)</li>
<li><code>--count</code> : show the count of postings</li>
</ul>
<h5 id="accumulation-type"><a class="header" href="#accumulation-type">Accumulation type</a></h5>
<p>How amounts should accumulate across report periods. Another way to say
it: which time period's postings should contribute to each cell's
calculation. It is one of:</p>
<ul>
<li>
<p><code>--change</code> : calculate with postings from column start to column
end, ie &quot;just this column&quot;. Typically used to see
revenues/expenses. (<strong>default for balance, incomestatement</strong>)</p>
</li>
<li>
<p><code>--cumulative</code> : calculate with postings from report start to column
end, ie &quot;previous columns plus this column&quot;. Typically used to
show changes accumulated since the report's start date. Not often
used.</p>
</li>
<li>
<p><code>--historical/-H</code> : calculate with postings from journal start to
column end, ie &quot;all postings from before report start date until
this column's end&quot;. Typically used to see historical end balances
of assets/liabilities/equity. (<strong>default for balancesheet,
balancesheetequity, cashflow</strong>)</p>
</li>
</ul>
<h5 id="valuation-type"><a class="header" href="#valuation-type">Valuation type</a></h5>
<p>Which kind of value or cost conversion should be applied, if any, before
displaying the report. It is one of:</p>
<ul>
<li>no valuation type : don't convert to cost or value (<strong>default</strong>)</li>
<li><code>--value=cost[,COMM]</code> : convert amounts to cost (then optionally to
some other commodity)</li>
<li><code>--value=then[,COMM]</code> : convert amounts to market value on
transaction dates</li>
<li><code>--value=end[,COMM]</code> : convert amounts to market value on period end
date(s)<br />
(<strong>default with <code>--valuechange</code>, <code>--gain</code></strong>)</li>
<li><code>--value=now[,COMM]</code> : convert amounts to market value on today's
date</li>
<li><code>--value=YYYY-MM-DD[,COMM]</code> : convert amounts to market value on
another date</li>
</ul>
<p>or one of the equivalent simpler flags:</p>
<ul>
<li><code>-B/--cost</code> : like --value=cost (though, note --cost and --value
are independent options which can both be used at once)</li>
<li><code>-V/--market</code> : like --value=end</li>
<li><code>-X COMM/--exchange COMM</code> : like --value=end,COMM</li>
</ul>
<p>See <a href="#cost-reporting">Cost reporting</a> and <a href="#value-reporting">Value
reporting</a> for more about these.</p>
<h5 id="combining-balance-report-types"><a class="header" href="#combining-balance-report-types">Combining balance report types</a></h5>
<p>Most combinations of these options should produce reasonable reports,
but if you find any that seem wrong or misleading, let us know. The
following restrictions are applied:</p>
<ul>
<li><code>--valuechange</code> implies <code>--value=end</code></li>
<li><code>--valuechange</code> makes <code>--change</code> the default when used with the
<code>balancesheet</code>/<code>balancesheetequity</code> commands</li>
<li><code>--cumulative</code> or <code>--historical</code> disables <code>--row-total/-T</code></li>
</ul>
<p>For reference, here is what the combinations of accumulation and
valuation show:</p>
<div class="table-wrapper"><table><thead><tr><th>Valuation:&gt;<br> Accumulation:v</th><th>no valuation</th><th><code>--value= then</code></th><th><code>--value= end</code></th><th><code>--value= YYYY-MM-DD /now</code></th></tr></thead><tbody>
<tr><td><code>--change</code></td><td>change in period</td><td>sum of posting-date market values in period</td><td>period-end value of change in period</td><td>DATE-value of change in period</td></tr>
<tr><td><code>--cumulative</code></td><td>change from report start to period end</td><td>sum of posting-date market values from report start to period end</td><td>period-end value of change from report start to period end</td><td>DATE-value of change from report start to period end</td></tr>
<tr><td><code>--historical /-H</code></td><td>change from journal start to period end (historical end balance)</td><td>sum of posting-date market values from journal start to period end</td><td>period-end value of change from journal start to period end</td><td>DATE-value of change from journal start to period end</td></tr>
</tbody></table>
</div>
<h4 id="budget-report"><a class="header" href="#budget-report">Budget report</a></h4>
<p>The <code>--budget</code> report type activates extra columns showing any budget
goals for each account and period. The budget goals are defined by
<a href="hledger.html#periodic-transactions">periodic transactions</a>. This is
useful for comparing planned and actual income, expenses, time usage,
etc.</p>
<p>For example, you can take average monthly expenses in the common expense
categories to construct a minimal monthly budget:</p>
<pre><code class="language-journal">;; Budget
~ monthly
  income  $2000
  expenses:food    $400
  expenses:bus     $50
  expenses:movies  $30
  assets:bank:checking

;; Two months worth of expenses
2017-11-01
  income  $1950
  expenses:food    $396
  expenses:bus     $49
  expenses:movies  $30
  expenses:supplies  $20
  assets:bank:checking

2017-12-01
  income  $2100
  expenses:food    $412
  expenses:bus     $53
  expenses:gifts   $100
  assets:bank:checking
</code></pre>
<p>You can now see a monthly budget report:</p>
<pre><code class="language-cli">$ hledger balance -M --budget
Budget performance in 2017/11/01-2017/12/31:

                      ||                      Nov                       Dec 
======================++====================================================
 assets               || $-2445 [  99% of $-2480]  $-2665 [ 107% of $-2480] 
 assets:bank          || $-2445 [  99% of $-2480]  $-2665 [ 107% of $-2480] 
 assets:bank:checking || $-2445 [  99% of $-2480]  $-2665 [ 107% of $-2480] 
 expenses             ||   $495 [ 103% of   $480]    $565 [ 118% of   $480] 
 expenses:bus         ||    $49 [  98% of    $50]     $53 [ 106% of    $50] 
 expenses:food        ||   $396 [  99% of   $400]    $412 [ 103% of   $400] 
 expenses:movies      ||    $30 [ 100% of    $30]       0 [   0% of    $30] 
 income               ||  $1950 [  98% of  $2000]   $2100 [ 105% of  $2000] 
----------------------++----------------------------------------------------
                      ||      0 [              0]       0 [              0] 
</code></pre>
<p>This is different from a normal balance report in several ways.
Currently:</p>
<ul>
<li>Accounts with budget goals during the report period, and their
parents, are shown.</li>
<li>Their subaccounts are not shown (regardless of the depth setting).</li>
<li>Accounts without budget goals, if any, are aggregated and shown as
&quot;&lt;unbudgeted&gt;&quot;.</li>
<li>Amounts are always inclusive (subaccount-including), even in list
mode.</li>
<li>After each actual amount, the corresponding goal amount and
percentage of goal reached are also shown, in square brackets.</li>
</ul>
<p>This means that the numbers displayed will not always add up! Eg above,
the <code>expenses</code> actual amount includes the gifts and supplies
transactions, but the <code>expenses:gifts</code> and <code>expenses:supplies</code> accounts
are not shown, as they have no budget amounts declared.</p>
<p>This can be confusing. When you need to make things clearer, use the
<code>-E/--empty</code> flag, which will reveal all accounts including unbudgeted
ones, giving the full picture. Eg:</p>
<pre><code class="language-cli">$ hledger balance -M --budget --empty
Budget performance in 2017/11/01-2017/12/31:

                      ||                      Nov                       Dec 
======================++====================================================
 assets               || $-2445 [  99% of $-2480]  $-2665 [ 107% of $-2480] 
 assets:bank          || $-2445 [  99% of $-2480]  $-2665 [ 107% of $-2480] 
 assets:bank:checking || $-2445 [  99% of $-2480]  $-2665 [ 107% of $-2480] 
 expenses             ||   $495 [ 103% of   $480]    $565 [ 118% of   $480] 
 expenses:bus         ||    $49 [  98% of    $50]     $53 [ 106% of    $50] 
 expenses:food        ||   $396 [  99% of   $400]    $412 [ 103% of   $400] 
 expenses:gifts       ||      0                      $100                   
 expenses:movies      ||    $30 [ 100% of    $30]       0 [   0% of    $30] 
 expenses:supplies    ||    $20                         0                   
 income               ||  $1950 [  98% of  $2000]   $2100 [ 105% of  $2000] 
----------------------++----------------------------------------------------
                      ||      0 [              0]       0 [              0] 
</code></pre>
<p>You can roll over unspent budgets to next period with <code>--cumulative</code>:</p>
<pre><code class="language-cli">$ hledger balance -M --budget --cumulative
Budget performance in 2017/11/01-2017/12/31:

                      ||                      Nov                       Dec 
======================++====================================================
 assets               || $-2445 [  99% of $-2480]  $-5110 [ 103% of $-4960] 
 assets:bank          || $-2445 [  99% of $-2480]  $-5110 [ 103% of $-4960] 
 assets:bank:checking || $-2445 [  99% of $-2480]  $-5110 [ 103% of $-4960] 
 expenses             ||   $495 [ 103% of   $480]   $1060 [ 110% of   $960] 
 expenses:bus         ||    $49 [  98% of    $50]    $102 [ 102% of   $100] 
 expenses:food        ||   $396 [  99% of   $400]    $808 [ 101% of   $800] 
 expenses:movies      ||    $30 [ 100% of    $30]     $30 [  50% of    $60] 
 income               ||  $1950 [  98% of  $2000]   $4050 [ 101% of  $4000] 
----------------------++----------------------------------------------------
                      ||      0 [              0]       0 [              0] 
</code></pre>
<p>It's common to limit budgets/budget reports to just expenses</p>
<pre><code>hledger bal -M --budget expenses
</code></pre>
<p>or just revenues and expenses (eg, using account types):</p>
<pre><code>hledger bal -M --budget type:rx
</code></pre>
<p>It's also common to limit or convert them to a single currency
(<code>cur:COMM</code> or <code>-X COMM [--infer-market-prices]</code>). If showing multiple
currencies, <code>--layout bare</code> or <code>--layout tall</code> can help.</p>
<p>For more examples and notes, see <a href="/budgeting.html">Budgeting</a>.</p>
<h5 id="budget-report-start-date"><a class="header" href="#budget-report-start-date">Budget report start date</a></h5>
<p>This might be a bug, but for now: when making budget reports, it's a
good idea to explicitly set the report's start date to the first day of
a reporting period, because a periodic rule like <code>~ monthly</code> generates
its transactions on the 1st of each month, and if your journal has no
regular transactions on the 1st, the default report start date could
exclude that budget goal, which can be a little surprising. Eg here the
default report period is just the day of 2020-01-15:</p>
<pre><code class="language-journal">~ monthly in 2020
  (expenses:food)  $500

2020-01-15
  expenses:food    $400
  assets:checking
</code></pre>
<pre><code class="language-cli">$ hledger bal expenses --budget
Budget performance in 2020-01-15:

              || 2020-01-15 
==============++============
 &lt;unbudgeted&gt; ||       $400 
--------------++------------
              ||       $400 
</code></pre>
<p>To avoid this, specify the budget report's period, or at least the
start date, with <code>-b</code>/<code>-e</code>/<code>-p</code>/<code>date:</code>, to ensure it includes the
budget goal transactions (periodic transactions) that you want. Eg,
adding <code>-b 2020/1/1</code> to the above:</p>
<pre><code class="language-cli">$ hledger bal expenses --budget -b 2020/1/1
Budget performance in 2020-01-01..2020-01-15:

               || 2020-01-01..2020-01-15 
===============++========================
 expenses:food ||     $400 [80% of $500] 
---------------++------------------------
               ||     $400 [80% of $500] 
</code></pre>
<h5 id="budgets-and-subaccounts"><a class="header" href="#budgets-and-subaccounts">Budgets and subaccounts</a></h5>
<p>You can add budgets to any account in your account hierarchy. If you
have budgets on both parent account and some of its children, then
budget(s) of the child account(s) would be added to the budget of their
parent, much like account balances behave.</p>
<p>In the most simple case this means that once you add a budget to any
account, all its parents would have budget as well.</p>
<p>To illustrate this, consider the following budget:</p>
<pre><code>~ monthly from 2019/01
    expenses:personal             $1,000.00
    expenses:personal:electronics    $100.00
    liabilities
</code></pre>
<p>With this, monthly budget for electronics is defined to be $100 and
budget for personal expenses is an additional $1000, which implicitly
means that budget for both <code>expenses:personal</code> and <code>expenses</code> is $1100.</p>
<p>Transactions in <code>expenses:personal:electronics</code> will be counted both
towards its $100 budget and $1100 of <code>expenses:personal</code> , and
transactions in any other subaccount of <code>expenses:personal</code> would be
counted towards only towards the budget of <code>expenses:personal</code>.</p>
<p>For example, let's consider these transactions:</p>
<pre><code class="language-journal">~ monthly from 2019/01
    expenses:personal             $1,000.00
    expenses:personal:electronics    $100.00
    liabilities

2019/01/01 Google home hub
    expenses:personal:electronics          $90.00
    liabilities                           $-90.00

2019/01/02 Phone screen protector
    expenses:personal:electronics:upgrades          $10.00
    liabilities

2019/01/02 Weekly train ticket
    expenses:personal:train tickets       $153.00
    liabilities

2019/01/03 Flowers
    expenses:personal          $30.00
    liabilities
</code></pre>
<p>As you can see, we have transactions in
<code>expenses:personal:electronics:upgrades</code> and
<code>expenses:personal:train tickets</code>, and since both of these accounts are
without explicitly defined budget, these transactions would be counted
towards budgets of <code>expenses:personal:electronics</code> and
<code>expenses:personal</code> accordingly:</p>
<pre><code class="language-cli">$ hledger balance --budget -M
Budget performance in 2019/01:

                               ||                           Jan 
===============================++===============================
 expenses                      ||  $283.00 [  26% of  $1100.00] 
 expenses:personal             ||  $283.00 [  26% of  $1100.00] 
 expenses:personal:electronics ||  $100.00 [ 100% of   $100.00] 
 liabilities                   || $-283.00 [  26% of $-1100.00] 
-------------------------------++-------------------------------
                               ||        0 [                 0] 
</code></pre>
<p>And with <code>--empty</code>, we can get a better picture of budget allocation and
consumption:</p>
<pre><code class="language-cli">$ hledger balance --budget -M --empty
Budget performance in 2019/01:

                                        ||                           Jan 
========================================++===============================
 expenses                               ||  $283.00 [  26% of  $1100.00] 
 expenses:personal                      ||  $283.00 [  26% of  $1100.00] 
 expenses:personal:electronics          ||  $100.00 [ 100% of   $100.00] 
 expenses:personal:electronics:upgrades ||   $10.00                      
 expenses:personal:train tickets        ||  $153.00                      
 liabilities                            || $-283.00 [  26% of $-1100.00] 
----------------------------------------++-------------------------------
                                        ||        0 [                 0] 
</code></pre>
<h5 id="selecting-budget-goals"><a class="header" href="#selecting-budget-goals">Selecting budget goals</a></h5>
<p>The budget report evaluates periodic transaction rules to generate
special &quot;goal transactions&quot;, which generate the goal amounts for each
account in each report subperiod. When troubleshooting, you can use
<code>print --forecast</code> to show these as forecasted transactions:</p>
<pre><code class="language-cli">$ hledger print --forecast=BUDGETREPORTPERIOD tag:generated
</code></pre>
<p>By default, the budget report uses all available periodic transaction
rules to generate goals. This includes rules with a different report
interval from your report. Eg if you have daily, weekly and monthly
periodic rules, all of these will contribute to the goals in a monthly
budget report.</p>
<p>You can select a subset of periodic rules by providing an argument to
the <code>--budget</code> flag. <code>--budget=DESCPAT</code> will match all periodic rules
whose description contains DESCPAT, a case-insensitive substring (not a
regular expression or query). This means you can give your periodic
rules descriptions (remember that <a href="#two-spaces-between-period-expression-and-description">two spaces are
needed</a>), and
then select from multiple budgets defined in your journal.</p>
<h5 id="budget-vs-forecast"><a class="header" href="#budget-vs-forecast">Budget vs forecast</a></h5>
<p><code>hledger --forecast ...</code> and <code>hledger balance --budget ...</code> are separate
features, though both of them use the periodic transaction rules defined
in the journal, and both of them generate temporary transactions for
reporting purposes (&quot;forecast transactions&quot; and &quot;budget goal
transactions&quot;, respectively). You can use both features at the same
time if you want. Here are some differences between them, as of hledger
1.29:</p>
<p>CLI:</p>
<ul>
<li>--forecast is a general hledger option, usable with any command</li>
<li>--budget is a <code>balance</code> command option, usable only with that
command.</li>
</ul>
<p>Visibility of generated transactions:</p>
<ul>
<li>forecast transactions are visible in any report, like ordinary
transactions</li>
<li>budget goal transactions are invisible except for the goal amounts
they produce in --budget reports.</li>
</ul>
<p>Periodic transaction rules:</p>
<ul>
<li>--forecast uses all available periodic transaction rules</li>
<li>--budget uses all periodic rules (<code>--budget</code>) or a selected subset
(<code>--budget=DESCPAT</code>)</li>
</ul>
<p>Period of generated transactions:</p>
<ul>
<li>--forecast generates forecast transactions
<ul>
<li>from after the last regular transaction to the end of the report
period (<code>--forecast</code>)</li>
<li>or, during a specified period (<code>--forecast=PERIODEXPR</code>)</li>
<li>possibly further restricted by a period specified in the
periodic transaction rule</li>
<li>and always restricted within the bounds of the report period</li>
</ul>
</li>
<li>--budget generates budget goal transactions
<ul>
<li>throughout the report period</li>
<li>possibly restricted by a period specified in the periodic
transaction rule.</li>
</ul>
</li>
</ul>
<h4 id="balance-report-layout"><a class="header" href="#balance-report-layout">Balance report layout</a></h4>
<p>The <code>--layout</code> option affects how balance reports show multi-commodity
amounts and commodity symbols, which can improve readability. It can
also normalise the data for easy consumption by other programs. It has
four possible values:</p>
<ul>
<li><code>--layout=wide[,WIDTH]</code>: commodities are shown on a single line,
optionally elided to WIDTH</li>
<li><code>--layout=tall</code>: each commodity is shown on a separate line</li>
<li><code>--layout=bare</code>: commodity symbols are in their own column, amounts
are bare numbers</li>
<li><code>--layout=tidy</code>: data is normalised to easily-consumed &quot;tidy&quot;
form, with one row per data value</li>
</ul>
<p>Here are the <code>--layout</code> modes supported by each <a href="#output-format">output
format</a>; note only CSV output supports all of them:</p>
<div class="table-wrapper"><table><thead><tr><th>-</th><th>txt</th><th>csv</th><th>html</th><th>json</th><th>sql</th></tr></thead><tbody>
<tr><td>wide</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td></tr>
<tr><td>tall</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td></tr>
<tr><td>bare</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td></tr>
<tr><td>tidy</td><td></td><td>Y</td><td></td><td></td><td></td></tr>
</tbody></table>
</div>
<p>Examples:</p>
<ul>
<li>
<p>Wide layout. With many commodities, reports can be very wide:</p>
<pre><code class="language-cli">$ hledger -f examples/bcexample.hledger bal assets:us:etrade -3 -T -Y --layout=wide
Balance changes in 2012-01-01..2014-12-31:

                  ||                                          2012                                                     2013                                             2014                                                      Total 
==================++====================================================================================================================================================================================================================
 Assets:US:ETrade || 10.00 ITOT, 337.18 USD, 12.00 VEA, 106.00 VHT  70.00 GLD, 18.00 ITOT, -98.12 USD, 10.00 VEA, 18.00 VHT  -11.00 ITOT, 4881.44 USD, 14.00 VEA, 170.00 VHT  70.00 GLD, 17.00 ITOT, 5120.50 USD, 36.00 VEA, 294.00 VHT 
------------------++--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  || 10.00 ITOT, 337.18 USD, 12.00 VEA, 106.00 VHT  70.00 GLD, 18.00 ITOT, -98.12 USD, 10.00 VEA, 18.00 VHT  -11.00 ITOT, 4881.44 USD, 14.00 VEA, 170.00 VHT  70.00 GLD, 17.00 ITOT, 5120.50 USD, 36.00 VEA, 294.00 VHT 
</code></pre>
</li>
<li>
<p>Limited wide layout. A width limit reduces the width, but some
commodities will be hidden:</p>
<pre><code class="language-cli">$ hledger -f examples/bcexample.hledger bal assets:us:etrade -3 -T -Y --layout=wide,32
Balance changes in 2012-01-01..2014-12-31:

                  ||                             2012                             2013                   2014                            Total 
==================++===========================================================================================================================
 Assets:US:ETrade || 10.00 ITOT, 337.18 USD, 2 more..  70.00 GLD, 18.00 ITOT, 3 more..  -11.00 ITOT, 3 more..  70.00 GLD, 17.00 ITOT, 3 more.. 
------------------++---------------------------------------------------------------------------------------------------------------------------
                  || 10.00 ITOT, 337.18 USD, 2 more..  70.00 GLD, 18.00 ITOT, 3 more..  -11.00 ITOT, 3 more..  70.00 GLD, 17.00 ITOT, 3 more.. 
</code></pre>
</li>
<li>
<p>Tall layout. Each commodity gets a new line (may be different in
each column), and account names are repeated:</p>
<pre><code class="language-cli">$ hledger -f examples/bcexample.hledger bal assets:us:etrade -3 -T -Y --layout=tall
Balance changes in 2012-01-01..2014-12-31:

                  ||       2012        2013         2014        Total 
==================++==================================================
 Assets:US:ETrade || 10.00 ITOT   70.00 GLD  -11.00 ITOT    70.00 GLD 
 Assets:US:ETrade || 337.18 USD  18.00 ITOT  4881.44 USD   17.00 ITOT 
 Assets:US:ETrade ||  12.00 VEA  -98.12 USD    14.00 VEA  5120.50 USD 
 Assets:US:ETrade || 106.00 VHT   10.00 VEA   170.00 VHT    36.00 VEA 
 Assets:US:ETrade ||              18.00 VHT                294.00 VHT 
------------------++--------------------------------------------------
                  || 10.00 ITOT   70.00 GLD  -11.00 ITOT    70.00 GLD 
                  || 337.18 USD  18.00 ITOT  4881.44 USD   17.00 ITOT 
                  ||  12.00 VEA  -98.12 USD    14.00 VEA  5120.50 USD 
                  || 106.00 VHT   10.00 VEA   170.00 VHT    36.00 VEA 
                  ||              18.00 VHT                294.00 VHT 
</code></pre>
</li>
<li>
<p>Bare layout. Commodity symbols are kept in one column, each
commodity gets its own report row, account names are repeated:</p>
<pre><code class="language-cli">$ hledger -f examples/bcexample.hledger bal assets:us:etrade -3 -T -Y --layout=bare
Balance changes in 2012-01-01..2014-12-31:

                  || Commodity    2012    2013     2014    Total 
==================++=============================================
 Assets:US:ETrade || GLD             0   70.00        0    70.00 
 Assets:US:ETrade || ITOT        10.00   18.00   -11.00    17.00 
 Assets:US:ETrade || USD        337.18  -98.12  4881.44  5120.50 
 Assets:US:ETrade || VEA         12.00   10.00    14.00    36.00 
 Assets:US:ETrade || VHT        106.00   18.00   170.00   294.00 
------------------++---------------------------------------------
                  || GLD             0   70.00        0    70.00 
                  || ITOT        10.00   18.00   -11.00    17.00 
                  || USD        337.18  -98.12  4881.44  5120.50 
                  || VEA         12.00   10.00    14.00    36.00 
                  || VHT        106.00   18.00   170.00   294.00 
</code></pre>
</li>
<li>
<p>Bare layout also affects <a href="#output-format">CSV output</a>, which is
useful for producing data that is easier to consume, eg for making
charts:</p>
<pre><code class="language-cli">$ hledger -f examples/bcexample.hledger bal assets:us:etrade -3 -O csv --layout=bare
&quot;account&quot;,&quot;commodity&quot;,&quot;balance&quot;
&quot;Assets:US:ETrade&quot;,&quot;GLD&quot;,&quot;70.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;ITOT&quot;,&quot;17.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;USD&quot;,&quot;5120.50&quot;
&quot;Assets:US:ETrade&quot;,&quot;VEA&quot;,&quot;36.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;VHT&quot;,&quot;294.00&quot;
&quot;total&quot;,&quot;GLD&quot;,&quot;70.00&quot;
&quot;total&quot;,&quot;ITOT&quot;,&quot;17.00&quot;
&quot;total&quot;,&quot;USD&quot;,&quot;5120.50&quot;
&quot;total&quot;,&quot;VEA&quot;,&quot;36.00&quot;
&quot;total&quot;,&quot;VHT&quot;,&quot;294.00&quot;
</code></pre>
</li>
<li>
<p>Note: bare layout will sometimes display an extra row for the
no-symbol commodity, because of zero amounts (hledger treats zeroes
as commodity-less, usually). This can break <code>hledger-bar</code>
confusingly (workaround: add a <code>cur:</code> query to exclude the no-symbol
row).</p>
</li>
<li>
<p>Tidy layout produces normalised &quot;tidy data&quot;, where every variable
has its own column and each row represents a single data point. See
<a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html</a>
for more. This is the easiest kind of data for other software to
consume. Here's how it looks:</p>
<pre><code class="language-cli">$ hledger -f examples/bcexample.hledger bal assets:us:etrade -3 -Y -O csv --layout=tidy
&quot;account&quot;,&quot;period&quot;,&quot;start_date&quot;,&quot;end_date&quot;,&quot;commodity&quot;,&quot;value&quot;
&quot;Assets:US:ETrade&quot;,&quot;2012&quot;,&quot;2012-01-01&quot;,&quot;2012-12-31&quot;,&quot;GLD&quot;,&quot;0&quot;
&quot;Assets:US:ETrade&quot;,&quot;2012&quot;,&quot;2012-01-01&quot;,&quot;2012-12-31&quot;,&quot;ITOT&quot;,&quot;10.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2012&quot;,&quot;2012-01-01&quot;,&quot;2012-12-31&quot;,&quot;USD&quot;,&quot;337.18&quot;
&quot;Assets:US:ETrade&quot;,&quot;2012&quot;,&quot;2012-01-01&quot;,&quot;2012-12-31&quot;,&quot;VEA&quot;,&quot;12.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2012&quot;,&quot;2012-01-01&quot;,&quot;2012-12-31&quot;,&quot;VHT&quot;,&quot;106.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2013&quot;,&quot;2013-01-01&quot;,&quot;2013-12-31&quot;,&quot;GLD&quot;,&quot;70.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2013&quot;,&quot;2013-01-01&quot;,&quot;2013-12-31&quot;,&quot;ITOT&quot;,&quot;18.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2013&quot;,&quot;2013-01-01&quot;,&quot;2013-12-31&quot;,&quot;USD&quot;,&quot;-98.12&quot;
&quot;Assets:US:ETrade&quot;,&quot;2013&quot;,&quot;2013-01-01&quot;,&quot;2013-12-31&quot;,&quot;VEA&quot;,&quot;10.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2013&quot;,&quot;2013-01-01&quot;,&quot;2013-12-31&quot;,&quot;VHT&quot;,&quot;18.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2014&quot;,&quot;2014-01-01&quot;,&quot;2014-12-31&quot;,&quot;GLD&quot;,&quot;0&quot;
&quot;Assets:US:ETrade&quot;,&quot;2014&quot;,&quot;2014-01-01&quot;,&quot;2014-12-31&quot;,&quot;ITOT&quot;,&quot;-11.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2014&quot;,&quot;2014-01-01&quot;,&quot;2014-12-31&quot;,&quot;USD&quot;,&quot;4881.44&quot;
&quot;Assets:US:ETrade&quot;,&quot;2014&quot;,&quot;2014-01-01&quot;,&quot;2014-12-31&quot;,&quot;VEA&quot;,&quot;14.00&quot;
&quot;Assets:US:ETrade&quot;,&quot;2014&quot;,&quot;2014-01-01&quot;,&quot;2014-12-31&quot;,&quot;VHT&quot;,&quot;170.00&quot;
</code></pre>
</li>
</ul>
<h4 id="useful-balance-reports"><a class="header" href="#useful-balance-reports">Useful balance reports</a></h4>
<p>Some frequently used <code>balance</code> options/reports are:</p>
<ul>
<li>
<p><code>bal -M revenues expenses</code><br />
Show revenues/expenses in each month. Also available as the
<a href="#incomestatement"><code>incomestatement</code></a> command.</p>
</li>
<li>
<p><code>bal -M -H assets liabilities</code><br />
Show historical asset/liability balances at each month end. Also
available as the <a href="#balancesheet"><code>balancesheet</code></a> command.</p>
</li>
<li>
<p><code>bal -M -H assets liabilities equity</code><br />
Show historical asset/liability/equity balances at each month end.
Also available as the <a href="#balancesheetequity"><code>balancesheetequity</code></a>
command.</p>
</li>
<li>
<p><code>bal -M assets not:receivable</code><br />
Show changes to liquid assets in each month. Also available as the
<a href="#cashflow"><code>cashflow</code></a> command.</p>
</li>
</ul>
<p>Also:</p>
<ul>
<li>
<p><code>bal -M expenses -2 -SA</code><br />
Show monthly expenses summarised to depth 2 and sorted by average
amount.</p>
</li>
<li>
<p><code>bal -M --budget expenses</code><br />
Show monthly expenses and budget goals.</p>
</li>
<li>
<p><code>bal -M --valuechange investments</code><br />
Show monthly change in market value of investment assets.</p>
</li>
<li>
<p><code>bal investments --valuechange -D date:lastweek amt:'&gt;1000' -STA [--invert]</code><br />
Show top gainers [or losers] last week</p>
</li>
</ul>
<h3 id="balancesheet"><a class="header" href="#balancesheet">balancesheet</a></h3>
<p>(bs)</p>
<p>This command displays a <a href="https://en.wikipedia.org/wiki/Balance_sheet">balance
sheet</a>, showing historical
ending balances of asset and liability accounts. (To see equity as well,
use the <a href="#balancesheetequity">balancesheetequity</a> command.) Amounts are
shown with normal positive sign, as in conventional financial
statements.</p>
<p>This report shows accounts declared with the <code>Asset</code>, <code>Cash</code> or
<code>Liability</code> type (see <a href="https://hledger.org/hledger.html#account-types">account
types</a>). Or if no such
accounts are declared, it shows top-level accounts named <code>asset</code> or
<code>liability</code> (case insensitive, plurals allowed) and their subaccounts.</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger balancesheet
Balance Sheet

Assets:
                 $-1  assets
                  $1    bank:saving
                 $-2    cash
--------------------
                 $-1

Liabilities:
                  $1  liabilities:debts
--------------------
                  $1

Total:
--------------------
                   0
</code></pre>
<p>This command is a higher-level variant of the <a href="#balance"><code>balance</code></a>
command, and supports many of that command's features, such as
multi-period reports. It is similar to
<code>hledger balance -H assets liabilities</code>, but with smarter account
detection, and liabilities displayed with their sign flipped.</p>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options The output formats supported
are <code>txt</code>, <code>csv</code>, <code>tsv</code>, <code>html</code>, and (experimental) <code>json</code>.</p>
<h3 id="balancesheetequity"><a class="header" href="#balancesheetequity">balancesheetequity</a></h3>
<p>(bse)</p>
<p>This command displays a <a href="https://en.wikipedia.org/wiki/Balance_sheet">balance
sheet</a>, showing historical
ending balances of asset, liability and equity accounts. Amounts are
shown with normal positive sign, as in conventional financial
statements.</p>
<p>This report shows accounts declared with the <code>Asset</code>, <code>Cash</code>,
<code>Liability</code> or <code>Equity</code> type (see <a href="https://hledger.org/hledger.html#account-types">account
types</a>). Or if no such
accounts are declared, it shows top-level accounts named <code>asset</code>,
<code>liability</code> or <code>equity</code> (case insensitive, plurals allowed) and their
subaccounts.</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger balancesheetequity
Balance Sheet With Equity

Assets:
                 $-2  assets
                  $1    bank:saving
                 $-3    cash
--------------------
                 $-2

Liabilities:
                  $1  liabilities:debts
--------------------
                  $1

Equity:
          $1  equity:owner
--------------------
          $1

Total:
--------------------
                   0
</code></pre>
<p>This command is a higher-level variant of the <a href="#balance"><code>balance</code></a>
command, and supports many of that command's features, such as
multi-period reports. It is similar to
<code>hledger balance -H assets liabilities equity</code>, but with smarter account
detection, and liabilities/equity displayed with their sign flipped.</p>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options The output formats supported
are <code>txt</code>, <code>csv</code>, <code>tsv</code>, <code>html</code>, and (experimental) <code>json</code>.</p>
<h3 id="cashflow"><a class="header" href="#cashflow">cashflow</a></h3>
<p>(cf)</p>
<p>This command displays a <a href="https://en.wikipedia.org/wiki/Cash_flow_statement">cashflow
statement</a>, showing
the inflows and outflows affecting &quot;cash&quot; (ie, liquid, easily
convertible) assets. Amounts are shown with normal positive sign, as in
conventional financial statements.</p>
<p>This report shows accounts declared with the <code>Cash</code> type (see <a href="https://hledger.org/hledger.html#account-types">account
types</a>). Or if no such
accounts are declared, it shows accounts</p>
<ul>
<li>under a top-level account named <code>asset</code> (case insensitive, plural
allowed)</li>
<li>whose name contains some variation of <code>cash</code>, <code>bank</code>, <code>checking</code> or
<code>saving</code>.</li>
</ul>
<p>More precisely: all accounts matching this case insensitive regular
expression:</p>
<p><code>^assets?(:.+)?:(cash|bank|che(ck|que?)(ing)?|savings?|currentcash)(:|$)</code></p>
<p>and their subaccounts.</p>
<p>An example cashflow report:</p>
<pre><code class="language-cli">$ hledger cashflow
Cashflow Statement

Cash flows:
                 $-1  assets
                  $1    bank:saving
                 $-2    cash
--------------------
                 $-1

Total:
--------------------
                 $-1
</code></pre>
<p>This command is a higher-level variant of the <a href="#balance"><code>balance</code></a>
command, and supports many of that command's features, such as
multi-period reports. It is similar to
<code>hledger balance assets not:fixed not:investment not:receivable</code>, but
with smarter account detection.</p>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options The output formats supported
are <code>txt</code>, <code>csv</code>, <code>tsv</code>, <code>html</code>, and (experimental) <code>json</code>.</p>
<h3 id="check"><a class="header" href="#check">check</a></h3>
<p>Check for various kinds of errors in your data.</p>
<p>hledger provides a number of built-in error checks to help prevent
problems in your data. Some of these are run automatically; or, you can
use this <code>check</code> command to run them on demand, with no output and a
zero exit code if all is well. Specify their names (or a prefix) as
argument(s).</p>
<p>Some examples:</p>
<pre><code class="language-cli">hledger check      # basic checks
hledger check -s   # basic + strict checks
hledger check ordereddates payees  # basic + two other checks
</code></pre>
<p>If you are an Emacs user, you can also configure flycheck-hledger to run
these checks, providing instant feedback as you edit the journal.</p>
<p>Here are the checks currently available:</p>
<h4 id="default-checks"><a class="header" href="#default-checks">Default checks</a></h4>
<p>These checks are run automatically by (almost) all hledger commands:</p>
<ul>
<li>
<p><strong>parseable</strong> - data files are in a supported
<a href="hledger.html#data-formats">format</a>, with no syntax errors and no
invalid include directives.</p>
</li>
<li>
<p><strong>autobalanced</strong> - all transactions are
<a href="hledger.html#postings">balanced</a>, after converting to cost. Missing
amounts and missing <a href="#costs">costs</a> are inferred automatically where
possible.</p>
</li>
<li>
<p><strong>assertions</strong> - all <a href="#balance-assertions">balance assertions</a> in
the journal are passing. (This check can be disabled with
<code>-I</code>/<code>--ignore-assertions</code>.)</p>
</li>
</ul>
<h4 id="strict-checks"><a class="header" href="#strict-checks">Strict checks</a></h4>
<p>These additional checks are run when the <code>-s</code>/<code>--strict</code> (<a href="#strict-mode">strict
mode</a>) flag is used. Or, they can be run by giving their
names as arguments to <code>check</code>:</p>
<ul>
<li>
<p><strong>balanced</strong> - all transactions are balanced after converting to
cost, without inferring missing costs. If conversion costs are
required, they must be explicit.</p>
</li>
<li>
<p><strong>accounts</strong> - all account names used by transactions <a href="hledger.html#account-error-checking">have been
declared</a></p>
</li>
<li>
<p><strong>commodities</strong> - all commodity symbols used <a href="hledger.html#commodity-error-checking">have been
declared</a></p>
</li>
</ul>
<h4 id="other-checks"><a class="header" href="#other-checks">Other checks</a></h4>
<p>These checks can be run only by giving their names as arguments to
<code>check</code>. They are more specialised and not desirable for everyone:</p>
<ul>
<li>
<p><strong>ordereddates</strong> - transactions are ordered by date within each file</p>
</li>
<li>
<p><strong>payees</strong> - all payees used by transactions <a href="#payee-directive">have been
declared</a></p>
</li>
<li>
<p><strong>recentassertions</strong> - all accounts with balance assertions have a
balance assertion within 7 days of their latest posting</p>
</li>
<li>
<p><strong>tags</strong> - all tags used by transactions <a href="#tag-directive">have been
declared</a></p>
</li>
<li>
<p><strong>uniqueleafnames</strong> - all account leaf names are unique</p>
</li>
</ul>
<h4 id="custom-checks"><a class="header" href="#custom-checks">Custom checks</a></h4>
<p>A few more checks are are available as separate <a href="#add-on-commands">add-on
commands</a>, in
<a href="https://github.com/simonmichael/hledger/tree/master/bin">https://github.com/simonmichael/hledger/tree/master/bin</a>:</p>
<ul>
<li>
<p><strong>hledger-check-tagfiles</strong> - all tag values containing / (a forward
slash) exist as file paths</p>
</li>
<li>
<p><strong>hledger-check-fancyassertions</strong> - more complex balance assertions
are passing</p>
</li>
</ul>
<p>You could make similar scripts to perform your own custom checks. See:
Cookbook -&gt; <a href="scripting.html">Scripting</a>.</p>
<h4 id="more-about-specific-checks"><a class="header" href="#more-about-specific-checks">More about specific checks</a></h4>
<p><code>hledger check recentassertions</code> will complain if any balance-asserted
account has postings more than 7 days after its latest balance
assertion. This aims to prevent the situation where you are regularly
updating your journal, but forgetting to check your balances against the
real world, then one day must dig back through months of data to find an
error. It assumes that adding a balance assertion requires/reminds you
to check the real-world balance. (That may not be true if you
auto-generate balance assertions from bank data; in that case, I
recommend to import transactions uncleared, and when you manually review
and clear them, also check the latest assertion against the real-world
balance.)</p>
<h3 id="close"><a class="header" href="#close">close</a></h3>
<p>(equity)</p>
<p>Generate transactions which transfer account balances to and/or from
another account (typically equity). This can be useful for migrating
balances to a new journal file, or for merging earnings into equity at
end of accounting period.</p>
<p>By default, it prints a transaction that zeroes out ALE accounts (asset,
liability, equity accounts; this requires account types to be
configured); or if ACCTQUERY is provided, the accounts matched by that.</p>
<p><em>(experimental)</em></p>
<p>This command has four main modes, corresponding to the most common use
cases:</p>
<ol>
<li>
<p>With <code>--close</code> (default), it prints a &quot;closing balances&quot;
transaction that zeroes out ALE (asset, liability, equity) accounts
by default (this requires <a href="hledger.html#account-types">account types</a>
to be inferred or declared); or, the accounts matched by the
provided ACCTQUERY arguments.</p>
</li>
<li>
<p>With <code>--open</code>, it prints an opposite &quot;opening balances&quot;
transaction that restores those balances from zero. This is similar
to Ledger's equity command.</p>
</li>
<li>
<p>With <code>--migrate</code>, it prints both the closing and opening
transactions. This is the preferred way to migrate balances to a new
file: run <code>hledger close --migrate</code>, add the closing transaction at
the end of the old file, and add the opening transaction at the
start of the new file. The matching closing/opening transactions
cancel each other out, preserving correct balances during multi-file
reporting.</p>
</li>
<li>
<p>With <code>--retain</code>, it prints a &quot;retain earnings&quot; transaction that
transfers RX (revenue and expense) balances to
<code>equity:retained earnings</code>. Businesses traditionally do this at the
end of each accounting period; it is less necessary with
computer-based accounting, but it could still be useful if you want
to see the accounting equation (A=L+E) satisfied.</p>
</li>
</ol>
<p>In all modes, the defaults can be overridden:</p>
<ul>
<li>the transaction descriptions can be changed with <code>--close-desc=DESC</code>
and <code>--open-desc=DESC</code></li>
<li>the account to transfer to/from can be changed with
<code>--close-acct=ACCT</code> and <code>--open-acct=ACCT</code></li>
<li>the accounts to be closed/opened can be changed with <code>ACCTQUERY</code>
(account query arguments).</li>
<li>the closing/opening dates can be changed with <code>-e DATE</code> (a report
end date)</li>
</ul>
<p>By default just one destination/source posting will be used, with its
amount left implicit. With <code>--x/--explicit</code>, the amount will be shown
explicitly, and if it involves multiple commodities, a separate posting
will be generated for each of them (similar to <code>print -x</code>).</p>
<p>With <code>--show-costs</code>, any amount costs are shown, with separate postings
for each cost. This is currently the best way to view investment lots.
If you have many currency conversion or investment transactions, it can
generate very large journal entries.</p>
<p>With <code>--interleaved</code>, each individual transfer is shown with source and
destination postings next to each other. This could be useful for
troubleshooting.</p>
<p>The default closing date is yesterday, or the journal's end date,
whichever is later. You can change this by specifying a <a href="#report-start--end-date">report end
date</a> with <code>-e</code>. The last day of the report
period will be the closing date, eg <code>-e 2024</code> means &quot;close on
2023-12-31&quot;. The opening date is always the day after the closing date.</p>
<h4 id="close-and-balance-assertions"><a class="header" href="#close-and-balance-assertions">close and balance assertions</a></h4>
<p>Balance assertions will be generated, verifying that the accounts have
been reset to zero (and then restored to their previous balances, if
there is an opening transaction).</p>
<p>These provide useful error checking, but you can ignore them temporarily
with <code>-I</code>, or remove them if you prefer.</p>
<p>You probably should avoid filtering transactions by status or realness
(<code>-C</code>, <code>-R</code>, <code>status:</code>), or generating postings (<code>--auto</code>), with this
command, since the balance assertions would depend on these.</p>
<p>Note custom posting dates spanning the file boundary will disrupt the
balance assertions:</p>
<pre><code class="language-journal">2023-12-30 a purchase made in december, cleared in january
    expenses:food          5
    assets:bank:checking  -5  ; date: 2023-01-02
</code></pre>
<p>To solve that you can transfer the money to and from a temporary
account, in effect splitting the multi-day transaction into two
single-day transactions:</p>
<pre><code class="language-journal">; in 2022.journal:
2022-12-30 a purchase made in december, cleared in january
    expenses:food          5
    equity:pending        -5

; in 2023.journal:
2023-01-02 last year's transaction cleared
    equity:pending         5 = 0
    assets:bank:checking  -5
</code></pre>
<h4 id="example-retain-earnings"><a class="header" href="#example-retain-earnings">Example: retain earnings</a></h4>
<p>Record 2022's revenues/expenses as retained earnings on 2022-12-31,
appending the generated transaction to the journal:</p>
<pre><code class="language-cli">$ hledger close --retain -f 2022.journal -p 2022 &gt;&gt; 2022.journal
</code></pre>
<p>Note 2022's income statement will now show only zeroes, because
revenues and expenses have been moved entirely to equity. To see them
again, you could exclude the retain transaction:</p>
<pre><code class="language-cli">$ hledger -f 2022.journal is not:desc:'retain earnings'
</code></pre>
<h4 id="example-migrate-balances-to-a-new-file"><a class="header" href="#example-migrate-balances-to-a-new-file">Example: migrate balances to a new file</a></h4>
<p>Close assets/liabilities/equity on 2022-12-31 and re-open them on
2023-01-01:</p>
<pre><code class="language-cli">$ hledger close --migrate -f 2022.journal -p 2022
# copy/paste the closing transaction to the end of 2022.journal
# copy/paste the opening transaction to the start of 2023.journal
</code></pre>
<p>Now 2022's balance sheet will show only zeroes, indicating a balanced
accounting equation. (<a href="/investments.html#a-more-correct-entry">Unless</a>
you are using @/@@ notation - in that case, try adding --infer-equity.)
To see the end-of-year balances again, you could exclude the closing
transaction:</p>
<pre><code class="language-cli">$ hledger -f 2022.journal bs not:desc:'closing balances'
</code></pre>
<h4 id="example-excluding-closingopening-transactions"><a class="header" href="#example-excluding-closingopening-transactions">Example: excluding closing/opening transactions</a></h4>
<p>When combining many files for multi-year reports, the closing/opening
transactions cause some noise in transaction-oriented reports like
<code>print</code> and <code>register</code>. You can exclude them as shown above, but
<code>not:desc:...</code> is not ideal as it depends on consistent descriptions;
also you will want to avoid excluding the very first opening
transaction, which could be awkward. Here is one alternative, using
tags:</p>
<p>Add <code>clopen:</code> tags to all opening/closing balances transactions except
the first, like this:</p>
<pre><code class="language-journal">; 2021.journal
2021-06-01 first opening balances
...
2021-12-31 closing balances  ; clopen:2022
...
</code></pre>
<pre><code class="language-journal">; 2022.journal
2022-01-01 opening balances  ; clopen:2022
...
2022-12-31 closing balances  ; clopen:2023
...
</code></pre>
<pre><code class="language-journal">; 2023.journal
2023-01-01 opening balances  ; clopen:2023
...
</code></pre>
<p>Now, assuming a combined journal like:</p>
<pre><code class="language-journal">; all.journal
include 2021.journal
include 2022.journal
include 2023.journal
</code></pre>
<p>The <code>clopen:</code> tag can exclude all but the first opening transaction. To
show a clean multi-year checking register:</p>
<pre><code class="language-cli">$ hledger -f all.journal areg checking not:tag:clopen
</code></pre>
<p>And the year values allow more precision. To show 2022's year-end
balance sheet:</p>
<pre><code class="language-cli">$ hledger -f all.journal bs -e2023 not:tag:clopen=2023
</code></pre>
<h3 id="codes"><a class="header" href="#codes">codes</a></h3>
<p>List the codes seen in transactions, in the order parsed.</p>
<p>This command prints the value of each transaction's code field, in the
order transactions were parsed. The transaction code is an optional
value written in parentheses between the date and description, often
used to store a cheque number, order number or similar.</p>
<p>Transactions aren't required to have a code, and missing or empty codes
will not be shown by default. With the <code>-E</code>/<code>--empty</code> flag, they will be
printed as blank lines.</p>
<p>You can add a query to select a subset of transactions.</p>
<p>Examples:</p>
<pre><code class="language-journal">2022/1/1 (123) Supermarket   
 Food       $5.00
 Checking    

2022/1/2 (124) Post Office
 Postage    $8.32
 Checking

2022/1/3 Supermarket
 Food      $11.23
 Checking 

2022/1/4 (126) Post Office
 Postage    $3.21
 Checking
</code></pre>
<pre><code class="language-cli">$ hledger codes
123
124
126
</code></pre>
<pre><code class="language-cli">$ hledger codes -E
123
124

126
</code></pre>
<h3 id="commodities"><a class="header" href="#commodities">commodities</a></h3>
<p>List all commodity/currency symbols used or declared in the journal.</p>
<h3 id="demo"><a class="header" href="#demo">demo</a></h3>
<p>Play demos of hledger usage in the terminal, if asciinema is installed.</p>
<p>Run this command with no argument to list the demos. To play a demo,
write its number or a prefix or substring of its title. Tips:</p>
<p>Make your terminal window large enough to see the demo clearly.</p>
<p>Use the -s/--speed SPEED option to set your preferred playback speed,
eg <code>-s4</code> to play at 4x original speed or <code>-s.5</code> to play at half speed.
The default speed is 2x.</p>
<p>Other asciinema options can be added following a double dash, eg
<code>-- -i.1</code> to limit pauses or <code>-- -h</code> to list asciinema's other options.</p>
<p>During playback, several keys are available: SPACE to pause/unpause, .
to step forward (while paused), CTRL-c quit.</p>
<p>Examples:</p>
<pre><code class="language-cli">$ hledger demo               # list available demos
$ hledger demo 1             # play the first demo at default speed (2x)
$ hledger demo install -s4   # play the &quot;install&quot; demo at 4x speed
</code></pre>
<h3 id="descriptions"><a class="header" href="#descriptions">descriptions</a></h3>
<p>List the unique descriptions that appear in transactions.</p>
<p>This command lists the unique descriptions that appear in transactions,
in alphabetic order. You can add a query to select a subset of
transactions.</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger descriptions
Store Name
Gas Station | Petrol
Person A
</code></pre>
<h3 id="diff"><a class="header" href="#diff">diff</a></h3>
<p>Compares a particular account's transactions in two input files. It
shows any transactions to this account which are in one file but not in
the other.</p>
<p>More precisely, for each posting affecting this account in either file,
it looks for a corresponding posting in the other file which posts the
same amount to the same account (ignoring date, description, etc.) Since
postings not transactions are compared, this also works when multiple
bank transactions have been combined into a single journal entry.</p>
<p>This is useful eg if you have downloaded an account's transactions from
your bank (eg as CSV data). When hledger and your bank disagree about
the account balance, you can compare the bank data with your journal to
find out the cause.</p>
<p>Examples:</p>
<pre><code class="language-cli">$ hledger diff -f $LEDGER_FILE -f bank.csv assets:bank:giro 
These transactions are in the first file only:

2014/01/01 Opening Balances
    assets:bank:giro              EUR ...
    ...
    equity:opening balances       EUR -...

These transactions are in the second file only:
</code></pre>
<h3 id="files"><a class="header" href="#files">files</a></h3>
<p>List all files included in the journal. With a REGEX argument, only file
names matching the regular expression (case sensitive) are shown.</p>
<h3 id="help-1"><a class="header" href="#help-1">help</a></h3>
<p>Show the hledger user manual in the terminal, with <code>info</code>, <code>man</code>, or a
pager. With a TOPIC argument, open it at that topic if possible. TOPIC
can be any heading in the manual, or a heading prefix, case insensitive.
Eg: <code>commands</code>, <code>print</code>, <code>forecast</code>, <code>journal</code>, <code>amount</code>,
<code>&quot;auto postings&quot;</code>.</p>
<p>This command shows the hledger manual built in to your hledger version.
It can be useful when offline, or when you prefer the terminal to a web
browser, or when the appropriate hledger manual or viewing tools are not
installed on your system.</p>
<p>By default it chooses the best viewer found in $PATH, trying (in this
order): <code>info</code>, <code>man</code>, <code>$PAGER</code>, <code>less</code>, <code>more</code>. You can force the use
of info, man, or a pager with the <code>-i</code>, <code>-m</code>, or <code>-p</code> flags, If no
viewer can be found, or the command is run non-interactively, it just
prints the manual to stdout.</p>
<p>If using <code>info</code>, note that version 6 or greater is needed for TOPIC
lookup. If you are on mac you will likely have info 4.8, and should
consider installing a newer version, eg with <code>brew install texinfo</code>
(#1770).</p>
<p>Examples</p>
<pre><code class="language-cli">$ hledger help --help      # show how the help command works
$ hledger help             # show the hledger manual with info, man or $PAGER
$ hledger help journal     # show the journal topic in the hledger manual
$ hledger help -m journal  # show it with man, even if info is installed
</code></pre>
<h3 id="import"><a class="header" href="#import">import</a></h3>
<p>Read new transactions added to each FILE provided as arguments since
last run, and add them to the journal. Or with --dry-run, just print
the transactions that would be added. Or with --catchup, just mark all
of the FILEs' current transactions as imported, without importing them.</p>
<p>This command may append new transactions to the main journal file (which
should be in journal format). Existing transactions are not changed.
This is one of the few hledger commands that writes to the journal file
(see also <code>add</code>).</p>
<p>Unlike other hledger commands, with <code>import</code> the journal file is an
output file, and will be modified, though only by appending (existing
data will not be changed). The input files are specified as arguments,
so to import one or more CSV files to your main journal, you will run
<code>hledger import bank.csv</code> or perhaps <code>hledger import *.csv</code>.</p>
<p>Note you can import from any file format, though CSV files are the most
common import source, and these docs focus on that case.</p>
<h4 id="deduplication"><a class="header" href="#deduplication">Deduplication</a></h4>
<p><code>import</code> does <em>time-based deduplication</em>, to detect only the new
transactions since the last successful import. (This does not mean
&quot;ignore transactions that look the same&quot;, but rather &quot;ignore
transactions that have been seen before&quot;.) This is intended for when
you are periodically importing downloaded data, which may overlap with
previous downloads. Eg if every week (or every day) you download a
bank's last three months of CSV data, you can safely run
<code>hledger import thebank.csv</code> each time and only new transactions will be
imported.</p>
<p>Since the items being read (CSV records, eg) often do not come with
unique identifiers, hledger detects new transactions by date, assuming
that:</p>
<ol>
<li>new items always have the newest dates</li>
<li>item dates do not change across reads</li>
<li>and items with the same date remain in the same relative order
across reads.</li>
</ol>
<p>These are often true of CSV files representing transactions, or true
enough so that it works pretty well in practice. 1 is important, but
violations of 2 and 3 amongst the old transactions won't matter (and if
you import often, the new transactions will be few, so less likely to be
the ones affected).</p>
<p>hledger remembers the latest date processed in each input file by saving
a hidden &quot;.latest.FILE&quot; file in FILE's directory (after a succesful
import).</p>
<p>Eg when reading <code>finance/bank.csv</code>, it will look for and update the
<code>finance/.latest.bank.csv</code> state file. The format is simple: one or more
lines containing the same ISO-format date (YYYY-MM-DD), meaning &quot;I have
processed transactions up to this date, and this many of them on that
date.&quot; Normally you won't see or manipulate these state files
yourself. But if needed, you can delete them to reset the state (making
all transactions &quot;new&quot;), or you can construct them to &quot;catch up&quot; to
a certain date.</p>
<p>Note deduplication (and updating of state files) can also be done by
<a href="#print"><code>print --new</code></a>, but this is less often used.</p>
<p>Related: <a href="#deduplicating-importing">CSV &gt; Working with CSV &gt; Deduplicating,
importing</a>.</p>
<h4 id="import-testing"><a class="header" href="#import-testing">Import testing</a></h4>
<p>With <code>--dry-run</code>, the transactions that will be imported are printed to
the terminal, without updating your journal or state files. The output
is valid journal format, like the print command, so you can re-parse it.
Eg, to see any importable transactions which CSV rules have not
categorised:</p>
<pre><code class="language-cli">$ hledger import --dry bank.csv | hledger -f- -I print unknown
</code></pre>
<p>or (live updating):</p>
<pre><code class="language-cli">$ ls bank.csv* | entr bash -c 'echo ====; hledger import --dry bank.csv | hledger -f- -I print unknown'
</code></pre>
<p>Note: when importing from multiple files at once, it's currently
possible for some .latest files to be updated successfully, while the
actual import fails because of a problem in one of the files, leaving
them out of sync (and causing some transactions to be missed). To
prevent this, do a --dry-run first and fix any problems before the real
import.</p>
<h4 id="importing-balance-assignments"><a class="header" href="#importing-balance-assignments">Importing balance assignments</a></h4>
<p>Entries added by import will have their posting amounts made explicit
(like <code>hledger print -x</code>). This means that any <a href="https://hledger.org/hledger.html#balance-assignments">balance
assignments</a> in
imported files must be evaluated; but, imported files don't get to see
the main file's account balances. As a result, importing entries with
balance assignments (eg from an institution that provides only balances
and not posting amounts) will probably generate incorrect posting
amounts. To avoid this problem, use print instead of import:</p>
<pre><code class="language-cli">$ hledger print IMPORTFILE [--new] &gt;&gt; $LEDGER_FILE
</code></pre>
<p>(If you think import should leave amounts implicit like print does,
please test it and send a pull request.)</p>
<h4 id="commodity-display-styles"><a class="header" href="#commodity-display-styles">Commodity display styles</a></h4>
<p>Imported amounts will be formatted according to the canonical <a href="hledger.html#commodity-display-style">commodity
styles</a> (declared or inferred) in
the main journal file.</p>
<h3 id="incomestatement"><a class="header" href="#incomestatement">incomestatement</a></h3>
<p>(is)</p>
<p>This command displays an <a href="https://en.wikipedia.org/wiki/Income_statement">income
statement</a>, showing
revenues and expenses during one or more periods. Amounts are shown with
normal positive sign, as in conventional financial statements.</p>
<p>This report shows accounts declared with the <code>Revenue</code> or <code>Expense</code> type
(see <a href="https://hledger.org/hledger.html#account-types">account types</a>).
Or if no such accounts are declared, it shows top-level accounts named
<code>revenue</code> or <code>income</code> or <code>expense</code> (case insensitive, plurals allowed)
and their subaccounts.</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger incomestatement
Income Statement

Revenues:
                 $-2  income
                 $-1    gifts
                 $-1    salary
--------------------
                 $-2

Expenses:
                  $2  expenses
                  $1    food
                  $1    supplies
--------------------
                  $2

Total:
--------------------
                   0
</code></pre>
<p>This command is a higher-level variant of the <a href="#balance"><code>balance</code></a>
command, and supports many of that command's features, such as
multi-period reports. It is similar to
<code>hledger balance '(revenues|income)' expenses</code>, but with smarter account
detection, and revenues/income displayed with their sign flipped.</p>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options The output formats supported
are <code>txt</code>, <code>csv</code>, <code>tsv</code>, <code>html</code>, and (experimental) <code>json</code>.</p>
<h3 id="notes"><a class="header" href="#notes">notes</a></h3>
<p>List the unique notes that appear in transactions.</p>
<p>This command lists the unique notes that appear in transactions, in
alphabetic order. You can add a query to select a subset of
transactions. The note is the part of the transaction description after
a | character (or if there is no |, the whole description).</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger notes
Petrol
Snacks
</code></pre>
<h3 id="payees"><a class="header" href="#payees">payees</a></h3>
<p>List the unique payee/payer names that appear in transactions.</p>
<p>This command lists unique payee/payer names which have been declared
with payee directives (--declared), used in transaction descriptions
(--used), or both (the default).</p>
<p>The payee/payer is the part of the transaction description before a |
character (or if there is no |, the whole description).</p>
<p>You can add query arguments to select a subset of transactions. This
implies --used.</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger payees
Store Name
Gas Station
Person A
</code></pre>
<h3 id="prices"><a class="header" href="#prices">prices</a></h3>
<p>Print the <a href="hledger.html#p-directive">market prices</a> declared with P
directives. With --infer-market-prices, also show any additional prices
inferred from <a href="hledger.html#costs">costs</a>. With --show-reverse, also show
additional prices inferred by reversing known prices.</p>
<p>Price amounts are always displayed with their full precision, except for
reverse prices which are limited to 8 decimal digits.</p>
<p>Prices can be filtered by a date:, cur: or amt: query.</p>
<p>Generally if you run this command with --infer-market-prices
--show-reverse, it will show the same prices used internally to
calculate value reports. But if in doubt, you can inspect those directly
by running the value report with --debug=2.</p>
<h3 id="print"><a class="header" href="#print">print</a></h3>
<p>Show transaction journal entries, sorted by date.</p>
<p>The print command displays full journal entries (transactions) from the
journal file, sorted by date (or with <code>--date2</code>, by <a href="#secondary-dates">secondary
date</a>).</p>
<p>Directives and inter-transaction comments are not shown, currently. This
means the print command is somewhat lossy, and if you are using it to
reformat/regenerate your journal you should take care to also copy over
the directives and inter-transaction comments.</p>
<p>Eg:</p>
<pre><code class="language-cli">$ hledger print -f examples/sample.journal date:200806
2008/06/01 gift
    assets:bank:checking            $1
    income:gifts                   $-1

2008/06/02 save
    assets:bank:saving              $1
    assets:bank:checking           $-1

2008/06/03 * eat &amp; shop
    expenses:food                $1
    expenses:supplies            $1
    assets:cash                 $-2
</code></pre>
<h4 id="print-explicitness"><a class="header" href="#print-explicitness">print explicitness</a></h4>
<p>Normally, whether posting amounts are implicit or explicit is preserved.
For example, when an amount is omitted in the journal, it will not
appear in the output. Similarly, if a conversion cost is implied but not
written, it will not appear in the output.</p>
<p>You can use the <code>-x</code>/<code>--explicit</code> flag to force explicit display of all
amounts and costs. This can be useful for troubleshooting or for making
your journal more readable and robust against data entry errors. <code>-x</code> is
also implied by using any of <code>-B</code>,<code>-V</code>,<code>-X</code>,<code>--value</code>.</p>
<p>The <code>-x</code>/<code>--explicit</code> flag will cause any postings with a
multi-commodity amount (which can arise when a multi-commodity
transaction has an implicit amount) to be split into multiple
single-commodity postings, keeping the output parseable.</p>
<h4 id="print-amount-style"><a class="header" href="#print-amount-style">print amount style</a></h4>
<p>Amounts are shown right-aligned within each transaction (but not aligned
across all transactions; you can do that with ledger-mode in Emacs).</p>
<p>Amounts will be (mostly) normalised to their <a href="#commodity-display-styles">commodity display
style</a>: their symbol placement, decimal mark,
and digit group marks will be made consistent. By default, decimal
digits are shown as they are written in the journal.</p>
<p>With the <code>--round</code> option, <code>print</code> will try increasingly hard to display
decimal digits according to the <a href="#commodity-display-style">commodity display
styles</a>:</p>
<ul>
<li><code>--round=none</code> show amounts with original precisions (default)</li>
<li><code>--round=soft</code> add/remove decimal zeros in amounts (except costs)</li>
<li><code>--round=hard</code> round amounts (except costs), possibly hiding
significant digits</li>
<li><code>--round=all</code> round all amounts and costs</li>
</ul>
<p><code>soft</code> is good for non-lossy cleanup, formatting amounts more
consistently where it's safe to do so.</p>
<p><code>hard</code> and <code>all</code> can cause <code>print</code> to show invalid unbalanced journal
entries; they may be useful eg for stronger cleanup, with manual fixups
when needed.</p>
<h4 id="print-parseability"><a class="header" href="#print-parseability">print parseability</a></h4>
<p>print's output is usually a valid <a href="#journal">hledger journal</a>, and you
can process it again with a second hledger command. This can be useful
for certain kinds of search (though the same can be achieved with
<code>expr:</code> queries now):</p>
<pre><code class="language-cli"># Show running total of food expenses paid from cash.
# -f- reads from stdin. -I/--ignore-assertions is sometimes needed.
$ hledger print assets:cash | hledger -f- -I reg expenses:food
</code></pre>
<p>There are some situations where print's output can become unparseable:</p>
<ul>
<li><a href="#value-reporting">Value reporting</a> affects posting amounts but not
<a href="#balance-assertions">balance assertion</a> or <a href="#balance-assignments">balance
assignment</a> amounts, potentially causing those
to <a href="https://github.com/simonmichael/hledger/issues/1429">fail</a>.</li>
<li><a href="#auto-postings">Auto postings</a> can generate postings with <a href="https://github.com/simonmichael/hledger/issues/1276">too many
missing
amounts</a>.</li>
<li><a href="#aliases-can-generate-bad-account-names">Account aliases can generate bad account
names</a>.</li>
</ul>
<h4 id="print-other-features"><a class="header" href="#print-other-features">print, other features</a></h4>
<p>With <code>-B</code>/<code>--cost</code>, amounts with
<a href="https://hledger.org/hledger.html#costs">costs</a> are shown converted to
cost.</p>
<p>With <code>--new</code>, print shows only transactions it has not seen on a
previous run. This uses the same deduplication system as the
<a href="#import"><code>import</code></a> command. (See import's docs for details.)</p>
<p>With <code>-m DESC</code>/<code>--match=DESC</code>, print shows one recent transaction whose
description is most similar to DESC. DESC should contain at least two
characters. If there is no similar-enough match, no transaction will be
shown and the program exit code will be non-zero.</p>
<h4 id="print-output-format"><a class="header" href="#print-output-format">print output format</a></h4>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options The output formats supported
are <code>txt</code>, <code>beancount</code>, <code>csv</code>, <code>tsv</code>, <code>json</code> and <code>sql</code>.</p>
<p><em>Experimental:</em> The <code>beancount</code> format tries to produce
Beancount-compatible output, as follows:</p>
<ul>
<li>Transaction and postings with unmarked status are converted to
cleared (<code>*</code>) status.</li>
<li>Transactions' payee and note are backslash-escaped and
double-quote-escaped and wrapped in double quotes.</li>
<li>Transaction tags are copied to Beancount #tag format.</li>
<li>Commodity symbols are converted to upper case, and a small number of
currency symbols like <code>$</code> are converted to the corresponding
currency names.</li>
<li>Account name parts are capitalised and unsupported characters are
replaced with <code>-</code>. If an account name part does not begin with a
letter, or if the first part is not Assets, Liabilities, Equity,
Income, or Expenses, an error is raised. (Use <code>--alias</code> options to
bring your accounts into compliance.)</li>
<li>An <code>open</code> directive is generated for each account used, on the
earliest transaction date.</li>
</ul>
<p>Some limitations:</p>
<ul>
<li>Balance assertions are removed.</li>
<li>Balance assignments become missing amounts.</li>
<li>Virtual and balanced virtual postings become regular postings.</li>
<li>Directives are not converted.</li>
</ul>
<p>Here's an example of print's CSV output:</p>
<pre><code class="language-cli">$ hledger print -Ocsv
&quot;txnidx&quot;,&quot;date&quot;,&quot;date2&quot;,&quot;status&quot;,&quot;code&quot;,&quot;description&quot;,&quot;comment&quot;,&quot;account&quot;,&quot;amount&quot;,&quot;commodity&quot;,&quot;credit&quot;,&quot;debit&quot;,&quot;posting-status&quot;,&quot;posting-comment&quot;
&quot;1&quot;,&quot;2008/01/01&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;income&quot;,&quot;&quot;,&quot;assets:bank:checking&quot;,&quot;1&quot;,&quot;$&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;
&quot;1&quot;,&quot;2008/01/01&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;income&quot;,&quot;&quot;,&quot;income:salary&quot;,&quot;-1&quot;,&quot;$&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;
&quot;2&quot;,&quot;2008/06/01&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;gift&quot;,&quot;&quot;,&quot;assets:bank:checking&quot;,&quot;1&quot;,&quot;$&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;
&quot;2&quot;,&quot;2008/06/01&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;gift&quot;,&quot;&quot;,&quot;income:gifts&quot;,&quot;-1&quot;,&quot;$&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;
&quot;3&quot;,&quot;2008/06/02&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;save&quot;,&quot;&quot;,&quot;assets:bank:saving&quot;,&quot;1&quot;,&quot;$&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;
&quot;3&quot;,&quot;2008/06/02&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;save&quot;,&quot;&quot;,&quot;assets:bank:checking&quot;,&quot;-1&quot;,&quot;$&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;
&quot;4&quot;,&quot;2008/06/03&quot;,&quot;&quot;,&quot;*&quot;,&quot;&quot;,&quot;eat &amp; shop&quot;,&quot;&quot;,&quot;expenses:food&quot;,&quot;1&quot;,&quot;$&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;
&quot;4&quot;,&quot;2008/06/03&quot;,&quot;&quot;,&quot;*&quot;,&quot;&quot;,&quot;eat &amp; shop&quot;,&quot;&quot;,&quot;expenses:supplies&quot;,&quot;1&quot;,&quot;$&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;
&quot;4&quot;,&quot;2008/06/03&quot;,&quot;&quot;,&quot;*&quot;,&quot;&quot;,&quot;eat &amp; shop&quot;,&quot;&quot;,&quot;assets:cash&quot;,&quot;-2&quot;,&quot;$&quot;,&quot;2&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;
&quot;5&quot;,&quot;2008/12/31&quot;,&quot;&quot;,&quot;*&quot;,&quot;&quot;,&quot;pay off&quot;,&quot;&quot;,&quot;liabilities:debts&quot;,&quot;1&quot;,&quot;$&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;
&quot;5&quot;,&quot;2008/12/31&quot;,&quot;&quot;,&quot;*&quot;,&quot;&quot;,&quot;pay off&quot;,&quot;&quot;,&quot;assets:bank:checking&quot;,&quot;-1&quot;,&quot;$&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;
</code></pre>
<ul>
<li>There is one CSV record per posting, with the parent transaction's
fields repeated.</li>
<li>The &quot;txnidx&quot; (transaction index) field shows which postings belong
to the same transaction. (This number might change if transactions
are reordered within the file, files are parsed/included in a
different order, etc.)</li>
<li>The amount is separated into &quot;commodity&quot; (the symbol) and
&quot;amount&quot; (numeric quantity) fields.</li>
<li>The numeric amount is repeated in either the &quot;credit&quot; or &quot;debit&quot;
column, for convenience. (Those names are not accurate in the
accounting sense; it just puts negative amounts under credit and
zero or greater amounts under debit.)</li>
</ul>
<h3 id="register"><a class="header" href="#register">register</a></h3>
<p>(reg)</p>
<p>Show postings and their running total.</p>
<p>The register command displays matched postings, across all accounts, in
date order, with their running total or running historical balance. (See
also the <a href="#aregister"><code>aregister</code></a> command, which shows matched
transactions in a specific account.)</p>
<p>register normally shows line per posting, but note that multi-commodity
amounts will occupy multiple lines (one line per commodity).</p>
<p>It is typically used with a <a href="#queries">query</a> selecting a particular
account, to see that account's activity:</p>
<pre><code class="language-cli">$ hledger register checking
2008/01/01 income               assets:bank:checking            $1           $1
2008/06/01 gift                 assets:bank:checking            $1           $2
2008/06/02 save                 assets:bank:checking           $-1           $1
2008/12/31 pay off              assets:bank:checking           $-1            0
</code></pre>
<p>With <code>--date2</code>, it shows and sorts by secondary date instead.</p>
<p>For performance reasons, column widths are chosen based on the first
1000 lines; this means unusually wide values in later lines can cause
visual discontinuities as column widths are adjusted. If you want to
ensure perfect alignment, at the cost of more time and memory, use the
<code>--align-all</code> flag.</p>
<p>The <code>--historical</code>/<code>-H</code> flag adds the balance from any undisplayed prior
postings to the running total. This is useful when you want to see only
recent activity, with a historically accurate running balance:</p>
<pre><code class="language-cli">$ hledger register checking -b 2008/6 --historical
2008/06/01 gift                 assets:bank:checking            $1           $2
2008/06/02 save                 assets:bank:checking           $-1           $1
2008/12/31 pay off              assets:bank:checking           $-1            0
</code></pre>
<p>The <code>--depth</code> option limits the amount of sub-account detail displayed.</p>
<p>The <code>--average</code>/<code>-A</code> flag shows the running average posting amount
instead of the running total (so, the final number displayed is the
average for the whole report period). This flag implies <code>--empty</code> (see
below). It is affected by <code>--historical</code>. It works best when showing
just one account and one commodity.</p>
<p>The <code>--related</code>/<code>-r</code> flag shows the <em>other</em> postings in the transactions
of the postings which would normally be shown.</p>
<p>The <code>--invert</code> flag negates all amounts. For example, it can be used on
an income account where amounts are normally displayed as negative
numbers. It's also useful to show postings on the checking account
together with the related account:</p>
<pre><code class="language-cli">$ hledger register --related --invert assets:checking
</code></pre>
<p>With a <a href="#reporting-interval">reporting interval</a>, register shows summary
postings, one per interval, aggregating the postings to each account:</p>
<pre><code class="language-cli">$ hledger register --monthly income
2008/01                 income:salary                          $-1          $-1
2008/06                 income:gifts                           $-1          $-2
</code></pre>
<p>Periods with no activity, and summary postings with a zero amount, are
not shown by default; use the <code>--empty</code>/<code>-E</code> flag to see them:</p>
<pre><code class="language-cli">$ hledger register --monthly income -E
2008/01                 income:salary                          $-1          $-1
2008/02                                                          0          $-1
2008/03                                                          0          $-1
2008/04                                                          0          $-1
2008/05                                                          0          $-1
2008/06                 income:gifts                           $-1          $-2
2008/07                                                          0          $-2
2008/08                                                          0          $-2
2008/09                                                          0          $-2
2008/10                                                          0          $-2
2008/11                                                          0          $-2
2008/12                                                          0          $-2
</code></pre>
<p>Often, you'll want to see just one line per interval. The <code>--depth</code>
option helps with this, causing subaccounts to be aggregated:</p>
<pre><code class="language-cli">$ hledger register --monthly assets --depth 1h
2008/01                 assets                                  $1           $1
2008/06                 assets                                 $-1            0
2008/12                 assets                                 $-1          $-1
</code></pre>
<p>Note when using report intervals, if you specify start/end dates these
will be adjusted outward if necessary to contain a whole number of
intervals. This ensures that the first and last intervals are full
length and comparable to the others in the report.</p>
<p>With <code>-m DESC</code>/<code>--match=DESC</code>, register does a fuzzy search for one
recent posting whose description is most similar to DESC. DESC should
contain at least two characters. If there is no similar-enough match, no
posting will be shown and the program exit code will be non-zero.</p>
<h4 id="custom-register-output"><a class="header" href="#custom-register-output">Custom register output</a></h4>
<p>register uses the full terminal width by default, except on windows. You
can override this by setting the <code>COLUMNS</code> environment variable (not a
bash shell variable) or by using the <code>--width</code>/<code>-w</code> option.</p>
<p>The description and account columns normally share the space equally
(about half of (width - 40) each). You can adjust this by adding a
description width as part of --width's argument, comma-separated:
<code>--width W,D</code> . Here's a diagram (won't display correctly in --help):</p>
<pre><code>&lt;--------------------------------- width (W) ----------------------------------&gt;
date (10)  description (D)       account (W-41-D)     amount (12)   balance (12)
DDDDDDDDDD dddddddddddddddddddd  aaaaaaaaaaaaaaaaaaa  AAAAAAAAAAAA  AAAAAAAAAAAA
</code></pre>
<p>and some examples:</p>
<pre><code class="language-cli">$ hledger reg                     # use terminal width (or 80 on windows)
$ hledger reg -w 100              # use width 100
$ COLUMNS=100 hledger reg         # set with one-time environment variable
$ export COLUMNS=100; hledger reg # set till session end (or window resize)
$ hledger reg -w 100,40           # set overall width 100, description width 40
$ hledger reg -w $COLUMNS,40      # use terminal width, &amp; description width 40
</code></pre>
<p>This command also supports the <a href="hledger.html#output-destination">output
destination</a> and <a href="hledger.html#output-format">output
format</a> options The output formats supported
are <code>txt</code>, <code>csv</code>, <code>tsv</code>, and (experimental) <code>json</code>.</p>
<h3 id="rewrite"><a class="header" href="#rewrite">rewrite</a></h3>
<p>Print all transactions, rewriting the postings of matched transactions.
For now the only rewrite available is adding new postings, like print
--auto.</p>
<p>This is a start at a generic rewriter of transaction entries. It reads
the default journal and prints the transactions, like print, but adds
one or more specified postings to any transactions matching QUERY. The
posting amounts can be fixed, or a multiplier of the existing
transaction's first posting amount.</p>
<p>Examples:</p>
<pre><code class="language-cli">$ hledger-rewrite.hs ^income --add-posting '(liabilities:tax)  *.33  ; income tax' --add-posting '(reserve:gifts)  $100'
$ hledger-rewrite.hs expenses:gifts --add-posting '(reserve:gifts)  *-1&quot;'
$ hledger-rewrite.hs -f rewrites.hledger
</code></pre>
<p>rewrites.hledger may consist of entries like:</p>
<pre><code class="language-journal">= ^income amt:&lt;0 date:2017
  (liabilities:tax)  *0.33  ; tax on income
  (reserve:grocery)  *0.25  ; reserve 25% for grocery
  (reserve:)  *0.25  ; reserve 25% for grocery
</code></pre>
<p>Note the single quotes to protect the dollar sign from bash, and the two
spaces between account and amount.</p>
<p>More:</p>
<pre><code class="language-cli">$ hledger rewrite -- [QUERY]        --add-posting &quot;ACCT  AMTEXPR&quot; ...
$ hledger rewrite -- ^income        --add-posting '(liabilities:tax)  *.33'
$ hledger rewrite -- expenses:gifts --add-posting '(budget:gifts)  *-1&quot;'
$ hledger rewrite -- ^income        --add-posting '(budget:foreign currency)  *0.25 JPY; diversify'
</code></pre>
<p>Argument for <code>--add-posting</code> option is a usual posting of transaction
with an exception for amount specification. More precisely, you can use
<code>'*'</code> (star symbol) before the amount to indicate that that this is a
factor for an amount of original matched posting. If the amount includes
a commodity name, the new posting amount will be in the new commodity;
otherwise, it will be in the matched posting amount's commodity.</p>
<h4 id="re-write-rules-in-a-file"><a class="header" href="#re-write-rules-in-a-file">Re-write rules in a file</a></h4>
<p>During the run this tool will execute so called <a href="http://ledger-cli.org/3.0/doc/ledger3.html#Automated-Transactions">&quot;Automated
Transactions&quot;</a>
found in any journal it process. I.e instead of specifying this
operations in command line you can put them in a journal file.</p>
<pre><code class="language-cli">$ rewrite-rules.journal
</code></pre>
<p>Make contents look like this:</p>
<pre><code class="language-journal">= ^income
    (liabilities:tax)  *.33

= expenses:gifts
    budget:gifts  *-1
    assets:budget  *1
</code></pre>
<p>Note that <code>'='</code> (equality symbol) that is used instead of date in
transactions you usually write. It indicates the query by which you want
to match the posting to add new ones.</p>
<pre><code class="language-cli">$ hledger rewrite -- -f input.journal -f rewrite-rules.journal &gt; rewritten-tidy-output.journal
</code></pre>
<p>This is something similar to the commands pipeline:</p>
<pre><code class="language-cli">$ hledger rewrite -- -f input.journal '^income' --add-posting '(liabilities:tax)  *.33' \
  | hledger rewrite -- -f - expenses:gifts      --add-posting 'budget:gifts  *-1'       \
                                                --add-posting 'assets:budget  *1'       \
  &gt; rewritten-tidy-output.journal
</code></pre>
<p>It is important to understand that relative order of such entries in
journal is important. You can re-use result of previously added
postings.</p>
<h4 id="diff-output-format"><a class="header" href="#diff-output-format">Diff output format</a></h4>
<p>To use this tool for batch modification of your journal files you may
find useful output in form of unified diff.</p>
<pre><code class="language-cli">$ hledger rewrite -- --diff -f examples/sample.journal '^income' --add-posting '(liabilities:tax)  *.33'
</code></pre>
<p>Output might look like:</p>
<pre><code>--- /tmp/examples/sample.journal
+++ /tmp/examples/sample.journal
@@ -18,3 +18,4 @@
 2008/01/01 income
-    assets:bank:checking  $1
+    assets:bank:checking            $1
     income:salary
+    (liabilities:tax)                0
@@ -22,3 +23,4 @@
 2008/06/01 gift
-    assets:bank:checking  $1
+    assets:bank:checking            $1
     income:gifts
+    (liabilities:tax)                0
</code></pre>
<p>If you'll pass this through <code>patch</code> tool you'll get transactions
containing the posting that matches your query be updated. Note that
multiple files might be update according to list of input files
specified via <code>--file</code> options and <code>include</code> directives inside of these
files.</p>
<p>Be careful. Whole transaction being re-formatted in a style of output
from <code>hledger print</code>.</p>
<p>See also:</p>
<p>https://github.com/simonmichael/hledger/issues/99</p>
<h4 id="rewrite-vs-print---auto"><a class="header" href="#rewrite-vs-print---auto">rewrite vs. print --auto</a></h4>
<p>This command predates print --auto, and currently does much the same
thing, but with these differences:</p>
<ul>
<li>
<p>with multiple files, rewrite lets rules in any file affect all other
files. print --auto uses standard directive scoping; rules affect
only child files.</p>
</li>
<li>
<p>rewrite's query limits which transactions can be rewritten; all are
printed. print --auto's query limits which transactions are
printed.</p>
</li>
<li>
<p>rewrite applies rules specified on command line or in the journal.
print --auto applies rules specified in the journal.</p>
</li>
</ul>
<h3 id="roi"><a class="header" href="#roi">roi</a></h3>
<p>Shows the time-weighted (TWR) and money-weighted (IRR) rate of return on
your investments.</p>
<p>At a minimum, you need to supply a query (which could be just an account
name) to select your investment(s) with <code>--inv</code>, and another query to
identify your profit and loss transactions with <code>--pnl</code>.</p>
<p>If you do not record changes in the value of your investment manually,
or do not require computation of time-weighted return (TWR), <code>--pnl</code>
could be an empty query (<code>--pnl &quot;&quot;</code> or <code>--pnl STR</code> where <code>STR</code> does not
match any of your accounts).</p>
<p>This command will compute and display the internalized rate of return
(IRR, also known as money-weighted rate of return) and time-weighted
rate of return (TWR) for your investments for the time period requested.
IRR is always annualized due to the way it is computed, but TWR is
reported both as a rate over the chosen reporting period and as an
annual rate.</p>
<p>Price directives will be taken into account if you supply appropriate
<code>--cost</code> or <code>--value</code> flags (see
<a href="https://hledger.org/hledger.html#valuation">VALUATION</a>).</p>
<p>Note, in some cases this report can fail, for these reasons:</p>
<ul>
<li>Error (NotBracketed): No solution for Internal Rate of Return (IRR).
Possible causes: IRR is huge (&gt;1000000%), balance of investment
becomes negative at some point in time.</li>
<li>Error (SearchFailed): Failed to find solution for Internal Rate of
Return (IRR). Either search does not converge to a solution, or
converges too slowly.</li>
</ul>
<p>Examples:</p>
<ul>
<li>
<p>Using roi to compute total return of investment in stocks:
<a href="https://github.com/simonmichael/hledger/blob/master/examples/investing/roi-unrealised.ledger">https://github.com/simonmichael/hledger/blob/master/examples/investing/roi-unrealised.ledger</a></p>
</li>
<li>
<p>Cookbook &gt; Return on Investment: <a href="https://hledger.org/roi.html">https://hledger.org/roi.html</a></p>
</li>
</ul>
<h4 id="spaces-and-special-characters-in---inv-and---pnl"><a class="header" href="#spaces-and-special-characters-in---inv-and---pnl">Spaces and special characters in <code>--inv</code> and <code>--pnl</code></a></h4>
<p>Note that <code>--inv</code> and <code>--pnl</code>'s argument is a query, and queries could
have several space-separated terms (see
<a href="https://hledger.org/hledger.html#queries">QUERIES</a>).</p>
<p>To indicate that all search terms form single command-line argument, you
will need to put them in quotes (see <a href="https://hledger.org/hledger.html#special-characters">Special
characters</a>):</p>
<pre><code class="language-cli">$ hledger roi --inv 'term1 term2 term3 ...'
</code></pre>
<p>If any query terms contain spaces themselves, you will need an extra
level of nested quoting, eg:</p>
<pre><code class="language-cli">$ hledger roi --inv=&quot;'Assets:Test 1'&quot; --pnl=&quot;'Equity:Unrealized Profit and Loss'&quot;
</code></pre>
<h4 id="semantics-of---inv-and---pnl"><a class="header" href="#semantics-of---inv-and---pnl">Semantics of <code>--inv</code> and <code>--pnl</code></a></h4>
<p>Query supplied to <code>--inv</code> has to match all transactions that are related
to your investment. Transactions not matching <code>--inv</code> will be ignored.</p>
<p>In these transactions, ROI will conside postings that match <code>--inv</code> to
be &quot;investment postings&quot; and other postings (not matching <code>--inv</code>)
will be sorted into two categories: &quot;cash flow&quot; and &quot;profit and
loss&quot;, as ROI needs to know which part of the investment value is your
contributions and which is due to the return on investment.</p>
<ul>
<li>
<p>&quot;Cash flow&quot; is depositing or withdrawing money, buying or selling
assets, or otherwise converting between your investment commodity
and any other commodity. Example:</p>
<pre><code>2019-01-01 Investing in Snake Oil
  assets:cash          -$100
  investment:snake oil

2020-01-01 Selling my Snake Oil
  assets:cash           $10
  investment:snake oil  = 0
</code></pre>
</li>
<li>
<p>&quot;Profit and loss&quot; is change in the value of your investment:</p>
<pre><code>2019-06-01 Snake Oil falls in value
  investment:snake oil  = $57
  equity:unrealized profit or loss
</code></pre>
</li>
</ul>
<p>All non-investment postings are assumed to be &quot;cash flow&quot;, unless they
match <code>--pnl</code> query. Changes in value of your investment due to &quot;profit
and loss&quot; postings will be considered as part of your investment
return.</p>
<p>Example: if you use <code>--inv snake --pnl equity:unrealized</code>, then postings
in the example below would be classifed as:</p>
<pre><code>2019-01-01 Snake Oil #1
  assets:cash          -$100   ; cash flow posting
  investment:snake oil         ; investment posting

2019-03-01 Snake Oil #2
  equity:unrealized pnl  -$100 ; profit and loss posting
  snake oil                    ; investment posting

2019-07-01 Snake Oil #3
  equity:unrealized pnl        ; profit and loss posting
  cash          -$100          ; cash flow posting
  snake oil     $50            ; investment posting
</code></pre>
<h4 id="irr-and-twr-explained"><a class="header" href="#irr-and-twr-explained">IRR and TWR explained</a></h4>
<p>&quot;ROI&quot; stands for &quot;return on investment&quot;. Traditionally this was
computed as a difference between current value of investment and its
initial value, expressed in percentage of the initial value.</p>
<p>However, this approach is only practical in simple cases, where
investments receives no in-flows or out-flows of money, and where rate
of growth is fixed over time. For more complex scenarios you need
different ways to compute rate of return, and this command implements
two of them: IRR and TWR.</p>
<p>Internal rate of return, or &quot;IRR&quot; (also called &quot;money-weighted rate
of return&quot;) takes into account effects of in-flows and out-flows, and
the time between them. Investment at a particular fixed interest rate is
going to give you more interest than the same amount invested at the
same interest rate, but made later in time. If you are withdrawing from
your investment, your future gains would be smaller (in absolute
numbers), and will be a smaller percentage of your initial investment,
so your IRR will be smaller. And if you are adding to your investment,
you will receive bigger absolute gains, which will be a bigger
percentage of your initial investment, so your IRR will be larger.</p>
<p>As mentioned before, in-flows and out-flows would be any cash that you
personally put in or withdraw, and for the &quot;roi&quot; command, these are
the postings that match the query in the<code>--inv</code> argument and NOT match
the query in the<code>--pnl</code> argument.</p>
<p>If you manually record changes in the value of your investment as
transactions that balance them against &quot;profit and loss&quot; (or
&quot;unrealized gains&quot;) account or use price directives, then in order for
IRR to compute the precise effect of your in-flows and out-flows on the
rate of return, you will need to record the value of your investement on
or close to the days when in- or out-flows occur.</p>
<p>In technical terms, IRR uses the same approach as computation of net
present value, and tries to find a discount rate that makes net present
value of all the cash flows of your investment to add up to zero. This
could be hard to wrap your head around, especially if you haven't done
discounted cash flow analysis before. Implementation of IRR in hledger
should produce results that match the <code>=XIRR</code> formula in Excel.</p>
<p>Second way to compute rate of return that <code>roi</code> command implements is
called &quot;time-weighted rate of return&quot; or &quot;TWR&quot;. Like IRR, it will
account for the effect of your in-flows and out-flows, but unlike IRR it
will try to compute the true rate of return of the underlying asset,
compensating for the effect that deposits and withdrawas have on the
apparent rate of growth of your investment.</p>
<p>TWR represents your investment as an imaginary &quot;unit fund&quot; where
in-flows/ out-flows lead to buying or selling &quot;units&quot; of your
investment and changes in its value change the value of &quot;investment
unit&quot;. Change in &quot;unit price&quot; over the reporting period gives you
rate of return of your investment, and make TWR less sensitive than IRR
to the effects of cash in-flows and out-flows.</p>
<p>References:</p>
<ul>
<li><a href="https://www.investopedia.com/terms/r/rateofreturn.asp">Explanation of rate of
return</a></li>
<li><a href="https://www.investopedia.com/terms/i/irr.asp">Explanation of IRR</a></li>
<li><a href="https://www.investopedia.com/terms/t/time-weightedror.asp">Explanation of
TWR</a></li>
<li><a href="https://smartasset.com/investing/time-weighted-return">IRR vs TWR</a></li>
<li><a href="https://blog.commonwealth.com/measuring-portfolio-performance-twr-vs.-irr">Examples of computing IRR and TWR and discussion of the limitations
of both
metrics</a></li>
</ul>
<h3 id="stats"><a class="header" href="#stats">stats</a></h3>
<p>Show journal and performance statistics.</p>
<p>The stats command displays summary information for the whole journal, or
a matched part of it. With a <a href="#reporting-interval">reporting interval</a>,
it shows a report for each report period.</p>
<p>At the end, it shows (in the terminal) the overall run time and number
of transactions processed per second. Note these are approximate and
will vary based on machine, current load, data size, hledger version,
haskell lib versions, GHC version.. but they may be of interest. The
<code>stats</code> command's run time is similar to that of a single-column
balance report.</p>
<p>Example:</p>
<pre><code class="language-cli">$ hledger stats -f examples/1000x1000x10.journal
Main file                : /Users/simon/src/hledger/examples/1000x1000x10.journal
Included files           : 
Transactions span        : 2000-01-01 to 2002-09-27 (1000 days)
Last transaction         : 2002-09-26 (6995 days ago)
Transactions             : 1000 (1.0 per day)
Transactions last 30 days: 0 (0.0 per day)
Transactions last 7 days : 0 (0.0 per day)
Payees/descriptions      : 1000
Accounts                 : 1000 (depth 10)
Commodities              : 26 (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)
Market prices            : 1000 (A)

Run time                 : 0.12 s
Throughput               : 8342 txns/s
</code></pre>
<p>This command supports the
<a href="hledger.html#output-destination">-o/--output-file</a> option (but not
<a href="hledger.html#output-format">-O/--output-format</a> selection).</p>
<h3 id="tags-1"><a class="header" href="#tags-1">tags</a></h3>
<p>List the tags used in the journal, or their values.</p>
<p>This command lists the tag names used in the journal, whether on
transactions, postings, or account declarations.</p>
<p>With a TAGREGEX argument, only tag names matching this regular
expression (case insensitive, infix matched) are shown.</p>
<p>With QUERY arguments, only transactions and accounts matching this query
are considered. If the query involves transaction fields (date:, desc:,
amt:, ...), the search is restricted to the matched transactions and
their accounts.</p>
<p>With the --values flag, the tags' unique non-empty values are listed
instead. With -E/--empty, blank/empty values are also shown.</p>
<p>With --parsed, tags or values are shown in the order they were parsed,
with duplicates included. (Except, tags from account declarations are
always shown first.)</p>
<p>Tip: remember, accounts also acquire tags from their parents, postings
also acquire tags from their account and transaction, transactions also
acquire tags from their postings.</p>
<h3 id="test"><a class="header" href="#test">test</a></h3>
<p>Run built-in unit tests.</p>
<p>This command runs the unit tests built in to hledger and hledger-lib,
printing the results on stdout. If any test fails, the exit code will be
non-zero.</p>
<p>This is mainly used by hledger developers, but you can also use it to
sanity-check the installed hledger executable on your platform. All
tests are expected to pass - if you ever see a failure, please report as
a bug!</p>
<p>This command also accepts tasty test runner options, written after a --
(double hyphen). Eg to run only the tests in Hledger.Data.Amount, with
ANSI colour codes disabled:</p>
<pre><code class="language-cli">$ hledger test -- -pData.Amount --color=never
</code></pre>
<p>For help on these, see https://github.com/feuerbach/tasty#options
(<code>-- --help</code> currently doesn't show them).</p>
<p><a name="common-tasks"></a></p>
<h2 id="part-5-common-tasks"><a class="header" href="#part-5-common-tasks">PART 5: COMMON TASKS</a></h2>
<p>Here are some quick examples of how to do some basic tasks with hledger.</p>
<h3 id="getting-help"><a class="header" href="#getting-help">Getting help</a></h3>
<p>Here's how to list commands and view options and command docs:</p>
<pre><code class="language-cli">$ hledger                # show available commands
$ hledger --help         # show common options
$ hledger CMD --help     # show CMD's options, common options and CMD's documentation
</code></pre>
<p>You can also view your hledger version's manual in several formats by
using the <a href="#help">help command</a>. Eg:</p>
<pre><code class="language-cli">$ hledger help           # show the hledger manual with info, man or $PAGER (best available)
$ hledger help journal   # show the journal topic in the hledger manual
$ hledger help --help    # find out more about the help command
</code></pre>
<p>To view manuals and introductory docs on the web, visit
<a href="https://hledger.org">https://hledger.org</a>. Chat and mail list support and discussion
archives can be found at <a href="https://hledger.org/support">https://hledger.org/support</a>.</p>
<h3 id="constructing-command-lines"><a class="header" href="#constructing-command-lines">Constructing command lines</a></h3>
<p>hledger has a flexible command line interface. We strive to keep it
simple and ergonomic, but if you run into one of the sharp edges
described in <a href="#options">OPTIONS</a>, here are some tips that might help:</p>
<ul>
<li>command-specific options must go after the command (it's fine to
put common options there too: <code>hledger CMD OPTS ARGS</code>)</li>
<li>running add-on executables directly simplifies command line parsing
(<code>hledger-ui OPTS ARGS</code>)</li>
<li>enclose &quot;problematic&quot; args in single quotes</li>
<li>if needed, also add a backslash to hide regular expression
metacharacters from the shell</li>
<li>to see how a misbehaving command line is being parsed, add
<code>--debug=2</code>.</li>
</ul>
<h3 id="starting-a-journal-file"><a class="header" href="#starting-a-journal-file">Starting a journal file</a></h3>
<p>hledger looks for your accounting data in a journal file,
<code>$HOME/.hledger.journal</code> by default:</p>
<pre><code class="language-cli">$ hledger stats
The hledger journal file &quot;/Users/simon/.hledger.journal&quot; was not found.
Please create it first, eg with &quot;hledger add&quot; or a text editor.
Or, specify an existing journal file with -f or LEDGER_FILE.
</code></pre>
<p>You can override this by setting the <code>LEDGER_FILE</code> environment variable
(see below). It's a good practice to keep this important file under
version control, and to start a new file each year. So you could do
something like this:</p>
<pre><code class="language-cli">$ mkdir ~/finance
$ cd ~/finance
$ git init
Initialized empty Git repository in /Users/simon/finance/.git/
$ touch 2023.journal
$ echo &quot;export LEDGER_FILE=$HOME/finance/2023.journal&quot; &gt;&gt; ~/.profile
$ source ~/.profile
$ hledger stats
Main file                : /Users/simon/finance/2023.journal
Included files           : 
Transactions span        :  to  (0 days)
Last transaction         : none
Transactions             : 0 (0.0 per day)
Transactions last 30 days: 0 (0.0 per day)
Transactions last 7 days : 0 (0.0 per day)
Payees/descriptions      : 0
Accounts                 : 0 (depth 0)
Commodities              : 0 ()
Market prices            : 0 ()
</code></pre>
<h3 id="setting-ledger_file"><a class="header" href="#setting-ledger_file">Setting LEDGER_FILE</a></h3>
<p>How to set <code>LEDGER_FILE</code> permanently depends on your setup:</p>
<p>On unix and mac, running these commands in the terminal will work for
many people; adapt as needed:</p>
<pre><code class="language-cli">$ echo 'export LEDGER_FILE=~/finance/2023.journal' &gt;&gt; ~/.profile
$ source ~/.profile
</code></pre>
<p>When correctly configured, in a new terminal window
<code>env | grep LEDGER_FILE</code> will show your file, and so will
<code>hledger files</code>.</p>
<p>On mac, this additional step might be helpful for GUI applications (like
Emacs started from the dock): add an entry to
<code>~/.MacOSX/environment.plist</code> like</p>
<pre><code class="language-json">{
  &quot;LEDGER_FILE&quot; : &quot;~/finance/2023.journal&quot;
}
</code></pre>
<p>and then run <code>killall Dock</code> in a terminal window (or restart the
machine).</p>
<p>On Windows, see <a href="https://www.java.com/en/download/help/path.html">https://www.java.com/en/download/help/path.html</a>, or
try running these commands in a powershell window (let us know if it
persists across a reboot, and if you need to be an Administrator):</p>
<pre><code class="language-cli">&gt; CD
&gt; MKDIR finance
&gt; SETX LEDGER_FILE &quot;C:\Users\USERNAME\finance\2023.journal&quot;
</code></pre>
<h3 id="setting-opening-balances"><a class="header" href="#setting-opening-balances">Setting opening balances</a></h3>
<p>Pick a starting date for which you can look up the balances of some
real-world assets (bank accounts, wallet..) and liabilities (credit
cards..).</p>
<p>To avoid a lot of data entry, you may want to start with just one or two
accounts, like your checking account or cash wallet; and pick a recent
starting date, like today or the start of the week. You can always come
back later and add more accounts and older transactions, eg going back
to january 1st.</p>
<p>Add an opening balances transaction to the journal, declaring the
balances on this date. Here are two ways to do it:</p>
<ul>
<li>
<p>The first way: open the journal in any text editor and save an entry
like this:</p>
<pre><code class="language-journal">2023-01-01 * opening balances
    assets:bank:checking                $1000   = $1000
    assets:bank:savings                 $2000   = $2000
    assets:cash                          $100   = $100
    liabilities:creditcard               $-50   = $-50
    equity:opening/closing balances
</code></pre>
<p>These are start-of-day balances, ie whatever was in the account at
the end of the previous day.</p>
<p>The * after the date is an optional status flag. Here it means
&quot;cleared &amp; confirmed&quot;.</p>
<p>The currency symbols are optional, but usually a good idea as
you'll be dealing with multiple currencies sooner or later.</p>
<p>The = amounts are optional balance assertions, providing extra error
checking.</p>
</li>
<li>
<p>The second way: run <code>hledger add</code> and follow the prompts to record a
similar transaction:</p>
<pre><code class="language-cli">$ hledger add
Adding transactions to journal file /Users/simon/finance/2023.journal
Any command line arguments will be used as defaults.
Use tab key to complete, readline keys to edit, enter to accept defaults.
An optional (CODE) may follow transaction dates.
An optional ; COMMENT may follow descriptions or amounts.
If you make a mistake, enter &lt; at any prompt to go one step backward.
To end a transaction, enter . when prompted.
To quit, enter . at a date prompt or press control-d or control-c.
Date [2023-02-07]: 2023-01-01
Description: * opening balances
Account 1: assets:bank:checking
Amount  1: $1000
Account 2: assets:bank:savings
Amount  2 [$-1000]: $2000
Account 3: assets:cash
Amount  3 [$-3000]: $100
Account 4: liabilities:creditcard
Amount  4 [$-3100]: $-50
Account 5: equity:opening/closing balances
Amount  5 [$-3050]: 
Account 6 (or . or enter to finish this transaction): .
2023-01-01 * opening balances
    assets:bank:checking                      $1000
    assets:bank:savings                       $2000
    assets:cash                                $100
    liabilities:creditcard                     $-50
    equity:opening/closing balances          $-3050

Save this transaction to the journal ? [y]: 
Saved.
Starting the next transaction (. or ctrl-D/ctrl-C to quit)
Date [2023-01-01]: .
</code></pre>
</li>
</ul>
<p>If you're using version control, this could be a good time to commit
the journal. Eg:</p>
<pre><code class="language-cli">$ git commit -m 'initial balances' 2023.journal
</code></pre>
<h3 id="recording-transactions"><a class="header" href="#recording-transactions">Recording transactions</a></h3>
<p>As you spend or receive money, you can record these transactions using
one of the methods above (text editor, hledger add) or by using the
<a href="#iadd">hledger-iadd</a> or <a href="#web">hledger-web</a> add-ons, or by using the
<a href="#import">import command</a> to convert CSV data downloaded from your bank.</p>
<p>Here are some simple transactions, see the hledger_journal(5) manual and
hledger.org for more ideas:</p>
<pre><code class="language-journal">2023/1/10 * gift received
  assets:cash   $20
  income:gifts

2023.1.12 * farmers market
  expenses:food    $13
  assets:cash

2023-01-15 paycheck
  income:salary
  assets:bank:checking    $1000
</code></pre>
<h3 id="reconciling"><a class="header" href="#reconciling">Reconciling</a></h3>
<p>Periodically you should reconcile - compare your hledger-reported
balances against external sources of truth, like bank statements or your
bank's website - to be sure that your ledger accurately represents the
real-world balances (and, that the real-world institutions have not made
a mistake!). This gets easy and fast with (1) practice and (2)
frequency. If you do it daily, it can take 2-10 minutes. If you let it
pile up, expect it to take longer as you hunt down errors and
discrepancies.</p>
<p>A typical workflow:</p>
<ol>
<li>
<p>Reconcile cash. Count what's in your wallet. Compare with what
hledger reports (<code>hledger bal cash</code>). If they are different, try to
remember the missing transaction, or look for the error in the
already-recorded transactions. A register report can be helpful
(<code>hledger reg cash</code>). If you can't find the error, add an
adjustment transaction. Eg if you have $105 after the above, and
can't explain the missing $2, it could be:</p>
<pre><code class="language-journal">2023-01-16 * adjust cash
    assets:cash    $-2 = $105
    expenses:misc
</code></pre>
</li>
<li>
<p>Reconcile checking. Log in to your bank's website. Compare today's
(cleared) balance with hledger's cleared balance
(<code>hledger bal checking -C</code>). If they are different, track down the
error or record the missing transaction(s) or add an adjustment
transaction, similar to the above. Unlike the cash case, you can
usually compare the transaction history and running balance from
your bank with the one reported by <code>hledger reg checking -C</code>. This
will be easier if you generally record transaction dates quite
similar to your bank's clearing dates.</p>
</li>
<li>
<p>Repeat for other asset/liability accounts.</p>
</li>
</ol>
<p>Tip: instead of the register command, use hledger-ui to see a
live-updating register while you edit the journal:
<code>hledger-ui --watch --register checking -C</code></p>
<p>After reconciling, it could be a good time to mark the reconciled
transactions' status as &quot;cleared and confirmed&quot;, if you want to track
that, by adding the <code>*</code> marker. Eg in the paycheck transaction above,
insert <code>*</code> between <code>2023-01-15</code> and <code>paycheck</code></p>
<p>If you're using version control, this can be another good time to
commit:</p>
<pre><code class="language-cli">$ git commit -m 'txns' 2023.journal
</code></pre>
<h3 id="reporting"><a class="header" href="#reporting">Reporting</a></h3>
<p>Here are some basic reports.</p>
<p>Show all transactions:</p>
<pre><code class="language-cli">$ hledger print
2023-01-01 * opening balances
    assets:bank:checking                      $1000
    assets:bank:savings                       $2000
    assets:cash                                $100
    liabilities:creditcard                     $-50
    equity:opening/closing balances          $-3050

2023-01-10 * gift received
    assets:cash              $20
    income:gifts

2023-01-12 * farmers market
    expenses:food             $13
    assets:cash

2023-01-15 * paycheck
    income:salary
    assets:bank:checking           $1000

2023-01-16 * adjust cash
    assets:cash               $-2 = $105
    expenses:misc
</code></pre>
<p>Show account names, and their hierarchy:</p>
<pre><code class="language-cli">$ hledger accounts --tree
assets
  bank
    checking
    savings
  cash
equity
  opening/closing balances
expenses
  food
  misc
income
  gifts
  salary
liabilities
  creditcard
</code></pre>
<p>Show all account totals:</p>
<pre><code class="language-cli">$ hledger balance
               $4105  assets
               $4000    bank
               $2000      checking
               $2000      savings
                $105    cash
              $-3050  equity:opening/closing balances
                 $15  expenses
                 $13    food
                  $2    misc
              $-1020  income
                $-20    gifts
              $-1000    salary
                $-50  liabilities:creditcard
--------------------
                   0
</code></pre>
<p>Show only asset and liability balances, as a flat list, limited to depth
2:</p>
<pre><code class="language-cli">$ hledger bal assets liabilities -2
               $4000  assets:bank
                $105  assets:cash
                $-50  liabilities:creditcard
--------------------
               $4055
</code></pre>
<p>Show the same thing without negative numbers, formatted as a simple
balance sheet:</p>
<pre><code class="language-cli">$ hledger bs -2
Balance Sheet 2023-01-16

                        || 2023-01-16 
========================++============
 Assets                 ||            
------------------------++------------
 assets:bank            ||      $4000 
 assets:cash            ||       $105 
------------------------++------------
                        ||      $4105 
========================++============
 Liabilities            ||            
------------------------++------------
 liabilities:creditcard ||        $50 
------------------------++------------
                        ||        $50 
========================++============
 Net:                   ||      $4055 
</code></pre>
<p>The final total is your &quot;net worth&quot; on the end date. (Or use <code>bse</code> for
a full balance sheet with equity.)</p>
<p>Show income and expense totals, formatted as an income statement:</p>
<pre><code class="language-cli">hledger is 
Income Statement 2023-01-01-2023-01-16

               || 2023-01-01-2023-01-16 
===============++=======================
 Revenues      ||                       
---------------++-----------------------
 income:gifts  ||                   $20 
 income:salary ||                 $1000 
---------------++-----------------------
               ||                 $1020 
===============++=======================
 Expenses      ||                       
---------------++-----------------------
 expenses:food ||                   $13 
 expenses:misc ||                    $2 
---------------++-----------------------
               ||                   $15 
===============++=======================
 Net:          ||                 $1005 
</code></pre>
<p>The final total is your net income during this period.</p>
<p>Show transactions affecting your wallet, with running total:</p>
<pre><code class="language-cli">$ hledger register cash
2023-01-01 opening balances     assets:cash                   $100          $100
2023-01-10 gift received        assets:cash                    $20          $120
2023-01-12 farmers market       assets:cash                   $-13          $107
2023-01-16 adjust cash          assets:cash                    $-2          $105
</code></pre>
<p>Show weekly posting counts as a bar chart:</p>
<pre><code class="language-cli">$ hledger activity -W
2019-12-30 *****
2023-01-06 ****
2023-01-13 ****
</code></pre>
<h3 id="migrating-to-a-new-file"><a class="header" href="#migrating-to-a-new-file">Migrating to a new file</a></h3>
<p>At the end of the year, you may want to continue your journal in a new
file, so that old transactions don't slow down or clutter your reports,
and to help ensure the integrity of your accounting history. See the
<a href="#close">close command</a>.</p>
<p>If using version control, don't forget to <code>git add</code> the new file.</p>
<h2 id="bugs"><a class="header" href="#bugs">BUGS</a></h2>
<p>We welcome bug reports in the hledger issue tracker (shortcut:
<a href="http://bugs.hledger.org">http://bugs.hledger.org</a>), or on the #hledger chat or hledger mail list
(<a href="https://hledger.org/support">https://hledger.org/support</a>).</p>
<p>Some known issues and limitations:</p>
<p>The need to precede add-on command options with <code>--</code> when invoked from
hledger is awkward. (See Command options, Constructing command lines.)</p>
<p>A UTF-8-aware system locale must be configured to work with non-ascii
data. (See Unicode characters, Troubleshooting.)</p>
<p>On Microsoft Windows, depending whether you are running in a CMD window
or a Cygwin/MSYS/Mintty window and how you installed hledger, non-ascii
characters and colours may not be supported, and the tab key may not be
supported by <code>hledger add</code>. (Running in a WSL window should resolve
these.)</p>
<p>When processing large data files, hledger uses more memory than Ledger.</p>
<h3 id="troubleshooting"><a class="header" href="#troubleshooting">Troubleshooting</a></h3>
<p>Here are some common issues you might encounter when you run hledger,
and how to resolve them (and remember also you can usually get quick
<a href="support.html">Support</a>):</p>
<p><strong>PATH issues: I get an error like &quot;No command 'hledger' found&quot;</strong><br />
Depending how you installed hledger, the executables may not be in your
shell's PATH. Eg on unix systems, stack installs hledger in
<code>~/.local/bin</code> and cabal installs it in <code>~/.cabal/bin</code>. You may need to
add one of these directories to your shell's PATH, and/or open a new
terminal window.</p>
<p><strong>LEDGER_FILE issues: I configured LEDGER_FILE but hledger is not using
it</strong></p>
<ul>
<li><code>LEDGER_FILE</code> should be a real environment variable, not just a
shell variable. Eg on unix, the command <code>env | grep LEDGER_FILE</code>
should show it. You may need to use <code>export</code> (see
<a href="https://stackoverflow.com/a/7411509">https://stackoverflow.com/a/7411509</a>).</li>
<li>You may need to force your shell to see the new configuration. A
simple way is to close your terminal window and open a new one.</li>
</ul>
<p><strong>LANG issues: I get errors like &quot;Illegal byte sequence&quot; or &quot;Invalid
or incomplete multibyte or wide character&quot; or &quot;commitAndReleaseBuffer:
invalid argument (invalid character)&quot;</strong><br />
Programs compiled with GHC (hledger, haskell build tools, etc.) need the
system locale to be UTF-8-aware, or they will fail when they encounter
non-ascii characters. To fix it, set the LANG environment variable to a
locale which supports UTF-8 and which is installed on your system.</p>
<p>On unix, <code>locale -a</code> lists the installed locales. Look for one which
mentions <code>utf8</code>, <code>UTF-8</code> or similar. Some examples: <code>C.UTF-8</code>,
<code>en_US.utf-8</code>, <code>fr_FR.utf8</code>. If necessary, use your system package
manager to install one. Then select it by setting the <code>LANG</code> environment
variable. Note, exact spelling and capitalisation of the locale name may
be important: Here's one common way to configure this permanently for
your shell:</p>
<pre><code class="language-cli">$ echo &quot;export LANG=en_US.utf8&quot; &gt;&gt;~/.profile
# close and re-open terminal window
</code></pre>
<p>If you are using Nix (not NixOS) for GHC and Hledger, you might need to
set the <code>LOCALE_ARCHIVE</code> variable:</p>
<pre><code class="language-cli">$ echo &quot;export LOCALE_ARCHIVE=${glibcLocales}/lib/locale/locale-archive&quot; &gt;&gt;~/.profile
# close and re-open terminal window
</code></pre>
<p><strong>COMPATIBILITY ISSUES: hledger gives an error with my Ledger file</strong><br />
Not all of Ledger's journal file syntax or feature set is supported.
See <a href="ledger.html">hledger and Ledger</a> for full details.</p>

                    </main>
<style>
#footer {
    margin-top: 4em;
    padding-top: 1em;
    border-top: thin solid hsl(197, 37%, 91%);
    color: rgb(204, 204, 204);
    font-style: italic; 
    font-size:  small;
}
#footer a {
    color: rgb(204, 204, 204);
    font-weight: bold;
    white-space: nowrap;
}
</style>
                    <div id="footer">
                        <div id="comments">
                            Your questions and feedback make this project better! 
                            Please join 
                            <a href="http://matrix.hledger.org">#hledger:matrix.org</a> or 
                            <a href="http://irc.hledger.org">#hledger:libera.chat</a>,
                            paste this page's full URL, 
                            write your comment 
                            (and if you have time, watch for a reply).
                            Or,
                            <a href="https://github.com/simonmichael/hledger_site/edit/master/src/1.32/hledger.md">edit this page</a>.
                        </div>
                    </div>

                    <nav class="nav-wrapper" aria-label="Page navigation">
                        <!-- Mobile navigation buttons -->
                            <a rel="prev" href="../start.html" class="mobile-nav-chapters previous" title="Previous chapter" aria-label="Previous chapter" aria-keyshortcuts="Left" accesskey="<">
                                <i class="fa fa-angle-left"></i>
                            </a>

                            <a rel="next" href="../1.32/hledger-ui.html" class="mobile-nav-chapters next" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right" accesskey=">">
                                <i class="fa fa-angle-right"></i>
                            </a>

                        <div style="clear: both"></div>
                    </nav>
                </div>
            </div>

            <nav class="nav-wide-wrapper" aria-label="Page navigation">
                    <a rel="prev" href="../start.html" class="nav-chapters previous" title="Previous chapter" aria-label="Previous chapter" aria-keyshortcuts="Left" accesskey="<">
                        <i class="fa fa-angle-left"></i>
                    </a>

                    <a rel="next" href="../1.32/hledger-ui.html" class="nav-chapters next" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right" accesskey=">">
                        <i class="fa fa-angle-right"></i>
                    </a>
            </nav>

        </div>




        <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="text/javascript">
            window.playground_copyable = true;
        </script>


        <script src="../elasticlunr.min.js" type="text/javascript" charset="utf-8"></script>
        <script src="../mark.min.js" type="text/javascript" charset="utf-8"></script>
        <script src="../searcher.js" type="text/javascript" charset="utf-8"></script>

        <script src="../clipboard.min.js" type="text/javascript" charset="utf-8"></script>
        <script src="../highlight.js" type="text/javascript" charset="utf-8"></script>
        <script src="../book.js" type="text/javascript" charset="utf-8"></script>

        <!-- Custom JS scripts -->
        <script type="text/javascript" src="../highslide/highslide.js"></script>
        <script type="text/javascript" src="../js/jquery-1.11.0.min.js"></script>
        <script type="text/javascript" src="../js/site.js"></script>


    </body>
</html>
