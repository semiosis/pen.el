HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Age: 48891
Cache-Control: public, max-age=0, must-revalidate
Connection: keep-alive
Content-Disposition: inline; filename="emacs-completion-metadata"
Content-Type: text/html; charset=utf-8
Date: Fri, 26 Jan 2024 23:42:06 GMT
Etag: W/"bee7574150c3ae0fef605e2172edd6ed"
Server: Vercel
Strict-Transport-Security: max-age=63072000
X-Vercel-Cache: HIT
X-Vercel-Id: syd1::k66h7-1706312526341-b7ab938623e3
Transfer-Encoding: chunked

<!doctype html><html lang=en><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="ie=edge"><meta name=viewport content="width=device-width,initial-scale=1,shrink-to-fit=no"><title>Functions passed to completing-read do more than just returning a list to select - Kisaragi Hiu</title><meta property="og:title" content="Functions passed to completing-read do more than just returning a list to select"><meta name=twitter:title content="Functions passed to completing-read do more than just returning a list to select"><meta name=twitter:card content="summary"><meta name=twitter:site content="@kisaragi_hiu"><meta property="og:type" content="article"><meta property="article:published_time" content="2021-10-08 05:36:31 +0900 +0900"><meta property="og:sitename" content="Kisaragi Hiu"><meta name=author content="Kisaragi Hiu"><meta property="og:author" content="Kisaragi Hiu"><meta name=keywords content="Coding,Programming,Language,LGBT,Blog"><link rel=icon href=/favicon.png><meta property="og:url" content="https://kisaragi-hiu.com/emacs-completion-metadata/"><link rel=canonical href=https://kisaragi-hiu.com/emacs-completion-metadata/><link rel=stylesheet href=/css/built.css><link rel=stylesheet href=/storage/Equity/equity.css><link href="https://fonts.googleapis.com/css2?family=Overpass:wght@400;700&family=Inconsolata&display=swap" rel=stylesheet><script defer data-domain=kisaragi-hiu.com src=https://plausible.io/js/script.js></script>
<link rel=alternate type=application/atom+xml href=/feed.xml title="Atom Feed"><script>localStorage.theme==="dark"||(!localStorage.theme||localStorage.theme==="auto")&&window.matchMedia("(prefers-color-scheme: dark)").matches?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")</script></head><body class="text-primary dark:text-primary-dark bg-dropl dark:bg-dropd"><div class="w-[90%] max-w-[1024px] mx-auto pt-[5%] pb-4"><header><span><img class="max-h-8 inline-block align-bottom" src=/avatar.png alt=avatar>
<a href=/ class="inline-block link font-bold text-xl">Kisaragi Hiu</a></span><h1 class="text-xl mt-6 mb-4 font-bold font-sans">Functions passed to completing-read do more than just returning a list to select</h1><div class="-mt-4 font-serif"><time title=2021-10-08T05:36:31+09:00 datetime=2021-10-08T05:36:31+09:00>2021/10/08</time></div><div class="meta font-serif mb-4"><a class="tags proselink" href=https://kisaragi-hiu.com/tags/emacs-lisp/>emacs-lisp</a></div></header><div class="max-w-[768px] mx-auto"><article class=prose><p><code class=verbatim>completing-read</code> accepts a function as the collection of candidates, not just lists. I've always thought of this as a small niche that's only useful for dynamic collections.</p><blockquote><p><code class=verbatim>(completing-read PROMPT COLLECTION &amp;optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)</code></p><p>Read a string in the minibuffer, with completion.</p><ul><li><code class=verbatim>PROMPT</code> is a string to prompt with; normally it ends in a colon and a space.</li><li><code class=verbatim>COLLECTION</code> can be a list of strings, an alist, an obarray or a hash table.</li><li><code class=verbatim>COLLECTION</code> can also be a function to do the completion itself.</li><li><code class=verbatim>PREDICATE</code> limits completion to a subset of <code class=verbatim>COLLECTION</code>.</li><li>See <code>try-completion</code>, <code>all-completions</code>, <code>test-completion</code>, and <code>completion-boundaries</code>, for more details on completion, <code class=verbatim>COLLECTION</code>, and <code class=verbatim>PREDICATE</code>. See also Info node <a href=https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Completion.html>(elisp)Basic Completion</a> for the details about completion, and Info node <a href=https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html>(elisp)Programmed Completion</a> for expectations from <code class=verbatim>COLLECTION</code> when it's a function.</li></ul></blockquote><p>Last night I was trying out <a href=https://github.com/minad/embark>Embark</a> and <a href=https://github.com/minad/marginalia>Marginalia</a> after reading <a href=https://karthinks.com/software/fifteen-ways-to-use-embark/>Fifteen ways to use Embark</a>, and I learned that the built in completion system actually supports specifying <em>categories</em>. The built in completion system knows that <code class=verbatim>find-file</code> is looking for files, and <code class=verbatim>describe-minor-mode</code> is looking for a list of minor modes; Marginalia makes use of this to decide what annotations to show, while Embark makes use of it to decide which context menu to show.</p><p>It is this last fact that made me want to make use of these categories in <a href=/projects/canrylog.html>Canrylog</a> and <a href=https://github.com/kisaragi-hiu/org-roam/>my Org-roam v1 fork</a>. For instance, <code class=verbatim>org-roam-find-file</code> only shows note titles and tags, but I want it to show file paths as well. To do this, I had to first figure out how to mark categories for my candidates.</p><p>The Info nodes referenced in the <code class=verbatim>completing-read</code> docstring provides some help:</p><blockquote><p><strong><a href=https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html>Programmed Completion</a></strong></p><p>[…]</p><p>The completion function should accept three arguments:</p><ul><li>The string to be completed.</li><li>A predicate function with which to filter possible matches, or
‘nil’ if none. The function should call the predicate for each
possible match, and ignore the match if the predicate returns
‘nil’.</li><li><p>A flag specifying the type of completion operation to perform […]
This flag may be one of the following values.</p><p>[…]</p><dl><dt>‘metadata’</dt><dd>This specifies a request for information about the state of
the current completion. The return value should have the form
‘(metadata . ALIST)’, where ALIST is an alist whose elements
are described below.</dd></dl><p>If the flag has any other value, the completion function should
return ‘nil’.</p></li></ul><p>The following is a list of metadata entries that a completion
function may return in response to a ‘metadata’ flag argument:</p><dl><dt>‘category’</dt><dd>The value should be a symbol describing what kind of text the
completion function is trying to complete. If the symbol matches
one of the keys in ‘completion-category-overrides’, the usual
completion behavior is overridden. *Note Completion Variables::.</dd></dl><p>[…]</p></blockquote><p>This means when <em>collection</em> is a function, Emacs will actually probe it for more information, including the <em>category</em> above.</p><div id=outline-container-headline-1 class=outline-2><h2 id=headline-1>Digging into find-file's collection functions</h2><div id=outline-text-headline-1 class=outline-text-2><p>There are some builtin examples of this. For instance, <code class=verbatim>find-file</code>:</p><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=c1>;; in `find-file&#39;</span>
</span></span><span class=line><span class=cl><span class=p>(</span><span class=nb>interactive</span>
</span></span><span class=line><span class=cl> <span class=p>(</span><span class=nv>find-file-read-args</span> <span class=s>&#34;Find file: &#34;</span>
</span></span><span class=line><span class=cl>                      <span class=p>(</span><span class=nv>confirm-nonexistent-file-or-buffer</span><span class=p>)))</span></span></span></code></pre></div></div><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=p>(</span><span class=nb>defun</span> <span class=nv>find-file-read-args</span> <span class=p>(</span><span class=nv>prompt</span> <span class=nv>mustmatch</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>list</span> <span class=p>(</span><span class=nv>read-file-name</span> <span class=nv>prompt</span> <span class=no>nil</span> <span class=nv>default-directory</span> <span class=nv>mustmatch</span><span class=p>)</span>
</span></span><span class=line><span class=cl>	<span class=no>t</span><span class=p>))</span></span></span></code></pre></div></div><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=p>(</span><span class=nb>defun</span> <span class=nv>read-file-name</span> <span class=p>(</span><span class=nv>prompt</span> <span class=kp>&amp;optional</span> <span class=nv>dir</span> <span class=nv>default-filename</span> <span class=nv>mustmatch</span> <span class=nv>initial</span> <span class=nv>predicate</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=c1>;; ...</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>funcall</span> <span class=p>(</span><span class=nb>or</span> <span class=nv>read-file-name-function</span> <span class=nf>#&#39;</span><span class=nv>read-file-name-default</span><span class=p>)</span>
</span></span><span class=line><span class=cl>           <span class=c1>;; ...</span>
</span></span><span class=line><span class=cl>           <span class=p>))</span></span></span></code></pre></div></div><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=c1>;; in `read-file-name-default&#39;</span>
</span></span><span class=line><span class=cl><span class=p>(</span><span class=nf>completing-read</span> <span class=nv>prompt</span> <span class=ss>&#39;read-file-name-internal</span>
</span></span><span class=line><span class=cl>                 <span class=nv>pred</span> <span class=nv>mustmatch</span> <span class=nv>insdef</span>
</span></span><span class=line><span class=cl>                 <span class=ss>&#39;file-name-history</span> <span class=nv>default-filename</span><span class=p>)))</span></span></span></code></pre></div></div><p>Ah, here's the call to <code class=verbatim>completing-read</code>. The collection function is <code class=verbatim>read-file-name-internal</code>, which combines <code class=verbatim>completion--embedded-envvar-table</code> and <code class=verbatim>completion--file-name-table</code>. Let's look at <code class=verbatim>completion--file-name-table</code>:</p><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=p>(</span><span class=nb>defalias</span> <span class=ss>&#39;completion--file-name-table</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nv>completion-table-with-quoting</span> <span class=nf>#&#39;</span><span class=nv>completion-file-name-table</span>
</span></span><span class=line><span class=cl>                                 <span class=nf>#&#39;substitute-in-file-name</span>
</span></span><span class=line><span class=cl>                                 <span class=nf>#&#39;</span><span class=nv>completion--sifn-requote</span><span class=p>))</span></span></span></code></pre></div></div><p>Another combined collection function. Let's look at <code class=verbatim>completion-file-name-table</code> then:</p><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=p>(</span><span class=nb>defun</span> <span class=nv>completion-file-name-table</span> <span class=p>(</span><span class=nf>string</span> <span class=nv>pred</span> <span class=nv>action</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=s>&#34;Completion table for file names.&#34;</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nb>condition-case</span> <span class=no>nil</span>
</span></span><span class=line><span class=cl>      <span class=p>(</span><span class=nb>cond</span>
</span></span><span class=line><span class=cl>       <span class=p>((</span><span class=nf>eq</span> <span class=nv>action</span> <span class=ss>&#39;metadata</span><span class=p>)</span> <span class=o>&#39;</span><span class=p>(</span><span class=nv>metadata</span> <span class=p>(</span><span class=nv>category</span> <span class=o>.</span> <span class=nv>file</span><span class=p>)))</span>
</span></span><span class=line><span class=cl>       <span class=p>((</span><span class=nv>string-match-p</span> <span class=s>&#34;\\`~[^/\\]*\\&#39;&#34;</span> <span class=nf>string</span><span class=p>))</span>
</span></span><span class=line><span class=cl>       <span class=c1>;; ...</span>
</span></span><span class=line><span class=cl>       <span class=p>)))</span></span></span></code></pre></div></div><p>There we go. The <code class=verbatim>'(metadata (category . file))</code> is exactly the thing I was looking for; this is how you attach a category to a collection.</p><p>As an aside, these functions seem to be referred to as <em>completion tables</em>.</p></div></div><div id=outline-container-headline-2 class=outline-2><h2 id=headline-2>Applying this</h2><div id=outline-text-headline-2 class=outline-text-2><p>So when a collection for <code class=verbatim>completing-read</code> is a function, it's able to provide some metadata, including its category. But most of the time we have a fixed list of candidates to select from. What should we do?</p><p>We can just do this:</p><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=p>(</span><span class=nb>defun</span> <span class=nv>k//mark-category</span> <span class=p>(</span><span class=nv>seq</span> <span class=nv>category</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=s>&#34;Mark SEQ as being in CATEGORY.&#34;</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nb>lambda</span> <span class=p>(</span><span class=nv>str</span> <span class=nv>pred</span> <span class=nv>flag</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=p>(</span><span class=nb>pcase</span> <span class=nv>flag</span>
</span></span><span class=line><span class=cl>      <span class=p>(</span><span class=ss>&#39;metadata</span>
</span></span><span class=line><span class=cl>       <span class=o>`</span><span class=p>(</span><span class=nv>metadata</span> <span class=p>(</span><span class=nv>category</span> <span class=o>.</span> <span class=o>,</span><span class=nv>category</span><span class=p>)))</span>
</span></span><span class=line><span class=cl>      <span class=p>(</span><span class=nv>_</span>
</span></span><span class=line><span class=cl>       <span class=p>(</span><span class=nf>all-completions</span> <span class=nv>str</span> <span class=nv>seq</span> <span class=nv>pred</span><span class=p>)))))</span></span></span></code></pre></div></div><p>This function returns a completion table that responds to a probe of its category appropriately, as well as handing the actual completion to <code class=verbatim>all-completions</code>.</p><p>It can then be used like this:</p><div class="src src-emacs-lisp"><div class=highlight><pre tabindex=0 class=chroma><code class=language-emacs-lisp data-lang=emacs-lisp><span class=line><span class=cl><span class=p>(</span><span class=nf>completing-read</span> <span class=s>&#34;Prompt: &#34;</span>
</span></span><span class=line><span class=cl>                 <span class=p>(</span><span class=nv>k//mark-category</span> <span class=o>&#39;</span><span class=p>(</span><span class=s>&#34;/usr&#34;</span> <span class=s>&#34;/tmp&#34;</span> <span class=s>&#34;/home&#34;</span><span class=p>)</span> <span class=ss>&#39;file</span><span class=p>))</span></span></span></code></pre></div></div><figure><img src=/20211008T062042+0900.png alt=/20211008T062042+0900.png title=/20211008T062042+0900.png><figcaption>Marginalia read the category, then showed the appropriate annotations for files.</figcaption></figure><p>For a list of existing categories, if Marginalia is installed, it can be seen in the variable <code class=verbatim>marginalia-annotator-registry</code>. These are the existing values on my installation:</p><div class="src src-scheme"><div class=highlight><pre tabindex=0 class=chroma><code class=language-scheme data-lang=scheme><span class=line><span class=cl><span class=o>&#39;</span><span class=p>((</span><span class=nf>command</span> <span class=nv>marginalia-annotate-command</span> <span class=nv>marginalia-annotate-binding</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>embark-keybinding</span> <span class=nv>marginalia-annotate-embark-keybinding</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>customize-group</span> <span class=nv>marginalia-annotate-customize-group</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>variable</span> <span class=nv>marginalia-annotate-variable</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>function</span> <span class=nv>marginalia-annotate-function</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>face</span> <span class=nv>marginalia-annotate-face</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>color</span> <span class=nv>marginalia-annotate-color</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>unicode-name</span> <span class=nv>marginalia-annotate-char</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>minor-mode</span> <span class=nv>marginalia-annotate-minor-mode</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>symbol</span> <span class=nv>marginalia-annotate-symbol</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>environment-variable</span> <span class=nv>marginalia-annotate-environment-variable</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>input-method</span> <span class=nv>marginalia-annotate-input-method</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>coding-system</span> <span class=nv>marginalia-annotate-coding-system</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>charset</span> <span class=nv>marginalia-annotate-charset</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>package</span> <span class=nv>marginalia-annotate-package</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>imenu</span> <span class=nv>marginalia-annotate-imenu</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>bookmark</span> <span class=nv>marginalia-annotate-bookmark</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>file</span> <span class=nv>marginalia-annotate-file</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>project-file</span> <span class=nv>marginalia-annotate-project-file</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>buffer</span> <span class=nv>marginalia-annotate-buffer</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>)</span>
</span></span><span class=line><span class=cl>  <span class=p>(</span><span class=nf>consult-multi</span> <span class=nv>marginalia-annotate-consult-multi</span> <span class=nv>builtin</span> <span class=nv>none</span><span class=p>))</span></span></span></code></pre></div></div></div></div></article></div><footer><div class="mt-8 mb-20"><hr class=mb-4><div class="flex flex-col gap-y-2 prose"><div class="flex items-center"><span class=mr-2>Newer:</span>
<a class=link href=https://kisaragi-hiu.com/why-japanese-name/><time title=2021-10-10T16:44:40+09:00 datetime=2021-10-10T16:44:40+09:00>2021/10/10</time>
As a Taiwanese, why do I prefer to use a Japanese name?</a></div><div class="flex items-center"><span class=mr-2>Older:</span>
<a class=link href=https://kisaragi-hiu.com/firefox-install-pwa/><time title=2021-09-11T19:26:26+09:00 datetime=2021-09-11T19:26:26+09:00>2021/09/11</time>
Installing a Progressive Web App on Linux with Firefox</a></div></div><div class="mt-4 mb-10 text-center prose"><p class=text-sm>Content is CC-BY-SA 4.0;
<a href=https://github.com/kisaragi-hiu/kisaragi-hiu.com>code</a> in MIT.
<a class=link href=https://github.com/kisaragi-hiu/kisaragi-hiu.com/blob/source/LICENSE.md>Terms</a>.</p><p class=text-sm>If you like this, please consider
<a href=https://www.buymeacoffee.com/kisaragihiu>buying a meal for me</a>
to keep both me and this site alive. Thank you.</p><div><script defer>function setDarkMode(){localStorage.theme==="dark"||(!localStorage.theme||localStorage.theme==="auto")&&window.matchMedia("(prefers-color-scheme: dark)").matches?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")}const states=Object.freeze({auto:"auto",light:"light",dark:"dark",isAuto:e=>!e||e==="auto"});let theme=states.auto,system=states.auto;typeof window!="undefined"&&(window.matchMedia("(prefers-color-scheme: dark)").matches?system=states.dark:system=states.light),typeof localStorage!="undefined"&&(theme=localStorage.getItem("theme"));function rotateDarkMode(){system===states.dark?states.isAuto(theme)?theme=states.light:theme=states.auto:states.isAuto(theme)?theme=states.dark:theme=states.auto,localStorage.setItem("theme",theme),setDarkMode(),updateDarkModeToggle()}function isDark(){return theme==="dark"||states.isAuto(theme)&&system==="dark"}function updateDarkModeToggle(){const n=`
<svg
  class="h-5 w-5"
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 512 512"
>
  <path
    d="M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z"
    fill="#da6800"
    stroke="currentColor"
    stroke-linecap="round"
    stroke-linejoin="round"
    stroke-width="32"
  />
</svg>`.trim(),s=`
<svg
  class="h-5 w-5"
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 512 512"
>
  <path
    fill="none"
    stroke="currentColor"
    stroke-linecap="round"
    stroke-miterlimit="10"
    stroke-width="32"
    d="M256 48v48M256 416v48M403.08 108.92l-33.94 33.94M142.86 369.14l-33.94 33.94M464 256h-48M96 256H48M403.08 403.08l-33.94-33.94M142.86 142.86l-33.94-33.94"
  />
  <circle
    cx="256"
    cy="256"
    r="80"
    fill="yellow"
    stroke="currentColor"
    stroke-linecap="round"
    stroke-miterlimit="10"
    stroke-width="32"
  />
</svg>
`.trim(),e=document.getElementById("VNkWXiLs"),t=document.getElementById("RNbvhb87");t&&(t.attributes["aria-checked"]=isDark()),e&&(e.innerHTML=isDark()?n:s)}document.addEventListener("DOMContentLoaded",()=>{updateDarkModeToggle()})</script><button id=RNbvhb87 class="k-btn rounded bg-yellow-300 p-1 hover:bg-yellow-400 dark:bg-orange-900 dark:hover:bg-orange-800" type=button role=switch title=切換暗色模式 aria-label=切換暗色模式 onclick=rotateDarkMode()><div id=VNkWXiLs class="h-5 w-5" onload=updateDarkModeToggle()></div></button></div></div><hr><script src=https://utteranc.es/client.js repo=kisaragi-hiu/kisaragi-hiu.com issue-term=pathname label=comments theme=preferred-color-scheme crossorigin=anonymous async></script></div></footer></div></body></html>
