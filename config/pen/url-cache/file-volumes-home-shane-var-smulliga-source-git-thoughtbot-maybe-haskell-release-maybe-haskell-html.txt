Content-type: text/html

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang xml:lang>
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="author" content="Pat Brisbin" />
  <title>Maybe Haskell</title>
  <style>
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}

ul.task-list[class]{list-style: none;}
ul.task-list li input[type="checkbox"] {
font-size: inherit;
width: 0.8em;
margin: 0 0.8em 0.2em -1.6em;
vertical-align: middle;
}
.display.math{display: block; text-align: center; margin: 0.5rem auto;}

pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
{ counter-reset: source-line 0; }
pre.numberSource code > span
{ position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
{ content: counter(source-line);
position: relative; left: -1em; text-align: right; vertical-align: baseline;
border: none; display: inline-block;
-webkit-touch-callout: none; -webkit-user-select: none;
-khtml-user-select: none; -moz-user-select: none;
-ms-user-select: none; user-select: none;
padding: 0 4px; width: 4em;
color: #aaaaaa;
}
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; }
div.sourceCode
{ }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } 
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } 
code span.at { color: #7d9029; } 
code span.bn { color: #40a070; } 
code span.bu { color: #008000; } 
code span.cf { color: #007020; font-weight: bold; } 
code span.ch { color: #4070a0; } 
code span.cn { color: #880000; } 
code span.co { color: #60a0b0; font-style: italic; } 
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } 
code span.do { color: #ba2121; font-style: italic; } 
code span.dt { color: #902000; } 
code span.dv { color: #40a070; } 
code span.er { color: #ff0000; font-weight: bold; } 
code span.ex { } 
code span.fl { color: #40a070; } 
code span.fu { color: #06287e; } 
code span.im { color: #008000; font-weight: bold; } 
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } 
code span.kw { color: #007020; font-weight: bold; } 
code span.op { color: #666666; } 
code span.ot { color: #007020; } 
code span.pp { color: #bc7a00; } 
code span.sc { color: #4070a0; } 
code span.ss { color: #bb6688; } 
code span.st { color: #4070a0; } 
code span.va { color: #19177c; } 
code span.vs { color: #4070a0; } 
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } 
</style>
  <style type="text/css">* {
-moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box; }
body {
font-size: 1em;
height: 100%;
margin: 0 auto;
max-width: 54em;
padding: 0 1em 4.5em; }
@media screen and (min-width: 600px) {
body {
padding: 0 4em 4.5em; } }
@media screen and (min-width: 700px) {
body {
font-size: 1.125em; } }
@media screen and (min-width: 800px) {
body {
padding: 0 6em 4.5em; } }
@media screen and (min-width: 880px) {
body {
padding: 0 8em 4.5em; } }
@media screen and (min-width: 940px) {
body {
padding: 0 10em 4.5em; } }
@media screen and (min-width: 1800px) {
body {
font-size: 1.375em; } }
nav {
border-bottom: 1px dashed #dddddd;
border-top: 1px dashed #dddddd;
padding: 1.5em 0;
margin: 1.5em 0; }
nav > ul > li > a {
font-weight: bold; }
header {
padding: 4.5em 0; }
body {
-webkit-font-smoothing: antialiased;
color: #444444;
font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
line-height: 1.5em; }
h1, h2, h3, h4, h5, h6 {
color: #222222;
font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
line-height: 1.25em;
margin: 1.5em 0 0.375em;
text-rendering: optimizeLegibility; }
h1 > a, h2 > a, h3 > a, h4 > a, h5 > a, h6 > a {
color: #222222; }
h1 {
margin: 3em 0 0.375em;
font-size: 1.75em; }
h1 > a {
color: #c32f34; }
h1 > a:hover, h1 > a:focus {
color: #222222; }
h1.title {
font-size: 3em;
font-weight: 900;
line-height: 1;
margin: 0 0 .125em; }
@media screen and (min-width: 600px) {
h1.title {
font-size: 4em; } }
h2 {
font-size: 1em;
letter-spacing: 1px;
text-transform: uppercase; }
h2.author {
color: #999999;
float: left;
font-size: 1em;
font-weight: 200;
margin: 0;
text-transform: none; }
@media screen and (min-width: 600px) {
h2.author {
font-size: 1.25em; } }
h2.author:not(:last-child) {
margin-right: 1em; }
h3 {
font-size: 1em; }
h4 {
font-size: 1.5em; }
h5 {
font-size: 1.25em; }
h6 {
font-size: 1em; }
p {
margin: 0 0 0.75em; }
a {
-moz-transition: all 0.15s ease-out 0;
-webkit-transition: all 0.15s ease-out 0;
color: #477dca;
text-decoration: none;
transition: all 0.15s ease-out 0; }
a:hover {
color: #2c5999; }
a:active, a:focus {
color: #2c5999;
outline: none; }
hr {
border: none;
border-bottom: 1px solid #dddddd;
margin: 1.5em 0; }
img {
margin: 0;
max-width: 100%; }
code {
font-family: Inconsolata, "Bitstream Vera Sans Mono", Consolas, Courier, monospace;
font-size: .875em;
white-space: pre;
word-wrap: break-word; }
pre {
background: #f7f7f7;
border: 1px solid #dddddd;
line-height: 1.35;
overflow-x: scroll;
padding: .5rem 1rem;
white-space: pre;
word-wrap: normal; }
pre code {
word-wrap: normal; }
blockquote {
border-left: 2px solid #dddddd;
color: #6a6a6a;
margin: 1.5em 0;
padding-left: 0.75em; }
</style>
  <style type="text/css">@font-face {
font-family: 'Inconsolata';
font-style: normal;
font-weight: 400;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Inconsolata';
font-style: normal;
font-weight: 700;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: italic;
font-weight: 300;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: italic;
font-weight: 400;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: italic;
font-weight: 600;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: italic;
font-weight: 700;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: italic;
font-weight: 800;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: normal;
font-weight: 300;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: normal;
font-weight: 400;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: normal;
font-weight: 600;
font-stretch: normal;
src: url(data:font/ttf;base64,AAEAAAASAQAABAAgR0RFRgr8C5cAAAJ0AAAAfEdQT1Om8bJbAAAZAAAAB85HU1VCJ1gsowAADJgAAANoT1MvMnRf4tcAAAIUAAAAYFNUQVRe/EFBAAABuAAAAFpjbWFwJKgcUQAAA+wAAAEwY3Z0ID1ELMgAAALwAAAA/GZwZ23iGZ5aAAAg0AAAD5RnYXNwABUAIwAAASwAAAAQZ2x5ZthD3zYAADBkAABZgmhlYWQeBen5AAABgAAAADZoaGVhDCwFRAAAAVwAAAAkaG10eHNcQ/sAABAAAAAEYGxvY2HsxdevAAAFHAAAAjJtYXhwBI0QSAAAATwAAAAgbmFtZTpXbiwAAAnwAAACpnBvc3S5SErbAAAUYAAABJ9wcmVwhf176QAAB1AAAAKfAAEAAwAIAAoADQAH//8ADwABAAABGABQAAUAQwAEAAIAEAAvAJoAAAK+D4MAAwABAAEAAAiN/agAAAgE++7+fweuAAEAAAAAAAAAAAAAAAAAAAEYAAEAAAADAMU3mTVJXw889QALCAAAAAAA2czC9wAAAADhe9up++7+FAeuB4UAAAAGAAIAAAAAAAAAAQABAAgAAwAAABQAAwAAACwAAndkdGgBAQAAd2dodAEAAAFpdGFsARwAAgAiABYABgADAAIAAgEdAAAAAAABAAAAAQABAAABBQJYAAAAAQAAAAIBGgBkAAAAAAAEBDwCWAAFAAAFMwTNAAAAmgUzBM0AAALNADICkgAAAAAAAAAAAAAAAIAAAGcAAAALAAAAKAAAAABHT09HAcAAAP/9CI39qAAACP4CiwAAAZ8AAAAABEgFtgAAACAABAABAAIAMAAAAAAAAAAOAAEAAgAAABwAAAAMAAEABgDoAPMA9AD1APYA9wABAAEA+AACAAwAJAA9AAEARABdAAEAbABsAAEAfAB8AAEAggCNAAEAkgCYAAEAmgC4AAEAugDFAAEA6ADoAAMA7ADwAAIA8QDyAAEA8wD4AAMGFAALBbYAFgW2ABYETQAUAAD/6gAA/+wAAP/q/hb//gW2ABUAAP/rAAAAqACqAJYAlgCmAIIAggCrAJYAcQCfAI8AqQCmAMgAbQCKAJoAawCOAJsAegCkAI0BOgCEAJoAogCKAO4AhQB4AUgAhQB6AJoAngCqALMAlgBxAIUAkACZAJ8ApACpALAAmwCmAKwAyABtAHoAggCKAJoAawCCAIoAkgCbAKAApgB6AKMAqwCvAIMAjACYAToAcQCAAIcAjwCbAKUAfQCGAIsAlQCbAKUArgDuAHgAfgCIAJMBSAB5AIAAhgCLAJQAmgCnBsIDegUKABT/OAKeA6cAAAACAAAAAwAAABQAAwABAAAAFAAEARwAAABCAEAABQACAAAADQB+AP8BMQFTArwCxgLaAtwDAQMEAwkDIyACIAkgCyAUIBogHiAiICYgMyA6IEQgdCCsISIiEiIV/v///f//AAAAAAANACAAoAExAVICvALGAtoC3AMAAwMDCAMjIAIgCSALIBMgGCAcICIgJiAyIDkgRCB0IKwhIiISIhX+///9//8AAf/1/+P/wv/A/3L+Kv4A/e/97v3z/fIAAP3V4N/g2eDY4LjgteC04LHgruCj4J7gleBp4C7fud7K3wIB5QDoAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9wDoAAAAAAAAAAAAAAAqAEgAnQEEAWQB2AHsAhMCPQJuAo0CqgK7AtYC6wMpA08DigPdBBYEXQS1BNEFOQWRBb4F7gYMBiYGRAaRBx0HUwedB9kICQguCE4Ikgi2CMgI7QkaCTAJaQmZCdoKDQpbCpYK6wsGCzILXAuvC9wMAAwjDD4MUwxtDIkMmwy9DQ4NWw2SDd4OHg5UDtcPDw81D2wPow+1EAQQNRBxEMMREBFBEY4RxBH4EiASdBKiEuETBBNME10TpBPdE90UBRRGFI4VAxVAFVkVyxX5FmoWtxbvFwYXDheAF5IXxhfxGCYYcBiSGNEY+xkEGTIZWBmIGbwaGhp4GvobRhtYG2obfBuOG6EbrRvpG/UcBxwZHCscPhxQHGIcdByHHMkc2xztHP8dER0jHTYdaR3YHeod/B4OHiEeMx5rHsoe3B7uHwAfER8jHzcfuR/FH9cf6R/7IA0gHiAvIEEgVCC3IMkg2yDtIP8hESEjIVohwiHUIeYh+CIKIhwibiKAIowimCLwI2AjjSOgI7wj6SQgJDEkQiRgJH8kiCS6JO0k9iUWJSYlOSVYJXYllCWpJg0mUyZkJpYm1ibxJ0onSidKJ0onSieeJ6Yn1SfdKAooWSinKLMovyjLKNso6yj9KSIpKyk0KT0pRilPKWopcyl8KYUpjimXKaApqSmyKbspxCoDKioqZCq1KuwrMiuIK6IsCSxfLGgscSx6LIMsjCyVLJ4spyywLLkswQAAQP96PHlVeVl2OE8fdTj/H3Q4qx9zNs0fcjb/H3E2qx9wN/8fbzX/H24zXh9tM/8fbDSrH2s0/x9qMv8faTBnH2gw/x9nMHIfZjBFH2Ux/x9kMc0fYzFPH2IvXh9hL/8fYC5PH18uqx9eLv8fXS42H1wt/x9bLF4fWiz/H1ksZx9YK14fVyuTH1Yr/x9VKv8fVCleH1Mpqx9SKf8fUSiAH1Ao/x9PKIAfTif/H00m/x9MJf8fSyWAH0olQB9JJP8fSCP/H0ciqx9GIv8fRSJeH0Qhkx9DIf8fQh/NH0Ef/x9AH6sfPyD/Hz4gZx89Hv8fPB3/Hzscch86HP8fORxPHzdAwjZeHzQzTx8xMCsfKShPHygVGxlcJxstHyYlQB8lDhoZXCQaMR8jGR8fIhn/HyEfZx8gH0AfHxwYFlweGBwfHRf/HxwW/x8bMhkfWxg4FjdbGjIZH1sXOBY3WxUZPhb/WhMxElURMRBVElkQWQ0yDFUFMgRVDFkEWQ8EfwTvBAMP/w5VCzIKVQcyBlUBXwBVDlkKWQZZzwbvBgIAWW8AfwCvAO8ABBAAAQkyCFUDMgJVCFkCWQ8CfwLvAgMQAANAQAUBuAGQsFQrS7gH/1JLsAlQW7ABiLAlU7ABiLBAUVqwBoiwAFVaW1ixAQGOWYWNjQAdQkuwkFNYsgMAAB1CWbECAkNRWLEEA45ZQnMAKwArKytzcwArcwArACsAKysrKytzACsAKysrACsAKysrASsBKwErASsBKwErACsrASsrKwErKwArACsrKwErKwErACsrASsrKwArKysrKysrKysBKysrKwArKysrKysrKysrKysBKysrKwArKysrKysrKysrASsrKysrKysrACsrKysrKysrKysrKwArKxgAAAAAEADGAAMAAQQJAAAArAE0AAMAAQQJAAEAJAEQAAMAAQQJAAIADgECAAMAAQQJAAMAOADKAAMAAQQJAAQAJAEQAAMAAQQJAAUAGgCwAAMAAQQJAAYAIgCOAAMAAQQJAA4ANABaAAMAAQQJABAAEgBIAAMAAQQJABEAEAA4AAMAAQQJAQAADAAsAAMAAQQJAQEACgAiAAMAAQQJAQUAEAA4AAMAAQQJARoADAAWAAMAAQQJARwADAAKAAMAAQQJAR0ACgAAAFIAbwBtAGEAbgBJAHQAYQBsAGkAYwBOAG8AcgBtAGEAbABXAGkAZAB0AGgAVwBlAGkAZwBoAHQAUwBlAG0AaQBCAG8AbABkAE8AcABlAG4AIABTAGEAbgBzAGgAdAB0AHAAOgAvAC8AcwBjAHIAaQBwAHQAcwAuAHMAaQBsAC4AbwByAGcALwBPAEYATABPAHAAZQBuAFMAYQBuAHMALQBTAGUAbQBpAEIAbwBsAGQAVgBlAHIAcwBpAG8AbgAgADMALgAwADAAMwAzAC4AMAAwADMAOwBHAE8ATwBHADsATwBwAGUAbgBTAGEAbgBzAC0AUwBlAG0AaQBCAG8AbABkAFIAZQBnAHUAbABhAHIATwBwAGUAbgAgAFMAYQBuAHMAIABTAGUAbQBpAEIAbwBsAGQAQwBvAHAAeQByAGkAZwBoAHQAIAAyADAAMgAwACAAVABoAGUAIABPAHAAZQBuACAAUwBhAG4AcwAgAFAAcgBvAGoAZQBjAHQAIABBAHUAdABoAG8AcgBzACAAKABoAHQAdABwAHMAOgAvAC8AZwBpAHQAaAB1AGIALgBjAG8AbQAvAGcAbwBvAGcAbABlAGYAbwBuAHQAcwAvAG8AcABlAG4AcwBhAG4AcwApAAAAAQAAAAoA3gFuAAVERkxUALxjeXJsALxncmVrAKRoZWJyAIxsYXRuACAAWAAHQVBQSACgQ0FUIABCSVBQSACgTUFIIAAuTU9MIAAuTkFWIAAuUk9NIAAuAAD//wAHAAEABQAGAAcACQAKAAsAAP//AAgAAQAFAAYABwAIAAkACgALAAD//wAHAAQABQAGAAcACQAKAAsABAAAAAD//wAHAAMABQAGAAcACQAKAAsABAAAAAD//wAHAAIABQAGAAcACQAKAAsABAAAAAD//wAHAAAABQAGAAcACQAKAAsADGNjbXAAimNjbXAAgGNjbXAAimNjbXAAimNjbXAAeGRub20AcmZyYWMAaGxpZ2EAYmxvY2wAXG51bXIAVnBudW0AUHRudW0ASgAAAAEADgAAAAEADQAAAAEABgAAAAEAAwAAAAEADwAAAAMACAAJAAoAAAABAAcAAAACAAAAAAAAAAMAAAAAAAAAAAABAAAAEAGsAZ4BngFcATwBHAEEAPYA4gEEAJoAjACMAH4AZgAiAAQAAAABAAgAAQA2AAEACAAFACYAHgAYABIADADuAAIATwDtAAIATADsAAIASQDwAAMASQBPAO8AAwBJAEwAAQABAEkAAQAAAAEACAABAAb/EAACAAEBAwEMAAAAAQAAAAEACAABAIwA8AABAAAAAQAIAAEAPv/sAAYAAAACACYACgADAAEAEgABAC4AAAABAAAADAACAAEA+QECAAAAAwABABwAAQASAAAAAQAAAAsAAgABAQ0BFgAAAAEAAQDZAAEAAAABAAgAAQAGAMcAAQABABIAAQAAAAEACAABABQA5gABAAAAAQAIAAEABgD6AAIAAQATABwAAAAEAAAAAQAIAAEAEgABAAgAAQAEAMIAAgB5AAEAAQAvAAQAAAABAAgAAQASAAEACAABAAQAwwACAHkAAQABAE8ABgAAAAEACAABAAoAAgAmABIAAQACAC8ATwABAAQAAAACAHkAAQBPAAEAAAAEAAEABAAAAAIAeQABAC8AAQAAAAUAAQAAAAEACAABAEwApQAGAAAAAgAkAAoAAwAAAAEAPAACABQALAABAAAAAgABAAEA+AADAAAAAQAiAAEAEgABAAAAAQABAAYA6ADzAPQA9QD2APcAAQACAEwATQTNAMEAAAAAAhQAAAIUAAACNACGA3wAhgUrADEEkwBsBukAUwXqAGEB8QCGAokAUgKJAD4EYgBMBJMAYAItAEkCkwBIAjEAhgMfABIEkwBZBJMAmQSTAFwEkwBVBJMAKASTAHQEkwBeBJMASgSTAFgEkwBVAjEAhgIxAEAEkwBgBJMAZgSTAGADowATBy0AbgVKAAAFRgDABRIAegXdAMAEdwDABEMAwAXOAHoGAwDAAnEAwAJm/2IFGwDABFkAwAdfAMAGRADABkwAegTrAMAGTAB6BRwAwARmAGQEhQAeBfEAtAT8AAAHkAAPBPsAAwS8AAAEmwBAAqIAmwMfABECogAzBJMAQANm//wCjwBSBKQAWgT7AKgD+QBnBPsAZwScAGcC5QAkBG8AEwUVAKgCOwCaAjv/hwSVAKgCOwCoB6IAqAUVAKgE4gBnBPsAqAT7AGcDdACoA+UAYwMqACgFFQCfBEYAAAaGABYEaAAZBEgAAQPUAEQDFAAsBGcB2gMUAEsEkwBgAhQAAAI0AIYEkwCkBJMASwSTAHUEkwATBGcB2gQAAHIEvwEnBqgAZALyADoEcgBRBJMAYAKTAEgGqABkBAD/+gNtAGMEkwBgAugANQLoADACjwBSBR0AqAU9AHYCMQCGAbX//ALoAFQDDAA+BHIAUAZIADgGkgAtBn8APgOjADYFSgAABUoAAAVKAAAFSgAABUoAAAVKAAAHSP//BRIAegR3AMAEdwDABHcAwAR3AMACcf/MAnEAuwJx/7gCcQABBd0ANQZEAMAGTAB6BkwAegZMAHoGTAB6BkwAegSTAIMGTAB6BfEAtAXxALQF8QC0BfEAtAS8AAAE6wDABVYAqASkAFoEpABaBKQAWgSkAFoEpABaBKQAWgceAFoD+QBnBJwAZwScAGcEnABnBJwAZwI7/9UCOwCIAjv/nwI7/+UE4ABnBRUAqATiAGcE4gBnBOIAZwTiAGcE4gBnBJMAYATiAGcFFQCfBRUAnwUVAJ8FFQCfBEgAAQT7AKgESAABBFkAwAJ+AKgHmAB6B7UAZgOnAFIDIwBSAa4AUgJ+AFIDtgBSBAAAUggAAFIBjAAaAYwAGgIfAEEDLQAaAy0AGgOwAEEDAgCHBogAhgIiAFcDtQBXAq0AUQKtAFABCP5+BJMAOwYmACEEkwBgAugAEQLoAEkC6AA7AugAMQQAAAABVAAAAAAAAAAAAAAIAABUAYwAGgAA/O8AAPzvAugAKQLoAC4C6AAnBcoAJAUgACQFIAAkCAQAJAgEACQCOwCoAjv/hwAA++4AAP1vAAD7/AAA/sIAAP7IAAD9CgLoACkC6ABUAugANQLoADAC6AARAugASQLoAC4C6AA7AugAMQLoACcEwQBwA80AJgRyAEwEjgBTBKAAKgSOAHIEsQBwBCwAFAS+AG4EsQBhAugAKQLoAFQC6AA1AugAMALoABEC6ABJAugALgLoADsC6AAxAugAJwMfABIAAgAAAAAAAP+cADIAAAAAAAAAAAAAAAAAAAAAAAAAAAEYAAABAgEDAAMABAAFAAYABwAIAAkACgALAAwADQAOAA8AEAARABIAEwAUABUAFgAXABgAGQAaABsAHAAdAB4AHwAgACEAIgAjACQAJQAmACcAKAApACoAKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkAOgA7ADwAPQA+AD8AQABBAEIAQwBEAEUARgBHAEgASQBKAEsATABNAE4ATwBQAFEAUgBTAFQAVQBWAFcAWABZAFoAWwBcAF0AXgBfAGAAYQEEAKMAhACFAL0AlgDoAIYAjgCLAJ0AqQCkAQUAigEGAIMAkwEHAQgAjQEJAIgAwwDeAQoAngCqAPUA9AD2AKIArQDJAMcArgBiAGMAkABkAMsAZQDIAMoAzwDMAM0AzgDpAGYA0wDQANEArwBnAPAAkQDWANQA1QBoAOsA7QCJAGoAaQBrAG0AbABuAKAAbwBxAHAAcgBzAHUAdAB2AHcA6gB4AHoAeQB7AH0AfAC4AKEAfwB+AIAAgQDsAO4AugELAQwAsACxANgA2gDcAN0A2QCyALMAtgC3AMQAtAC1AMUAhwCrAQ0BDgC+AL8AvAEPAIwA7wEQAREBEgETARQBFQEWARcBGAEZARoBGwEcAR0BHgEfAMAAwQEgASEA1wEiASMBJAElASYBJwEoASkBKgErASwBLQEuAS8BMAExATIBMwE0ATUBNgE3ATgBOQE6ATsBPAE9AT4BPwFAAUEBQgFDAUQBRQFGAUcETlVMTAJDUgd1bmkwMEEwB3VuaTAwQUQJb3ZlcnNjb3JlB3VuaTAwQjIHdW5pMDBCMwd1bmkwMEI1B3VuaTAwQjkETGRvdARsZG90Bm1pbnV0ZQZzZWNvbmQERXVybwd1bmkyMDc0B3VuaTIwNzUHdW5pMjA3Nwd1bmkyMDc4B3VuaTIwMDIHdW5pMjAwOQd1bmkyMDBCB3VuaUZFRkYHdW5pRkZGRAd1bmkwMkJDBGhvb2sNaG9va2Fib3ZlY29tYgd1bmkyMDcwB3VuaTIwNzYHdW5pMjA3OQNmX2YFZl9mX2kFZl9mX2wHdW5pMDIzNwlncmF2ZWNvbWIJYWN1dGVjb21iCXRpbGRlY29tYgd1bmkwMzA0B3VuaTAzMDgMZG90YmVsb3djb21iCXplcm8uZG5vbQhvbmUuZG5vbQh0d28uZG5vbQp0aHJlZS5kbm9tCWZvdXIuZG5vbQlmaXZlLmRub20Ic2l4LmRub20Kc2V2ZW4uZG5vbQplaWdodC5kbm9tCW5pbmUuZG5vbQd6ZXJvLmxmBm9uZS5sZgZ0d28ubGYIdGhyZWUubGYHZm91ci5sZgdmaXZlLmxmBnNpeC5sZghzZXZlbi5sZghlaWdodC5sZgduaW5lLmxmCXplcm8ubnVt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) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: normal;
font-weight: 700;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
@font-face {
font-family: 'Open Sans';
font-style: normal;
font-weight: 800;
font-stretch: normal;
src: url(data:font/ttf;base64,) format('truetype');
}
</style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header id="title-block-header">
<h1 class="title">Maybe Haskell</h1>
<p class="author">Pat Brisbin</p>
</header>
<nav id="TOC" role="doc-toc">
<ul>
<li><a href="#introduction" id="toc-introduction">Introduction</a>
<ul>
<li><a href="#an-alternate-solution" id="toc-an-alternate-solution">An
Alternate Solution</a></li>
<li><a href="#required-experience" id="toc-required-experience">Required
Experience</a></li>
<li><a href="#structure" id="toc-structure">Structure</a></li>
<li><a href="#what-this-book-is-not" id="toc-what-this-book-is-not">What
This Book is Not</a></li>
</ul></li>
<li><a href="#haskell-basics" id="toc-haskell-basics">Haskell Basics</a>
<ul>
<li><a href="#arguments" id="toc-arguments">Arguments</a></li>
<li><a href="#higher-order-functions" id="toc-higher-order-functions">Higher-order functions</a></li>
<li><a href="#operators" id="toc-operators">Operators</a></li>
<li><a href="#lambdas" id="toc-lambdas">Lambdas</a></li>
<li><a href="#our-own-data-types" id="toc-our-own-data-types">Our Own
Data Types</a></li>
<li><a href="#pattern-matching" id="toc-pattern-matching">Pattern
Matching</a></li>
<li><a href="#sum-types" id="toc-sum-types">Sum Types</a></li>
<li><a href="#kinds-and-parameters" id="toc-kinds-and-parameters">Kinds
and Parameters</a></li>
<li><a href="#maybe" id="toc-maybe">Maybe</a></li>
<li><a href="#dont-give-up" id="toc-dont-give-up">Don’t Give Up</a></li>
</ul></li>
<li><a href="#functor" id="toc-functor">Functor</a>
<ul>
<li><a href="#choices" id="toc-choices">Choices</a></li>
<li><a href="#discovering-a-functor" id="toc-discovering-a-functor">Discovering a Functor</a></li>
<li><a href="#about-type-classes" id="toc-about-type-classes">About Type
Classes</a></li>
<li><a href="#functor-1" id="toc-functor-1">Functor</a></li>
<li><a href="#the-functor-laws" id="toc-the-functor-laws">The Functor
Laws</a>
<ul>
<li><a href="#the-first-functor-law" id="toc-the-first-functor-law">The
first Functor law</a></li>
<li><a href="#the-second-functor-law" id="toc-the-second-functor-law">The second Functor law</a></li>
</ul></li>
<li><a href="#why-is-this-useful" id="toc-why-is-this-useful">Why Is
This Useful?</a></li>
<li><a href="#curried-form" id="toc-curried-form">Curried Form</a>
<ul>
<li><a href="#the-case-for-currying" id="toc-the-case-for-currying">The
Case for Currying</a></li>
<li><a href="#partial-application" id="toc-partial-application">Partial
Application</a></li>
</ul></li>
<li><a href="#recap" id="toc-recap">Recap</a></li>
</ul></li>
<li><a href="#applicative" id="toc-applicative">Applicative</a>
<ul>
<li><a href="#hiding-details" id="toc-hiding-details">Hiding
Details</a></li>
<li><a href="#follow-the-types" id="toc-follow-the-types">Follow The
Types</a></li>
<li><a href="#apply" id="toc-apply">Apply</a></li>
<li><a href="#chaining" id="toc-chaining">Chaining</a></li>
<li><a href="#applicative-in-the-wild" id="toc-applicative-in-the-wild">Applicative In the Wild</a>
<ul>
<li><a href="#json-parsing" id="toc-json-parsing">JSON parsing</a></li>
<li><a href="#option-parsing" id="toc-option-parsing">Option
parsing</a></li>
</ul></li>
</ul></li>
<li><a href="#monad" id="toc-monad">Monad</a>
<ul>
<li><a href="#more-power" id="toc-more-power">More Power</a></li>
<li><a href="#and-then" id="toc-and-then">And Then?</a></li>
<li><a href="#bind" id="toc-bind">Bind</a></li>
<li><a href="#chaining-1" id="toc-chaining-1">Chaining</a></li>
<li><a href="#do-notation" id="toc-do-notation">Do Notation</a></li>
<li><a href="#wrapping-up" id="toc-wrapping-up">Wrapping Up</a></li>
</ul></li>
<li><a href="#other-types" id="toc-other-types">Other Types</a>
<ul>
<li><a href="#either" id="toc-either">Either</a>
<ul>
<li><a href="#parsererror" id="toc-parsererror">ParserError</a></li>
<li><a href="#functor-2" id="toc-functor-2">Functor</a></li>
<li><a href="#applicative-1" id="toc-applicative-1">Applicative</a></li>
<li><a href="#monad-1" id="toc-monad-1">Monad</a></li>
</ul></li>
<li><a href="#list" id="toc-list">List</a>
<ul>
<li><a href="#tic-tac-toe-and-the-minimax-algorithm" id="toc-tic-tac-toe-and-the-minimax-algorithm">Tic-Tac-Toe and the
Minimax algorithm</a></li>
<li><a href="#applicative-2" id="toc-applicative-2">Applicative</a></li>
<li><a href="#monad-and-non-determinism" id="toc-monad-and-non-determinism">Monad and non-determinism</a></li>
<li><a href="#the-future" id="toc-the-future">The Future</a></li>
<li><a href="#return" id="toc-return">Return</a></li>
</ul></li>
<li><a href="#io" id="toc-io">IO</a>
<ul>
<li><a href="#effects-in-a-pure-world" id="toc-effects-in-a-pure-world">Effects in a pure world</a></li>
<li><a href="#statements-and-the-curse-of-do-notation" id="toc-statements-and-the-curse-of-do-notation">Statements and the
curse of do-notation</a></li>
<li><a href="#typed-puzzles" id="toc-typed-puzzles">Typed
puzzles</a></li>
<li><a href="#other-instances" id="toc-other-instances">Other
instances</a></li>
<li><a href="#learning-more" id="toc-learning-more">Learning
more</a></li>
</ul></li>
</ul></li>
<li><a href="#whats-next" id="toc-whats-next">What’s Next</a></li>
</ul>
</nav>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As a programmer, I spend a lot of time dealing with the fallout from
one specific problem: partial functions. A partial function is one that
can’t provide a valid result for all possible inputs. If you write a
function (or method) to return the first element in an array that
satisfies some condition, what do you do if no such element exists?
You’ve been given an input for which you can’t return a valid result.
Aside from raising an exception, what can you do?</p>
<p>The most popular way to to deal with this is to return a special
value that indicates failure. Ruby has <code>nil</code>, Java has
<code>null</code>, and many C functions return <code>-1</code> in
failure cases. This is a huge hassle. You now have a system in which any
value at any time can either be the value you expect or
<code>nil</code>, always.</p>
<p>For instance, if you try to find a <code>User</code>, and then treat
the value you get back as if it’s a <code>User</code> but it’s actually
<code>nil</code>, you get a <code>NoMethodError</code>. What’s worse,
that error may not happen anywhere near the problem’s source. The line
of code that created that <code>nil</code> may not even appear in the
eventual backtrace. The result is various “<code>nil</code> checks”
peppered throughout the code. Is this the best we can do?</p>
<p>The problem of partial functions is not going away. User input may be
invalid, files may not exist, networks may fail. We will always need a
way to deal with partial functions. What we don’t need is
<code>null</code>.</p>
<section id="an-alternate-solution" class="level2">
<h2>An Alternate Solution</h2>
<p>In languages with sufficiently expressive type systems, we have
another option: we can state in the types that certain values may not be
present. Functions that typically are written in a partial way can
instead be defined to return a type that captures any potential
non-presence. Not only does this make it explicit and “type checked”
that you have code to handle the case when a value isn’t present, it
also means that if a value is <em>not</em> of this special “nullable”
type, you can feel safe in assuming the value is really there. In short:
no <code>nil</code> checks are required.</p>
<p>The focus of this book will be how Haskell implements this idea via
the <code>Maybe</code> data type. This type and all the functions that
deal with it are not built-in, language-level constructs. Instead, this
is all implemented as libraries, written in a very straightforward way.
In fact, we’ll write most of that code ourselves over the course of this
short book.</p>
<p>Haskell is not the only language to have such a construct. For
example, Scala has a similar <code>Option</code> type and Swift has
<code>Optional</code> with various built-in syntax elements to make its
usage more convenient. Many of the ideas implemented in these languages
were lifted directly from Haskell. If you happen to use one of them, it
can be good to learn where the ideas originated.</p>
</section>
<section id="required-experience" class="level2">
<h2>Required Experience</h2>
<p>I’ll assume no prior Haskell experience. I expect that those reading
this book will have programmed in other, more traditional languages, but
I’ll also ask that you <em>actively combat</em> your prior programming
experience.</p>
<p>For example, you’re going to see code like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>countEvens <span class="ot">=</span> <span class="fu">length</span> <span class="op">.</span> <span class="fu">filter</span> <span class="fu">even</span></span></code></pre></div>
<p>This is a function definition written in an entirely different style
than you may be used to. Even so, I’ll bet you can guess what it does,
and even get close to how it does it: <code>filter even</code> probably
takes a list and filters it for only even elements. <code>length</code>
probably takes a list and returns the number of elements it
contains.</p>
<p>Given those fairly obvious facts, you might guess that putting two
things together with <code>(.)</code> must mean you do one and then give
the result to the other. That makes this expression a function that must
take a list and return the number of even elements it contains. Without
mentioning any actual argument, we can directly assign this function the
name <code>countEvens</code>. There’s no need in Haskell to say that
count-evens <em>of some x</em> is to take the length after filtering for
the even values <em>of that x</em>. We can state directly that
count-evens is taking the length after filtering for evens.</p>
<p>This is a relatively contrived example, but it’s an indication of the
confusion that can happen at any level: if your first reaction is “such
weird syntax! What is this crazy dot thing!?”, you’re going to have a
bad time. Instead, try to internalize the parts that make sense while
getting comfortable with <em>not</em> knowing the parts that don’t. As
you learn more, the various bits will tie together in ways you might not
expect.</p>
</section>
<section id="structure" class="level2">
<h2>Structure</h2>
<p>We’ll spend this entire book focused on a single <em>type
constructor</em> called <code>Maybe</code>. We’ll start by quickly
covering the basics of Haskell, but only far enough that we can see the
opportunity for such a type and can’t help but invent it ourselves. With
that type defined, we’ll quickly see that it’s cumbersome to use. This
is because Haskell has taken an inherently cumbersome concept and put it
right in front of us by naming it, and by requiring we deal with it at
every step.</p>
<p>From there, we’ll explore three <em>type classes</em> whose presence
will make our lives far simpler. We’ll see that <code>Maybe</code> has
all the properties required to call it a <em>functor</em>, an
<em>applicative functor</em>, and even a <em>monad</em>. These terms may
sound scary, but we’ll go through them slowly, each concept building on
the one before. These three <em>interfaces</em> are crucial to how I/O
is handled in a purely functional language such as Haskell.
Understanding them will open your eyes to a whole new world of
abstractions and demystify some notoriously opaque topics.</p>
<p>Finally, with a firm grasp on how these concepts operate in the
context of <code>Maybe</code>, we’ll discuss other types that share
these qualities. This is to reinforce the fact that these ideas are
<em>abstractions</em>. They can be applied to any type that meets
certain criteria. Ideas like <em>functor</em> and <em>monad</em> are not
limited to, or specifically tied to, the concept of partial functions or
nullable values. They apply much more broadly to things like lists,
trees, exceptions, and program evaluation.</p>
</section>
<section id="what-this-book-is-not" class="level2">
<h2>What This Book is Not</h2>
<p>I don’t intend to teach you Haskell. Rather, I want to show you
<em>barely enough</em> Haskell that I can wade into some more
interesting topics. I want to show how this <code>Maybe</code> data type
can add safety to your code base while remaining convenient, expressive,
and powerful. My hope is to show that Haskell and its “academic” ideas
are not limited to PhD thesis papers. These ideas can result directly in
cleaner, more maintainable code that solves practical problems.</p>
<p>I won’t describe how to set up a Haskell programming environment,
show you how to write and run complete Haskell programs, or dive deeply
into every language construct that we’ll encounter. If you are
interested in going further and actually learning Haskell (and I hope
you are!), then I recommend following Chris Allen’s great <a href="https://github.com/bitemyapp/learnhaskell">learning path</a>.</p>
<p>Finally, a word of general advice before you get started:</p>
<p>The type system is not your enemy. It’s your friend. It doesn’t slow
you down; it keeps you honest. Keep an open mind. Haskell is simpler
than you think. Monads are not some mystical burrito. They’re a simple
abstraction that, when applied to a variety of problems, can lead to
elegant solutions. Don’t get bogged down in what you don’t understand.
Instead, dig deeper into what you do. And above all, take your time.</p>
</section>
</section>
<section id="haskell-basics" class="level1">
<h1>Haskell Basics</h1>
<p>When we declare a function in Haskell, we first write a type
signature:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">five ::</span> <span class="dt">Int</span></span></code></pre></div>
<p>We can read this as <code>five</code> <em>of type</em>
<code>Int</code>.</p>
<p>Next, we write a definition:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>five <span class="ot">=</span> <span class="dv">5</span></span></code></pre></div>
<p>We can read this as <code>five</code> <em>is</em> <code>5</code>.</p>
<p>In Haskell, <code>=</code> is not variable assignment, it’s defining
equivalence. We’re saying here that the word <code>five</code> <em>is
equivalent to</em> the literal <code>5</code>. Anywhere you see one, you
can replace it with the other and the program will always give the same
answer. This property is called <em>referential transparency</em> and it
holds true for any Haskell definition, no matter how complicated.</p>
<p>It’s also possible to specify types with an <em>annotation</em>
rather than a signature. We can annotate any expression with
<code>:: &lt;type&gt;</code> to explicitly tell the compiler the type we
want (or expect) that expression to have.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>almostThird <span class="ot">=</span> (<span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Float</span>) <span class="op">/</span> <span class="dv">9</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 0.3333334</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>actualThird <span class="ot">=</span> (<span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Rational</span>) <span class="op">/</span> <span class="dv">9</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 1 % 3</span></span></code></pre></div>
<p>We can read these as <code>almostThird</code> is <code>3</code>,
<em>of type</em> <code>Float</code>, divided by <code>9</code> and
<code>actualThird</code> is <code>3</code>, <em>of type</em>
<code>Rational</code>, divided by <code>9</code>.</p>
<p>Type annotations and signatures are usually optional, as Haskell can
almost always tell the type of an expression by inspecting the types of
its constituent parts or seeing how it is eventually used. This process
is called <em>type inference</em>. For example, Haskell knows that
<code>actualThird</code> is a <code>Rational</code> because it saw that
<code>3</code> is a <code>Rational</code>. Since you can only use
<code>(/)</code> with arguments of the same type, it <em>enforced</em>
that <code>9</code> is also a <code>Rational</code>. Knowing that
<code>(/)</code> returns the same type as its arguments, the final
result of the division must itself be a <code>Rational</code>.</p>
<p>Good Haskellers will include a type signature on all top-level
definitions anyway. It provides executable documentation and may, in
some cases, prevent errors that occur when the compiler assigns a more
generic type than you might otherwise want.</p>
<section id="arguments" class="level3">
<h3>Arguments</h3>
<p>Defining functions that take arguments looks like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>The type signature can be confusing because the argument types are
not separated from the return type. There is a good reason for this, but
I won’t go into it yet. For now, feel free to mentally treat the thing
after the last arrow as the return type.</p>
<p>After the type signature, we give the function’s name
(<code>add</code>) and names for any arguments it takes (<code>x</code>
and <code>y</code>). On the other side of the <code>=</code>, we define
an expression using those names.</p>
</section>
<section id="higher-order-functions" class="level3">
<h3>Higher-order functions</h3>
<p>Functions can take and return other functions. These are known as <a href="http://learnyouahaskell.com/higher-order-functions">higher-order</a>
functions. In type signatures, any function arguments or return values
must be surrounded by parentheses:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">twice ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>twice f x <span class="ot">=</span> f (f x)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>twice (add <span class="dv">2</span>) <span class="dv">3</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 7</span></span></code></pre></div>
<p><code>twice</code> takes as its first argument a function of type
<code>(Int -&gt; Int)</code>. As its second argument, it takes an
<code>Int</code>. The body of the function applies the first argument
(<code>f</code>) to the second (<code>x</code>) twice, returning another
<code>Int</code>. The parentheses in the definition of
<code>twice</code> indicate grouping, not application. In Haskell,
applying a function to some argument is simple: stick them together with
a space in between. In this case, we need to group the inner
<code>(f x)</code> so the outer <code>f</code> is applied to it as
single argument. Without these parentheses, Haskell would think we were
applying <code>f</code> to two arguments: another <code>f</code> and
<code>x</code>.</p>
<p>You also saw an example of <em>partial application</em>. The
expression <code>add 2</code> returns a new function that itself takes
the argument we left off. Let’s break down that last expression to see
how it works:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Add takes two Ints and returns an Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Supplying only the first argument gives us a new function that will add 2 to</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- its argument. Its type is Int -&gt; Int</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>add <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Which is exactly the type of twice&#39;s first argument</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="ot">twice ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>twice f x <span class="ot">=</span> f (f x)</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>twice (add <span class="dv">2</span>) <span class="dv">3</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; add 2 (add 2 3)</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; add 2 5</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 7</span></span></code></pre></div>
<p>It’s OK if this doesn’t make complete sense now. I’ll talk more about
partial application as we go.</p>
</section>
<section id="operators" class="level3">
<h3>Operators</h3>
<p>In the definition of <code>add</code>, I used something called an
<em>operator</em>: <code>(+)</code>. Operators like this are not in any
way special or built-in; we can define and use them like any other
function. That said, operators have three additional (and convenient)
behaviors:</p>
<ol type="1">
<li>They are used <em>infix</em> by default, meaning they appear between
their arguments (i.e. <code>2 + 2</code>, not <code>+ 2 2</code>). To
use an operator <em>prefix</em>, it must be surrounded in parentheses
(as in <code>(+) 2 2</code>).</li>
<li>When defining an operator, we can assign custom <a href="http://en.wikipedia.org/wiki/Associative_property">associativity</a>
and <a href="http://en.wikipedia.org/wiki/Order_of_operations">precedence</a>
relative to other operators. This tells Haskell how to group expressions
like <code>2 + 3 * 5 / 10</code>.</li>
<li>We can surround an operator and <em>either</em> of its arguments in
parentheses to get a new function that accepts whichever argument we
left off. Expressions like <code>(+ 2)</code> and <code>(10 /)</code>
are examples. The former adds <code>2</code> to something and the latter
divides <code>10</code> by something. Expressions like these are called
<em>sections</em>.</li>
</ol>
<p>In Haskell, any function with a name made up entirely of punctuation
(where <a href="https://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-160002.2">The
Haskell Report</a> states very precisely what “punctuation” means)
behaves like an operator. We can also take any normally named function
and treat it like an operator by surrounding it in backticks:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Normal usage of an elem function for checking if a value is present in a list</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="fu">elem</span> <span class="dv">3</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>]</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; True</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Reads a little better infix</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span> <span class="ot">`elem`</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>]</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; True</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Or as a section, leaving out the first argument</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>intersects xs ys <span class="ot">=</span> <span class="fu">any</span> (<span class="ot">`elem`</span> xs) ys</span></code></pre></div>
</section>
<section id="lambdas" class="level3">
<h3>Lambdas</h3>
<p>The last thing we need to know about functions is that they can be
<em>anonymous</em>. Anonymous functions are called <em>lambdas</em> and
are most frequently used as arguments to higher-order functions. Often
these functional arguments exist for only a single use and giving them a
name is not otherwise valuable.</p>
<p>The syntax is a back-slash, followed by the arguments to the
function, an arrow, and finally the body of the function. A back-slash
is used because it looks similar to the Greek letter λ.</p>
<p>Here’s an example:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>twice (\x <span class="ot">-&gt;</span> x <span class="op">*</span> x <span class="op">+</span> <span class="dv">10</span>) <span class="dv">5</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 1235</span></span></code></pre></div>
<p>If you come across a code example using a lambda, you can always
rewrite it to use named functions. Here’s the process for this
example:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Grab the lambda</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>\x <span class="ot">-&gt;</span> x <span class="op">*</span> x <span class="op">+</span> <span class="dv">10</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- Name it</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>f <span class="ot">=</span> \x <span class="ot">-&gt;</span> x <span class="op">*</span> x <span class="op">+</span> <span class="dv">10</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- Replace &quot;\... -&gt;&quot; with normal arguments</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">*</span> x <span class="op">+</span> <span class="dv">10</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- Use the name instead</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>twice f <span class="dv">5</span></span></code></pre></div>
</section>
<section id="our-own-data-types" class="level2">
<h2>Our Own Data Types</h2>
<p>We’re not limited to basic types like <code>Int</code> or
<code>String</code>. As you might expect, Haskell allows you to define
custom data types:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Person</span> <span class="ot">=</span> <span class="dt">MakePerson</span> <span class="dt">String</span> <span class="dt">Int</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">--                       |      |</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">--                       |      ` The persons&#39;s age</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">--                       |</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co">--                       ` The person&#39;s name</span></span></code></pre></div>
<p>To the left of the <code>=</code> is the <em>type</em> constructor
and to the right can be one or more <em>data</em> constructors. The type
constructor is the name of the type, which is used in type signatures.
The data constructors are functions that produce values of the given
type. For example, <code>MakePerson</code> is a function that takes a
<code>String</code> and an <code>Int</code>, and returns a
<code>Person</code>. Note that I will often use the general term
“constructor” to refer to a <em>data</em> constructor if the meaning is
clear from the context.</p>
<p>When working with only one data constructor, it’s quite common to
give it the same name as the type constructor. This is because it’s
syntactically impossible to use one in place of the other, so the
compiler makes no restriction. Naming is hard. So when you have a good
name, you might as well use it in both contexts.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Person</span> <span class="ot">=</span> <span class="dt">Person</span> <span class="dt">String</span> <span class="dt">Int</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">--   |        |</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">--   |        ` Data constructor</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">--   |</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">--   ` Type constructor</span></span></code></pre></div>
<p>Once we have declared the data type, we can now use it to write
functions that construct values of this type:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pat ::</span> <span class="dt">Person</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>pat <span class="ot">=</span> <span class="dt">Person</span> <span class="st">&quot;Pat&quot;</span> <span class="dv">29</span></span></code></pre></div>
</section>
<section id="pattern-matching" class="level2">
<h2>Pattern Matching</h2>
<p>To get the individual parts back out again, we use <a href="https://www.haskell.org/tutorial/patterns.html">pattern
matching</a>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getName ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>getName (<span class="dt">Person</span> name _) <span class="ot">=</span> name</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="ot">getAge ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>getAge (<span class="dt">Person</span> _ age) <span class="ot">=</span> age</span></code></pre></div>
<p>In the definitions above, each function is looking for values
constructed with <code>Person</code>. If it gets an argument that
matches (which is guaranteed since that’s the only way to get a
<code>Person</code> in our system so far), Haskell will use that
function body with each part of the constructed value bound to the
variables given. The <code>_</code> pattern (called a <em>wildcard</em>)
is used for any parts we don’t care about. Again, this is using
<code>=</code> for equivalence (as always). We’re saying that
<code>getName</code>, when given <code>(Person name _)</code>, <em>is
equivalent to</em> <code>name</code>. It works similarly for
<code>getAge</code>.</p>
<p>Haskell offers <a href="http://en.wikibooks.org/wiki/Haskell/More_on_datatypes#Named_Fields_.28Record_Syntax.29">other</a>
<a href="http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html">ways</a>
to do this sort of thing, but we won’t get into those here.</p>
</section>
<section id="sum-types" class="level2">
<h2>Sum Types</h2>
<p>As mentioned earlier, types can have more than one data constructor.
These are called <em>sum types</em> because the total number of values
you can build of a sum type is the sum of the number of values you can
build with each of its constructors. The syntax is to separate each
constructor by a <code>|</code> symbol:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Person</span> <span class="ot">=</span> <span class="dt">PersonWithAge</span> <span class="dt">String</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">PersonWithoutAge</span> <span class="dt">String</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="ot">pat ::</span> <span class="dt">Person</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>pat <span class="ot">=</span> <span class="dt">PersonWithAge</span> <span class="st">&quot;Pat&quot;</span> <span class="dv">29</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="ot">jim ::</span> <span class="dt">Person</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>jim <span class="ot">=</span> <span class="dt">PersonWithoutAge</span> <span class="st">&quot;Jim&quot;</span></span></code></pre></div>
<p>Notice that <code>pat</code> and <code>jim</code> are both values of
type <code>Person</code>, but they’ve been constructed differently. We
can use pattern matching to inspect how a value was constructed and
accordingly choose what to do. Syntactically, this is accomplished by
providing multiple definitions of the same function, each matching a
different pattern. Each definition will be tried in the order defined,
and the first function to match will be used.</p>
<p>This works well for pulling the name out of a value of our new
<code>Person</code> type:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getName ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>getName (<span class="dt">PersonWithAge</span> name _) <span class="ot">=</span> name</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>getName (<span class="dt">PersonWithoutAge</span> name) <span class="ot">=</span> name</span></code></pre></div>
<p>But we must be careful when trying to pull out a person’s age:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getAge ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>getAge (<span class="dt">PersonWithAge</span> _ age) <span class="ot">=</span> age</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>getAge (<span class="dt">PersonWithoutAge</span> _) <span class="ot">=</span> <span class="co">-- uh-oh</span></span></code></pre></div>
<p>If we decide to be lazy and not define that second function body,
Haskell will compile, but warn us about a <em>non-exhaustive</em>
pattern match. What we’ve created at that point is a <em>partial
function</em>. If such a program ever attempts to match
<code>getAge</code> with a <code>Person</code> that has no age, we’ll
see one of the few runtime errors possible in Haskell.</p>
<p>A person’s name is always there, but their age may or may not be.
Defining two constructors makes both cases explicit and forces anyone
attempting to access a person’s age to deal with its potential
non-presence.</p>
</section>
<section id="kinds-and-parameters" class="level2">
<h2>Kinds and Parameters</h2>
<p>Imagine we wanted to generalize this <code>Person</code> type. What
if people were able to hold arbitrary things? What if what that thing is
(its type) doesn’t really matter, if the only meaningful thing we can
say about it is if it’s there or not? What we had before was a
<em>person with an age</em> or a <em>person without an age</em>. What we
want now is a <em>person with a thing</em> or a <em>person without a
thing</em>.</p>
<p>One way to do this is to <em>parameterize</em> the type:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Person</span> a <span class="ot">=</span> <span class="dt">PersonWithThing</span> <span class="dt">String</span> a <span class="op">|</span> <span class="dt">PersonWithoutThing</span> <span class="dt">String</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co">--          |                          |</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="co">--          |                          ` we can use it as an argument here</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="co">--          |</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="co">--          ` By adding a &quot;type variable&quot; here</span></span></code></pre></div>
<p>The type we’ve defined here is <code>Person a</code>. We can
construct values of type <code>Person a</code> by giving a
<code>String</code> and an <code>a</code> to
<code>PersonWithThing</code>, or by giving only a <code>String</code> to
<code>PersonWithoutThing</code>. Notice that even if we build our person
using <code>PersonWithoutThing</code>, the constructed value still has
type <code>Person a</code>.</p>
<p>The <code>a</code> is called a <em>type variable</em>. Any lowercase
value will do, but it’s common to use <code>a</code> because it’s short,
and a value of type <code>a</code> can be thought of as a value of
<em>any</em> type. Rather than hard-coding that a person has an
<code>Int</code> representing their age (or not), we can say a person is
holding some thing of type <code>a</code> (or not).</p>
<p>We can still construct people with and without ages, but now we have
to specify in the type that in this case the <code>a</code> is an
<code>Int</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithAge ::</span> <span class="dt">Person</span> <span class="dt">Int</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>patWithAge <span class="ot">=</span> <span class="dt">PersonWithThing</span> <span class="st">&quot;pat&quot;</span> <span class="dv">29</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithoutAge ::</span> <span class="dt">Person</span> <span class="dt">Int</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>patWithoutAge <span class="ot">=</span> <span class="dt">PersonWithoutThing</span> <span class="st">&quot;pat&quot;</span></span></code></pre></div>
<p>Notice how even in the case where I have no age, we still specify the
type of that thing that I do not have. In this case, we specified an
<code>Int</code> for <code>patWithoutAge</code>, but values can have (or
not have) any type of thing:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithEmail ::</span> <span class="dt">Person</span> <span class="dt">String</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>patWithEmail <span class="ot">=</span> <span class="dt">PersonWithThing</span> <span class="st">&quot;pat&quot;</span> <span class="st">&quot;pat@thoughtbot.com&quot;</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithoutEmail::</span> <span class="dt">Person</span> <span class="dt">String</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>patWithoutEmail <span class="ot">=</span> <span class="dt">PersonWithoutThing</span> <span class="st">&quot;pat&quot;</span></span></code></pre></div>
<p>We don’t have to give a concrete <code>a</code> when it doesn’t
matter. <code>patWithoutAge</code> and <code>patWithoutEmail</code> are
the same value with different types. We could define a single value with
the generic type <code>Person a</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithoutThing ::</span> <span class="dt">Person</span> a</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>patWithoutThing <span class="ot">=</span> <span class="dt">PersonWithoutThing</span> <span class="st">&quot;pat&quot;</span></span></code></pre></div>
<p>Because <code>a</code> is more general than <code>Int</code> or
<code>String</code>, a value such as this can stand in anywhere a
<code>Person Int</code> or <code>Person String</code> is needed:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithoutAge ::</span> <span class="dt">Person</span> <span class="dt">Int</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>patWithoutAge <span class="ot">=</span> patWithoutThing</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="ot">patWithoutEmail ::</span> <span class="dt">Person</span> <span class="dt">String</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>patWithoutEmail <span class="ot">=</span> patWithoutThing</span></code></pre></div>
<p>Similarly, functions that operate on people can choose whether they
care about what the person’s holding–or not. For example, getting
someone’s name shouldn’t be affected by whether they hold something, so
we can leave it unspecified:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getName ::</span> <span class="dt">Person</span> a <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>getName (<span class="dt">PersonWithThing</span> name _) <span class="ot">=</span> name</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>getName (<span class="dt">PersonWithoutThing</span> name) <span class="ot">=</span> name</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>getName patWithAge</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; &quot;pat&quot;</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>getName patWithoutEmail</span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; &quot;pat&quot;</span></span></code></pre></div>
<p>But a function that does care must specify both the type <em>and</em>
account for the case of non-presence:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ot">doubleAge ::</span> <span class="dt">Person</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>doubleAge (<span class="dt">PersonWithThing</span> _ age) <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> age</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>doubleAge (<span class="dt">PersonWithoutThing</span> _) <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>doubleAge patWithAge</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 58</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>doubleAge patWithoutAge</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 1</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>doubleAge patWithoutThing</span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 1</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>doubleAge patWithoutEmail</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Type error! Person String != Person Int</span></span></code></pre></div>
<p>In this example, <code>doubleAge</code> had to account for people
that had no age. The solution it chose was a poor one: return the
doubled age or <code>1</code>. A better choice is to not return an
<code>Int</code>; instead, return some type capable of holding both the
doubled age and the fact that we might not have had an age to double in
the first place. What we need is <code>Maybe</code>.</p>
</section>
<section id="maybe" class="level2">
<h2>Maybe</h2>
<p>Haskell’s <code>Maybe</code> type is very similar to our
<code>Person</code> example:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a</span></code></pre></div>
<p>The difference is that we’re not dragging along a name this time.
This type is only concerned with representing a value (of any type) that
is either <em>present</em> or <em>not</em>.</p>
<p>We can use this to take functions that otherwise would be
<em>partial</em> and make them <em>total</em>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Find the first element from the list for which the predicate function</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="co">--   returns True. Return Nothing if there is no such element.</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="ot">find ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>find _ [] <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>find predicate (first<span class="op">:</span>rest) <span class="ot">=</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> predicate first</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">then</span> <span class="dt">Just</span> first</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> find predicate rest</span></code></pre></div>
<p>This function has two definitions matching two different patterns: if
given the empty list, we immediately return <code>Nothing</code>.
Otherwise, the (non-empty) list is de-constructed into its
<code>first</code> element and the <code>rest</code> of the list by
matching on the <code>(:)</code> (pronounced <em>cons</em>) constructor.
Then we test whether applying the <code>predicate</code> function to
<code>first</code> returns <code>True</code>. If it does, we return
<code>Just</code> that. Otherwise, we recurse and try to find the
element in the <code>rest</code> of the list.</p>
<p>Returning a <code>Maybe</code> value forces all callers of
<code>find</code> to deal with the potential <code>Nothing</code>
case:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Warning: this is a type error, not working code!</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="ot">findUser ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">User</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>findUser uid <span class="ot">=</span> find (matchesId uid) allUsers</span></code></pre></div>
<p>This is a type error since the expression actually returns a
<code>Maybe User</code>. Instead, we have to take that
<code>Maybe User</code> and inspect it to see if something’s there or
not. We can do this via <code>case</code>, which also supports pattern
matching:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUser ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">User</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>findUser uid <span class="ot">=</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> find (matchesId uid) allUsers <span class="kw">of</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Just</span> u  <span class="ot">-&gt;</span> u</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="co">-- what to do? error?</span></span></code></pre></div>
<p>Depending on your domain and the likelihood of Maybe values, you
might find this sort of “stair-casing” propagating throughout your
system. This can lead to the thought that <code>Maybe</code> isn’t
really all that valuable over some <em>null</em> value built into the
language. If you need these <code>case</code> expressions peppered
throughout the code base, how is that better than the analogous
“<code>nil</code> checks”?</p>
</section>
<section id="dont-give-up" class="level2">
<h2>Don’t Give Up</h2>
<p>The above might leave you feeling underwhelmed. That code doesn’t
look all that better than the equivalent Ruby:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> find_user(uid)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> user <span class="kw">=</span> all_users<span class="at">.detect?</span> <span class="kw">{</span> <span class="kw">|</span>u<span class="kw">|</span> u<span class="at">.matches_id?</span>(uid) <span class="kw">}</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    user</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># what to do? error?</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>First of all, the Haskell version is type safe: <code>findUser</code>
must always return a <code>User</code> since that’s the type we’ve
specified. I’d put money on most Ruby developers returning
<code>nil</code> from the <code>else</code> branch. The Haskell type
system won’t allow that and that’s a good thing. Otherwise, we have
these values floating throughout our system that we assume are there and
in fact are not. I understand that without spending time programming in
Haskell, it’s hard to see the benefits of ruthless type safety employed
at every turn. I assure you it’s a coding experience like no other, but
I’m not here to convince you of that – at least not directly.</p>
<p>The bottom line is that an experienced Haskeller would not write this
code this way. <code>case</code> is a code smell when it comes to
<code>Maybe</code>. Almost all code using <code>Maybe</code> can be
improved from a tedious <code>case</code> evaluation using one of the
three abstractions we’ll explore in this book.</p>
<p>Let’s get started.</p>
</section>
</section>
<section id="functor" class="level1">
<h1>Functor</h1>
<p>In the last chapter, we defined a type that allows any value of type
<code>a</code> to carry with it additional information about whether
it’s actually there or not:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="ot">actuallyFive ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>actuallyFive <span class="ot">=</span> <span class="dt">Just</span> <span class="dv">5</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a><span class="ot">notReallyFive ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>notReallyFive <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>As you can see, attempting to get at the value inside is
dangerous:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getValue ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>getValue (<span class="dt">Just</span> x) <span class="ot">=</span> x</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>getValue <span class="dt">Nothing</span> <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;uh-oh&quot;</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>getValue actuallyFive</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 5</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a>getValue notReallyFive</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Runtime error!</span></span></code></pre></div>
<p>At first, this seems severely limiting: how can we use something if
we can’t (safely) get at the value inside?</p>
<section id="choices" class="level2">
<h2>Choices</h2>
<p>When confronted with some <code>Maybe a</code>, and you want to do
something with an <code>a</code>, you have three choices:</p>
<ol type="1">
<li>Use the value if you can, otherwise throw an exception</li>
<li>Use the value if you can, but still have some way of returning a
valid result if the value’s not there</li>
<li>Pass the buck and return a <code>Maybe</code> result yourself</li>
</ol>
<p>The first option is a non-starter. As you saw, it is possible to
throw runtime exceptions in Haskell via the <code>error</code> function,
but you should avoid this at all costs. We’re trying to eliminate
runtime exceptions, not add them.</p>
<p>The second option is possible only in certain scenarios. You need to
have some way to handle an incoming <code>Nothing</code>. That may mean
skipping certain aspects of your computation or substituting another
appropriate value. Usually, if you’re given a completely abstract
<code>Maybe a</code>, it’s not possible to determine a substitute
because you can’t produce a value of type <code>a</code> out of
nowhere.</p>
<p>Even if you did know the type (say you were given a
<code>Maybe Int</code>) it would be unfair to your callers if you
defined the safe substitute yourself. In one case <code>0</code> might
be best because we’re going to add something, but in another
<code>1</code> would be better because we plan to multiply. It’s best to
let them handle it themselves using a utility function like
<code>fromMaybe</code>:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fromMaybe ::</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>fromMaybe x <span class="dt">Nothing</span> <span class="ot">=</span> x</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>fromMaybe _ (<span class="dt">Just</span> x) <span class="ot">=</span> x</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>fromMaybe <span class="dv">10</span> actuallyFive</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 5</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>fromMaybe <span class="dv">10</span> notReallyFive</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 10</span></span></code></pre></div>
<p>Option 3 is actually a variation on option 2. By making your own
result a <code>Maybe</code> you always have the ability to return
<code>Nothing</code> yourself if the value isn’t present. If the value
<em>is</em> present, you can perform whatever computation you need to
and wrap what would be your normal result in <code>Just</code>.</p>
<p>The main downside is that now your callers also have to consider how
to deal with the <code>Maybe</code>. Given the same situation, they
should again make the same choice (option 3), but that only pushes the
problem up to their callers–which means any <code>Maybe</code> values
tend to go <em>viral</em>.</p>
<p>Eventually, probably at some UI boundary, someone will need to “deal
with” the <code>Maybe</code>, either by providing a substitute or
skipping some action that might otherwise take place. This should happen
only once, at that boundary. Every function between the source and the
final use should pass along the value’s potential non-presence
unchanged.</p>
<p>Even though it’s safest for every function in our system to pass
along a <code>Maybe</code> value, it would be extremely annoying to
force them all to actually take and return <code>Maybe</code> values.
Each function separately checking whether it should go ahead and perform
its computations will become repetitive and tedious. Instead, we can
completely abstract this “pass along the <code>Maybe</code>” concern
using higher-order functions and something called <em>functors</em>.</p>
</section>
<section id="discovering-a-functor" class="level2">
<h2>Discovering a Functor</h2>
<p>Imagine we had a higher-order function called
<code>whenJust</code>:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="ot">whenJust ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>whenJust f (<span class="dt">Just</span> x) <span class="ot">=</span> <span class="dt">Just</span> (f x)</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>whenJust _ <span class="dt">Nothing</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>It takes a function from <code>a</code> to <code>b</code> and a
<code>Maybe a</code>. If the value’s there, it applies the function and
wraps the result in <code>Just</code>. If the value’s not there, it
returns <code>Nothing</code>. Note that it constructs a new value using
the <code>Nothing</code> constructor. This is important because the
value we’re given is type <code>Maybe a</code> and we must return type
<code>Maybe b</code>.</p>
<p>This allows the internals of our system to be made of functions
(e.g. the <code>f</code> given to <code>whenJust</code>) that take and
return normal, non-<code>Maybe</code> values, but still “pass along the
<code>Maybe</code>” whenever we need to take a value from some source
that may fail and manipulate that value in some way. If it’s there, we
go ahead and manipulate it, but return the result as a
<code>Maybe</code> as well. If it’s not, we return <code>Nothing</code>
directly.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>whenJust (<span class="op">+</span><span class="dv">5</span>) actuallyFive</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just 10</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>whenJust (<span class="op">+</span><span class="dv">5</span>) notReallyFive</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span></code></pre></div>
<p>This function exists in Haskell’s Prelude<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> as
<code>fmap</code> in the <code>Functor</code> type class.</p>
</section>
<section id="about-type-classes" class="level2">
<h2>About Type Classes</h2>
<p>Haskell has a concept called <em>type classes</em>. These are not at
all related to the classes used in Object-oriented programming. Instead,
Haskell uses type classes for functions that may be implemented in
different ways for different data types. These are more like the
<em>interfaces</em> and <em>protocols</em> you may find in other
languages. For example, we can add or negate various kinds of numbers:
integers, floating points, rational numbers, etc. To accommodate this,
Haskell has a <a href="http://hackage.haskell.org/package/base-4.7.0.1/docs/Prelude.html#t:Num"><code>Num</code></a>
type class that includes functions like <code>(+)</code> and
<code>negate</code>. Each concrete type (<code>Int</code>,
<code>Float</code>, etc) then defines its own version of the required
functions.</p>
<p>Type classes are defined with the <code>class</code> keyword and a
<code>where</code> clause listing the types of any <em>member
functions</em>:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Num</span> a <span class="kw">where</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    (+) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    negate ::</span> a <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>Being an <em>instance</em> of a type class requires that you
implement any member functions with the correct type signatures. To make
<code>Int</code> an instance of <code>Num</code>, someone defined the
<code>(+)</code> and <code>negate</code> functions for it. This is done
with the <code>instance</code> keyword and a <code>where</code> clause
that implements the functions from the class declaration:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Int</span> <span class="kw">where</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+</span> y <span class="ot">=</span> addInt x y</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">negate</span> x <span class="ot">=</span> negateInt x</span></code></pre></div>
<p>Usually, but not always, <em>laws</em> are associated with these
functions that your implementations must satisfy. Type class laws are
important for ensuring that type classes are useful. They allow us as
developers to reason about what will happen when we use type class
functions without having to understand all of the concrete types for
which they are defined. For example, if you negate a number twice, you
should get back to the same number. This can be stated formally as:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="fu">negate</span> (<span class="fu">negate</span> x) <span class="op">==</span> x <span class="co">-- for any x</span></span></code></pre></div>
<p>Knowing that this law holds gives us a precise understanding of what
will happen when we use <code>negate</code>. Because of the laws, we get
this understanding without having to know how <code>negate</code> is
implemented for various types. This is a simple example, but we’ll see
more interesting laws with the <code>Functor</code> type class.</p>
</section>
<section id="functor-1" class="level2">
<h2>Functor</h2>
<p>Haskell defines the type class <code>Functor</code> with a single
member function, <code>fmap</code>:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>Type constructors, like <code>Maybe</code>, implement
<code>fmap</code> by defining a function where that <code>f</code> is
replaced by themselves. We can see that <code>whenJust</code> has the
correct type:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co">--          (a -&gt; b) -&gt; f     a -&gt; f     b</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="ot">whenJust ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span></code></pre></div>
<p>Therefore, we could implement a <code>Functor</code> instance for
<code>Maybe</code> with the following code:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Maybe</span> <span class="kw">where</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">fmap</span> <span class="ot">=</span> whenJust</span></code></pre></div>
<p>In reality, there is no <code>whenJust</code> function;
<code>fmap</code> is implemented directly:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Maybe</span> <span class="kw">where</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">fmap</span> f (<span class="dt">Just</span> x) <span class="ot">=</span> <span class="dt">Just</span> (f x)</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">fmap</span> _ <span class="dt">Nothing</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This definition is exactly like the one we saw earlier for
<code>whenJust</code>. The only difference is we’re now implementing it
as part of the <code>Functor</code> instance declaration for
<code>Maybe</code>. For the rest of this book, I’ll be omitting the
<code>class</code> and <code>instance</code> syntax. Instead, I’ll state
in prose when a function is part of some type class but show its type
and definition as if it was a normal, top-level function.</p>
</section>
<section id="the-functor-laws" class="level2">
<h2>The Functor Laws</h2>
<p>As mentioned, type class laws are a formal way of defining what it
means for implementations to be “well-behaved.” If someone writes a
library function and says it can work with “any <code>Functor</code>”,
that code can rely both on that type having an <code>fmap</code>
implementation, and on its operating in accordance with these laws.</p>
<section id="the-first-functor-law" class="level3">
<h3>The first Functor law</h3>
<p>The first Functor law states:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="fu">id</span> x <span class="op">==</span> <span class="fu">id</span> x</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- for any value x, of type f a (e.g. Maybe a)</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span></code></pre></div>
<p>Where <code>id</code> is the <em>identity</em> function, one which
returns whatever you give it:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> x <span class="ot">=</span> x</span></code></pre></div>
<p>Since pure functions always give the same result when given the same
input, it’s equally correct to say the functions themselves must be
equivalent, rather than applying them to “any <code>x</code>” and saying
the results must be equivalent. For this reason, the laws are usually
stated as:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="fu">id</span> <span class="op">==</span> <span class="fu">id</span></span></code></pre></div>
<p>This law says that if we call <code>fmap id</code>, the function we
get back should be equivalent to <code>id</code> itself. This is what
“well-behaved” means in this context. If you’re familiar with the common
<code>map</code> function on lists, you would expect that applying
<code>id</code> to every element in a list (as <code>map id</code> does)
gives you back the exact same list. That is exactly what you expect to
get if you apply <code>id</code> directly to the list itself. That
<code>map</code> function is actually <code>fmap</code> specialized to
the <code>[]</code> type. Hence, that behavior follows from the first
law.</p>
<p>Let’s go through the same thought exercise for <code>Maybe</code> so
you can see that this law holds for its implementation as well. We’ll
use our two example values <code>actuallyFive</code> and
<code>notReallyFive</code> from earlier:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="ot">actuallyFive ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a>actuallyFive <span class="ot">=</span> <span class="dt">Just</span> <span class="dv">5</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a><span class="ot">notReallyFive ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a>notReallyFive <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>What do we get by applying the identity function to each of
these?</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> actuallyFive</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just 5</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> notReallyFive</span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span></code></pre></div>
<p>Not too surprising. Now let’s look at <code>fmap id</code>:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="fu">id</span> actuallyFive</span></code></pre></div>
<p>Remember the definition of <code>fmap</code> for <code>Maybe</code>
values:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> f (<span class="dt">Just</span> x) <span class="ot">=</span> <span class="dt">Just</span> (f x)</span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> _ <span class="dt">Nothing</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Since <code>actuallyFive</code> matches the <code>Just</code> case,
<code>fmap</code> will apply <code>id</code> to <code>5</code>, then
re-wrap the result in <code>Just</code>:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="fu">id</span> actuallyFive</span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; fmap id (Just 5) = Just (id 5)</span></span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt;                  = Just 5</span></span></code></pre></div>
<p>And for <code>notReallyFive</code>?</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="fu">id</span> notReallyFive</span></code></pre></div>
<p>Since <code>notReallyFive</code> is <code>Nothing</code>,
<code>fmap</code> will return a new <code>Nothing</code>:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="fu">id</span> notReallyFive</span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; fmap _ Nothing = Nothing</span></span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt;                = Nothing</span></span></code></pre></div>
<p>As expected, both results are the same as applying <code>id</code>
directly.</p>
</section>
<section id="the-second-functor-law" class="level3">
<h3>The second Functor law</h3>
<p>The second law has to do with order of operations. It states:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) <span class="op">==</span> <span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g</span></code></pre></div>
<p>Where <code>(.)</code> is a function that takes two functions and
<em>composes</em> them together:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true" tabindex="-1"></a>(f <span class="op">.</span> g) x <span class="ot">=</span> f (g x)</span></code></pre></div>
<p>What this law says is that if we compose two functions together, then
<code>fmap</code> the resulting function, we should get a function that
behaves the same as when we <code>fmap</code> each function
individually, then compose the two results. Let’s prove again that this
law holds for <code>Maybe</code> by walking through an example with
<code>actuallyFive</code> and <code>notReallyFive</code>.</p>
<p>First, let’s define two concrete functions, <code>f</code> and
<code>g</code></p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a>f <span class="ot">=</span> (<span class="op">+</span><span class="dv">2</span>)</span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true" tabindex="-1"></a><span class="ot">g ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true" tabindex="-1"></a>g <span class="ot">=</span> (<span class="op">*</span><span class="dv">3</span>)</span></code></pre></div>
<p>We can <em>compose</em> these two functions to get a new function,
and call that <code>h</code>:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a><span class="ot">h ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a>h <span class="ot">=</span> f <span class="op">.</span> g</span></code></pre></div>
<p>Given the definition of <code>(.)</code>, this is equivalent to:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="ot">h ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true" tabindex="-1"></a>h x <span class="ot">=</span> f (g x)</span></code></pre></div>
<p>This new function takes a number and gives it to <code>(*3)</code>,
then it takes the result and gives it to <code>(+2)</code>:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true" tabindex="-1"></a>h <span class="dv">5</span></span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; 17</span></span></code></pre></div>
<p>We can give this function to <code>fmap</code> to get one that works
with <code>Maybe</code> values:</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> h actuallyFive</span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just 17</span></span>
<span id="cb58-3"><a href="#cb58-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb58-4"><a href="#cb58-4" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> h notReallyFive</span>
<span id="cb58-5"><a href="#cb58-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span></code></pre></div>
<p>Similarly, we can give each of <code>f</code> and <code>g</code> to
<code>fmap</code> separately to produce functions that can add 2 or
multiply 3 to a <code>Maybe Int</code> and produce another
<code>Maybe Int</code>. The resulting functions can also be composed
with <code>(.)</code> to produce a new function, <code>fh</code>:</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fh ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true" tabindex="-1"></a>fh <span class="ot">=</span> <span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g</span></code></pre></div>
<p>Again, given the definition of <code>(.)</code>, this is equivalent
to:</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fh ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true" tabindex="-1"></a>fh x <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="fu">fmap</span> g x)</span></code></pre></div>
<p>This function will call <code>fmap g</code> on its argument, which
will multiply by 3 if the number’s there or return <code>Nothing</code>
if it’s not. Then it will give that result to <code>fmap f</code>, which
will add 2 if the number’s there, or return <code>Nothing</code> if it’s
not:</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true" tabindex="-1"></a>fh actuallyFive</span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just 17</span></span>
<span id="cb61-3"><a href="#cb61-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb61-4"><a href="#cb61-4" aria-hidden="true" tabindex="-1"></a>fh notReallyFive</span>
<span id="cb61-5"><a href="#cb61-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span></code></pre></div>
<p>You should convince yourself that <code>fh</code> and
<code>fmap h</code> behave in exactly the same way. The second functor
law states that this must be the case if your type is to be a valid
<code>Functor</code>.</p>
<p>Because Haskell is referentially transparent, we can freely replace
functions with their implementations. It may require some explicit
parentheses here and there, but the code will always give the same
answer. Doing so brings us back directly to the statement of the second
law:</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true" tabindex="-1"></a>(<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g) actuallyFive</span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just 17</span></span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) actuallyFive</span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just 17</span></span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true" tabindex="-1"></a>(<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g) notReallyFive</span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-10"><a href="#cb62-10" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) notReallyFive</span>
<span id="cb62-11"><a href="#cb62-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span>
<span id="cb62-12"><a href="#cb62-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-13"><a href="#cb62-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- Therefore:</span></span>
<span id="cb62-14"><a href="#cb62-14" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) <span class="op">==</span> <span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g</span></code></pre></div>
<p>Not only can we take normal functions (those that operate on fully
present values) and give them to <code>fmap</code> to get functions that
can operate on <code>Maybe</code> values, but this law states we can do
so in any order. We can compose our system of functions together
<em>then</em> give that to <code>fmap</code> or we can <code>fmap</code>
individual functions and compose <em>those</em> together. Either way,
we’re guaranteed to get the same result. We can rely on this fact
whenever we use <code>fmap</code> for any type that’s in the
<code>Functor</code> type class.</p>
</section>
</section>
<section id="why-is-this-useful" class="level2">
<h2>Why Is This Useful?</h2>
<p>OK, enough theory. Now that we know how it works, let’s see how it’s
used. Say we have a lookup function to get from a <code>UserId</code> to
the <code>User</code> for that id. Since the user may not exist, it
returns a <code>Maybe User</code>:</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUser ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true" tabindex="-1"></a>findUser <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>I’ve left the implementation of <code>findUser</code> as
<code>undefined</code> because this doesn’t matter for our example. I’ll
do this frequently throughout the book. <code>undefined</code> is a
function with type <code>a</code>. That allows it to stand in for any
expression. If your program ever tries to evaluate it, it will raise an
exception. Still, it can be extremely useful while developing because we
can build our program incrementally, but have the compiler check our
types as we go.</p>
<p>Next, imagine we want to display a user’s name in all capitals:</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userUpperName ::</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true" tabindex="-1"></a>userUpperName u <span class="ot">=</span> <span class="fu">map</span> <span class="fu">toUpper</span> (userName u)</span></code></pre></div>
<p>The logic of getting from a <code>User</code> to that capitalized
<code>String</code> is not terribly complex, but it could be. Imagine
something like getting from a <code>User</code> to that user’s yearly
spending on products valued over $1,000. In our case the transformation
is only one function, but realistically it could be a whole suite of
functions wired together. Ideally, none of these functions should have
to think about potential non-presence or contain any “nil-checks,” as
that’s not their purpose; they should all be written to work on values
that are fully present.</p>
<p>Given <code>userUpperName</code>, which works only on present values,
we can use <code>fmap</code> to apply it to a value that may not be
present to get back the result we expect with the same level of
<em>present-ness</em>:</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true" tabindex="-1"></a><span class="ot">maybeName ::</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true" tabindex="-1"></a>maybeName <span class="ot">=</span> <span class="fu">fmap</span> userUpperName (findUser someId)</span></code></pre></div>
<p>We can do this repeatedly with every function in our system that’s
required to get from <code>findUser</code> to the eventual display of
this name. Because of the second functor law, we know that if we compose
all of these functions together then <code>fmap</code> the result, or if
we <code>fmap</code> any individual functions and compose the results,
we’ll always get the same answer. We’re free to design our system as we
see fit, but still pass along the <code>Maybe</code>s everywhere we need
to.</p>
<p>If we were doing this in the context of a web application, this
maybe-name might end up being interpolated into some HTML. It’s at this
boundary that we’ll have to “deal with” the <code>Maybe</code> value.
One option is to use the <code>fromMaybe</code> function to specify a
default value:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true" tabindex="-1"></a><span class="ot">template ::</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true" tabindex="-1"></a>template mname <span class="ot">=</span> <span class="st">&quot;&lt;span class=\&quot;username\&quot;&gt;&quot;</span> <span class="op">++</span> name <span class="op">++</span> <span class="st">&quot;&lt;/span&gt;&quot;</span></span>
<span id="cb66-3"><a href="#cb66-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb66-4"><a href="#cb66-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb66-5"><a href="#cb66-5" aria-hidden="true" tabindex="-1"></a>    name <span class="ot">=</span> fromMaybe <span class="st">&quot;(no name given)&quot;</span> mname</span></code></pre></div>
</section>
<section id="curried-form" class="level2">
<h2>Curried Form</h2>
<p>Before moving on, I need to pause briefly and answer a question I
dodged in the Haskell Basics chapter. You may have wondered why Haskell
type signatures don’t separate a function’s argument types from its
return type. The direct answer is that all functions in Haskell are in
<em>curried</em> form. This is an idea developed by and named for the
same <a href="http://en.wikipedia.org/wiki/Haskell_Curry">logician</a>
as Haskell itself.</p>
<p>A curried function is one that <em>conceptually</em> accepts multiple
arguments by actually accepting only one, but returning a function. The
returned function itself will also be curried and use the same process
to accept more arguments. This process continues for as many arguments
as are needed. In short, all functions in Haskell are of the form
<code>(a -&gt; b)</code>. A (conceptually) multi-argument function like
<code>add :: Int -&gt; Int -&gt; Int</code> is really
<code>add :: Int -&gt; (Int -&gt; Int)</code>; this matches
<code>(a -&gt; b)</code> by taking <code>a</code> as <code>Int</code>
and <code>b</code> as <code>(Int -&gt; Int)</code>.</p>
<p>The reason I didn’t talk about this earlier is that we can mostly
ignore it when writing Haskell code. We define and apply functions as if
they actually accept multiple arguments and things work as we
intuitively expect. Even partial application (a topic I hand-waved a bit
at the time) can be used effectively without realizing this is a direct
result of curried functions. It’s when we dive into concepts like
<code>Applicative</code> (the focus of the next chapter) that we need to
understand a bit more about what’s going on under the hood.</p>
<section id="the-case-for-currying" class="level3">
<h3>The Case for Currying</h3>
<p>In the implementation of purely functional programming languages,
there is value in having all functions taking exactly one argument and
returning exactly one result. Haskell is written this way, so users have
two choices for defining “multi-argument” functions.</p>
<p>We could rely solely on tuples:</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> (<span class="dt">Int</span>, <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true" tabindex="-1"></a>add (x, y) <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>This results in the sort of type signatures you might expect, where
the argument types are shown separate from the return types. The problem
with this form is that partial application can be cumbersome. How do you
add 5 to every element in a list?</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> [<span class="dt">Int</span>]</span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true" tabindex="-1"></a>f <span class="ot">=</span> <span class="fu">map</span> add5 [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb68-4"><a href="#cb68-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb68-5"><a href="#cb68-5" aria-hidden="true" tabindex="-1"></a><span class="ot">    add5 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb68-6"><a href="#cb68-6" aria-hidden="true" tabindex="-1"></a>    add5 y <span class="ot">=</span> add (<span class="dv">5</span>, y)</span></code></pre></div>
<p>Alternatively, we could write all functions in curried form:</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true" tabindex="-1"></a><span class="co">--     / One argument type, an Int</span></span>
<span id="cb69-3"><a href="#cb69-3" aria-hidden="true" tabindex="-1"></a><span class="co">--     |</span></span>
<span id="cb69-4"><a href="#cb69-4" aria-hidden="true" tabindex="-1"></a><span class="co">--     |       / One return type, a function from Int to Int</span></span>
<span id="cb69-5"><a href="#cb69-5" aria-hidden="true" tabindex="-1"></a><span class="co">--     |       |</span></span>
<span id="cb69-6"><a href="#cb69-6" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>)</span>
<span id="cb69-7"><a href="#cb69-7" aria-hidden="true" tabindex="-1"></a>add x <span class="ot">=</span> \y <span class="ot">-&gt;</span> x <span class="op">+</span> y</span>
<span id="cb69-8"><a href="#cb69-8" aria-hidden="true" tabindex="-1"></a><span class="co">--  |   |</span></span>
<span id="cb69-9"><a href="#cb69-9" aria-hidden="true" tabindex="-1"></a><span class="co">--  |   ` One body expression, a lambda from Int to Int</span></span>
<span id="cb69-10"><a href="#cb69-10" aria-hidden="true" tabindex="-1"></a><span class="co">--  |</span></span>
<span id="cb69-11"><a href="#cb69-11" aria-hidden="true" tabindex="-1"></a><span class="co">--  ` One argument variable, an Int</span></span>
<span id="cb69-12"><a href="#cb69-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span></code></pre></div>
<p>This makes partial application simpler. Since <code>add 5</code> is a
valid expression and is of the correct type to pass to <code>map</code>,
we can use it directly:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> [<span class="dt">Int</span>]</span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true" tabindex="-1"></a>f <span class="ot">=</span> <span class="fu">map</span> (add <span class="dv">5</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>While both forms are valid Haskell (in fact, the <code>curry</code>
and <code>uncurry</code> functions in the Prelude convert functions
between the two forms), the curried version was chosen as the default
and so Haskell’s syntax allows some things that make it more
convenient.</p>
<p>For example, we can name function arguments in whatever way we like;
we don’t have to always assign a single lambda expression as the
function body. In fact, these are all equivalent:</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true" tabindex="-1"></a>add <span class="ot">=</span> \x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> x <span class="op">+</span> y</span>
<span id="cb71-2"><a href="#cb71-2" aria-hidden="true" tabindex="-1"></a>add x <span class="ot">=</span> \y <span class="ot">-&gt;</span> x <span class="op">+</span> y</span>
<span id="cb71-3"><a href="#cb71-3" aria-hidden="true" tabindex="-1"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>In type signatures, <code>(-&gt;)</code> is right-associative. This
means that instead of writing:</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true" tabindex="-1"></a><span class="ot">addThree ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>))</span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true" tabindex="-1"></a>addThree x y z <span class="ot">=</span> x <span class="op">+</span> y <span class="op">+</span> z</span></code></pre></div>
<p>We can write the less-noisy:</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true" tabindex="-1"></a><span class="ot">addThree ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb73-2"><a href="#cb73-2" aria-hidden="true" tabindex="-1"></a>addThree x y z <span class="ot">=</span> x <span class="op">+</span> y <span class="op">+</span> z</span></code></pre></div>
<p>And it has the same meaning.</p>
<p>Similarly, function application is left-associative. This means that
instead of writing:</p>
<div class="sourceCode" id="cb74"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true" tabindex="-1"></a><span class="ot">six ::</span> <span class="dt">Int</span></span>
<span id="cb74-2"><a href="#cb74-2" aria-hidden="true" tabindex="-1"></a>six <span class="ot">=</span> ((addThree <span class="dv">1</span>) <span class="dv">2</span>) <span class="dv">3</span></span></code></pre></div>
<p>We can write the less-noisy:</p>
<div class="sourceCode" id="cb75"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb75-1"><a href="#cb75-1" aria-hidden="true" tabindex="-1"></a><span class="ot">six ::</span> <span class="dt">Int</span></span>
<span id="cb75-2"><a href="#cb75-2" aria-hidden="true" tabindex="-1"></a>six <span class="ot">=</span> addThree <span class="dv">1</span> <span class="dv">2</span> <span class="dv">3</span></span></code></pre></div>
<p>And it has the same meaning as well.</p>
<p>These conveniences are why we don’t actively picture functions as
curried when writing Haskell code. We can define <code>addThree</code>
naturally, as if it took three arguments, and let the rules of the
language handle currying. We can also apply <code>addThree</code>
naturally, as if it took three arguments and again the rules of the
language will handle the currying.</p>
</section>
<section id="partial-application" class="level3">
<h3>Partial Application</h3>
<p>Some languages don’t use curried functions but do support <em>partial
application</em>: supplying only some of a function’s arguments to get
back another function that accepts the arguments that were left out. We
can do this in Haskell too, but it’s not “partial” at all, since all
functions truly accept only a single argument.</p>
<p>When we wrote the following expression:</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true" tabindex="-1"></a>maybeName <span class="ot">=</span> <span class="fu">fmap</span> userUpperName (findUser someId)</span></code></pre></div>
<p>What really happened is that <code>fmap</code> was first applied to
the function <code>userUpperName</code> to return a new function of type
<code>Maybe User -&gt; Maybe String</code>.</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb77-2"><a href="#cb77-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb77-3"><a href="#cb77-3" aria-hidden="true" tabindex="-1"></a><span class="ot">userUpperName ::</span> (<span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">String</span>)</span>
<span id="cb77-4"><a href="#cb77-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb77-5"><a href="#cb77-5" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> userUpperName ::</span> <span class="dt">Maybe</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span></code></pre></div>
<p>This function is then immediately applied to
<code>(findUser someId)</code> to ultimately get that
<code>Maybe String</code>. This example shows that Haskell’s curried
functions blur the line between partial and total application. The
result is a natural and consistent syntax for doing either.</p>
</section>
</section>
<section id="recap" class="level2">
<h2>Recap</h2>
<p>So far, we’ve seen an introduction to Haskell functions and to
Haskell’s type system. We then introduced the <code>Maybe</code> type as
a new and powerful way to use that type system to describe something
about your domain–that some values may not be present–and a type class
(<code>Functor</code>) that allows for strict separation between
value-handling functions and the need to apply them to values that may
not be present.</p>
<p>We then saw some real-world code that takes advantage of these ideas
and discussed type class laws as a means of abstraction and
encapsulation. These laws give us a precise understanding of how our
code will behave without having to know its internals. Finally, we took
a brief detour into the world of currying, a foundational concept
responsible for many of the things we’ll explore next.</p>
<p>In the next chapter, we’ll talk about <em>applicative functors</em>.
If we think of a <em>functor</em> as a value in some context, supporting
an <code>fmap</code> operation for applying a function to that value
while preserving its context, <em>applicative functors</em> are functors
where the value itself <em>can be applied</em>. In simple terms: it’s a
function. These structures must then support another operation for
applying that function from within its context. That operation, combined
with currying, will grant us more power and convenience when working
with <code>Maybe</code> values.</p>
</section>
</section>
<section id="applicative" class="level1">
<h1>Applicative</h1>
<p>In the last section we saw how to use <code>fmap</code> to take a
system full of functions that operate on fully present values, free of
any <code>nil</code>-checks, and employ them to safely manipulate values
that may in fact not be present. This immediately makes many uses of
<code>Maybe</code> more convenient, while still being explicit and safe
in the face of failure and partial functions.</p>
<p>There’s another notable case where <code>Maybe</code> can cause
inconvenience, one that can’t be solved by <code>fmap</code> alone.
Imagine we’re writing some code using a web framework. It provides a
function <code>getParam</code> that takes the name of a query parameter
(passed as part of the URL in a GET HTTP request) and returns the value
for that parameter as parsed out of the current URL. Since the parameter
you name could be missing or invalid, this function returns
<code>Maybe</code>:</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb78-1"><a href="#cb78-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getParam ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb78-2"><a href="#cb78-2" aria-hidden="true" tabindex="-1"></a>getParam <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>Let’s say we also have a <code>User</code> data type in our system.
<code>User</code>s are constructed from their name and email address,
both <code>String</code>s.</p>
<div class="sourceCode" id="cb79"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span> <span class="dt">String</span> <span class="dt">String</span></span></code></pre></div>
<p>How do we build a <code>User</code> from query params representing
their name and email?</p>
<p>The most direct way is the following:</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userFromParams ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb80-2"><a href="#cb80-2" aria-hidden="true" tabindex="-1"></a>userFromParams params <span class="ot">=</span></span>
<span id="cb80-3"><a href="#cb80-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> getParam <span class="st">&quot;name&quot;</span> params <span class="kw">of</span></span>
<span id="cb80-4"><a href="#cb80-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Just</span> name <span class="ot">-&gt;</span> <span class="kw">case</span> getParam <span class="st">&quot;email&quot;</span> params <span class="kw">of</span></span>
<span id="cb80-5"><a href="#cb80-5" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Just</span> email <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="dt">User</span> name email)</span>
<span id="cb80-6"><a href="#cb80-6" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb80-7"><a href="#cb80-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span></code></pre></div>
<p><code>Maybe</code> is not making our lives easier here. Yes, type
safety is a huge implicit win, but this still looks a lot like the
tedious, defensive coding you’d find in any language:</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb81-1"><a href="#cb81-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> user_from_params(params)</span>
<span id="cb81-2"><a href="#cb81-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> name <span class="kw">=</span> get_param <span class="st">&quot;name&quot;</span> params</span>
<span id="cb81-3"><a href="#cb81-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> email <span class="kw">=</span> get_param <span class="st">&quot;email&quot;</span> params</span>
<span id="cb81-4"><a href="#cb81-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">User</span><span class="at">.new</span>(name, email)</span>
<span id="cb81-5"><a href="#cb81-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">end</span></span>
<span id="cb81-6"><a href="#cb81-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb81-7"><a href="#cb81-7" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<section id="hiding-details" class="level2">
<h2>Hiding Details</h2>
<p>So how do we do this better? What we want is code that looks as if
there is no <code>Maybe</code> involved (because that’s convenient) but
correctly accounts for <code>Maybe</code> at every step along the way
(because that’s safe). If no <code>Maybe</code>s were involved, and we
were constructing a normal <code>User</code> value, the code might look
like this:</p>
<div class="sourceCode" id="cb82"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userFromValues ::</span> <span class="dt">User</span></span>
<span id="cb82-2"><a href="#cb82-2" aria-hidden="true" tabindex="-1"></a>userFromValues <span class="ot">=</span> <span class="dt">User</span> aName anEmail</span></code></pre></div>
<p>An ideal syntax would look very similar, perhaps something like
this:</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb83-1"><a href="#cb83-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userFromMaybeValues ::</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb83-2"><a href="#cb83-2" aria-hidden="true" tabindex="-1"></a>userFromMaybeValues <span class="ot">=</span> <span class="dt">User</span> <span class="op">&lt;$&gt;</span> aMaybeName <span class="op">&lt;*&gt;</span> aMaybeEmail</span></code></pre></div>
<p>The <code>Applicative</code> type class and its <code>Maybe</code>
instance allow us to write exactly this code. Let’s see how.</p>
</section>
<section id="follow-the-types" class="level2">
<h2>Follow The Types</h2>
<p>We can start by trying to do what we want with the only tool we have
so far: <code>fmap</code>.</p>
<p>What happens when we apply <code>fmap</code> to <code>User</code>?
It’s not immediately clear because <code>User</code> has the type
<code>String -&gt; String -&gt; User</code> which doesn’t line up with
<code>(a -&gt; b)</code>. Fortunately, it only <em>appears</em> not to
line up. Remember, every function in Haskell takes one argument and
returns one result: <code>User</code>’s actual type is
<code>String -&gt; (String -&gt; User)</code>. In other words, it takes
a <code>String</code> and returns a function,
<code>(String -&gt; User)</code>. In this light, it indeed lines up with
the type <code>(a -&gt; b)</code> by taking <code>a</code> as
<code>String</code> and <code>b</code> as
<code>(String -&gt; User)</code>.</p>
<p>By substituting our types for <code>f</code>, <code>a</code>, and
<code>b</code>, we can see what the type of <code>fmap User</code>
is:</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb84-2"><a href="#cb84-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-3"><a href="#cb84-3" aria-hidden="true" tabindex="-1"></a><span class="co">--      a      -&gt;  b</span></span>
<span id="cb84-4"><a href="#cb84-4" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span>
<span id="cb84-5"><a href="#cb84-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb84-6"><a href="#cb84-6" aria-hidden="true" tabindex="-1"></a><span class="co">--           f     a      -&gt; f      b</span></span>
<span id="cb84-7"><a href="#cb84-7" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="dt">User</span><span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span></code></pre></div>
<p>So now we have a function that takes a <code>Maybe String</code> and
returns a <code>Maybe (String -&gt; User)</code>. We also have a value
of type <code>Maybe String</code> that we can give to this function,
<code>getParam &quot;name&quot; params</code>:</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb85-1"><a href="#cb85-1" aria-hidden="true" tabindex="-1"></a>getParam <span class="st">&quot;name&quot;</span><span class="ot"> params             ::</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb85-2"><a href="#cb85-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb85-3"><a href="#cb85-3" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="dt">User</span><span class="ot">                          ::</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span>
<span id="cb85-4"><a href="#cb85-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb85-5"><a href="#cb85-5" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> <span class="dt">User</span> (getParam <span class="st">&quot;name&quot;</span> params)<span class="ot"> ::</span>                 <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span></code></pre></div>
<p>The <code>Control.Applicative</code> module exports an operator
synonym for <code>fmap</code> called <code>(&lt;$&gt;)</code> (I
pronounce this as <em>fmap</em> because that’s what it’s a synonym for).
The reason this synonym exists is to get us closer to our original goal
of making expressions look as if there are no <code>Maybe</code>s
involved. Since operators are placed between their arguments, we can use
<code>(&lt;$&gt;)</code> to rewrite our expression above to an
equivalent one with less noise:</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span><span class="ot"> params ::</span> <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span></code></pre></div>
<p>This expression represents a “<code>Maybe</code> function”. We’re
accustomed to <em>values</em> in a context: a <code>Maybe Int</code>,
<code>Maybe String</code>, etc; and we saw how these were
<em>functors</em>. In this case, we have a <em>function</em> in a
context: a <code>Maybe (String -&gt; User)</code>. Since functions are
things that <em>can be applied</em>, these are called <em>applicative
functors</em>.</p>
<p>By using <code>fmap</code>, we reduced our problem space and isolated
the functionality we’re lacking, functionality we’ll ultimately get from
<code>Applicative</code>:</p>
<p>We have this:</p>
<div class="sourceCode" id="cb87"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fmapUser ::</span> <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span>
<span id="cb87-2"><a href="#cb87-2" aria-hidden="true" tabindex="-1"></a>fmapUser <span class="ot">=</span> <span class="dt">User</span> <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span> params</span></code></pre></div>
<p>And we have this:</p>
<div class="sourceCode" id="cb88"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb88-1"><a href="#cb88-1" aria-hidden="true" tabindex="-1"></a><span class="ot">aMaybeEmail ::</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb88-2"><a href="#cb88-2" aria-hidden="true" tabindex="-1"></a>aMaybeEmail <span class="ot">=</span> getParam <span class="st">&quot;email&quot;</span> params</span></code></pre></div>
<p>And we’re trying to ultimately get to this:</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userFromParams ::</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb89-2"><a href="#cb89-2" aria-hidden="true" tabindex="-1"></a>userFromParams <span class="ot">=</span> fmapUser <span class="op">&lt;*&gt;</span> aMaybeEmail</span></code></pre></div>
<p>We only have to figure out what that <code>(&lt;*&gt;)</code> should
do. At this point, we have enough things defined that we know exactly
what its type needs to be. In the next section, we’ll see how its type
pushes us to the correct implementation.</p>
</section>
<section id="apply" class="level2">
<h2>Apply</h2>
<p>The <code>(&lt;*&gt;)</code> operator is pronounced <em>apply</em>.
Specialized to <code>Maybe</code>, its job is to apply a
<code>Maybe</code> function to a <code>Maybe</code> value to produce a
<code>Maybe</code> result.</p>
<p>In our example, we have <code>fmapUser</code> of type
<code>Maybe (String -&gt; User)</code> and <code>aMaybeEmail</code> of
type <code>Maybe String</code>. We’re trying to use
<code>(&lt;*&gt;)</code> to put those together and get a
<code>Maybe User</code>. We can write that down as a type signature:</p>
<div class="sourceCode" id="cb90"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb90-1"><a href="#cb90-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">User</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span></code></pre></div>
<p>With such a specific type, this function won’t be very useful, so
let’s generalize it away from <code>String</code>s and
<code>User</code>s:</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Maybe</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span></code></pre></div>
<p>This function is part of the <code>Applicative</code> type class,
meaning it will be defined for many types. Therefore, its actual type
signature is:</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb92-1"><a href="#cb92-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;*&gt;) ::</span> f (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>Where <code>f</code> is any type that has an <code>Applicative</code>
instance (such as <code>Maybe</code>).</p>
<p>It’s important to mention this because it is the type signature
you’re going to see in any documentation about <code>Applicative</code>.
Now that I’ve done so, I’m going to go back to type signatures using
<code>Maybe</code> since that’s the specific instance we’re discussing
here.</p>
<p>The semantics of our <code>(&lt;*&gt;)</code> function are as
follows:</p>
<ul>
<li>If both the <code>Maybe</code> function and the <code>Maybe</code>
value are present, apply the function to the value and return the result
wrapped in <code>Just</code></li>
<li>Otherwise, return <code>Nothing</code></li>
</ul>
<p>We can translate that directly into code via pattern matching:</p>
<div class="sourceCode" id="cb93"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb93-1"><a href="#cb93-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Maybe</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb93-2"><a href="#cb93-2" aria-hidden="true" tabindex="-1"></a><span class="dt">Just</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Just</span> x <span class="ot">=</span> <span class="dt">Just</span> (f x)</span>
<span id="cb93-3"><a href="#cb93-3" aria-hidden="true" tabindex="-1"></a>_      <span class="op">&lt;*&gt;</span> _      <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>With this definition, and a few line breaks for readability, we
arrive at our desired goal:</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userFromParams ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb94-2"><a href="#cb94-2" aria-hidden="true" tabindex="-1"></a>userFromParams params <span class="ot">=</span> <span class="dt">User</span></span>
<span id="cb94-3"><a href="#cb94-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span> params</span>
<span id="cb94-4"><a href="#cb94-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> getParam <span class="st">&quot;email&quot;</span> params</span></code></pre></div>
<p>The result is an elegant expression with minimal noise. Compare
<em>that</em> to the stair-<code>case</code> we started with!</p>
<p>Not only is this expression elegant, it’s also safe. Because of the
semantics of <code>fmap</code> and <code>(&lt;*&gt;)</code>, if any of
the <code>getParam</code> calls return <code>Nothing</code>, our whole
<code>userFromParams</code> expression results in <code>Nothing</code>.
Only if they all return <code>Just</code> values, do we get
<code>Just</code> our user.</p>
<p>As always, Haskell’s being referentially transparent means we can
prove this by substituting the definitions of <code>fmap</code> and
<code>(&lt;*&gt;)</code> and tracing how the expression expands given
some example <code>Maybe</code> values.</p>
<p>If the first value is present, but the second is not:</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> <span class="dt">Just</span> <span class="st">&quot;Pat&quot;</span> <span class="op">&lt;*&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb95-2"><a href="#cb95-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; fmap User (Just &quot;Pat&quot;) &lt;*&gt; Nothing        (&lt;$&gt; == fmap)</span></span>
<span id="cb95-3"><a href="#cb95-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just (User &quot;Pat&quot;)      &lt;*&gt; Nothing        (fmap definition, first pattern)</span></span>
<span id="cb95-4"><a href="#cb95-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing                                   (&lt;*&gt; definition, second pattern)</span></span></code></pre></div>
<p>If the second value is present but the first is not:</p>
<div class="sourceCode" id="cb96"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb96-1"><a href="#cb96-1" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> <span class="dt">Nothing</span> <span class="op">&lt;*&gt;</span> <span class="dt">Just</span> <span class="st">&quot;pat@thoughtbot.com&quot;</span></span>
<span id="cb96-2"><a href="#cb96-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; fmap User Nothing &lt;*&gt; Just &quot;pat@thoughtbot.com&quot;</span></span>
<span id="cb96-3"><a href="#cb96-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing           &lt;*&gt; Just &quot;pat@thoughtbot.com&quot;   (fmap, second pattern)</span></span>
<span id="cb96-4"><a href="#cb96-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Nothing</span></span></code></pre></div>
<p>Finally, if both values are present:</p>
<div class="sourceCode" id="cb97"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb97-1"><a href="#cb97-1" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> <span class="dt">Just</span> <span class="st">&quot;Pat&quot;</span> <span class="op">&lt;*&gt;</span> <span class="dt">Just</span> <span class="st">&quot;pat@thoughtbot.com&quot;</span></span>
<span id="cb97-2"><a href="#cb97-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; fmap User (Just &quot;Pat&quot;) &lt;*&gt; Just &quot;pat@thoughtbot.com&quot;</span></span>
<span id="cb97-3"><a href="#cb97-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just (User &quot;Pat&quot;)      &lt;*&gt; Just &quot;pat@thoughtbot.com&quot;</span></span>
<span id="cb97-4"><a href="#cb97-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; Just (User &quot;Pat&quot; &quot;pat@thoughtbot.com&quot;)            (&lt;*&gt;, first pattern)</span></span></code></pre></div>
</section>
<section id="chaining" class="level2">
<h2>Chaining</h2>
<p>One of the nice things about this pattern is that it scales up to
functions that, conceptually at least, can accept any number of
arguments. Imagine that our <code>User</code> type had a third field
representing their age:</p>
<div class="sourceCode" id="cb98"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb98-1"><a href="#cb98-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span> <span class="dt">String</span> <span class="dt">String</span> <span class="dt">Int</span></span></code></pre></div>
<p>Since our <code>getParam</code> function can only look up parameters
of type <code>String</code>, we’ll also need a <code>getIntParam</code>
function to pull the user’s age out of our <code>Params</code>:</p>
<div class="sourceCode" id="cb99"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb99-1"><a href="#cb99-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getIntParam ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb99-2"><a href="#cb99-2" aria-hidden="true" tabindex="-1"></a>getIntParam <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>With these defined, let’s trace through the types of our applicative
expression again. This time, we have to remember that our new
<code>User</code> function is of type
<code>String -&gt; (String -&gt; (Int -&gt; User))</code>:</p>
<div class="sourceCode" id="cb100"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb100-1"><a href="#cb100-1" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">User</span>))</span>
<span id="cb100-2"><a href="#cb100-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb100-3"><a href="#cb100-3" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span><span class="ot"> params ::</span> <span class="dt">Maybe</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">User</span>))</span>
<span id="cb100-4"><a href="#cb100-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb100-5"><a href="#cb100-5" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span> params <span class="op">&lt;*&gt;</span> getParam <span class="st">&quot;email&quot;</span><span class="ot"> params ::</span> <span class="dt">Maybe</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">User</span>)</span></code></pre></div>
<p>This time, we arrive at a <code>Maybe (Int -&gt; User)</code>.
Knowing that <code>getIntParam &quot;age&quot; params</code> is of type
<code>Maybe Int</code>, we’re in the exact same position as last time
when we first discovered a need for <code>(&lt;*&gt;)</code>. Being in
the same position, we can do the same thing again:</p>
<div class="sourceCode" id="cb101"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb101-1"><a href="#cb101-1" aria-hidden="true" tabindex="-1"></a><span class="ot">userFromParams ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb101-2"><a href="#cb101-2" aria-hidden="true" tabindex="-1"></a>userFromParams params <span class="ot">=</span> <span class="dt">User</span></span>
<span id="cb101-3"><a href="#cb101-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span> params</span>
<span id="cb101-4"><a href="#cb101-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> getParam <span class="st">&quot;email&quot;</span> params</span>
<span id="cb101-5"><a href="#cb101-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> getIntParam <span class="st">&quot;age&quot;</span> params</span></code></pre></div>
<p>As our pure function (<code>User</code>) gains more arguments, we can
continue to apply it to values in context by repeatedly using
<code>(&lt;*&gt;)</code>. The process by which this happens may be
complicated, but the result is well worth it: an expression that is
concise, readable, and above all safe.</p>
</section>
<section id="applicative-in-the-wild" class="level2">
<h2>Applicative In the Wild</h2>
<p>This pattern is used in a number of places in the Haskell
ecosystem.</p>
<section id="json-parsing" class="level3">
<h3>JSON parsing</h3>
<p>As one example, the <a href="http://hackage.haskell.org/package/aeson">aeson</a> package
defines a number of functions for parsing things out of JSON values.
These functions return their results wrapped in a <code>Parser</code>
type. This is very much like <code>Maybe</code> except that it holds a
bit more information about <em>why</em> the computation failed, not only
<em>that</em> the computation failed. Not unlike our
<code>getParam</code>, these sub-parsers pull basic types
(<code>Int</code>, <code>String</code>, etc.) out of JSON values. The
<code>Applicative</code> instance for the <code>Parser</code> type can
then be used to combine them into something domain-specific, like a
<code>User</code>.</p>
<p>Again, imagine we had a rich <code>User</code> data type:</p>
<div class="sourceCode" id="cb102"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb102-1"><a href="#cb102-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span></span>
<span id="cb102-2"><a href="#cb102-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">String</span>        <span class="co">-- Name</span></span>
<span id="cb102-3"><a href="#cb102-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">String</span>        <span class="co">-- Email</span></span>
<span id="cb102-4"><a href="#cb102-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Int</span>           <span class="co">-- Age</span></span>
<span id="cb102-5"><a href="#cb102-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">UTCTime</span>       <span class="co">-- Date of birth</span></span></code></pre></div>
<p>We can tell aeson how to create a <code>User</code> from JSON, by
implementing the <code>parseJSON</code> function. That takes a JSON
object (represented by the <code>Value</code> type) and returns a
<code>Parser User</code>:</p>
<div class="sourceCode" id="cb103"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb103-1"><a href="#cb103-1" aria-hidden="true" tabindex="-1"></a><span class="ot">parseJSON ::</span> <span class="dt">Value</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">User</span></span>
<span id="cb103-2"><a href="#cb103-2" aria-hidden="true" tabindex="-1"></a>parseJSON (<span class="dt">Object</span> o) <span class="ot">=</span> <span class="dt">User</span></span>
<span id="cb103-3"><a href="#cb103-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;$&gt;</span> o <span class="op">.:</span> <span class="st">&quot;name&quot;</span></span>
<span id="cb103-4"><a href="#cb103-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> o <span class="op">.:</span> <span class="st">&quot;email&quot;</span></span>
<span id="cb103-5"><a href="#cb103-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> o <span class="op">.:</span> <span class="st">&quot;age&quot;</span></span>
<span id="cb103-6"><a href="#cb103-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> o <span class="op">.:</span> <span class="st">&quot;birth_date&quot;</span></span>
<span id="cb103-7"><a href="#cb103-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-8"><a href="#cb103-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- If we&#39;re given some JSON value besides an Object (an Array, a Number, etc) we</span></span>
<span id="cb103-9"><a href="#cb103-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- can signal failure by returning the special value mzero</span></span>
<span id="cb103-10"><a href="#cb103-10" aria-hidden="true" tabindex="-1"></a>parseJSON _ <span class="ot">=</span> mzero</span></code></pre></div>
<p>Each individual <code>o .: &quot;...&quot;</code> expression is a function that
attempts to pull the value for the given key out of a JSON
<code>Object</code>. Potential failure (missing key, invalid type, etc)
is captured by returning a value wrapped in the <code>Parser</code>
type. We can combine the individual <code>Parser</code> values together
into one <code>Parser User</code> using <code>(&lt;$&gt;)</code> and
<code>(&lt;*&gt;)</code>.</p>
<p>If any key is missing, the whole thing fails. If they’re all there,
we get the <code>User</code> we wanted. This concern is completely
isolated within the implementation of <code>(&lt;$&gt;)</code> and
<code>(&lt;*&gt;)</code> for <code>Parser</code>.</p>
</section>
<section id="option-parsing" class="level3">
<h3>Option parsing</h3>
<p>Another example is command-line options parsing via the <a href="https://github.com/pcapriotti/optparse-applicative">optparse-applicative</a>
library. The process is very similar: the library exposes low-level
parsers for primitive types like <code>Flag</code> or
<code>Argument</code>. Because this may fail, the values are wrapped in
another <code>Parser</code> type. (Though it behaves similarly, this is
this library’s own <code>Parser</code> type, not the same one as above.)
The <code>Applicative</code> instance can again be used to combine these
sub-parsers into a domain-specific <code>Options</code> value:</p>
<div class="sourceCode" id="cb104"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb104-1"><a href="#cb104-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Example program options:</span></span>
<span id="cb104-2"><a href="#cb104-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb104-3"><a href="#cb104-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- - A bool to indicate if we should be verbose, and</span></span>
<span id="cb104-4"><a href="#cb104-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- - A list of FilePaths to operate on</span></span>
<span id="cb104-5"><a href="#cb104-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb104-6"><a href="#cb104-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Options</span> <span class="ot">=</span> <span class="dt">Options</span> <span class="dt">Bool</span> [<span class="dt">FilePath</span>]</span>
<span id="cb104-7"><a href="#cb104-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb104-8"><a href="#cb104-8" aria-hidden="true" tabindex="-1"></a><span class="ot">parseOptions ::</span> <span class="dt">Parser</span> <span class="dt">Options</span></span>
<span id="cb104-9"><a href="#cb104-9" aria-hidden="true" tabindex="-1"></a>parseOptions <span class="ot">=</span> <span class="dt">Options</span></span>
<span id="cb104-10"><a href="#cb104-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;$&gt;</span> switch (short <span class="ch">&#39;v&#39;</span> <span class="op">&lt;&gt;</span> long <span class="st">&quot;verbose&quot;</span> <span class="op">&lt;&gt;</span> help <span class="st">&quot;be verbose&quot;</span>)</span>
<span id="cb104-11"><a href="#cb104-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;*&gt;</span> many (argument (metavar <span class="st">&quot;FILE&quot;</span> <span class="op">&lt;&gt;</span> help <span class="st">&quot;file to operate on&quot;</span>))</span></code></pre></div>
<p>You can ignore some of the functions here, which were included to
keep the example accurate. What’s important is that
<code>switch (...)</code> is of type <code>Parser Bool</code> and
<code>many (argument ...)</code> is of type
<code>Parser [FilePath]</code>. We use <code>(&lt;$&gt;)</code> and
<code>(&lt;*&gt;)</code> to put these two sub-parsers together with
<code>Options</code> and end up with an overall
<code>Parser Options</code>. If we add more options to our program, all
we need to do is add more fields to <code>Options</code> and continue
applying sub-parsers with <code>(&lt;*&gt;)</code>.</p>
</section>
</section>
</section>
<section id="monad" class="level1">
<h1>Monad</h1>
<p>So far, we’ve seen that as <code>Maybe</code> makes our code safer,
it also makes it less convenient. By making potential non-presence
explicit, we now need to correctly account for it at every step. We
addressed a number of scenarios by using <code>fmap</code> to “upgrade”
a system full of normal functions (free of any <code>nil</code>-checks)
into one that can take and pass along <code>Maybe</code> values. When
confronted with a new scenario that could not be handled by
<code>fmap</code> alone, we discovered a new function
<code>(&lt;*&gt;)</code> which helped ease our pain again. This chapter
is about addressing a third scenario, one that <code>fmap</code> and
even <code>(&lt;*&gt;)</code> cannot solve: dependent computations.</p>
<p>Let’s throw a monkey wrench into our <code>getParam</code> example
from earlier. This time, let’s say we’re accepting logins by either
username or email. The user can say which method they’re using by
passing a <code>type</code> param specifying “username” or “email”.</p>
<p><em>Note</em>: this whole thing is wildly insecure, but bear with
me.</p>
<p>Again, all of this is fraught with <code>Maybe</code>-ness and again,
writing it with straight-line <code>case</code> matches can get very
tedious:</p>
<div class="sourceCode" id="cb105"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb105-1"><a href="#cb105-1" aria-hidden="true" tabindex="-1"></a><span class="ot">loginUser ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb105-2"><a href="#cb105-2" aria-hidden="true" tabindex="-1"></a>loginUser params <span class="ot">=</span> <span class="kw">case</span> getParam <span class="st">&quot;type&quot;</span> <span class="kw">of</span></span>
<span id="cb105-3"><a href="#cb105-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> t <span class="ot">-&gt;</span> <span class="kw">case</span> t <span class="kw">of</span></span>
<span id="cb105-4"><a href="#cb105-4" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;username&quot;</span> <span class="ot">-&gt;</span> <span class="kw">case</span> getParam <span class="st">&quot;username&quot;</span> <span class="kw">of</span></span>
<span id="cb105-5"><a href="#cb105-5" aria-hidden="true" tabindex="-1"></a>          <span class="dt">Just</span> u <span class="ot">-&gt;</span> findUserByUserName u</span>
<span id="cb105-6"><a href="#cb105-6" aria-hidden="true" tabindex="-1"></a>          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb105-7"><a href="#cb105-7" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;email&quot;</span> <span class="ot">-&gt;</span> <span class="kw">case</span> getParam <span class="st">&quot;email&quot;</span> <span class="kw">of</span></span>
<span id="cb105-8"><a href="#cb105-8" aria-hidden="true" tabindex="-1"></a>          <span class="dt">Just</span> e <span class="ot">-&gt;</span> findUserByEmail e</span>
<span id="cb105-9"><a href="#cb105-9" aria-hidden="true" tabindex="-1"></a>          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb105-10"><a href="#cb105-10" aria-hidden="true" tabindex="-1"></a>      _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb105-11"><a href="#cb105-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Yikes.</p>
<section id="more-power" class="level2">
<h2>More Power</h2>
<p>We can’t clean this up with <code>(&lt;*&gt;)</code> because each
individual part of an <code>Applicative</code> expression doesn’t have
access to the results from any other part’s evaluation. What does that
mean? If we look at the <code>Applicative</code> expression from
before:</p>
<div class="sourceCode" id="cb106"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb106-1"><a href="#cb106-1" aria-hidden="true" tabindex="-1"></a><span class="dt">User</span> <span class="op">&lt;$&gt;</span> getParam <span class="st">&quot;name&quot;</span> params <span class="op">&lt;*&gt;</span> getParam <span class="st">&quot;email&quot;</span> params</span></code></pre></div>
<p>Here, the two results from <code>getParam &quot;name&quot;</code> and
<code>getParam &quot;email&quot;</code> (either of which could be present or not)
are passed together to <code>User</code>. If they’re both present we get
a <code>Just User</code>, otherwise <code>Nothing</code>. Within the
<code>getParam &quot;email&quot;</code> expression, you can’t reference the
(potential) result of <code>getParam &quot;name&quot;</code>.</p>
<p>We need that ability to solve our current conundrum because we need
to check the value of the “type” param to know what to do next. We need…
<em>monads</em>.</p>
</section>
<section id="and-then" class="level2">
<h2>And Then?</h2>
<p>Let’s start with a minor refactor. We’ll pull out a
<code>loginByType</code> function:</p>
<div class="sourceCode" id="cb107"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb107-1"><a href="#cb107-1" aria-hidden="true" tabindex="-1"></a><span class="ot">loginUser ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb107-2"><a href="#cb107-2" aria-hidden="true" tabindex="-1"></a>loginUser params <span class="ot">=</span> <span class="kw">case</span> getParam <span class="st">&quot;type&quot;</span> params <span class="kw">of</span></span>
<span id="cb107-3"><a href="#cb107-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> t <span class="ot">-&gt;</span> loginByType params t</span>
<span id="cb107-4"><a href="#cb107-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb107-5"><a href="#cb107-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb107-6"><a href="#cb107-6" aria-hidden="true" tabindex="-1"></a><span class="ot">loginByType ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb107-7"><a href="#cb107-7" aria-hidden="true" tabindex="-1"></a>loginByType params <span class="st">&quot;username&quot;</span> <span class="ot">=</span> <span class="kw">case</span> getParam <span class="st">&quot;username&quot;</span> params <span class="kw">of</span></span>
<span id="cb107-8"><a href="#cb107-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> u <span class="ot">-&gt;</span> findUserByUserName u</span>
<span id="cb107-9"><a href="#cb107-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb107-10"><a href="#cb107-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb107-11"><a href="#cb107-11" aria-hidden="true" tabindex="-1"></a>loginByType params <span class="st">&quot;email&quot;</span> <span class="ot">=</span> <span class="kw">case</span> getParam <span class="st">&quot;email&quot;</span> params <span class="kw">of</span></span>
<span id="cb107-12"><a href="#cb107-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> e <span class="ot">-&gt;</span> findUserByEmail e</span>
<span id="cb107-13"><a href="#cb107-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb107-14"><a href="#cb107-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb107-15"><a href="#cb107-15" aria-hidden="true" tabindex="-1"></a>loginByType _ _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Things seem to be following a pattern now: we have some value that
might not be present and some function that needs the (fully present)
value, does some other computation with it, but may itself fail.</p>
<p>Let’s abstract this concern into a new function called
<code>andThen</code>:</p>
<div class="sourceCode" id="cb108"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb108-1"><a href="#cb108-1" aria-hidden="true" tabindex="-1"></a><span class="ot">andThen ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb108-2"><a href="#cb108-2" aria-hidden="true" tabindex="-1"></a>andThen (<span class="dt">Just</span> x) f <span class="ot">=</span> f x</span>
<span id="cb108-3"><a href="#cb108-3" aria-hidden="true" tabindex="-1"></a>andThen _ _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>We’ll use the function infix via backticks for readability:</p>
<div class="sourceCode" id="cb109"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb109-1"><a href="#cb109-1" aria-hidden="true" tabindex="-1"></a><span class="ot">loginUser ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb109-2"><a href="#cb109-2" aria-hidden="true" tabindex="-1"></a>loginUser params <span class="ot">=</span></span>
<span id="cb109-3"><a href="#cb109-3" aria-hidden="true" tabindex="-1"></a>    getParam <span class="st">&quot;type&quot;</span> params <span class="ot">`andThen`</span> loginByType params</span>
<span id="cb109-4"><a href="#cb109-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb109-5"><a href="#cb109-5" aria-hidden="true" tabindex="-1"></a><span class="ot">loginByType ::</span> <span class="dt">Params</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb109-6"><a href="#cb109-6" aria-hidden="true" tabindex="-1"></a>loginByType params <span class="st">&quot;username&quot;</span> <span class="ot">=</span></span>
<span id="cb109-7"><a href="#cb109-7" aria-hidden="true" tabindex="-1"></a>    getParam <span class="st">&quot;username&quot;</span> params <span class="ot">`andThen`</span> findUserByUserName</span>
<span id="cb109-8"><a href="#cb109-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb109-9"><a href="#cb109-9" aria-hidden="true" tabindex="-1"></a>loginByType params <span class="st">&quot;email&quot;</span> <span class="ot">=</span></span>
<span id="cb109-10"><a href="#cb109-10" aria-hidden="true" tabindex="-1"></a>    getParam <span class="st">&quot;email&quot;</span> params <span class="ot">`andThen`</span> findUserByEmail</span>
<span id="cb109-11"><a href="#cb109-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb109-12"><a href="#cb109-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Still needed in case we get an invalid type</span></span>
<span id="cb109-13"><a href="#cb109-13" aria-hidden="true" tabindex="-1"></a>loginByType _ _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This cleans things up nicely. The concern of “passing along the
<code>Maybe</code>” is completely abstracted away behind
<code>andThen</code> and we’re free to describe the nature of
<em>our</em> computation. If only Haskell had such a function…</p>
</section>
<section id="bind" class="level2">
<h2>Bind</h2>
<p>If you haven’t guessed it, Haskell does have exactly this function.
Its name is <em>bind</em> and it’s defined as part of the
<code>Monad</code> type class. Here is its type signature:</p>
<div class="sourceCode" id="cb110"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb110-1"><a href="#cb110-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;=) ::</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span>
<span id="cb110-2"><a href="#cb110-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb110-3"><a href="#cb110-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- where m is the type you&#39;re saying is a Monad (e.g. Maybe)</span></span>
<span id="cb110-4"><a href="#cb110-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span></code></pre></div>
<p>Again, you can see that <code>andThen</code> has the correct
signature:</p>
<div class="sourceCode" id="cb111"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb111-1"><a href="#cb111-1" aria-hidden="true" tabindex="-1"></a><span class="co">--         m     a    (a -&gt; m     b) -&gt; m     b</span></span>
<span id="cb111-2"><a href="#cb111-2" aria-hidden="true" tabindex="-1"></a><span class="ot">andThen ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span></code></pre></div>
</section>
<section id="chaining-1" class="level2">
<h2>Chaining</h2>
<p><code>(&gt;&gt;=)</code> is defined as an operator because it’s meant
to be used infix. It’s also given an appropriate fixity so it can be
chained together intuitively. This is why I chose the name
<code>andThen</code> for my fictitious version: it can sometimes help to
read <code>x &gt;&gt;= y &gt;&gt;= z</code> as <em>x and-then y and-then
z</em>. To see this in action, let’s walk through another example.</p>
<p>Suppose we are working on a system with the following functions for
dealing with users’ addresses and their zip codes:</p>
<div class="sourceCode" id="cb112"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb112-1"><a href="#cb112-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Returns Maybe because the user may not exist</span></span>
<span id="cb112-2"><a href="#cb112-2" aria-hidden="true" tabindex="-1"></a><span class="ot">findUser ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb112-3"><a href="#cb112-3" aria-hidden="true" tabindex="-1"></a>findUser <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb112-4"><a href="#cb112-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb112-5"><a href="#cb112-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Returns Maybe because Users aren&#39;t required to have an address on file</span></span>
<span id="cb112-6"><a href="#cb112-6" aria-hidden="true" tabindex="-1"></a><span class="ot">userZip ::</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">ZipCode</span></span>
<span id="cb112-7"><a href="#cb112-7" aria-hidden="true" tabindex="-1"></a>userZip <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>Let’s also say we have a function to calculate shipping costs by zip
code. It employs <code>Maybe</code> to handle invalid zip codes:</p>
<div class="sourceCode" id="cb113"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb113-1"><a href="#cb113-1" aria-hidden="true" tabindex="-1"></a><span class="ot">shippingCost ::</span> <span class="dt">ZipCode</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb113-2"><a href="#cb113-2" aria-hidden="true" tabindex="-1"></a>shippingCost <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>We could naively calculate the shipping cost for some user given
their Id:</p>
<div class="sourceCode" id="cb114"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb114-1"><a href="#cb114-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb114-2"><a href="#cb114-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb114-3"><a href="#cb114-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> findUser uid <span class="kw">of</span></span>
<span id="cb114-4"><a href="#cb114-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Just</span> u <span class="ot">-&gt;</span> <span class="kw">case</span> userZip u <span class="kw">of</span></span>
<span id="cb114-5"><a href="#cb114-5" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Just</span> z <span class="ot">-&gt;</span> <span class="kw">case</span> shippingCost z <span class="kw">of</span></span>
<span id="cb114-6"><a href="#cb114-6" aria-hidden="true" tabindex="-1"></a>                <span class="dt">Just</span> c  <span class="ot">-&gt;</span> <span class="dt">Just</span> c</span>
<span id="cb114-7"><a href="#cb114-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb114-8"><a href="#cb114-8" aria-hidden="true" tabindex="-1"></a>                <span class="co">-- User has an invalid zip code</span></span>
<span id="cb114-9"><a href="#cb114-9" aria-hidden="true" tabindex="-1"></a>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb114-10"><a href="#cb114-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb114-11"><a href="#cb114-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">-- Use has no address</span></span>
<span id="cb114-12"><a href="#cb114-12" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb114-13"><a href="#cb114-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb114-14"><a href="#cb114-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- User not found</span></span>
<span id="cb114-15"><a href="#cb114-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This code is offensively ugly, but it’s the sort of code I write
every day in Ruby. We might hide it behind three-line methods each
holding one level of conditional, but it’s there.</p>
<p>How does this code look with <code>(&gt;&gt;=)</code>?</p>
<div class="sourceCode" id="cb115"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb115-1"><a href="#cb115-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb115-2"><a href="#cb115-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span> findUser uid <span class="op">&gt;&gt;=</span> userZip <span class="op">&gt;&gt;=</span> shippingCost</span></code></pre></div>
<p>You have to admit, that’s quite nice. Hopefully even more so when you
look back at the definition for <code>andThen</code> to see that that’s
all it took to clean up this boilerplate.</p>
</section>
<section id="do-notation" class="level2">
<h2>Do Notation</h2>
<p>There’s one more topic I’d like to mention related to monads:
<em>do-notation</em>.</p>
<p>This bit of syntactic sugar is provided by Haskell for any of its
<code>Monad</code>s. The reason is to allow functional Haskell code to
read like imperative code when building compound expressions using
<code>Monad</code>. This is valuable because monadic expressions,
especially those representing interactions with the outside world, are
often read best as a series of imperative steps:</p>
<div class="sourceCode" id="cb116"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb116-1"><a href="#cb116-1" aria-hidden="true" tabindex="-1"></a>f <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb116-2"><a href="#cb116-2" aria-hidden="true" tabindex="-1"></a>    x <span class="ot">&lt;-</span> something</span>
<span id="cb116-3"><a href="#cb116-3" aria-hidden="true" tabindex="-1"></a>    y <span class="ot">&lt;-</span> anotherThing</span>
<span id="cb116-4"><a href="#cb116-4" aria-hidden="true" tabindex="-1"></a>    z <span class="ot">&lt;-</span> combineThings x y</span>
<span id="cb116-5"><a href="#cb116-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb116-6"><a href="#cb116-6" aria-hidden="true" tabindex="-1"></a>    finalizeThing z</span></code></pre></div>
<p>That said, this sugar is available for any <code>Monad</code> and so
we can use it for <code>Maybe</code> as well. We can use
<code>Maybe</code> as an example for seeing how <em>do-notation</em>
works. Then, if and when you come across some <code>IO</code>
expressions using <em>do-notation</em>, you won’t be as surprised or
confused.</p>
<p>De-sugaring <em>do-notation</em> is a straightforward process
followed out during Haskell compilation. It can be understood best by
doing it manually. Let’s start with our end result from the last
example. We’ll translate this code step by step into the equivalent
<em>do-notation</em> form, then follow the same process backward, as the
compiler would do if we had written it that way in the first place.</p>
<div class="sourceCode" id="cb117"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb117-1"><a href="#cb117-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb117-2"><a href="#cb117-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span> findUser uid <span class="op">&gt;&gt;=</span> userZip <span class="op">&gt;&gt;=</span> shippingCost</span></code></pre></div>
<p>First, let’s add some arbitrary line breaks so the eventual
formatting aligns with what someone might write by hand:</p>
<div class="sourceCode" id="cb118"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb118-1"><a href="#cb118-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb118-2"><a href="#cb118-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb118-3"><a href="#cb118-3" aria-hidden="true" tabindex="-1"></a>    findUser uid <span class="op">&gt;&gt;=</span></span>
<span id="cb118-4"><a href="#cb118-4" aria-hidden="true" tabindex="-1"></a>    userZip <span class="op">&gt;&gt;=</span></span>
<span id="cb118-5"><a href="#cb118-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb118-6"><a href="#cb118-6" aria-hidden="true" tabindex="-1"></a>    shippingCost</span></code></pre></div>
<p>Next, let’s name the arguments to each expression via anonymous
functions, rather than relying on partial application and their curried
nature:</p>
<div class="sourceCode" id="cb119"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb119-1"><a href="#cb119-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb119-2"><a href="#cb119-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb119-3"><a href="#cb119-3" aria-hidden="true" tabindex="-1"></a>    findUser uid <span class="op">&gt;&gt;=</span> \u <span class="ot">-&gt;</span></span>
<span id="cb119-4"><a href="#cb119-4" aria-hidden="true" tabindex="-1"></a>    userZip u <span class="op">&gt;&gt;=</span> \z <span class="ot">-&gt;</span></span>
<span id="cb119-5"><a href="#cb119-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb119-6"><a href="#cb119-6" aria-hidden="true" tabindex="-1"></a>    shippingCost z</span></code></pre></div>
<p>Next, we’ll take each lambda and translate it into a
<em>binding</em>, which looks a bit like variable assignment and uses
<code>(&lt;-)</code>. You can read <code>x &lt;- y</code> as “x from
y”:</p>
<div class="sourceCode" id="cb120"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb120-1"><a href="#cb120-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb120-2"><a href="#cb120-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb120-3"><a href="#cb120-3" aria-hidden="true" tabindex="-1"></a>    u <span class="ot">&lt;-</span> findUser uid</span>
<span id="cb120-4"><a href="#cb120-4" aria-hidden="true" tabindex="-1"></a>    z <span class="ot">&lt;-</span> userZip u</span>
<span id="cb120-5"><a href="#cb120-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb120-6"><a href="#cb120-6" aria-hidden="true" tabindex="-1"></a>    shippingCost z</span></code></pre></div>
<p>Finally, we prefix the series of “statements” with
<code>do</code>:</p>
<div class="sourceCode" id="cb121"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb121-1"><a href="#cb121-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb121-2"><a href="#cb121-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb121-3"><a href="#cb121-3" aria-hidden="true" tabindex="-1"></a>    u <span class="ot">&lt;-</span> findUser uid</span>
<span id="cb121-4"><a href="#cb121-4" aria-hidden="true" tabindex="-1"></a>    z <span class="ot">&lt;-</span> userZip u</span>
<span id="cb121-5"><a href="#cb121-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb121-6"><a href="#cb121-6" aria-hidden="true" tabindex="-1"></a>    shippingCost z</span></code></pre></div>
<p>Et voilà, you have the equivalent <em>do-notation</em> version of our
function. When the compiler sees code written like this, it follows
(mostly) the same process we did, but in reverse:</p>
<p>Remove the <code>do</code> keyword:</p>
<div class="sourceCode" id="cb122"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb122-1"><a href="#cb122-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb122-2"><a href="#cb122-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb122-3"><a href="#cb122-3" aria-hidden="true" tabindex="-1"></a>    u <span class="ot">&lt;-</span> findUser uid</span>
<span id="cb122-4"><a href="#cb122-4" aria-hidden="true" tabindex="-1"></a>    z <span class="ot">&lt;-</span> userZip u</span>
<span id="cb122-5"><a href="#cb122-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb122-6"><a href="#cb122-6" aria-hidden="true" tabindex="-1"></a>    shippingCost z</span></code></pre></div>
<p>Translate each binding into a version using <code>(&gt;&gt;=)</code>
and lambdas:</p>
<div class="sourceCode" id="cb123"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb123-1"><a href="#cb123-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb123-2"><a href="#cb123-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb123-3"><a href="#cb123-3" aria-hidden="true" tabindex="-1"></a>    findUser uid <span class="op">&gt;&gt;=</span> \u <span class="ot">-&gt;</span></span>
<span id="cb123-4"><a href="#cb123-4" aria-hidden="true" tabindex="-1"></a>    userZip u <span class="op">&gt;&gt;=</span> \z <span class="ot">-&gt;</span></span>
<span id="cb123-5"><a href="#cb123-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb123-6"><a href="#cb123-6" aria-hidden="true" tabindex="-1"></a>    shippingCost z</span></code></pre></div>
<p>The compiler can stop here as all remaining steps are stylistic
changes only. To get back to our exact original expression, we only need
to <em>eta-reduce</em><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> the lambdas:</p>
<div class="sourceCode" id="cb124"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb124-1"><a href="#cb124-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb124-2"><a href="#cb124-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span></span>
<span id="cb124-3"><a href="#cb124-3" aria-hidden="true" tabindex="-1"></a>    findUser uid <span class="op">&gt;&gt;=</span></span>
<span id="cb124-4"><a href="#cb124-4" aria-hidden="true" tabindex="-1"></a>    userZip <span class="op">&gt;&gt;=</span></span>
<span id="cb124-5"><a href="#cb124-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb124-6"><a href="#cb124-6" aria-hidden="true" tabindex="-1"></a>    shippingCost</span></code></pre></div>
<p>And remove our arbitrary line breaks:</p>
<div class="sourceCode" id="cb125"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb125-1"><a href="#cb125-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findUserShippingCost ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cost</span></span>
<span id="cb125-2"><a href="#cb125-2" aria-hidden="true" tabindex="-1"></a>findUserShippingCost uid <span class="ot">=</span> findUser uid <span class="op">&gt;&gt;=</span> userZip <span class="op">&gt;&gt;=</span> shippingCost</span></code></pre></div>
</section>
<section id="wrapping-up" class="level2">
<h2>Wrapping Up</h2>
<p>And thus ends our discussion of monads. This also ends our discussion
of <code>Maybe</code>. You’ve now seen the type itself and three of
Haskell’s most important abstractions, which make its use convenient
while still remaining explicit and safe. To highlight the point that
these abstractions (<code>Functor</code>, <code>Applicative</code>, and
<code>Monad</code>) are <em>interfaces</em> shared by many types, the
next and final section will briefly show a few other useful types that
also have these three interfaces.</p>
</section>
</section>
<section id="other-types" class="level1">
<h1>Other Types</h1>
<p>The three abstractions you’ve seen all require a certain kind of
value. Specifically, a value with some other bit of information, often
referred to as its <em>context</em>. In the case of a type like
<code>Maybe a</code>, the <code>a</code> represents the value itself and
<code>Maybe</code> represents the fact that it may or may not be
present. This potential non-presence is that other bit of information,
its context.</p>
<p>Haskell’s type system is unique in that it lets us speak specifically
about this other bit of information without involving the value itself.
In fact, when defining instances for <code>Functor</code>,
<code>Applicative</code> and <code>Monad</code>, we were defining an
instance for <code>Maybe</code>, not for <code>Maybe a</code>. When we
define these instances we’re not defining how <code>Maybe a</code>, a
value in some context, behaves under certain computations, we’re
actually defining how <code>Maybe</code>, the context itself, behaves
under certain computations.</p>
<p>This kind of separation of concerns is difficult to understand when
you’re only accustomed to languages that don’t allow for it. I believe
it’s why topics like monads seem so opaque to those unfamiliar with a
type system like this. To strengthen the point that what we’re really
talking about are behaviors and contexts, not any one specific
<em>thing</em>, this chapter will explore types that represent other
kinds of contexts and show how they behave under all the same
computations we saw for <code>Maybe</code>.</p>
<section id="either" class="level2">
<h2>Either</h2>
<p>Haskell has another type to help with computations that may fail:</p>
<div class="sourceCode" id="cb126"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb126-1"><a href="#cb126-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Either</span> a b <span class="ot">=</span> <span class="dt">Left</span> a <span class="op">|</span> <span class="dt">Right</span> b</span></code></pre></div>
<p>Traditionally, the <code>Right</code> constructor is used for a
successful result (what a function would have returned normally) and
<code>Left</code> is used in the failure case. The value of type
<code>a</code> given to the <code>Left</code> constructor is meant to
hold information about the failure: why did it fail? This is only a
convention, but it’s a strong one that we’ll use throughout this
chapter. To see one formalization of this convention, take a look at <a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html">Control.Monad.Except</a>.
It can appear intimidating because it is so generalized, but <a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html#g:3">Example
1</a> should look a lot like what I’m about to walk through here.</p>
<p>With <code>Maybe a</code>, the <code>a</code> was the value and
<code>Maybe</code> was the context. Therefore, we made instances of
<code>Functor</code>, <code>Applicative</code>, and <code>Monad</code>
for <code>Maybe</code> (not <code>Maybe a</code>). With
<code>Either</code> as we’ve written it above, <code>b</code> is the
value and <code>Either a</code> is the context, therefore Haskell has
instances of <code>Functor</code>, <code>Applicative</code>, and
<code>Monad</code> for <code>Either a</code> (not
<code>Either a b</code>).</p>
<p>This use of <code>Left a</code> to represent failure with error
information of type <code>a</code> can get confusing when we start
looking at functions like <code>fmap</code>. Here’s why: the generalized
type of <code>fmap</code> talks about <code>f a</code> and I said our
instance would be for <code>Either a</code> making that
<code>Either a a</code>, but they aren’t the same <code>a</code>!</p>
<p>For this reason, we can imagine an alternate definition of
<code>Either</code> that uses different variables. This is perfectly
reasonable since the variables are chosen arbitrarily anyway:</p>
<div class="sourceCode" id="cb127"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb127-1"><a href="#cb127-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Either</span> e a <span class="ot">=</span> <span class="dt">Left</span> e <span class="op">|</span> <span class="dt">Right</span> a</span></code></pre></div>
<p>When we get to <code>fmap</code> (and others), things are
clearer:</p>
<div class="sourceCode" id="cb128"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb128-1"><a href="#cb128-1" aria-hidden="true" tabindex="-1"></a><span class="co">--      (a -&gt; b)    f        a -&gt; f        b</span></span>
<span id="cb128-2"><a href="#cb128-2" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Either</span> e a <span class="ot">-&gt;</span> <span class="dt">Either</span> e b</span></code></pre></div>
<section id="parsererror" class="level3">
<h3>ParserError</h3>
<p>As an example, consider some kind of parser. If parsing fails, it
would be nice to include some information about what triggered the
failure. To accomplish this, we first define a type to represent this
information. For our purposes, it’s the line and column where something
unexpected appeared, but it could be much richer than that including
what was expected and what was seen instead:</p>
<div class="sourceCode" id="cb129"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb129-1"><a href="#cb129-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ParserError</span> <span class="ot">=</span> <span class="dt">ParserError</span> <span class="dt">Int</span> <span class="dt">Int</span></span></code></pre></div>
<p>From this, we can make a domain-specific type alias built on top of
<code>Either</code>. We can say a value that we parse may fail. If it
does, error information will appear in a <code>Left</code>-constructed
result. If it succeeds, we’ll get the <code>a</code> we originally
wanted in a <code>Right</code>-constructed result.</p>
<div class="sourceCode" id="cb130"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb130-1"><a href="#cb130-1" aria-hidden="true" tabindex="-1"></a><span class="co">--              Either e           a    = Left e           | Right a</span></span>
<span id="cb130-2"><a href="#cb130-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Parsed</span> a <span class="ot">=</span> <span class="dt">Either</span> <span class="dt">ParserError</span> a <span class="co">-- = Left ParserError | Right a</span></span></code></pre></div>
<p>Finally, we can give an informative type to functions that may
produce such results:</p>
<div class="sourceCode" id="cb131"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb131-1"><a href="#cb131-1" aria-hidden="true" tabindex="-1"></a><span class="ot">parseJSON ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parsed</span> <span class="dt">JSON</span></span>
<span id="cb131-2"><a href="#cb131-2" aria-hidden="true" tabindex="-1"></a>parseJSON <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>This informs callers of <code>parseJSON</code> that it may fail and,
if it does, the invalid character and line can be found:</p>
<div class="sourceCode" id="cb132"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb132-1"><a href="#cb132-1" aria-hidden="true" tabindex="-1"></a>jsonString <span class="ot">=</span> <span class="st">&quot;...&quot;</span></span>
<span id="cb132-2"><a href="#cb132-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb132-3"><a href="#cb132-3" aria-hidden="true" tabindex="-1"></a><span class="kw">case</span> parseJSON jsonString <span class="kw">of</span></span>
<span id="cb132-4"><a href="#cb132-4" aria-hidden="true" tabindex="-1"></a>   <span class="dt">Right</span> json <span class="ot">-&gt;</span>                 <span class="co">-- do something with json</span></span>
<span id="cb132-5"><a href="#cb132-5" aria-hidden="true" tabindex="-1"></a>   <span class="dt">Left</span> (<span class="dt">ParserError</span> ln col) <span class="ot">-&gt;</span>  <span class="co">-- do something with the error information</span></span></code></pre></div>
</section>
<section id="functor-2" class="level3">
<h3>Functor</h3>
<p>You may have noticed that we’ve reached the same conundrum as with
<code>Maybe</code>: often, the best thing to do if we encounter a
<code>Left</code> result is to pass it along to our own callers.
Wouldn’t it be nice if we could take some JSON-manipulating function and
apply it directly to something that we parse? Wouldn’t it be nice if the
“pass along the errors” concern were handled separately?</p>
<div class="sourceCode" id="cb133"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb133-1"><a href="#cb133-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Replace the value at the given key with the new value</span></span>
<span id="cb133-2"><a href="#cb133-2" aria-hidden="true" tabindex="-1"></a><span class="ot">replace ::</span> <span class="dt">Key</span> <span class="ot">-&gt;</span> <span class="dt">Value</span> <span class="ot">-&gt;</span> <span class="dt">JSON</span> <span class="ot">-&gt;</span> <span class="dt">JSON</span></span>
<span id="cb133-3"><a href="#cb133-3" aria-hidden="true" tabindex="-1"></a>replace <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb133-4"><a href="#cb133-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb133-5"><a href="#cb133-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb133-6"><a href="#cb133-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- This is a type error!</span></span>
<span id="cb133-7"><a href="#cb133-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb133-8"><a href="#cb133-8" aria-hidden="true" tabindex="-1"></a><span class="co">--  replace &quot;admin&quot; False is (JSON -&gt; JSON), but parseJSON returns (Parsed JSON)</span></span>
<span id="cb133-9"><a href="#cb133-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb133-10"><a href="#cb133-10" aria-hidden="true" tabindex="-1"></a>replace <span class="st">&quot;admin&quot;</span> <span class="dt">False</span> (parseJSON jsonString)</span></code></pre></div>
<p><code>Parsed a</code> is a value in some context, like
<code>Maybe a</code>. This time, rather than only
present-or-non-present, the context is richer. It represents
present-or-non-present-with-error. Can you think of how this context
should be accounted for under an operation like <code>fmap</code>?</p>
<div class="sourceCode" id="cb134"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb134-1"><a href="#cb134-1" aria-hidden="true" tabindex="-1"></a><span class="co">--      (a -&gt; b) -&gt; f        a -&gt; f        b</span></span>
<span id="cb134-2"><a href="#cb134-2" aria-hidden="true" tabindex="-1"></a><span class="co">--      (a -&gt; b) -&gt; Either e a -&gt; Either e b</span></span>
<span id="cb134-3"><a href="#cb134-3" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parsed</span>   a <span class="ot">-&gt;</span> <span class="dt">Parsed</span>   b</span>
<span id="cb134-4"><a href="#cb134-4" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> f (<span class="dt">Right</span> v) <span class="ot">=</span> <span class="dt">Right</span> (f v)</span>
<span id="cb134-5"><a href="#cb134-5" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> _ (<span class="dt">Left</span> e)  <span class="ot">=</span> <span class="dt">Left</span> e</span></code></pre></div>
<p>If the value is there, we apply the given function to it. If it’s
not, we pass along the error. Now we can do something like this:</p>
<div class="sourceCode" id="cb135"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb135-1"><a href="#cb135-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> (replace <span class="st">&quot;admin&quot;</span> <span class="dt">False</span>) (parseJSON jsonString)</span></code></pre></div>
<p>If the incoming string is valid, we get a successful
<code>Parsed JSON</code> result with the <code>&quot;admin&quot;</code> key
replaced by <code>False</code>. Otherwise, we get an unsuccessful
<code>Parsed JSON</code> result with the original error message still
available.</p>
<p>Knowing that <code>Control.Applicative</code> provides
<code>(&lt;$&gt;)</code> as an infix synonym for <code>fmap</code>, we
could also use that to make this read a bit better:</p>
<div class="sourceCode" id="cb136"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb136-1"><a href="#cb136-1" aria-hidden="true" tabindex="-1"></a>replace <span class="st">&quot;admin&quot;</span> <span class="dt">False</span> <span class="op">&lt;$&gt;</span> parseJSON jsonString</span></code></pre></div>
<p>Speaking of <code>Applicative</code>…</p>
</section>
<section id="applicative-1" class="level3">
<h3>Applicative</h3>
<p>It would also be nice if we could take two potentially failed results
and pass them as arguments to some function that takes normal values. If
any result fails, the overall result is also a failure. If all are
successful, we get a successful overall result. This sounds a lot like
what we did with <code>Maybe</code>. The only difference is that we’re
doing it for a different kind of context.</p>
<div class="sourceCode" id="cb137"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb137-1"><a href="#cb137-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Given two json objects, merge them into one</span></span>
<span id="cb137-2"><a href="#cb137-2" aria-hidden="true" tabindex="-1"></a><span class="ot">merge ::</span> <span class="dt">JSON</span> <span class="ot">-&gt;</span> <span class="dt">JSON</span> <span class="ot">-&gt;</span> <span class="dt">JSON</span></span>
<span id="cb137-3"><a href="#cb137-3" aria-hidden="true" tabindex="-1"></a>merge <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb137-4"><a href="#cb137-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb137-5"><a href="#cb137-5" aria-hidden="true" tabindex="-1"></a>jsonString1 <span class="ot">=</span> <span class="st">&quot;...&quot;</span></span>
<span id="cb137-6"><a href="#cb137-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb137-7"><a href="#cb137-7" aria-hidden="true" tabindex="-1"></a>jsonString2 <span class="ot">=</span> <span class="st">&quot;...&quot;</span></span>
<span id="cb137-8"><a href="#cb137-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb137-9"><a href="#cb137-9" aria-hidden="true" tabindex="-1"></a>merge <span class="op">&lt;$&gt;</span> parseJSON jsonString1 <span class="op">&lt;*&gt;</span> parseJSON jsonString2</span></code></pre></div>
<p><code>merge &lt;$&gt; parseJSON jsonString1</code> gives us a
<code>Parsed (JSON -&gt; JSON)</code>. (If this doesn’t make sense,
glance back at the examples in the Applicative chapter.) What we have is
a <em>function</em> in a <code>Parsed</code> context.
<code>parseJSON jsonString2</code> gives us a <code>Parsed JSON</code>,
a <em>value</em> in a <code>Parsed</code> context. The job of
<code>(&lt;*&gt;)</code> is to apply the <code>Parsed</code> function to
the <code>Parsed</code> value and produce a <code>Parsed</code>
result.</p>
<p>Defining <code>(&lt;*&gt;)</code> starts out all right: if both
values are present we’ll get the result of applying the function wrapped
up again in <code>Right</code>. If the second value’s not there, that
error is preserved as a new <code>Left</code> value:</p>
<div class="sourceCode" id="cb138"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb138-1"><a href="#cb138-1" aria-hidden="true" tabindex="-1"></a><span class="co">--       f        (a -&gt; b) -&gt; f        a -&gt; f        b</span></span>
<span id="cb138-2"><a href="#cb138-2" aria-hidden="true" tabindex="-1"></a><span class="co">--       Either e (a -&gt; b) -&gt; Either e a -&gt; Either e b</span></span>
<span id="cb138-3"><a href="#cb138-3" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Parsed</span>   (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parsed</span>   a <span class="ot">-&gt;</span> <span class="dt">Parsed</span>   b</span>
<span id="cb138-4"><a href="#cb138-4" aria-hidden="true" tabindex="-1"></a><span class="dt">Right</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Right</span> x <span class="ot">=</span> <span class="dt">Right</span> (f x)</span>
<span id="cb138-5"><a href="#cb138-5" aria-hidden="true" tabindex="-1"></a><span class="dt">Right</span> _ <span class="op">&lt;*&gt;</span> <span class="dt">Left</span> e <span class="ot">=</span> <span class="dt">Left</span> e</span></code></pre></div>
<p>Astute readers may notice that we could reduce this to one pattern by
using <code>fmap</code>. This is left as an exercise.</p>
<p>What about the case where the first argument is <code>Left</code>? At
first this seems trivial: there’s no use inspecting the second value
because we know something has already failed, so let’s pass that along,
right? Well, what if the second value was also an error? Which error
should we keep? Either way we discard one of them. Any potential loss of
information should be met with pause.</p>
<p>It <a href="https://gist.github.com/pbrisbin/b9a0c142d6ccdb8580a5">turns
out</a>, it doesn’t matter, at least not as far as the Applicative Laws
are concerned. If choosing one over the other had violated any of the
laws, we would have had our answer. Beyond those, we don’t know how this
instance will eventually be used by end-users and we can’t say which is
the “right” choice standing here now.</p>
<p>Given that the choice is arbitrary, I present the actual definition
from <code>Control.Applicative</code>:</p>
<div class="sourceCode" id="cb139"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb139-1"><a href="#cb139-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Left</span> e <span class="op">&lt;*&gt;</span> _ <span class="ot">=</span> <span class="dt">Left</span> e</span></code></pre></div>
</section>
<section id="monad-1" class="level3">
<h3>Monad</h3>
<p>When thinking through the <code>Monad</code> instance for our
<code>Parsed</code> type, we don’t have the same issue of deciding which
error to propagate. Remember that the extra power offered by monads is
that computations can depend on the results of prior computations. When
the context involved represents failure (which may not always be the
case!), any single failing computation must trigger the omission of all
subsequent computations (since they could be depending on some result
that’s not there). This means we only need to propagate that first
failure.</p>
<p>Let’s say we’re interacting with a JSON web service for getting blog
post content. The responses include the body of the post as a string of
HTML:</p>
<pre><code>{
  &quot;title&quot;: &quot;A sweet blog post&quot;,
  &quot;body&quot;: &quot;&lt;p&gt;The post content...&lt;/p&gt;&quot;
}</code></pre>
<p>Parsing JSON like this includes parsing the value at the
<code>&quot;body&quot;</code> key into a structured <code>HTML</code> data type.
For this, we can re-use our <code>Parsed</code> type:</p>
<div class="sourceCode" id="cb141"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb141-1"><a href="#cb141-1" aria-hidden="true" tabindex="-1"></a><span class="ot">parseHTML ::</span> <span class="dt">Value</span> <span class="ot">-&gt;</span> <span class="dt">Parsed</span> <span class="dt">HTML</span></span>
<span id="cb141-2"><a href="#cb141-2" aria-hidden="true" tabindex="-1"></a>parseHTML <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>We can directly parse a <code>String</code> of JSON into the
<code>HTML</code> present at one of its keys by binding the two parses
together with <code>(&gt;&gt;=)</code>:</p>
<div class="sourceCode" id="cb142"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb142-1"><a href="#cb142-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Grab the value at the given key</span></span>
<span id="cb142-2"><a href="#cb142-2" aria-hidden="true" tabindex="-1"></a><span class="ot">at ::</span> <span class="dt">Key</span> <span class="ot">-&gt;</span> <span class="dt">JSON</span> <span class="ot">-&gt;</span> <span class="dt">Value</span></span>
<span id="cb142-3"><a href="#cb142-3" aria-hidden="true" tabindex="-1"></a>at <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb142-4"><a href="#cb142-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb142-5"><a href="#cb142-5" aria-hidden="true" tabindex="-1"></a><span class="ot">parseBody ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parsed</span> <span class="dt">HTML</span></span>
<span id="cb142-6"><a href="#cb142-6" aria-hidden="true" tabindex="-1"></a>parseBody jsonString <span class="ot">=</span> parseJSON jsonString <span class="op">&gt;&gt;=</span> parseHTML <span class="op">.</span> at <span class="st">&quot;body&quot;</span></span></code></pre></div>
<p>First, <code>parseJSON jsonString</code> gives us a
<code>Parsed JSON</code>. This is the <code>m a</code> in
<code>(&gt;&gt;=)</code>’s type signature. Then we use <code>(.)</code>
to compose a function that gets the value at the <code>&quot;body&quot;</code> key
and passes it to <code>parseHTML</code>. The type of this function is
<code>(JSON -&gt; Parsed HTML)</code>, which aligns with the
<code>(a -&gt; m b)</code> of <code>(&gt;&gt;=)</code>’s second
argument. Knowing that <code>(&gt;&gt;=)</code> will return
<code>m b</code>, we can see that that’s the <code>Parsed HTML</code>
we’re after.</p>
<p>If both parses succeed, we get a <code>Right</code>-constructed value
containing the <code>HTML</code> we want. If either parse fails, we get
a <code>Left</code>-constructed value containing the
<code>ParserError</code> from whichever failed.</p>
<p>Allowing such a readable expression (<em>parse JSON and then parse
HTML at body</em>), requires the following straightforward
implementation for <code>(&gt;&gt;=)</code>:</p>
<div class="sourceCode" id="cb143"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb143-1"><a href="#cb143-1" aria-hidden="true" tabindex="-1"></a><span class="co">--       m        a -&gt; (a -&gt; m        b) -&gt; m        b</span></span>
<span id="cb143-2"><a href="#cb143-2" aria-hidden="true" tabindex="-1"></a><span class="co">--       Either e a -&gt; (a -&gt; Either e b) -&gt; Either e b</span></span>
<span id="cb143-3"><a href="#cb143-3" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;=) ::</span> <span class="dt">Parsed</span>   a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Parsed</span>   b) <span class="ot">-&gt;</span> <span class="dt">Parsed</span>   b</span>
<span id="cb143-4"><a href="#cb143-4" aria-hidden="true" tabindex="-1"></a><span class="dt">Right</span> v <span class="op">&gt;&gt;=</span> f <span class="ot">=</span> f v</span>
<span id="cb143-5"><a href="#cb143-5" aria-hidden="true" tabindex="-1"></a><span class="dt">Left</span> e <span class="op">&gt;&gt;=</span> _ <span class="ot">=</span> <span class="dt">Left</span> e</span></code></pre></div>
<p>Armed with instances for <code>Functor</code>,
<code>Applicative</code>, and <code>Monad</code> for both
<code>Maybe</code> and <code>Either e</code>, we can use the same set of
functions (those with <code>Functor f</code>, <code>Applicative f</code>
or <code>Monad m</code> in their class constraints) and apply them to a
variety of functions that may fail (with or without useful error
information).</p>
<p>This is a great way to reduce a project’s maintenance burden. If you
start with functions returning <code>Maybe</code> values but use
generalized functions for (e.g.) any <code>Monad m</code>, you can later
upgrade to a fully fledged <code>Error</code> type based on
<code>Either</code> without having to change most of the code base.</p>
</section>
</section>
<section id="list" class="level2">
<h2>List</h2>
<p>At various points in the book, I relied on most programmers having an
understanding of arrays and lists of elements to ease the learning curve
up to <code>Maybe</code> and particularly <code>fmap</code>. In this
chapter, I’ll recap and expand on some of the things I’ve said before
and then show that <code>[a]</code> is more than a list of elements over
which we can map. It also has <code>Applicative</code> and
<code>Monad</code> instances that make it a natural fit for certain
problems.</p>
<section id="tic-tac-toe-and-the-minimax-algorithm" class="level3">
<h3>Tic-Tac-Toe and the Minimax algorithm</h3>
<p>For this chapter’s example, I’m going to show portions of a program
for playing Tic-Tac-Toe. The full program is too large to include, but
portions of it are well-suited to using the <code>Applicative</code> and
<code>Monad</code> instances for <code>[]</code>. The program uses an
algorithm known as <a href="http://en.wikipedia.org/wiki/Minimax">minimax</a> to choose the
best move to make in a game of Tic-Tac-Toe.</p>
<p>In short, the algorithm plays out all possible moves from the
perspective of one player and chooses the one that maximizes their score
and minimizes their opponent’s, hence the name. Tic-Tac-Toe is a good
game for exploring this algorithm because the possible choices are small
enough that we can take the naive approach of enumerating all of them,
then choosing the best.</p>
<p>To model our Tic-Tac-Toe game, we’ll need some data types:</p>
<div class="sourceCode" id="cb144"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb144-1"><a href="#cb144-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- A player is either Xs or Os</span></span>
<span id="cb144-2"><a href="#cb144-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">X</span> <span class="op">|</span> <span class="dt">O</span></span>
<span id="cb144-3"><a href="#cb144-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-4"><a href="#cb144-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- A square is either open, or taken by one of the players</span></span>
<span id="cb144-5"><a href="#cb144-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Square</span> <span class="ot">=</span> <span class="dt">Open</span> <span class="op">|</span> <span class="dt">Taken</span> <span class="dt">Player</span></span>
<span id="cb144-6"><a href="#cb144-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-7"><a href="#cb144-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- A row is top, middle, or bottom</span></span>
<span id="cb144-8"><a href="#cb144-8" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Row</span> <span class="ot">=</span> <span class="dt">T</span> <span class="op">|</span> <span class="dt">M</span> <span class="op">|</span> <span class="dt">B</span></span>
<span id="cb144-9"><a href="#cb144-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-10"><a href="#cb144-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- A column is left, center, or right</span></span>
<span id="cb144-11"><a href="#cb144-11" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Column</span> <span class="ot">=</span> <span class="dt">L</span> <span class="op">|</span> <span class="dt">C</span> <span class="op">|</span> <span class="dt">R</span></span>
<span id="cb144-12"><a href="#cb144-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-13"><a href="#cb144-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- A position is the combination of row and column</span></span>
<span id="cb144-14"><a href="#cb144-14" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Position</span> <span class="ot">=</span> (<span class="dt">Row</span>, <span class="dt">Column</span>)</span>
<span id="cb144-15"><a href="#cb144-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-16"><a href="#cb144-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- A space is the combination of position and square</span></span>
<span id="cb144-17"><a href="#cb144-17" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Space</span> <span class="ot">=</span> (<span class="dt">Position</span>, <span class="dt">Square</span>)</span>
<span id="cb144-18"><a href="#cb144-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-19"><a href="#cb144-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- Finally, the board is a list of spaces</span></span>
<span id="cb144-20"><a href="#cb144-20" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Board</span> <span class="ot">=</span> [<span class="dt">Space</span>]</span></code></pre></div>
<p>And some utility functions:</p>
<div class="sourceCode" id="cb145"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb145-1"><a href="#cb145-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Is the game over?</span></span>
<span id="cb145-2"><a href="#cb145-2" aria-hidden="true" tabindex="-1"></a><span class="ot">over ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb145-3"><a href="#cb145-3" aria-hidden="true" tabindex="-1"></a>over <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb145-4"><a href="#cb145-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb145-5"><a href="#cb145-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- The opponent for the given player</span></span>
<span id="cb145-6"><a href="#cb145-6" aria-hidden="true" tabindex="-1"></a><span class="ot">opponent ::</span> <span class="dt">Player</span> <span class="ot">-&gt;</span> <span class="dt">Player</span></span>
<span id="cb145-7"><a href="#cb145-7" aria-hidden="true" tabindex="-1"></a>opponent <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb145-8"><a href="#cb145-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb145-9"><a href="#cb145-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Play a space for the player in the given board</span></span>
<span id="cb145-10"><a href="#cb145-10" aria-hidden="true" tabindex="-1"></a><span class="ot">play ::</span> <span class="dt">Player</span> <span class="ot">-&gt;</span> <span class="dt">Position</span> <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></span>
<span id="cb145-11"><a href="#cb145-11" aria-hidden="true" tabindex="-1"></a>play <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
</section>
<section id="applicative-2" class="level3">
<h3>Applicative</h3>
<p>One of the things this program needs to do is generate a
<code>Board</code> with all <code>Square</code>s <code>Open</code>. We
could do this directly:</p>
<div class="sourceCode" id="cb146"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb146-1"><a href="#cb146-1" aria-hidden="true" tabindex="-1"></a><span class="ot">openBoard ::</span> <span class="dt">Board</span></span>
<span id="cb146-2"><a href="#cb146-2" aria-hidden="true" tabindex="-1"></a>openBoard <span class="ot">=</span></span>
<span id="cb146-3"><a href="#cb146-3" aria-hidden="true" tabindex="-1"></a>    [ ((<span class="dt">T</span>, <span class="dt">L</span>), <span class="dt">Open</span>), ((<span class="dt">T</span>, <span class="dt">C</span>), <span class="dt">Open</span>), ((<span class="dt">T</span>, <span class="dt">R</span>), <span class="dt">Open</span>)</span>
<span id="cb146-4"><a href="#cb146-4" aria-hidden="true" tabindex="-1"></a>    , ((<span class="dt">M</span>, <span class="dt">L</span>), <span class="dt">Open</span>), ((<span class="dt">M</span>, <span class="dt">C</span>), <span class="dt">Open</span>), ((<span class="dt">M</span>, <span class="dt">R</span>), <span class="dt">Open</span>)</span>
<span id="cb146-5"><a href="#cb146-5" aria-hidden="true" tabindex="-1"></a>    , ((<span class="dt">B</span>, <span class="dt">L</span>), <span class="dt">Open</span>), ((<span class="dt">B</span>, <span class="dt">C</span>), <span class="dt">Open</span>), ((<span class="dt">B</span>, <span class="dt">R</span>), <span class="dt">Open</span>)</span>
<span id="cb146-6"><a href="#cb146-6" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>But that approach is tedious and error-prone. Another way to solve
this problem is to create an <code>Open</code> square for all
combinations of <code>Row</code>s and <code>Column</code>s. We can do
exactly this with the <code>Applicative</code> instance for
<code>[]</code>:</p>
<div class="sourceCode" id="cb147"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb147-1"><a href="#cb147-1" aria-hidden="true" tabindex="-1"></a><span class="ot">openSpace ::</span> <span class="dt">Row</span> <span class="ot">-&gt;</span> <span class="dt">Column</span> <span class="ot">-&gt;</span> <span class="dt">Space</span></span>
<span id="cb147-2"><a href="#cb147-2" aria-hidden="true" tabindex="-1"></a>openSpace r c <span class="ot">=</span> ((r, c), <span class="dt">Open</span>)</span>
<span id="cb147-3"><a href="#cb147-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb147-4"><a href="#cb147-4" aria-hidden="true" tabindex="-1"></a><span class="ot">openBoard ::</span> <span class="dt">Board</span></span>
<span id="cb147-5"><a href="#cb147-5" aria-hidden="true" tabindex="-1"></a>openBoard <span class="ot">=</span> openSpace <span class="op">&lt;$&gt;</span> [<span class="dt">T</span>, <span class="dt">M</span>, <span class="dt">B</span>] <span class="op">&lt;*&gt;</span> [<span class="dt">L</span>, <span class="dt">C</span>, <span class="dt">R</span>]</span></code></pre></div>
<p>Let’s walk through the body of <code>openBoard</code> to see why it
gives the result we need. First,
<code>openSpace &lt;$&gt; [T, M, B]</code> maps the two-argument
<code>openSpace</code> over the list <code>[T, M, B]</code>. This
creates a list of partially applied functions. Each of these functions
has been given a <code>Row</code> but still needs a <code>Column</code>
to produce a full <code>Space</code>. We can show this as a list of
lambdas taking a <code>Column</code> and building a <code>Space</code>
with the <code>Row</code> it has already:</p>
<div class="sourceCode" id="cb148"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb148-1"><a href="#cb148-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;$&gt;) ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb148-2"><a href="#cb148-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb148-3"><a href="#cb148-3" aria-hidden="true" tabindex="-1"></a><span class="co">--           a       b</span></span>
<span id="cb148-4"><a href="#cb148-4" aria-hidden="true" tabindex="-1"></a><span class="ot">openSpace ::</span> <span class="dt">Row</span> <span class="ot">-&gt;</span> (<span class="dt">Column</span> <span class="ot">-&gt;</span> <span class="dt">Space</span>)</span>
<span id="cb148-5"><a href="#cb148-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb148-6"><a href="#cb148-6" aria-hidden="true" tabindex="-1"></a><span class="co">--                         f   b</span></span>
<span id="cb148-7"><a href="#cb148-7" aria-hidden="true" tabindex="-1"></a>openSpace <span class="op">&lt;$&gt;</span> [<span class="dt">T</span>, <span class="dt">M</span>, <span class="dt">B</span>]<span class="ot"> ::</span> [] (<span class="dt">Column</span> <span class="ot">-&gt;</span> <span class="dt">Space</span>)</span>
<span id="cb148-8"><a href="#cb148-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb148-9"><a href="#cb148-9" aria-hidden="true" tabindex="-1"></a>openSpace <span class="op">&lt;$&gt;</span> [<span class="dt">T</span>, <span class="dt">M</span>, <span class="dt">B</span>]</span>
<span id="cb148-10"><a href="#cb148-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [ (\c -&gt; ((T, c), Open))</span></span>
<span id="cb148-11"><a href="#cb148-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((M, c), Open))</span></span>
<span id="cb148-12"><a href="#cb148-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((B, c), Open))</span></span>
<span id="cb148-13"><a href="#cb148-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; ]</span></span></code></pre></div>
<p>Like the <code>Maybe</code> example from the <code>Applicative</code>
chapter, we’ve created a function in a context. Here we have the
function <code>(Column -&gt; Space)</code> in the <code>[]</code>
context: <code>[(Column -&gt; Space)]</code>. Separating the type
constructor from its argument and writing
<code>[(Column -&gt; Space)]</code> as
<code>[] (Column -&gt; Space)</code> shows how it matches the
<code>f b</code> in <code>(&lt;$&gt;)</code>s type signature. How do we
apply a function in a context to a value in a context? With
<code>(&lt;*&gt;)</code>.</p>
<p>Using <code>(&lt;*&gt;)</code> with lists means applying every
function to every value:</p>
<div class="sourceCode" id="cb149"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb149-1"><a href="#cb149-1" aria-hidden="true" tabindex="-1"></a>openSpace <span class="op">&lt;$&gt;</span> [<span class="dt">T</span>, <span class="dt">M</span>, <span class="dt">B</span>] <span class="op">&lt;*&gt;</span> [<span class="dt">L</span>, <span class="dt">C</span>, <span class="dt">R</span>]</span>
<span id="cb149-2"><a href="#cb149-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [ (\c -&gt; ((T, c), Open)) L        (first function applied to each value)</span></span>
<span id="cb149-3"><a href="#cb149-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((T, c), Open)) C</span></span>
<span id="cb149-4"><a href="#cb149-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((T, c), Open)) R</span></span>
<span id="cb149-5"><a href="#cb149-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((M, c), Open)) L        (second function applied to each value)</span></span>
<span id="cb149-6"><a href="#cb149-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((M, c), Open)) C</span></span>
<span id="cb149-7"><a href="#cb149-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((M, c), Open)) R</span></span>
<span id="cb149-8"><a href="#cb149-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((B, c), Open)) L        (third function applied to each value)</span></span>
<span id="cb149-9"><a href="#cb149-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((B, c), Open)) C</span></span>
<span id="cb149-10"><a href="#cb149-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , (\c -&gt; ((B, c), Open)) R</span></span>
<span id="cb149-11"><a href="#cb149-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; ]</span></span>
<span id="cb149-12"><a href="#cb149-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb149-13"><a href="#cb149-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [ ((T, L), Open)</span></span>
<span id="cb149-14"><a href="#cb149-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((T, C), Open)</span></span>
<span id="cb149-15"><a href="#cb149-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((T, R), Open)</span></span>
<span id="cb149-16"><a href="#cb149-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((M, L), Open)</span></span>
<span id="cb149-17"><a href="#cb149-17" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((M, C), Open)</span></span>
<span id="cb149-18"><a href="#cb149-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((M, R), Open)</span></span>
<span id="cb149-19"><a href="#cb149-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((B, L), Open)</span></span>
<span id="cb149-20"><a href="#cb149-20" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((B, C), Open)</span></span>
<span id="cb149-21"><a href="#cb149-21" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; , ((B, R), Open)</span></span>
<span id="cb149-22"><a href="#cb149-22" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; ]</span></span></code></pre></div>
</section>
<section id="monad-and-non-determinism" class="level3">
<h3>Monad and non-determinism</h3>
<p>The heart of the minimax algorithm is playing out a hypothetical
future where each available move is made to see which one works out
best. The <code>Monad</code> instance for <code>[]</code> is perfect for
this problem when we think of lists as representing one
non-deterministic value rather than a list of many deterministic
ones.</p>
<p>The list <code>[1, 2, 3]</code> represents a single number that is
any one of <code>1</code>, <code>2</code>, or <code>3</code> at once.
The type of this value is <code>[Int]</code>. The <code>Int</code> tells
us the type of the value we’re dealing with and the <code>[]</code>
tells us that it’s many values at once.</p>
<p>Under this interpretation, <code>Functor</code>’s <code>fmap</code>
represents <em>changing</em> probabilities: we have a number that can be
any of <code>1</code>, <code>2</code>, or <code>3</code>. When we
<code>fmap (+1)</code>, we get back a number that can be any of
<code>2</code>, <code>3</code>, or <code>4</code>. We’ve changed the
non-determinism without changing <em>how much</em> non-determinism there
is. That fact, that <code>fmap</code> can’t increase or decrease the
non-determinism, is actually guaranteed through the Functor laws.</p>
<div class="sourceCode" id="cb150"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb150-1"><a href="#cb150-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span> (<span class="op">+</span><span class="dv">1</span>) [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]</span>
<span id="cb150-2"><a href="#cb150-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [2, 3, 4]</span></span></code></pre></div>
<p><code>Applicative</code>’s <code>(&lt;*&gt;)</code> can be thought of
as <em>combining</em> probabilities. Given a function that can be any of
<code>(+1)</code>, <code>(+2)</code>, or <code>(+3)</code> and a number
that can be any of <code>1</code>, <code>2</code>, or <code>3</code>,
<code>(&lt;*&gt;)</code> will give us a new number that can be any of
the combined results of applying each possible function to each possible
value.</p>
<div class="sourceCode" id="cb151"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb151-1"><a href="#cb151-1" aria-hidden="true" tabindex="-1"></a>[(<span class="op">+</span><span class="dv">1</span>), (<span class="op">+</span><span class="dv">2</span>), (<span class="op">+</span><span class="dv">3</span>)] <span class="op">&lt;*&gt;</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]</span>
<span id="cb151-2"><a href="#cb151-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [2,3,4,3,4,5,4,5,6]</span></span></code></pre></div>
<p>Finally, <code>Monad</code>’s <code>(&gt;&gt;=)</code> is used to
<em>expand</em> probabilities. Looking at its type again:</p>
<div class="sourceCode" id="cb152"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb152-1"><a href="#cb152-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;=) ::</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span></code></pre></div>
<p>And specializing this to lists:</p>
<div class="sourceCode" id="cb153"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb153-1"><a href="#cb153-1" aria-hidden="true" tabindex="-1"></a><span class="co">--       m  a -&gt; (a -&gt; m  b) -&gt; m  b</span></span>
<span id="cb153-2"><a href="#cb153-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;=) ::</span> [] a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> [] b) <span class="ot">-&gt;</span> [] b</span></code></pre></div>
<p>We can see that it takes an <code>a</code> that can be one of many
values, and a function from <code>a</code> to <code>[b]</code>, i.e. a
<code>b</code> that can be one of many values. <code>(&gt;&gt;=)</code>
applies the function <code>(a -&gt; [b])</code> to every <code>a</code>
in the input list. The result must be <code>[[b]]</code>. To return the
required type <code>[b]</code>, the list is then flattened. Because the
types are so generic, this is the only implementation this function can
have. If we rule out obvious mistakes like ignoring arguments and
returning an empty list, reordering the list, or adding or dropping
elements, the only way to define this function is to map, then
flatten.</p>
<div class="sourceCode" id="cb154"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb154-1"><a href="#cb154-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">&gt;&gt;=</span> f <span class="ot">=</span> <span class="fu">concat</span> (<span class="fu">map</span> f xs)</span></code></pre></div>
<p>Given our same number, one that can be any of <code>1</code>,
<code>2</code>, or <code>3</code>, and a function that takes a
(deterministic) number and produces a new set of possibilities,
<code>(&gt;&gt;=)</code> will expand the probability space:</p>
<div class="sourceCode" id="cb155"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb155-1"><a href="#cb155-1" aria-hidden="true" tabindex="-1"></a><span class="ot">next ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb155-2"><a href="#cb155-2" aria-hidden="true" tabindex="-1"></a>next n <span class="ot">=</span> [n <span class="op">-</span> <span class="dv">1</span>, n, n <span class="op">+</span> <span class="dv">1</span>]</span>
<span id="cb155-3"><a href="#cb155-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb155-4"><a href="#cb155-4" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>] <span class="op">&gt;&gt;=</span> next</span>
<span id="cb155-5"><a href="#cb155-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; concat (map next [1, 2, 3])</span></span>
<span id="cb155-6"><a href="#cb155-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; concat [[1 - 1, 1, 1 + 1], [2 - 1, 2, 2 + 1], [3 - 1, 3, 3 + 1]]</span></span>
<span id="cb155-7"><a href="#cb155-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [0,1,2,1,2,3,2,3,4]</span></span></code></pre></div>
<p>We can continue expanding by repeatedly using
<code>(&gt;&gt;=)</code>:</p>
<div class="sourceCode" id="cb156"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb156-1"><a href="#cb156-1" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>] <span class="op">&gt;&gt;=</span> next <span class="op">&gt;&gt;=</span> next</span>
<span id="cb156-2"><a href="#cb156-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [-1,0,1,0,1,2,1,2,3,0,1,2,1,2,3,2,3,4,1,2,3,2,3,4,3,4,5]</span></span></code></pre></div>
<p>If we picture the <code>next</code> function as a step in time, going
from some current state to multiple possible next states, we can think
of <code>&gt;&gt;= next &gt;&gt;= next</code> as looking two steps into
the future, exploring the possible states reachable from possible
states.</p>
</section>
<section id="the-future" class="level3">
<h3>The Future</h3>
<p>If the theory above didn’t make complete sense, that’s OK. Let’s get
back to our Tic-Tac-Toe program and see how this works in the context of
a real-word example.</p>
<p>When it’s our turn (us being the computer player), we want to play
out the next turn for every move we have available. For each of those
next turns, we want to do the same thing again. We want to repeat this
process until the game is over. At that point, we can see which choice
led to the best result and use that one.</p>
<p>One thing we’ll need, and our first opportunity to use
<code>Monad</code>, is to find all available moves for a given
<code>Board</code>:</p>
<div class="sourceCode" id="cb157"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb157-1"><a href="#cb157-1" aria-hidden="true" tabindex="-1"></a><span class="ot">available ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> [<span class="dt">Position</span>]</span>
<span id="cb157-2"><a href="#cb157-2" aria-hidden="true" tabindex="-1"></a>available board <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb157-3"><a href="#cb157-3" aria-hidden="true" tabindex="-1"></a>    (position, <span class="dt">Open</span>) <span class="ot">&lt;-</span> board</span>
<span id="cb157-4"><a href="#cb157-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb157-5"><a href="#cb157-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> position</span></code></pre></div>
<p>In this expression, we’re treating a <code>Board</code> as a list of
<code>Space</code>s. In other words, it’s one <code>Space</code> that is
all of the spaces on the board at once. We’re using
<code>(&gt;&gt;=)</code>, through <em>do-notation</em>, to map, then
flatten, each <code>Space</code> to its <code>Position</code>. We’re
using <em>do-notation</em> to take advantage of the fact that if we use
a pattern in the left-hand side of <code>(&lt;-)</code>, but the value
doesn’t match the pattern, it’s discarded. This expression is a concise
map-filter that relies on <code>(&gt;&gt;=)</code> to do the mapping and
pattern matching to do the filtering.</p>
</section>
<section id="return" class="level3">
<h3>Return</h3>
<p>The <code>return</code> function, seen at the end of
<code>available</code>, is not like <code>return</code> statements
you’ll find in other languages. Specifically, it does not abort the
computation, presenting its argument as the return value for the
function call. Nor is it always required at the end of a monadic
expression. <code>return</code> is another function from the
<code>Monad</code> type class. Its job is to take some value of type
<code>a</code> and make it an <code>m a</code>. Conceptually, it should
do this by putting the value in some default or minimal context. For
<code>Maybe</code> this means applying <code>Just</code>. For
<code>[]</code>, we put the value in a singleton list:</p>
<div class="sourceCode" id="cb158"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb158-1"><a href="#cb158-1" aria-hidden="true" tabindex="-1"></a><span class="co">--        a -&gt; m  a</span></span>
<span id="cb158-2"><a href="#cb158-2" aria-hidden="true" tabindex="-1"></a><span class="fu">return</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> [] a</span>
<span id="cb158-3"><a href="#cb158-3" aria-hidden="true" tabindex="-1"></a><span class="fu">return</span> x <span class="ot">=</span> [x]</span></code></pre></div>
<p>In our example, <code>position</code> is of type
<code>Position</code> (i.e. <code>a</code>) and we need the expression
to have type <code>[Position]</code> (i.e. <code>m a</code>), so
<code>return position</code> does that.</p>
<p>Another <code>Monad</code>-using function of the minimax algorithm is
one that expands a given board into the end-states reached when each
player plays all potential moves:</p>
<div class="sourceCode" id="cb159"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb159-1"><a href="#cb159-1" aria-hidden="true" tabindex="-1"></a><span class="ot">future ::</span> <span class="dt">Player</span> <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> [<span class="dt">Board</span>]</span>
<span id="cb159-2"><a href="#cb159-2" aria-hidden="true" tabindex="-1"></a>future player board <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb159-3"><a href="#cb159-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> over board</span>
<span id="cb159-4"><a href="#cb159-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">then</span> <span class="fu">return</span> board</span>
<span id="cb159-5"><a href="#cb159-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb159-6"><a href="#cb159-6" aria-hidden="true" tabindex="-1"></a>            space <span class="ot">&lt;-</span> available board</span>
<span id="cb159-7"><a href="#cb159-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb159-8"><a href="#cb159-8" aria-hidden="true" tabindex="-1"></a>            future (opponent player) (play player space board)</span></code></pre></div>
<p>First we check if the <code>Board</code> is <code>over</code>. If
that’s the case, the future is a singleton list of only that
<code>Board</code>–again, <code>return board</code> does that.
Otherwise, we explore all available spaces. For each of them, we explore
into the future again, this time for our opponent on a
<code>Board</code> where we’ve played that space. This process repeats
until someone wins or we fill the board in a draw. To fit this function
into our Tic-Tac-Toe-playing program, we would score each path as we
explore it and play the path with the best score.</p>
<p>While a full program like this is very interesting, it quickly gets
complicated with things not important to our discussion. To see a
complete definition of a minimax-using Tic-Tac-Toe-playing program
written in Ruby, check out Never Stop Building’s <a href="http://neverstopbuilding.com/minimax">Understanding
Minimax</a>.</p>
</section>
</section>
<section id="io" class="level2">
<h2>IO</h2>
<p>So far, we’ve seen three types: <code>Maybe a</code>,
<code>Either e a</code>, and <code>[a]</code>. These types all represent
a value with some other bit of information: a <em>context</em>. If
<code>a</code> is the <code>User</code> you’re trying to find, the
<code>Maybe</code> says if she was actually found. If the <code>a</code>
is the <code>JSON</code> you’re attempting to parse, the
<code>Either e</code> holds information about the error when the parse
fails. If <code>a</code> is a number, then <code>[]</code> tells you it
is actually many numbers at once, and how many.</p>
<p>For all these types, we’ve seen the behaviors that allow us to add
them to the <code>Functor</code>, <code>Applicative</code>, and
<code>Monad</code> type classes. These behaviors obey certain laws which
allow us to reason about what will happen when we use functions like
<code>fmap</code> or <code>(&gt;&gt;=)</code>. In addition to this, we
can also reach in and manually resolve the context. We can define a
<code>fromMaybe</code> function to reduce a <code>Maybe a</code> to an
<code>a</code> by providing a default value for the <code>Nothing</code>
case. We can do a similar thing for <code>Either e a</code> with the
<code>either</code> function. Given a <code>[a]</code> we can resolve it
to an <code>a</code> by selecting one at a given index (taking care to
handle the empty list).</p>
<p>The <code>IO</code> type, so important to Haskell, is exactly like
the three types you’ve seen so far in that it represents a value in some
context. With a value of type <code>IO a</code>, the <code>a</code> is
the thing you want and the <code>IO</code> means some input or output
will be performed in the real word as part of producing that
<code>a</code>. The difference is that the only way we can combine
<code>IO</code> values is through their <code>Functor</code>,
<code>Applicative</code>, and <code>Monad</code> interfaces. In fact,
it’s really only through its <code>Monad</code> interface since the
<code>Applicative</code> and <code>Functor</code> instances are defined
in terms of it. We can’t ourselves resolve an <code>IO a</code> to an
<code>a</code>. This has many ramifications in how programs must be
constructed.</p>
<section id="effects-in-a-pure-world" class="level3">
<h3>Effects in a pure world</h3>
<p>One question I get asked a lot is, “how is it that Haskell, a
<em>pure</em> functional programming language, can actually do anything?
How does it create or read files? How does it print to the terminal? How
does it serve web requests?”</p>
<p>The short answer is, it doesn’t. To show this, let’s start with the
following Ruby program:</p>
<div class="sourceCode" id="cb160"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb160-1"><a href="#cb160-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> main</span>
<span id="cb160-2"><a href="#cb160-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> <span class="st">&quot;give me a word: &quot;</span></span>
<span id="cb160-3"><a href="#cb160-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb160-4"><a href="#cb160-4" aria-hidden="true" tabindex="-1"></a>  x <span class="kw">=</span> <span class="fu">gets</span></span>
<span id="cb160-5"><a href="#cb160-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb160-6"><a href="#cb160-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">puts</span> x</span>
<span id="cb160-7"><a href="#cb160-7" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>When you run this program with the Ruby interpreter, does anything
happen? It depends on your definition of <em>happen</em>. Certainly, no
I/O will happen, but that’s not <em>nothing</em>. Objects will be
instantiated, and a method has been defined. By defining this method,
you’ve constructed a blue-print for some actions to be performed, but
then neglected to perform them.</p>
<p>Ruby expects (and allows) you to invoke effecting methods like
<code>main</code> whenever and wherever you want. If you want the above
program to do something, you need to call <code>main</code> at the
bottom. This is a blessing and a curse. While the flexibility is
appreciated, it’s a constant source of bugs and makes methods and
objects impossible to reason about without looking at their
implementations. A method may look “pure”, but internally it might
access a database, pull from an external source of randomness, or fire
nuclear missiles. Haskell doesn’t work like that.</p>
<p>Here’s a translation of the Ruby program into Haskell:</p>
<div class="sourceCode" id="cb161"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb161-1"><a href="#cb161-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb161-2"><a href="#cb161-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb161-3"><a href="#cb161-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStr</span> <span class="st">&quot;give me a word: &quot;</span></span>
<span id="cb161-4"><a href="#cb161-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb161-5"><a href="#cb161-5" aria-hidden="true" tabindex="-1"></a>  x <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb161-6"><a href="#cb161-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb161-7"><a href="#cb161-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> x</span></code></pre></div>
<p>Much like the Ruby example, this code doesn’t <em>do</em> anything.
It defines a function <code>main</code> that states what should happen
when it’s executed. It does not execute anything itself. Unlike Ruby,
Haskell does not expect or allow you to call <code>main</code> yourself.
The Haskell runtime will handle that and perform whatever I/O is
required for you. This is how I/O happens in a pure language: you define
the blue-print, a <em>pure</em> value that says <em>how</em> to perform
any I/O, then you give that to a separate runtime, which is in charge of
actually performing it.</p>
</section>
<section id="statements-and-the-curse-of-do-notation" class="level3">
<h3>Statements and the curse of do-notation</h3>
<p>The Haskell function above used <em>do-notation</em>. I did this to
highlight that the reason do-notation exists is for Haskell code to look
like that equivalent, imperative Ruby, on which it was based. This fact
has the unfortunate consequence of tricking new Haskell programmers into
thinking that <code>putStr</code> (for example) is an imperative
statement that actually puts the string to the screen when
evaluated.</p>
<p>In the Ruby code, each statement is implicitly combined with the next
as the interpreter sees them. There is some initial global state,
statements modify that global state, and the interpreter handles
ensuring that subsequent statements see an updated global state from all
those that came before. If Ruby used a semicolon instead of white space
to delimit statements, we could almost think of <code>(;)</code> as an
operator for combining statements and keeping track of the global state
between them.</p>
<p>In Haskell, there are no statements, only expressions. Every
expression has a type and compound expressions must be combined in a
type-safe way. In the case of <code>IO</code> expressions, they are
combined with <code>(&gt;&gt;=)</code>. The semantic result is very
similar to Ruby’s statements. It’s because of this that you may hear
<code>(&gt;&gt;=)</code> referred to as a <em>programmable
semicolon</em>. In truth, it’s so much more than that. It’s a
first-class function that can be passed around, built on top of, and
overloaded from type to type.</p>
<p>To see how this works, let’s build an equivalent definition for
<code>main</code>, only this time no do-notation, only
<code>(&gt;&gt;=)</code>.</p>
</section>
<section id="typed-puzzles" class="level3">
<h3>Typed puzzles</h3>
<p>Starting with the type of <code>main</code>, we immediately see
something worth explaining:</p>
<div class="sourceCode" id="cb162"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb162-1"><a href="#cb162-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p>The type of <code>main</code> is pronounced <em>IO void</em>.
<code>()</code> itself is a type defined with a single constructor. It
can also be thought of as an empty tuple:</p>
<div class="sourceCode" id="cb163"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb163-1"><a href="#cb163-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> () <span class="ot">=</span> ()</span></code></pre></div>
<p>It’s used to stand in when a computation affects the
<em>context</em>, but produces no useful <em>result</em>. It’s not
specific to <code>IO</code> (or monads for that matter). For example, if
you were chaining a series of <code>Maybe</code> values together using
<code>(&gt;&gt;=)</code> and under some condition you wanted to manually
trigger an overall <code>Nothing</code> result, you could insert a
<code>Nothing</code> of type <code>Maybe ()</code> into the
expression.</p>
<p>This is exactly how the <a href="http://hackage.haskell.org/package/base-4.7.0.2/docs/Control-Monad.html#v:guard">guard</a>
function works. When specialized to <code>Maybe</code>, its definition
is:</p>
<div class="sourceCode" id="cb164"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb164-1"><a href="#cb164-1" aria-hidden="true" tabindex="-1"></a><span class="ot">guard ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> ()</span>
<span id="cb164-2"><a href="#cb164-2" aria-hidden="true" tabindex="-1"></a>guard <span class="dt">True</span> <span class="ot">=</span> <span class="dt">Just</span> ()</span>
<span id="cb164-3"><a href="#cb164-3" aria-hidden="true" tabindex="-1"></a>guard <span class="dt">False</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>It is used like this:</p>
<div class="sourceCode" id="cb165"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb165-1"><a href="#cb165-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findAdmin ::</span> <span class="dt">UserId</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">User</span></span>
<span id="cb165-2"><a href="#cb165-2" aria-hidden="true" tabindex="-1"></a>findAdmin uid <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb165-3"><a href="#cb165-3" aria-hidden="true" tabindex="-1"></a>    user <span class="ot">&lt;-</span> findUser uid</span>
<span id="cb165-4"><a href="#cb165-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb165-5"><a href="#cb165-5" aria-hidden="true" tabindex="-1"></a>    guard (isAdmin user)</span>
<span id="cb165-6"><a href="#cb165-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb165-7"><a href="#cb165-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> user</span></code></pre></div>
<p>If you’re having trouble seeing why this expression works, start by
de-sugaring from <em>do-notation</em> to the equivalent expression using
<code>(&gt;&gt;=)</code>, then use the <code>Maybe</code>-specific
definitions of <code>(&gt;&gt;=)</code>, <code>return</code>, and
<code>guard</code> to reduce the expression when an admin is found, a
non-admin is found, or no user is found.</p>
<p>Next, let’s look at the individual pieces we’ll be combining into
<code>main</code>:</p>
<div class="sourceCode" id="cb166"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb166-1"><a href="#cb166-1" aria-hidden="true" tabindex="-1"></a><span class="fu">putStr</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb166-2"><a href="#cb166-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb166-3"><a href="#cb166-3" aria-hidden="true" tabindex="-1"></a><span class="fu">putStrLn</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p><code>putStr</code> also doesn’t have any useful result so it uses
<code>()</code>. It takes the given <code>String</code> and returns an
action that <em>represents</em> printing that string, without a trailing
newline, to the terminal. <code>putStrLn</code> is exactly the same, but
includes a trailing newline.</p>
<div class="sourceCode" id="cb167"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb167-1"><a href="#cb167-1" aria-hidden="true" tabindex="-1"></a><span class="fu">getLine</span><span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">String</span></span></code></pre></div>
<p><code>getLine</code> doesn’t take any arguments and has type
<code>IO String</code> which means an action that represents reading a
line of input from the terminal. It requires <code>IO</code> and
presents the read line as its result.</p>
<p>Next, let’s review the type of <code>(&gt;&gt;=)</code>:</p>
<div class="sourceCode" id="cb168"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb168-1"><a href="#cb168-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;=) ::</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span></code></pre></div>
<p>In our case, <code>m</code> will always be <code>IO</code>, but
<code>a</code> and <code>b</code> will be different each time we use
<code>(&gt;&gt;=)</code>. The first combination we need is
<code>putStr</code> and <code>getLine</code>. <code>putStr &quot;...&quot;</code>
fits as <code>m a</code>, because its type is <code>IO ()</code>, but
<code>getLine</code> does not have the type <code>() -&gt; IO b</code>
which is required for things to line up. There’s another operator, built
on top of <code>(&gt;&gt;=)</code>, designed to fix this problem:</p>
<div class="sourceCode" id="cb169"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb169-1"><a href="#cb169-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;) ::</span> m a <span class="ot">-&gt;</span> m b <span class="ot">-&gt;</span> m b</span>
<span id="cb169-2"><a href="#cb169-2" aria-hidden="true" tabindex="-1"></a>ma <span class="op">&gt;&gt;</span> mb <span class="ot">=</span> ma <span class="op">&gt;&gt;=</span> \_ <span class="ot">-&gt;</span> mb</span></code></pre></div>
<p>It turns its second argument into the right type for
<code>(&gt;&gt;=)</code> by wrapping it in a lambda that accepts and
ignores the <code>a</code> returned by the first action. With this, we
can write our first combination:</p>
<div class="sourceCode" id="cb170"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb170-1"><a href="#cb170-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStr</span> <span class="st">&quot;...&quot;</span> <span class="op">&gt;&gt;</span> <span class="fu">getLine</span></span></code></pre></div>
<p>What is the type of this expression? If <code>(&gt;&gt;)</code> is
<code>m a -&gt; m b -&gt; m b</code> and we’ve got <code>m a</code> as
<code>IO ()</code> and <code>m b</code> as <code>IO String</code>. This
combined expression must be <code>IO String</code>. It represents an
action that, <em>when executed</em>, would print the given string to the
terminal, then read in a line.</p>
<p>Our next requirement is to put this action together with
<code>putStrLn</code>. Our current expression has type
<code>IO String</code> and <code>putStrLn</code> has type
<code>String -&gt; IO ()</code>. This lines up perfectly with
<code>(&gt;&gt;=)</code> by taking <code>m</code> as <code>IO</code>,
<code>a</code> as <code>String</code>, and <code>b</code> as
<code>()</code>:</p>
<div class="sourceCode" id="cb171"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb171-1"><a href="#cb171-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStr</span> <span class="st">&quot;...&quot;</span> <span class="op">&gt;&gt;</span> <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span> <span class="fu">putStrLn</span></span></code></pre></div>
<p>This code is equivalent to the do-notation version I showed before.
If you’re not sure, try to manually convert between the two forms. The
steps required were shown in the do-notation sub-section of the Monad
chapter.</p>
<p>Hopefully, this exercise has convinced you that while I/O in Haskell
may appear confusing at first, things are quite a bit simpler:</p>
<ul>
<li>Any function with an <code>IO</code> type <em>represents</em> an
action to be performed</li>
<li>Actions are not executed, only combined into larger actions using
<code>(&gt;&gt;=)</code></li>
<li>The only way to get the runtime to execute an action is to assign it
the special name <code>main</code></li>
</ul>
<p>From these rules and the general requirement of type-safety, it
emerges that any value of type <code>IO a</code> can only be called
directly or indirectly from <code>main</code>.</p>
</section>
<section id="other-instances" class="level3">
<h3>Other instances</h3>
<p>Unlike previous chapters, here I jumped right into
<code>Monad</code>. This was because there’s a natural flow from
imperative code to monadic programming with do-notation, to the
underlying expressions combined with <code>(&gt;&gt;=)</code>. As I
mentioned, this is the only way to combine <code>IO</code> values. While
<code>IO</code> does have instances for <code>Functor</code> and
<code>Applicative</code>, the functions in these classes
(<code>fmap</code> and <code>(&lt;*&gt;)</code>) are defined in terms of
<code>return</code> and <code>(&gt;&gt;=)</code> from its
<code>Monad</code> instance. For this reason, I won’t be showing their
definitions. That said, these instances are still useful. If your
<code>IO</code> code doesn’t require the full power of monads, it’s
better to use a weaker constraint. More general programs are better;
weaker constraints on what kind of data your functions can work with
makes them more generally useful.</p>
<section id="functor-3" class="level4">
<h4>Functor</h4>
<p><code>fmap</code>, when specialized to <code>IO</code>, has the
following type:</p>
<div class="sourceCode" id="cb172"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb172-1"><a href="#cb172-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b</span></code></pre></div>
<p>It takes a function and an <code>IO</code> action and returns another
<code>IO</code> action, which represents applying that function to the
<em>eventual</em> result returned by the first.</p>
<p>It’s common to see Haskell code like this:</p>
<div class="sourceCode" id="cb173"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb173-1"><a href="#cb173-1" aria-hidden="true" tabindex="-1"></a><span class="ot">readInUpper ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb173-2"><a href="#cb173-2" aria-hidden="true" tabindex="-1"></a>readInUpper fp <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb173-3"><a href="#cb173-3" aria-hidden="true" tabindex="-1"></a>    contents <span class="ot">&lt;-</span> <span class="fu">readFile</span> fp</span>
<span id="cb173-4"><a href="#cb173-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-5"><a href="#cb173-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> (<span class="fu">map</span> <span class="fu">toUpper</span> contents)</span></code></pre></div>
<p>All this code does is form a new action that applies a function to
the eventual result of another. We can say this more concisely using
<code>fmap</code>:</p>
<div class="sourceCode" id="cb174"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb174-1"><a href="#cb174-1" aria-hidden="true" tabindex="-1"></a><span class="ot">readInUpper ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb174-2"><a href="#cb174-2" aria-hidden="true" tabindex="-1"></a>readInUpper fp <span class="ot">=</span> <span class="fu">fmap</span> (<span class="fu">map</span> <span class="fu">toUpper</span>) (<span class="fu">readFile</span> fp)</span></code></pre></div>
<p>As another example, we can use <code>fmap</code> with the Prelude
function <code>lookup</code> to write a safer version of
<code>getEnv</code> from the <code>System.Environment</code> module.
<code>getEnv</code> has the nasty quality of raising an exception if the
environment variable you’re looking for isn’t present. Hopefully this
book has convinced you it’s better to return a <code>Maybe</code> in
this case. The <code>lookupEnv</code> function was eventually added to
the module, but if you intend to support old versions, you’ll need to
define it yourself:</p>
<div class="sourceCode" id="cb175"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb175-1"><a href="#cb175-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.Environment</span> (getEnvironment)</span>
<span id="cb175-2"><a href="#cb175-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb175-3"><a href="#cb175-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- lookup :: Eq a =&gt; a -&gt; [(a, b)] -&gt; Maybe b</span></span>
<span id="cb175-4"><a href="#cb175-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- </span></span>
<span id="cb175-5"><a href="#cb175-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- getEnvironment :: IO [(String, String)]</span></span>
<span id="cb175-6"><a href="#cb175-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb175-7"><a href="#cb175-7" aria-hidden="true" tabindex="-1"></a><span class="ot">lookupEnv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)</span>
<span id="cb175-8"><a href="#cb175-8" aria-hidden="true" tabindex="-1"></a>lookupEnv v <span class="ot">=</span> <span class="fu">fmap</span> (<span class="fu">lookup</span> v) getEnvironment</span></code></pre></div>
</section>
<section id="applicative-3" class="level4">
<h4>Applicative</h4>
<p>Imagine a library function for finding differences between two
strings:</p>
<div class="sourceCode" id="cb176"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb176-1"><a href="#cb176-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Diff</span> <span class="ot">=</span> <span class="dt">Diff</span> [<span class="dt">Difference</span>]</span>
<span id="cb176-2"><a href="#cb176-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Difference</span> <span class="ot">=</span> <span class="dt">Added</span> <span class="op">|</span> <span class="dt">Removed</span> <span class="op">|</span> <span class="dt">Changed</span></span>
<span id="cb176-3"><a href="#cb176-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb176-4"><a href="#cb176-4" aria-hidden="true" tabindex="-1"></a><span class="ot">diff ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Diff</span></span>
<span id="cb176-5"><a href="#cb176-5" aria-hidden="true" tabindex="-1"></a>diff <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>How would we run this code on files from the file system? One way,
using <code>Monad</code>, would look like this:</p>
<div class="sourceCode" id="cb177"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb177-1"><a href="#cb177-1" aria-hidden="true" tabindex="-1"></a><span class="ot">diffFiles ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Diff</span></span>
<span id="cb177-2"><a href="#cb177-2" aria-hidden="true" tabindex="-1"></a>diffFiles fp1 fp2 <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb177-3"><a href="#cb177-3" aria-hidden="true" tabindex="-1"></a>    s1 <span class="ot">&lt;-</span> <span class="fu">readFile</span> fp1</span>
<span id="cb177-4"><a href="#cb177-4" aria-hidden="true" tabindex="-1"></a>    s2 <span class="ot">&lt;-</span> <span class="fu">readFile</span> fp2</span>
<span id="cb177-5"><a href="#cb177-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb177-6"><a href="#cb177-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> (diff s1 s2)</span></code></pre></div>
<p>Notice that the second <code>readFile</code> does not depend on the
result of the first. Both <code>readFile</code> actions produce values
that are combined <em>at once</em> using the pure function
<code>diff</code>. We can make this lack of dependency explicit and
bring the expression closer to what it would look like without
<code>IO</code> values by using <code>Applicative</code>:</p>
<div class="sourceCode" id="cb178"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb178-1"><a href="#cb178-1" aria-hidden="true" tabindex="-1"></a><span class="ot">diffFiles ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Diff</span></span>
<span id="cb178-2"><a href="#cb178-2" aria-hidden="true" tabindex="-1"></a>diffFiles fp1 fp2 <span class="ot">=</span> diff <span class="op">&lt;$&gt;</span> <span class="fu">readFile</span> fp1 <span class="op">&lt;*&gt;</span> <span class="fu">readFile</span> fp2</span></code></pre></div>
<p>As an exercise, try breaking down the types of the intermediate
expressions here, like we did for <code>Maybe</code> in the Follow the
Types sub-section of the Applicative chapter.</p>
</section>
</section>
<section id="learning-more" class="level3">
<h3>Learning more</h3>
<p>There are many resources online for learning about <code>Monad</code>
and <code>IO</code> in Haskell. I recommend reading them all. Some are
better than others and many get a bad rap for using some grandiose
analogy that only makes sense to the author. Be mindful of this, but
know that no single tutorial can give you a complete understanding
because that requires looking at the same abstract thing from a variety
of angles. Therefore, the best thing to do is read it all and form your
own intuitions.</p>
<p>If you’re interested in the origins of monadic I/O in Haskell, I
recommend <a href="http://research.microsoft.com/en-us/um/people/simonpj/papers/marktoberdorf/mark.pdf">Tackling
the Awkward Squad: monadic input/output, concurrency, exceptions, and
foreign-language calls in Haskell</a> by Simon Peyton Jones and <a href="http://ncatlab.org/nlab/files/WadlerMonads.pdf">Comprehending
Monads</a> by Philip Wadler.</p>
</section>
</section>
</section>
<section id="whats-next" class="level1">
<h1>What’s Next</h1>
<p>At the start of this book, I said my intention was not to teach you
Haskell. Instead, my goal was to give you a sense of writing realistic
code that takes advantage of an uncommon feature found in the Haskell
language. I wanted to strike a balance between short sound-bites without
much depth and the large investment of time required to become
proficient in the language.</p>
<p>The central theme, the <code>Maybe</code> type, is an example of
Haskell’s principled stance resulting in tangible benefit for
programmers. The frustration caused by Tony Hoare’s self-proclaimed <a href="http://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions">“billion-dollar
mistake”</a> is something I’ll gladly live without. This same principled
stance has lead to many similar outcomes in the Haskell language. From
monadic I/O to advanced concurrency primitives, Haskell is full of
constructs only made possible through slow and thoughtful language
design. My hope is that by seeing–and really understanding–the
relatively small example that is <code>Maybe</code>, you’ll be motivated
to explore the language further.</p>
<p>If you are so inclined, there are many resources online for getting
up and running, what to read, etc. I mentioned Chris Allan’s <a href="https://github.com/bitemyapp/learnhaskell">learning path</a>
already. There’s also <a href="https://wiki.haskell.org/Haskell_in_5_steps">Haskell in 5
steps</a>. I’m a huge fan of <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great
Good!</a> and <a href="http://book.realworldhaskell.org/">Real World
Haskell</a> if you’re looking for books. If you prefer an exercise-based
approach, we have a <a href="https://upcase.com/haskell-fundamentals">Haskell Fundamentals</a>
trail on Upcase. Finally, don’t be afraid to read academic papers. They
are dense sources of very good information.</p>
</section>
<aside id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>The module of functions available without
<code>import</code>ing anything.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>The process of simplifying <code>\x -&gt; f x</code> to
the equivalent form <code>f</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
</body>
</html>
