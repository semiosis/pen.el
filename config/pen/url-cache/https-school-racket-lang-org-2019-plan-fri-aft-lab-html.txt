HTTP/1.1 200 OK
Date: Wed, 27 Nov 2024 03:07:11 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
x-amz-id-2: kh5B7ZOTIytTAcY9bVfCF0gjbOwkRw/j4i8ruBftNauanaIJ7zfZ4m1tna75ryURLYtGSdsMoR8=
x-amz-request-id: SKFF2HWARZQP3FD3
Cache-Control: max-age=0, no-cache
Last-Modified: Sat, 27 Jul 2019 23:29:14 GMT
x-amz-storage-class: REDUCED_REDUNDANCY
cf-cache-status: DYNAMIC
vary: accept-encoding
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=HQTtowypYXgqwPWN%2F4zmvK6oeAQXYqZ%2BXvSCkNWNYqM99j%2BdfbMllmAVdl9LwMMAGjiwWiu0rmcFqTumOhHB6nXbAmKRl8510ozGFhi4g8RjNsCfPso77FHFPQKN6XHPGSuZNYdCvvHJ"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8e8ee8131effa7ef-SYD
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=59611&sent=153&recv=55&lost=0&retrans=9&sent_bytes=123150&recv_bytes=3436&delivery_rate=399266&cwnd=147&unsent_bytes=0&cid=7d2157471387f880&ts=1161685&x=0"

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"/><meta name="viewport" content="width=device-width, initial-scale=0.8"/><title>19&nbsp;Closure</title><link rel="stylesheet" type="text/css" href="scribble.css" title="default"/><link rel="stylesheet" type="text/css" href="racket.css" title="default"/><link rel="stylesheet" type="text/css" href="manual-style.css" title="default"/><link rel="stylesheet" type="text/css" href="manual-racket.css" title="default"/><script type="text/javascript" src="scribble-common.js"></script><script type="text/javascript" src="manual-racket.js"></script><!--[if IE 6]><style type="text/css">.SIEHidden { overflow: hidden; }</style><![endif]--></head><body id="scribble-racket-lang-org"><div class="tocset"><div class="tocview"><div class="tocviewlist tocviewlisttopspace"><div class="tocviewtitle"><table cellspacing="0" cellpadding="0"><tr><td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_0&quot;);">&#9660;</a></td><td></td><td><a href="index.html" class="tocviewlink" data-pltdoc="x">Racket School 2019:<span class="mywbr"> &nbsp;</span> <br/>
<span class="Smaller">The &#8220;How to Design Languages&#8221; Track</span></a></td></tr></table></div><div class="tocviewsublisttop" style="display: block;" id="tocview_0"><table cellspacing="0" cellpadding="0"><tr><td align="right">1&nbsp;</td><td><a href="mon-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Language-<wbr></wbr>Oriented Programming</a></td></tr><tr><td align="right">2&nbsp;</td><td><a href="mon-mor-lab.html" class="tocviewlink" data-pltdoc="x">Macro Expansion</a></td></tr><tr><td align="right">3&nbsp;</td><td><a href="mon-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Language Extensions via Macros</a></td></tr><tr><td align="right">4&nbsp;</td><td><a href="mon-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Simple Macros</a></td></tr><tr><td align="right">5&nbsp;</td><td><a href="tue-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Advanced Racket Macros</a></td></tr><tr><td align="right">6&nbsp;</td><td><a href="tue-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Syntax Patterns &amp; Classes</a></td></tr><tr><td align="right">7&nbsp;</td><td><a href="tue-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Lexical Scope, (Un)Hygienic Macros</a></td></tr><tr><td align="right">8&nbsp;</td><td><a href="tue-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Comfortable Macros</a></td></tr><tr><td align="right">9&nbsp;</td><td><a href="wed-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Modules, Macros, Languages</a></td></tr><tr><td align="right">10&nbsp;</td><td><a href="wed-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages via Macros</a></td></tr><tr><td align="right">11&nbsp;</td><td><a href="wed-aft-lecture.html" class="tocviewlink" data-pltdoc="x">More Language Variations</a></td></tr><tr><td align="right">12&nbsp;</td><td><a href="wed-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages and Readers</a></td></tr><tr><td align="right">13&nbsp;</td><td><a href="thu-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Types and Type Checking</a></td></tr><tr><td align="right">14&nbsp;</td><td><a href="thu-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Typed Languages with Turnstile</a></td></tr><tr><td align="right">15&nbsp;</td><td><a href="thu-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> My First Turnstile Language</a></td></tr><tr><td align="right">16&nbsp;</td><td><a href="fri-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Two Techniques</a></td></tr><tr><td align="right">17&nbsp;</td><td><a href="fri-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Extended Lab</span> Regexps</a></td></tr><tr><td align="right">18&nbsp;</td><td><a href="fri-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Some Language Gems</a></td></tr><tr><td align="right">19&nbsp;</td><td><a href="" class="tocviewselflink" data-pltdoc="x">Closure</a></td></tr></table></div></div><div class="tocviewlist"><table cellspacing="0" cellpadding="0"><tr><td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_1&quot;);">&#9658;</a></td><td>19&nbsp;</td><td><a href="" class="tocviewselflink" data-pltdoc="x">Closure</a></td></tr></table><div class="tocviewsublistbottom" style="display: none;" id="tocview_1"><table cellspacing="0" cellpadding="0"><tr><td align="right">19.1&nbsp;</td><td><a href="#%28part._.Topics_.Covered%29" class="tocviewlink" data-pltdoc="x">Topics Covered</a></td></tr><tr><td align="right">19.2&nbsp;</td><td><a href="#%28part._.Extending_.Embedded_.Languages%29" class="tocviewlink" data-pltdoc="x">Extending Embedded Languages</a></td></tr><tr><td align="right">19.3&nbsp;</td><td><a href="#%28part._.Good_.Bye%29" class="tocviewlink" data-pltdoc="x">Good Bye</a></td></tr></table></div></div></div><div class="tocsub"><div class="tocsubtitle">On this page:</div><table class="tocsublist" cellspacing="0"><tr><td><span class="tocsublinknumber">19.1<tt>&nbsp;</tt></span><a href="#%28part._.Topics_.Covered%29" class="tocsubseclink" data-pltdoc="x">Topics Covered</a></td></tr><tr><td><span class="tocsublinknumber">19.2<tt>&nbsp;</tt></span><a href="#%28part._.Extending_.Embedded_.Languages%29" class="tocsubseclink" data-pltdoc="x">Extending Embedded Languages</a></td></tr><tr><td><span class="tocsublinknumber">19.3<tt>&nbsp;</tt></span><a href="#%28part._.Good_.Bye%29" class="tocsubseclink" data-pltdoc="x">Good Bye</a></td></tr></table></div></div><div class="maincolumn"><div class="main"><div class="versionbox"><span class="version">7.4.0.4</span></div><div class="navsettop"><span class="navleft"><div class="nosearchform"></div>&nbsp;&nbsp;</span><span class="navright">&nbsp;&nbsp;<a href="fri-aft-lecture.html" title="backward to &quot;18 Some Language Gems&quot;" data-pltdoc="x">&larr; prev</a>&nbsp;&nbsp;<a href="index.html" title="up to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">up</a>&nbsp;&nbsp;<a href="thu-aft-lab-extra.html" title="forward to &quot;Extra Exercises My First Turnstile Language&quot;" data-pltdoc="x">next &rarr;</a></span>&nbsp;</div><h3>19<tt>&nbsp;</tt><a name="(part._fri-aft-lab)"></a>Closure</h3><div class="SAuthorListBox"><span class="SAuthorList"><p class="author">Matthias Felleisen</p></span></div><h4>19.1<tt>&nbsp;</tt><a name="(part._.Topics_.Covered)"></a>Topics Covered</h4><p>The focus of this week has been language-oriented programming (LOP) or the
design of various kinds of languages. We did not teach
ordinary Racket programming. <span class="refelem"><span class="refcolumn"><span class="refcontent">Again, &ldquo;design&rdquo; means &ldquo;using
tools to create abstractions as systematically as possible.&rdquo; It does
<span style="font-style: italic">not</span> refer to the vague word that language designers often use for
the careful development of syntax and the haphazard assignment of
semantics.</span></span></span></p><p><div class="SIntrapara">LOP is a range of ideas, all of which build on one central mechanism in Racket:
</div><div class="SIntrapara"><blockquote><p>language extension via <span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29" class="RktStxLink" data-pltdoc="x">define-syntax</a></span></p></blockquote></div><div class="SIntrapara">We covered this idea for three sessions: <a href="mon-aft-lecture.html" data-pltdoc="x">Language Extensions via Macros</a>,
<a href="tue-mor-lecture.html" data-pltdoc="x">Advanced Racket Macros</a>, and <a href="tue-aft-lecture.html" data-pltdoc="x">Lexical Scope, (Un)Hygienic Macros</a>.</div></p><p>With language extension, we can then realize a number of things:</p><p><table cellspacing="0" cellpadding="0" class="boxed" style="border-collapse: collapse;"><tr><td align="left" style="border-bottom: 1px solid black;"><p>kind of language</p></td><td align="left" style="border-bottom: 1px solid black;"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td align="right" style="border-bottom: 1px solid black;"><p>when covered</p></td></tr><tr><td align="left"><p>module-level languages</p></td><td align="left"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td align="right"><p><a href="wed-mor-lecture.html" data-pltdoc="x">Modules, Macros, Languages</a>, <a href="wed-aft-lecture.html" data-pltdoc="x">More Language Variations</a></p></td></tr><tr><td align="left"><p></p></td><td align="left"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td align="right"><p><a href="thu-aft-lecture.html" data-pltdoc="x">Typed Languages with Turnstile</a></p></td></tr><tr><td align="left"><p>fine-grained embedded languages</p></td><td align="left"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td align="right"><p><a href="fri-mor-lecture.html" data-pltdoc="x">Two Techniques</a>, <a href="fri-mor-lab.html" data-pltdoc="x"><span style="font-weight: bold">Extended Lab</span> Regexps</a></p></td></tr><tr><td align="left"><p>extensible embedded languages</p></td><td align="left"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td align="right"><p>see below</p></td></tr></table></p><p><div class="SIntrapara">To get you started, we presented you with a rough model of macro expansion
(<a href="mon-mor-lecture.html" data-pltdoc="x">Language-Oriented Programming</a>):
</div><div class="SIntrapara"><ul><li><p> reading (turning char sequences into syntax trees) </p></li><li><p> hooking functions-at-syntax-time into the expander </p></li><li><p> expanding a syntax tree until no nodes refer to macros </p></li></ul></div></p><p><div class="SIntrapara">From then on, we focused on the language extension and language building:
</div><div class="SIntrapara"><ul><li><p>techniques for writing new macros:</p><ul><li><p><span class="RktSym"><a href="http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#%28form._%28%28lib._syntax%2Fparse%2Fdefine..rkt%29._define-simple-macro%29%29" class="RktStxLink" data-pltdoc="x">define-simple-macro</a></span></p></li><li><p><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29" class="RktStxLink" data-pltdoc="x">define-syntax</a></span> <span class="RktPn">(</span><span class="RktSym">f</span><span class="stt"> </span><span class="RktSym">stx</span><span class="RktPn">)</span> <span class="RktSym"><a href="http://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29" class="RktStxLink" data-pltdoc="x">syntax-parse</a></span></p></li></ul></li><li><p>techniques for raising the level of abstraction:</p><ul><li><p>various flavors of syntax classes</p></li></ul></li><li><p>lexical scope and preserving it by default:</p><ul><li><p> lexical scope of the underlying language</p></li><li><p> lexical scope as the default for macros (textual substitution breaks all of this)</p></li><li><p> breaking lexical scope with datum-&gt;syntax</p></li></ul></li><li><p>different lexical scope with parameters</p><ul><li><p><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stxops.html#%28def._%28%28quote._~23~25kernel%29._datum-~3esyntax%29%29" class="RktValLink" data-pltdoc="x">datum-&gt;syntax</a></span> truly breaks lexical scope but it doesn&rsquo;t
always produce stable solutions</p></li><li><p><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stxparam.html#%28form._%28%28lib._racket%2Fstxparam..rkt%29._define-syntax-parameter%29%29" class="RktStxLink" data-pltdoc="x">define-syntax-parameter</a></span> and <span class="RktSym"><a href="http://docs.racket-lang.org/reference/stxparam.html#%28form._%28%28lib._racket%2Fstxparam..rkt%29._syntax-parameterize%29%29" class="RktStxLink" data-pltdoc="x">syntax-parameterize</a></span> create the
illusion of breaking the default scoping rules but in a way that is
mostly stable</p></li></ul></li><li><p>building a module-level language in Racket</p><ul><li><p>modules can export and import macros</p></li><li><p>the language is the first import and it provides the meaning for
everything in <span class="RktSym">foo</span> for <span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/module.html#%28form._%28%28quote._~23~25kernel%29._module%29%29" class="RktStxLink" data-pltdoc="x">module</a></span><span class="stt"> </span><span class="RktSym">name</span><span class="stt"> </span><span class="RktSym">language-name</span><span class="stt"> </span><span class="RktSym">foo</span><span class="RktPn">)</span></p></li><li><p>in particular, the language must define <span class="RktSym"><a href="http://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25module-begin%29%29" class="RktStxLink" data-pltdoc="x">#%module-begin</a></span>,
which determines the meaning of the rest of the module</p></li><li><p>there are more interposition points: <span class="RktSym"><a href="http://docs.racket-lang.org/reference/application.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25app%29%29" class="RktStxLink" data-pltdoc="x">#%app</a></span>, <span class="RktSym"><a href="http://docs.racket-lang.org/reference/__top.html#%28form._%28%28quote._~23~25kernel%29._~23~25top%29%29" class="RktStxLink" data-pltdoc="x">#%top</a></span>, <span class="RktSym"><a href="http://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._~23~25datum%29%29" class="RktStxLink" data-pltdoc="x">#%datum</a></span></p></li></ul></li><li><p>with <span class="stt">#lang</span> languages we can build languages from scratch,
restrict existing languages, extend one, and do all of the above.</p></li><li><p>build typed module languages</p></li><li><p>build simple expression-level embedded languages.</p></li></ul></div></p><h4>19.2<tt>&nbsp;</tt><a name="(part._.Extending_.Embedded_.Languages)"></a>Extending Embedded Languages</h4><p>At this point, you might think that Racket has solved all problems of
language-oriented programming but this is not the case. Much remains to be
done.</p><p>Over the years, we have time and again encountered situations where
embedded languages, such as the one you worked on this morning, themselves
call for syntactic extensibility. We constructed those capabilities on an
ad hoc basis:</p><p><div class="SIntrapara"><ul><li><p>On Monday morning, we briefly showed our way of extending the
language of match patterns. See <a href="http://docs.racket-lang.org/reference/match.html#%28part._.Extending_match%29" data-pltdoc="x">Extending <span class="RktSym"><span class="RktStxLink">match</span></span></a>.</p></li><li><p>Matthew used a good bit of the embedded language of providing and
requiring across module boundaries. See <a href="http://docs.racket-lang.org/reference/define.html#%28part._provide-syntax%29" data-pltdoc="x"><span class="RktSym"><span class="RktStxLink">provide</span></span> Macros</a> and
<a href="http://docs.racket-lang.org/reference/define.html#%28part._require-syntax%29" data-pltdoc="x"><span class="RktSym"><span class="RktStxLink">require</span></span> Macros</a> for the documentation on how to
extend those languages.</p></li><li><p>As you may know, Racket comes with a web server that has an embedded
language for dispatching from requests to places in the web server&rsquo;s world.
See <a href="http://docs.racket-lang.org/web-server/dispatch.html#%28part._.Extending_web-server_dispatch%29" data-pltdoc="x">Extending <span class="RktModLink"><span class="RktSym">web-server/dispatch</span></span></a> for ways of extending this
DSL.</p></li></ul></div><div class="SIntrapara">Turnstile in some ways fits this pattern, too, but it also differs from the
above.</div></p><p>Then again, you have seen embedded languages or even built some that you
might wish to extend syntactically and you can&rsquo;t:</p><ul><li><p>the regular expression language from this morning could clearly
benefit from syntactic extensions</p></li><li><p>time and again, we see situations where macros for the language of
types in Typed Racket could help.</p></li><li><p><div class="SIntrapara">and there are embedded languages such as the ones in <span class="RktSym"><a href="http://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29" class="RktStxLink" data-pltdoc="x">for</a></span>
loops that would benefit from internal macros. Take a look at the following
code, taken from a recent posting to our
<a href="https://lists.racket-lang.org">mailing list</a>
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">Natural Natural (Natural -&gt; Integer) -&gt; Natural </span></td></tr><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">(the-number-of-primes-between low high f) determines the</span></td></tr><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">number of primes that f produces on the interval [low,high)</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">count-primes-between</span><span class="hspace">&nbsp;</span><span class="RktSym">low</span><span class="hspace">&nbsp;</span><span class="RktSym">high</span><span class="hspace">&nbsp;</span><span class="RktSym">f</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2A%2Fsum%29%29" class="RktStxLink" data-pltdoc="x">for*/sum</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="highlighted"><span class="RktPn">[</span></span><span class="highlighted"><span class="RktSym">i</span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29" class="RktValLink" data-pltdoc="x">in-range</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym">low</span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym">high</span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="highlighted"><span class="RktPn">]</span></span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="highlighted"><span class="RktPn">[</span></span><span class="highlighted"><span class="RktSym">p</span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-value%29%29" class="RktValLink" data-pltdoc="x">in-value</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym">f</span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym">i</span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="highlighted"><span class="RktPn">]</span></span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">#:when</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">prime?</span><span class="hspace">&nbsp;</span><span class="RktSym">p</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;</span><span class="RktVal">1</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">The pattern <span class="RktPn">[</span><span class="RktSym">x</span><span class="stt"> </span><span class="RktSym">R</span><span class="RktPn">]</span><span class="stt"> </span><span class="RktPn">[</span><span class="RktSym">y</span><span class="stt"> </span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-value%29%29" class="RktValLink" data-pltdoc="x">in-value</a></span><span class="stt"> </span><span class="RktSym">..</span><span class="stt"> </span><span class="RktSym">x</span><span class="stt"> </span><span class="RktSym">..</span><span class="RktPn">)</span><span class="RktPn">]</span> shows up
often, and you&rsquo;re really like to be able to write a macro that expands to
it so that <span style="font-style: italic">all</span> <span class="RktSym"><a href="http://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2A%29%29" class="RktStxLink" data-pltdoc="x">for*</a></span><span class="RktMeta"></span> loops benefit from it.</div></p></li></ul><p>Building syntactic extensibility into an embedded domain-specific language
is non-trivial. We can do it but our tools for doing so are not ready for
prime time. In a year from now or so, they will be. And then you will be
more than welcome to attend a RacketSchool again and learn all about.</p><h4>19.3<tt>&nbsp;</tt><a name="(part._.Good_.Bye)"></a>Good Bye</h4><blockquote class="SCentered"><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSfypi19BpAyRJfe0AW-qox3TH4JC6mBZKJ4wQXoHr3xLVCzGQ/viewform"><span style="font-weight: bold">Racket School Exit Survey</span></a></p></blockquote><div class="navsetbottom"><span class="navleft"><div class="nosearchform"></div>&nbsp;&nbsp;</span><span class="navright">&nbsp;&nbsp;<a href="fri-aft-lecture.html" title="backward to &quot;18 Some Language Gems&quot;" data-pltdoc="x">&larr; prev</a>&nbsp;&nbsp;<a href="index.html" title="up to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">up</a>&nbsp;&nbsp;<a href="thu-aft-lab-extra.html" title="forward to &quot;Extra Exercises My First Turnstile Language&quot;" data-pltdoc="x">next &rarr;</a></span>&nbsp;</div></div></div><div id="contextindicator">&nbsp;</div></body></html>
