HTTP/1.1 200 OK
Date: Wed, 27 Nov 2024 02:51:26 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
x-amz-id-2: s9rxoGTTPoKBiqCW9TZLbRv5INeCM0myqaPVDUOiNowbwR7rl2h6N59cCt73GFY8byghP4fq7Es=
x-amz-request-id: A909BZP47F55SPB4
Cache-Control: max-age=0, no-cache
Last-Modified: Sat, 27 Jul 2019 23:29:20 GMT
x-amz-storage-class: REDUCED_REDUNDANCY
cf-cache-status: DYNAMIC
vary: accept-encoding
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=Z1OFEB36oBYlygFDSlIa1l4hRo9y9HQVidRdMlwhBUbXrYKjA5VVumJ0yTXGD%2BCbWtSSVbN8iKUkYFQxtR9BFRbARHbzN9XH5fzsGbgGvNOnbf5w%2BprYVLwGzRnFLdvO72KPf0sBzsXh"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8e8ed101fc14a7ef-SYD
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=58629&sent=58&recv=18&lost=0&retrans=9&sent_bytes=45408&recv_bytes=1274&delivery_rate=367053&cwnd=161&unsent_bytes=0&cid=7d2157471387f880&ts=216848&x=0"

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"/><meta name="viewport" content="width=device-width, initial-scale=0.8"/><title>10&nbsp;Lab Languages via Macros</title><link rel="stylesheet" type="text/css" href="scribble.css" title="default"/><link rel="stylesheet" type="text/css" href="racket.css" title="default"/><link rel="stylesheet" type="text/css" href="manual-style.css" title="default"/><link rel="stylesheet" type="text/css" href="manual-racket.css" title="default"/><script type="text/javascript" src="scribble-common.js"></script><script type="text/javascript" src="manual-racket.js"></script><!--[if IE 6]><style type="text/css">.SIEHidden { overflow: hidden; }</style><![endif]--></head><body id="scribble-racket-lang-org"><div class="tocset"><div class="tocview"><div class="tocviewlist tocviewlisttopspace"><div class="tocviewtitle"><table cellspacing="0" cellpadding="0"><tr><td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_0&quot;);">&#9660;</a></td><td></td><td><a href="index.html" class="tocviewlink" data-pltdoc="x">Racket School 2019:<span class="mywbr"> &nbsp;</span> <br/>
<span class="Smaller">The &#8220;How to Design Languages&#8221; Track</span></a></td></tr></table></div><div class="tocviewsublisttop" style="display: block;" id="tocview_0"><table cellspacing="0" cellpadding="0"><tr><td align="right">1&nbsp;</td><td><a href="mon-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Language-<wbr></wbr>Oriented Programming</a></td></tr><tr><td align="right">2&nbsp;</td><td><a href="mon-mor-lab.html" class="tocviewlink" data-pltdoc="x">Macro Expansion</a></td></tr><tr><td align="right">3&nbsp;</td><td><a href="mon-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Language Extensions via Macros</a></td></tr><tr><td align="right">4&nbsp;</td><td><a href="mon-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Simple Macros</a></td></tr><tr><td align="right">5&nbsp;</td><td><a href="tue-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Advanced Racket Macros</a></td></tr><tr><td align="right">6&nbsp;</td><td><a href="tue-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Syntax Patterns &amp; Classes</a></td></tr><tr><td align="right">7&nbsp;</td><td><a href="tue-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Lexical Scope, (Un)Hygienic Macros</a></td></tr><tr><td align="right">8&nbsp;</td><td><a href="tue-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Comfortable Macros</a></td></tr><tr><td align="right">9&nbsp;</td><td><a href="wed-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Modules, Macros, Languages</a></td></tr><tr><td align="right">10&nbsp;</td><td><a href="" class="tocviewselflink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages via Macros</a></td></tr><tr><td align="right">11&nbsp;</td><td><a href="wed-aft-lecture.html" class="tocviewlink" data-pltdoc="x">More Language Variations</a></td></tr><tr><td align="right">12&nbsp;</td><td><a href="wed-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages and Readers</a></td></tr><tr><td align="right">13&nbsp;</td><td><a href="thu-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Types and Type Checking</a></td></tr><tr><td align="right">14&nbsp;</td><td><a href="thu-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Typed Languages with Turnstile</a></td></tr><tr><td align="right">15&nbsp;</td><td><a href="thu-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> My First Turnstile Language</a></td></tr><tr><td align="right">16&nbsp;</td><td><a href="fri-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Two Techniques</a></td></tr><tr><td align="right">17&nbsp;</td><td><a href="fri-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Extended Lab</span> Regexps</a></td></tr><tr><td align="right">18&nbsp;</td><td><a href="fri-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Some Language Gems</a></td></tr><tr><td align="right">19&nbsp;</td><td><a href="fri-aft-lab.html" class="tocviewlink" data-pltdoc="x">Closure</a></td></tr></table></div></div><div class="tocviewlist"><table cellspacing="0" cellpadding="0"><tr><td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_1&quot;);">&#9658;</a></td><td>10&nbsp;</td><td><a href="" class="tocviewselflink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages via Macros</a></td></tr></table><div class="tocviewsublistbottom" style="display: none;" id="tocview_1"><table cellspacing="0" cellpadding="0"><tr><td align="right"></td><td><a href="#%28part._pfsh-morning-code%29" class="tocviewlink" data-pltdoc="x">Code</a></td></tr></table></div></div></div><div class="tocsub"><div class="tocsubtitle">On this page:</div><table class="tocsublist" cellspacing="0"><tr><td><span class="tocsublinknumber"></span><a href="#%28part._pfsh-morning-code%29" class="tocsubseclink" data-pltdoc="x">Code</a></td></tr></table></div></div><div class="maincolumn"><div class="main"><div class="versionbox"><span class="version">7.4.0.4</span></div><div class="navsettop"><span class="navleft"><div class="nosearchform"></div>&nbsp;&nbsp;</span><span class="navright">&nbsp;&nbsp;<a href="wed-mor-lecture.html" title="backward to &quot;9 Modules, Macros, Languages&quot;" data-pltdoc="x">&larr; prev</a>&nbsp;&nbsp;<a href="index.html" title="up to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">up</a>&nbsp;&nbsp;<a href="wed-aft-lecture.html" title="forward to &quot;11 More Language Variations&quot;" data-pltdoc="x">next &rarr;</a></span>&nbsp;</div><h3>10<tt>&nbsp;</tt><a name="(part._wed-mor-lab)"></a><span style="font-weight: bold">Lab</span> Languages via Macros</h3><div class="SAuthorListBox"><span class="SAuthorList"><p class="author">Matthew Flatt</p></span></div><p>Start with <a href="wed-mor-lecture.html#%28elem._pfsh1%29" data-pltdoc="x"><span class="stt">"pfsh1.rkt"</span></a>.</p><blockquote class="SubFlow"><p><a name="(counter._(exercise._output-redirection))"></a><span style="font-weight: bold">Exercise</span>&nbsp;23. 
Add <span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span> to <span class="RktSym">pfsh</span> to bind an name to the string
output of a <span class="RktSym">run</span> command. Save you new language as
<span class="stt">"pfsh2.rkt"</span>. For example,</p><blockquote class="Rfilebox"><p class="Rfiletitle"><span class="Rfilename"><span class="stt">"use-pfsh2.rkt"</span></span></p><blockquote class="Rfilecontent"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/reference/reader.html#%28mod-path._s-exp%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">s-exp</span></a><span class="hspace">&nbsp;</span><span class="RktVal">"pfsh2.rkt"</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktSym">me</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">whoami</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="RktSym">me</span></td></tr></table></blockquote></blockquote></blockquote><p>should define <span class="RktSym">me</span> and then print it out as a Racket string.
Just writing <span class="RktSym">me</span> will cause the string to print because we are
(so far) using <span class="RktSym"><a href="http://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25module-begin%29%29" class="RktStxLink" data-pltdoc="x">#%module-begin</a></span> from <span class="RktSym">racket</span>, and that
<span class="RktSym"><a href="http://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25module-begin%29%29" class="RktStxLink" data-pltdoc="x">#%module-begin</a></span> prints the result of any top-level expression.</p><p>The <span class="RktSym"><a href="http://docs.racket-lang.org/reference/port-lib.html#%28def._%28%28lib._racket%2Fport..rkt%29._with-output-to-string%29%29" class="RktValLink" data-pltdoc="x">with-output-to-string</a></span> function from <span class="RktSym">racket/port</span>
is probably all of the run-time support that is needed for
<span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span>. <img style="vertical-align: 0px; margin: -3px -3px -3px -3px;" src="pict_24.svg" type="image/svg+xml"/></p></blockquote><blockquote class="SubFlow"><p><a name="(counter._(exercise._input-redirection))"></a><span style="font-weight: bold">Exercise</span>&nbsp;24. 
Add input redirection to <span class="RktSym">run</span> by allowing <span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29" class="RktValLink" data-pltdoc="x">&lt;</a></span> followed
by a <span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span>d identifier at the end of a <span class="RktSym">run</span> form.
You&rsquo;ll probably find <span class="RktSym">syntax/parse</span>&rsquo;s <span class="RktSym"><a href="http://docs.racket-lang.org/syntax/stxparse-patterns.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._~7edatum%29%29" class="RktStxLink" data-pltdoc="x">~datum</a></span> or <span class="RktPn">#:datum-literals</span>
handy, as well as <span class="RktSym"><a href="http://docs.racket-lang.org/reference/port-lib.html#%28def._%28%28lib._racket%2Fport..rkt%29._with-input-from-string%29%29" class="RktValLink" data-pltdoc="x">with-input-from-string</a></span> from
<span class="RktSym">racket/port</span>. Call the extended language <span class="stt">"pfsh3.rkt"</span>.</p><p><div class="SIntrapara"><blockquote class="Rfilebox"><p class="Rfiletitle"><span class="Rfilename"><span class="stt">"use-pfsh3.rkt"</span></span></p><blockquote class="Rfilecontent"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/reference/reader.html#%28mod-path._s-exp%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">s-exp</span></a><span class="hspace">&nbsp;</span><span class="RktVal">"pfsh3.rkt"</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktSym">l</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">ls</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">wc</span><span class="hspace">&nbsp;</span><span class="RktSym"><span class="nobreak">-l</span></span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29" class="RktValLink" data-pltdoc="x">&lt;</a></span><span class="hspace">&nbsp;</span><span class="RktSym">l</span><span class="RktPn">)</span></td></tr></table></blockquote></blockquote></blockquote></div><div class="SIntrapara"><img style="vertical-align: 0px; margin: -3px -3px -3px -3px;" src="pict_25.svg" type="image/svg+xml"/></div></p></blockquote><blockquote class="SubFlow"><p><div class="SIntrapara"><a name="(counter._(exercise._strings))"></a><span style="font-weight: bold">Exercise</span>&nbsp;25. 
Symbols are not always convenient to represent arguments to programs.
For example, trying to running <span class="stt">ls -1</span> as
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><p><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">ls</span><span class="hspace">&nbsp;</span><span class="RktVal"><span class="nobreak">-1</span></span><span class="RktPn">)</span></p></blockquote></div><div class="SIntrapara">doesn&rsquo;t work, because <span class="RktVal"><span class="nobreak">-1</span></span> is a number.</div></p><p>Adjust the <span class="RktSym">pfsh</span> implementation to allow strings as well as
symbols for program names as arguments. Save you new language as
<span class="stt">"pfsh4.rkt"</span>. For example,</p><blockquote class="Rfilebox"><p class="Rfiletitle"><span class="Rfilename"><span class="stt">"use-pfsh4.rkt"</span></span></p><blockquote class="Rfilecontent"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/reference/reader.html#%28mod-path._s-exp%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">s-exp</span></a><span class="hspace">&nbsp;</span><span class="RktVal">"pfsh4.rkt"</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">ls</span><span class="hspace">&nbsp;</span><span class="RktVal">"-1"</span><span class="RktPn">)</span></td></tr></table></blockquote></blockquote></blockquote><p>should produce single-column output.</p><p>For now, the <span class="RktSym">run</span> form should allow only identifiers and
immediate strings as subforms. It should complain with a nice error
message if anything else appears, such as a number or a parenthesized
form.</p><p>You may find that your first attempt doesn&rsquo;t work and produces an
error like &ldquo;literal data is not allowed&rdquo; for strings. We&rsquo;ll explain
that error this afternoon. Meanwhile, avoid that kind of error by
using an explicit <span class="RktSym"><a href="http://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29" class="RktStxLink" data-pltdoc="x">quote</a></span> form around any literal string that
your macro puts in an expansion.</p><p>The best implementation for this exercise will involve a new syntax
class, perhaps named <span class="RktSym">run-arg</span>. <img style="vertical-align: 0px; margin: -3px -3px -3px -3px;" src="pict_26.svg" type="image/svg+xml"/></p></blockquote><blockquote class="SubFlow"><p><a name="(counter._(exercise._module-begin))"></a><span style="font-weight: bold">Exercise</span>&nbsp;26. 
Our <span class="RktSym">run</span> macro implementation suppresses a <span class="RktVal">#t</span> or
<span class="RktVal">#f</span> output by wrapping a call to the <span class="RktSym">run</span> function
with <span class="RktSym"><a href="http://docs.racket-lang.org/reference/void.html#%28def._%28%28quote._~23~25kernel%29._void%29%29" class="RktValLink" data-pltdoc="x">void</a></span>. That choice is inconvenient for adding a
<span class="RktSym">&amp;&amp;</span> operator that chains from one command to another only if
the first command succeeds:</p><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym">&amp;&amp;</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">test</span><span class="hspace">&nbsp;</span><span class="RktSym"><span class="nobreak">-f</span></span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">cat</span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote><p>A better solution to define the <span class="RktSym">run</span> form so that it returns
the success boolean, but also change <span class="RktSym"><a href="http://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25module-begin%29%29" class="RktStxLink" data-pltdoc="x">#%module-begin</a></span> so that
it doesn&rsquo;t print the results of forms in the module body.</p><p>Since adjusting the way results are treated in a module body is a
common problem, Racket includes a <span class="RktSym"><a href="http://docs.racket-lang.org/syntax/module-helpers.html#%28def._%28%28lib._syntax%2Fwrap-modbeg..rkt%29._make-wrapping-module-begin%29%29" class="RktValLink" data-pltdoc="x">make-wrapping-module-begin</a></span>
function from <a href="http://docs.racket-lang.org/syntax/module-helpers.html#%28mod-path._syntax%2Fwrap-modbeg%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">syntax/wrap-modbeg</span></a>.</p><blockquote><p>Note that <a href="http://docs.racket-lang.org/syntax/module-helpers.html#%28mod-path._syntax%2Fwrap-modbeg%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">syntax/wrap-modbeg</span></a> provides
<span class="RktSym"><a href="http://docs.racket-lang.org/syntax/module-helpers.html#%28def._%28%28lib._syntax%2Fwrap-modbeg..rkt%29._make-wrapping-module-begin%29%29" class="RktValLink" data-pltdoc="x">make-wrapping-module-begin</a></span> <span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for-syntax%29%29" class="RktStxLink" data-pltdoc="x">for-syntax</a></span>, which means
that <span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29" class="RktStxLink" data-pltdoc="x">require</a></span><span class="stt"> </span><span class="RktSym">syntax/wrap-modbeg</span><span class="RktPn">)</span> makes
<span class="RktSym"><a href="http://docs.racket-lang.org/syntax/module-helpers.html#%28def._%28%28lib._syntax%2Fwrap-modbeg..rkt%29._make-wrapping-module-begin%29%29" class="RktValLink" data-pltdoc="x">make-wrapping-module-begin</a></span> available for compile-time
expressions instead of run-time expressions. You don&rsquo;t need to use
<span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for-syntax%29%29" class="RktStxLink" data-pltdoc="x">for-syntax</a></span> as in <span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29" class="RktStxLink" data-pltdoc="x">require</a></span><span class="stt"> </span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for-syntax%29%29" class="RktStxLink" data-pltdoc="x">for-syntax</a></span><span class="stt"> </span><span class="RktSym">syntax/wrap-modbeg</span><span class="RktPn">)</span><span class="RktPn">)</span>.</p></blockquote><p>Change <span class="RktSym"><a href="http://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25module-begin%29%29" class="RktStxLink" data-pltdoc="x">#%module-begin</a></span> and <span class="RktSym">run</span> in <span class="RktSym">pfsh</span>, and
add <span class="RktSym">&amp;&amp;</span> so that the following example shows the content of
<span class="stt">"demo.txt"</span> if it exists in the current directory, and it should
print nothing if <span class="stt">"demo.txt"</span> does not exist.</p><p><div class="SIntrapara"><blockquote class="Rfilebox"><p class="Rfiletitle"><span class="Rfilename"><span class="stt">"use-pfsh5.rkt"</span></span></p><blockquote class="Rfilecontent"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/reference/reader.html#%28mod-path._s-exp%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">s-exp</span></a><span class="hspace">&nbsp;</span><span class="RktVal">"pfsh5.rkt"</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">&amp;&amp;</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">test</span><span class="hspace">&nbsp;</span><span class="RktSym"><span class="nobreak">-f</span></span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">cat</span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote></blockquote></blockquote></div><div class="SIntrapara"><img style="vertical-align: 0px; margin: -3px -3px -3px -3px;" src="pict_27.svg" type="image/svg+xml"/></div></p></blockquote><blockquote class="SubFlow"><p><a name="(counter._(exercise._sh-failures))"></a><span style="font-weight: bold">Exercise</span>&nbsp;27. 
Experienced <span class="stt">/bin/sh</span> programmers include <span class="stt">set -e</span> in their
scripts to make sure the script stops when a command errors. The
notion of &ldquo;errors&rdquo; is subtle, however. If two commands are combined
with <span class="stt">&amp;&amp;</span> and the first one has a failing status code, the
combination doesn&rsquo;t count as an error. If the second one is run and
has a failing status code, the combination counts as an error. At the
same time, the combination counts as a failure for the purpose of
nested <span class="stt">&amp;&amp;</span>s if either the first or second expression fails.</p><p>Implement those rules for <span class="RktSym">pfsh</span> (without requiring the
programmer to write <span class="stt">set -e</span>).</p><blockquote class="Rfilebox"><p class="Rfiletitle"><span class="Rfilename"><span class="stt">"use1-pfsh6.rkt"</span></span></p><blockquote class="Rfilecontent"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/reference/reader.html#%28mod-path._s-exp%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">s-exp</span></a><span class="hspace">&nbsp;</span><span class="RktVal">"pfsh6.rkt"</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">cat</span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">echo</span><span class="hspace">&nbsp;</span><span class="RktSym">cat</span><span class="hspace">&nbsp;</span><span class="RktSym">worked</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">don't get here if "demo.txt" doesn't exist</span></td></tr></table></blockquote></blockquote></blockquote><p><div class="SIntrapara"><blockquote class="Rfilebox"><p class="Rfiletitle"><span class="Rfilename"><span class="stt">"use2-pfsh6.rkt"</span></span></p><blockquote class="Rfilecontent"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/reference/reader.html#%28mod-path._s-exp%29" class="RktModLink" data-pltdoc="x"><span class="RktSym">s-exp</span></a><span class="hspace">&nbsp;</span><span class="RktVal">"pfsh6.rkt"</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">&amp;&amp;</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">test</span><span class="hspace">&nbsp;</span><span class="RktSym"><span class="nobreak">-f</span></span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">cat</span><span class="hspace">&nbsp;</span><span class="RktSym">demo.txt</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">run</span><span class="hspace">&nbsp;</span><span class="RktSym">echo</span><span class="hspace">&nbsp;</span><span class="RktSym">cat</span><span class="hspace">&nbsp;</span><span class="RktSym">maybe</span><span class="hspace">&nbsp;</span><span class="RktSym">worked</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">always get here</span></td></tr></table></blockquote></blockquote></blockquote></div><div class="SIntrapara"><img style="vertical-align: 0px; margin: -3px -3px -3px -3px;" src="pict_28.svg" type="image/svg+xml"/></div></p></blockquote><h4><a name="(part._pfsh-morning-code)"></a>Code</h4><p><a href="pfsh-morning.zip">Code and solutions</a></p><div class="navsetbottom"><span class="navleft"><div class="nosearchform"></div>&nbsp;&nbsp;</span><span class="navright">&nbsp;&nbsp;<a href="wed-mor-lecture.html" title="backward to &quot;9 Modules, Macros, Languages&quot;" data-pltdoc="x">&larr; prev</a>&nbsp;&nbsp;<a href="index.html" title="up to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">up</a>&nbsp;&nbsp;<a href="wed-aft-lecture.html" title="forward to &quot;11 More Language Variations&quot;" data-pltdoc="x">next &rarr;</a></span>&nbsp;</div></div></div><div id="contextindicator">&nbsp;</div></body></html>
