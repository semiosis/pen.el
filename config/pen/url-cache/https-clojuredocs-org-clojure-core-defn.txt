HTTP/1.1 200 OK
Date: Tue, 29 Oct 2024 22:39:16 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: ring-session=6oiy29u3AA9MBui3fkJE8GO%2Fg8RlNGa2VPU0TMxuObcwIQmQdasWPp052xcD1MN5DbkXh3hNw4PNL7cvk3nb6vQgJjB3xfGhH%2BWS0tCHHCg%3D--aPcmemgP5gC%2BbvnOBkJ%2FXPu1FE58JYUKF%2Fq0O03oBEQ%3D;Path=/;HttpOnly
cf-cache-status: DYNAMIC
vary: accept-encoding
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=SUyQ6ANx%2B%2BU9QAX%2BEXwsHvJ0g7wHTDLcRGPKesatr%2FoJQk9gI9GwXns%2FX0ZfR855RXIB52FmivdOP3gS8XEYg49kmnsjPpShbR6B1%2Fby9axX%2FYnkswIw4EaXpGiVbPXJeSSwTZrd7bL%2FgUq3MAs%3D"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8da6a91fbd10d728-BNE
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=197314&sent=6&recv=8&lost=0&retrans=0&sent_bytes=3287&recv_bytes=529&delivery_rate=20690&cwnd=39&unsent_bytes=0&cid=3b9705cfdcb7848b&ts=1025&x=0"

<!DOCTYPE html>
<html><head><meta content="width=device-width, maximum-scale=1.0" name="viewport"><meta content="yes" name="apple-mobile-web-app-capable"><meta content="default" name="apple-mobile-web-app-status-bar-style"><meta content="ClojureDocs" name="apple-mobile-web-app-title"><meta content="XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g" name="google-site-verification"><title>defn - clojure.core | ClojureDocs - Community-Powered Clojure Documentation and Examples</title><link href="/opensearch.xml" rel="search" title="ClojureDocs" type="application/opensearchdescription+xml"><link href="/css/font-awesome.min.css?bbfef9385083d307ad2692c0cf99f611" rel="stylesheet"><link href="/css/bootstrap.min.css?385b964b68acb68d23cb43a5218fade9" rel="stylesheet"><link href="/css/app.css?9e9d4de52804fa9bff22ecaa7badf8f9" rel="stylesheet"><script>// <![CDATA[
window.PAGE_DATA="{:examples [{:updated-at 1361268155000, :created-at 1279161740000, :body \"user=> (defn foo [a b c]\\n\\t    (* a b c))\\n#'user/foo\\nuser=> (foo 1 2 3)\\n6\\n\\nuser=> (defn bar [a b & [c]]\\n         (if c\\n           (* a b c)\\n           (* a b 100)))\\n#'user/bar\\nuser=> (bar 5 6)\\n3000\\nuser=> (bar 5 6 2)\\n60\\n\\nuser=> (defn baz [a b & {:keys [c d] :or {c 10 d 20}}]\\n         (* a b c d))\\n#'user/baz\\nuser=> (baz 2 3)\\n1200\\nuser=> (baz 2 3 :c 5)\\n600\\nuser=> (baz 2 3 :c 5 :d 6)\\n180\\n\\nuser=> (defn boo [a b & {:keys [c d] :or {c 10 d 20} :as all-specified}]\\n          (println all-specified)\\n          (* a b c d))\\n#'user/boo\\nuser=> (boo 2 3)\\nnil\\n1200\\nuser=> (boo 2 3 :c 5)\\n{:c 5}\\n600\\nuser=> (boo 1 2 :d 3 :c 4)\\n{:c 4, :d 3}\\n24\\n\", :editors [{:avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\", :account-source \"github\", :login \"zk\"} {:avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\", :account-source \"github\", :login \"zk\"} {:avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\", :account-source \"github\", :login \"zk\"} {:avatar-url \"https://www.gravatar.com/avatar/9e10dfa345f44b0fe72bbe081fd51b83?r=PG&default=identicon\", :account-source \"clojuredocs\", :login \"AtKaaZ\"}], :author {:avatar-url \"https://avatars.githubusercontent.com/u/142529?v=3\", :account-source \"github\", :login \"nipra\"}, :var {:ns \"clojure.core\", :name \"defn\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692cbc026201cdc326bd1\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :author {:login \"kotarak\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/5db30f607f0b5fa70d690311aa3bfd3b?r=PG&default=identicon\"}, :editors [{:login \"kotarak\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/5db30f607f0b5fa70d690311aa3bfd3b?r=PG&default=identicon\"} {:login \"zk\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\"}], :body \"user=> (defn bar\\n         ([a b]   (bar a b 100))\\n         ([a b c] (* a b c)))\\n#'user/bar\\nuser=> (bar 5 6)\\n3000\\nuser=> (bar 5 6 2)\\n60\\n\", :created-at 1279213901000, :updated-at 1285496324000, :_id \"542692cbc026201cdc326bd6\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :author {:login \"pkolloch\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/10b2fd3c0a4cc46dc241a48468dc551?r=PG&default=identicon\"}, :editors [{:login \"pkolloch\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/10b2fd3c0a4cc46dc241a48468dc551?r=PG&default=identicon\"} {:login \"zk\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\"} {:login \"zk\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\"} {:login \"philos99\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/1de5617efb013ca7c9cf8e5646818ffa?r=PG&default=identicon\"}], :body \";; You can use destructuring to have keyword arguments. This would be a\\n;; pretty verbose version of map (in an example a bit more verbose than\\n;; the first above):\\n\\n(defn keyworded-map [& {function :function sequence :sequence}]\\n  (map function sequence))\\n\\n;; You can call it like this:\\n\\nuser=> (keyworded-map :sequence [1 2 3] :function #(+ % 2))\\n(3 4 5)\\n\\n\\n;; The declaration can be shortened with \\\":keys\\\" if your local variables \\n;; should be named in the same way as your keys in the map:\\n\\n(defn keyworded-map [& {:keys [function sequence]}]\\n  (map function sequence))\\n\", :created-at 1280457897000, :updated-at 1317454000000, :_id \"542692cbc026201cdc326bd9\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :author {:login \"AtKaaZ\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9e10dfa345f44b0fe72bbe081fd51b83?r=PG&default=identicon\"}, :editors [{:login \"AtKaaZ\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9e10dfa345f44b0fe72bbe081fd51b83?r=PG&default=identicon\"} {:login \"AtKaaZ\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9e10dfa345f44b0fe72bbe081fd51b83?r=PG&default=identicon\"} {:login \"AtKaaZ\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9e10dfa345f44b0fe72bbe081fd51b83?r=PG&default=identicon\"}], :body \"(defn somefn\\n  [req1 req2 ;required params\\n   & {:keys [a b c d e] ;optional params\\n      :or {a 1 ;optional params with preset default values other than the nil default\\n                  ; b takes nil if not specified on call\\n            c 3 ; c is 3 when not specified on call\\n            d 0 ; d is 0 --//--\\n                  ; e takes nil if not specified on call\\n           }\\n      :as mapOfParamsSpecifiedOnCall ;takes nil if no extra params(other than the required ones) are specified on call\\n      }]\\n  (println req1 req2 mapOfParamsSpecifiedOnCall a b c d e)\\n  )\\n\\n=> (somefn 9 10 :b 2 :d 4)\\n;9 10 {:b 2, :d 4} 1 2 3 4 nil\\nnil\\n=> (somefn)\\n;ArityException Wrong number of args (0) passed to: funxions$somefn  ;clojure.lang.AFn.throwArity (AFn.java:437)\\n=> (somefn 9 10)\\n;9 10 nil 1 nil 3 0 nil\\nnil\\n=> (somefn 9 10 :x 123)\\n;9 10 {:x 123} 1 nil 3 0 nil\\nnil\\n=> (somefn 9 10 123)\\n;IllegalArgumentException No value supplied for key: 123  ;clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)\\n=> (somefn 9 10 123 45)\\n;9 10 {123 45} 1 nil 3 0 nil\\nnil\\n=> (try \\n     (somefn 9 10 123)\\n     (catch IllegalArgumentException e (println \\\"caught:\\\" e)))\\n;caught: #<IllegalArgumentException java.lang.IllegalArgumentException: No value supplied for key: 123>\\nnil\", :created-at 1361269606000, :updated-at 1361269847000, :_id \"542692d2c026201cdc326f7c\", :user nil} {:updated-at 1442603127799, :created-at 1442603127799, :author {:login \"dxlr8r\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/1648056?v=3\"}, :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :body \";; :as only include parameters provided, not the default (:or) ones.\\n;; This is some boilerplate code to get around this. \\n;; Hopefully not needed in the future revisions of Clojure.\\n\\n(defn bar [f g h & {:keys [override]}]\\n  (let [default {:a 1 :b 2 :c 3}\\n        args (merge default override)]\\n    (conj '() f g h args)))\\n\\n(bar 1 2 3 :override {:a 9 :z 5}) ; returns -> ({:z 5, :a 9, :b 2, :c 3} 3 2 1)\\n\", :_id \"55fc6077e4b06a9ffaad4fc1\", :user nil} {:updated-at 1516276416080, :created-at 1516276416080, :author {:login \"ibercode\", :account-source \"github\", :avatar-url \"https://avatars0.githubusercontent.com/u/31028993?v=4\"}, :body \";;defn basic examples\\n(defn say-hi [name]\\n  (str \\\"Hi \\\" name))\\n\\n(say-hi \\\"Jack\\\")\\n;;\\\"Hi Jack\\\"\\n\\n;;the same result using def\\n(def say-hello (fn [name]\\n                 (str \\\"Hello \\\" name)))\\n\\n(say-hello \\\"Bob\\\")\\n;;\\\"Hello Bob\\\"\\n\\n;;the same result using def and an anonymous function\\n(def say-bye #(str \\\"Bye Bye \\\" %))\\n\\n(say-bye \\\"Mark\\\")\\n;;\\\"Bye Bye Mark\\\"\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :_id \"5a608ac0e4b0a08026c48cff\", :user nil} {:updated-at 1516725425484, :created-at 1516725425484, :author {:login \"jakubholynet\", :account-source \"github\", :avatar-url \"https://avatars1.githubusercontent.com/u/624958?v=4\"}, :body \";;define a function with metadata\\n(defn hello {:awesome true} [] nil)\\n\\n(meta #'hello)\\n=>\\n{:arglists ([]),\\n :awesome true,\\n ...\\n}\\n\\n;; define a function with a return value type hint\\n(defn hinted ^long [] 42)\\n\\n(-> #'hinted meta :arglists first meta :tag)\\n=> long\\n\\n;; both metadata on the fn and return type hint (on the argument vector)\\n(defn hinted+meta {:awesome true} ^long [] 42)\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :_id \"5a6764b1e4b09621d9f53a76\", :user nil} {:updated-at 1547395275348, :created-at 1547395275348, :author {:login \"victorb\", :account-source \"github\", :avatar-url \"https://avatars2.githubusercontent.com/u/459764?v=4\"}, :body \";; Documentation can also be added with `defn`\\n=> (defn add \\\"Adds two numbers\\\" [x y] (+ x y))\\n#'user/add\\n\\n;; This documentation can be read with the `doc` function\\n=> (doc add) \\n-------------------------\\nuser/add\\n([x y])\\n  Adds two numbers\\n\\n;; It can also be used when searching for functions with `find-doc`\\n=> (find-doc \\\"two numbers\\\")\\n-------------------------\\nuser/add\\n([x y])\\n  Adds two numbers\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :_id \"5c3b60cbe4b0ca44402ef61a\", :user nil} {:updated-at 1550694890901, :created-at 1550694890901, :author {:login \"cljlc\", :account-source \"github\", :avatar-url \"https://avatars0.githubusercontent.com/u/36645452?v=4\"}, :body \";; prepost-map examples\\n\\n;; check that exactly one of :a or :b are in the argument map: \\n(defn example\\n  [{:keys [a b]}]\\n  {:pre [(not (and a b))\\n         (or a b)]}\\n  (println a b))\\n;; #'user/example\\n\\n(example {:a 1 :b 2})\\n;; Execution error (AssertionError) at user/example (REPL:1).\\n;; Assert failed: (not (and a b))\\n\\n(example {:c 1 :d 2})\\n;; Execution error (AssertionError) at user/example (REPL:1).\\n;; Assert failed: (or a b)\\n\\n(example {:a 1 :c 2})\\n;; 1 nil\\n;; nil\\n\\n;; check that the error-free average is between the max and min of the arguments:\\n(defn avg\\n  [error & nums]\\n  {:post [(<= (apply min nums) % (apply max nums))]}\\n  (/ (apply + error nums)\\n     (count nums)))\\n;; #'user/avg\\n\\n(avg 0 1 2 3 4 5)\\n;; 3\\n\\n(avg 100 1 2 3 4 5)\\n;; Execution error (AssertionError) at user/avg (REPL:1).\\n;; Assert failed: (<= (apply min nums) % (apply max nums))\\n\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :_id \"5c6db9eae4b0ca44402ef69c\", :user nil} {:updated-at 1578771116812, :created-at 1578770937032, :author {:login \"boraseoksoon\", :account-source \"github\", :avatar-url \"https://avatars2.githubusercontent.com/u/6975179?v=4\"}, :body \";; To inverse boolean\\n\\n(defn ! [bool]\\n  (if (= bool true)\\n    false true))\\n\\n(! true)\\n;; => false\\n\\n(! false)\\n;; => true\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :editors [{:avatar-url \"https://avatars2.githubusercontent.com/u/6975179?v=4\", :account-source \"github\", :login \"boraseoksoon\"}], :_id \"5e1a21f9e4b0ca44402ef813\", :user nil} {:updated-at 1590107719852, :created-at 1590107719852, :author {:login \"mdave16\", :account-source \"github\", :avatar-url \"https://avatars1.githubusercontent.com/u/15642321?v=4\"}, :body \"; You can also destructure inside the method\\n(defn foo\\n  \\\"Will be passed a hash\\\"\\n  [{x :bar y :baz}]\\n  (+ x y))\\n\\n(foo 1 2)\\n; Wrong number of args (2) passed\\n\\n(foo {:bar 1 :baz 2})\\n; 3\\n\\n(defn potentially-confusing-fn\\n  \\\"Will be passed a hash with one key\\\"\\n  [{x :match}]\\n  (* x x))\\n\\n(potentially-confusing-fn 1)\\n; NullPointerException and nil return\\n\\n(potentially-confusing-fn {:match 2})\\n; 4\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :_id \"5ec71e47e4b087629b5a190d\", :user nil}], :var {:added \"1.0\", :ns \"clojure.core\", :name \"defn\", :file \"clojure/core.clj\", :type \"macro\", :keywords \"defn defn\", :column 1, :line 285, :macro true, :arglists (\"name doc-string? attr-map? [params*] prepost-map? body\" \"name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?\"), :doc \"Same as (def name (fn [params* ] exprs*)) or (def\\n    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added\\n    to the var metadata. prepost-map defines a map with optional keys\\n    :pre and :post that contain collections of pre or post conditions.\", :library-url \"https://github.com/clojure/clojure\", :href \"/clojure.core/defn\"}, :notes [], :see-alsos [{:created-at 1334710750000, :author {:login \"Ljos\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/45b996a79abca465acaf6c0f10b0437?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"def\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"defn\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521edb\", :doc \"Creates and interns or locates a global var with the name of symbol and a\\nnamespace of the value of the current namespace (*ns*). See\\nhttp://clojure.org/special_forms for more information.\", :can-delete? false, :user nil} {:created-at 1334710756000, :author {:login \"Ljos\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/45b996a79abca465acaf6c0f10b0437?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"defn-\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"defn\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521edc\", :doc \"same as defn, yielding non-public def\", :can-delete? false, :user nil} {:created-at 1361269869000, :author {:login \"AtKaaZ\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9e10dfa345f44b0fe72bbe081fd51b83?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"defmacro\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"defn\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521edd\", :doc \"Like defn, but the resulting function name is declared as a\\n  macro and will be used as a macro by the compiler when it is\\n  called.\", :can-delete? false, :user nil} {:created-at 1399636777000, :author {:login \"ryo\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/3f7913b563c72083c74030d928ba407e?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"fn\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"defn\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521ede\", :doc \"params => positional-params*, or positional-params* & rest-param\\n  positional-param => binding-form\\n  rest-param => binding-form\\n  binding-form => name, or destructuring-form\\n\\n  Defines a function.\\n\\n  See https://clojure.org/reference/special_forms#fn for more information\", :can-delete? false, :user nil} {:created-at 1460434537177, :author {:login \"ivanpierre\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/625541?v=3\"}, :to-var {:library-url \"https://github.com/clojure/clojure\", :name \"declare\", :ns \"clojure.core\"}, :from-var {:library-url \"https://github.com/clojure/clojure\", :name \"defn\", :ns \"clojure.core\"}, :_id \"570c7669e4b075f5b2c864e7\", :doc \"defs the supplied var names with no bindings, useful for making forward declarations.\", :can-delete? false, :user nil}], :user nil}";
//]]></script></head><body class="var-page"><div class="mobile-nav-menu"><section><h4><i class="fa fa-rocket"></i>ClojureDocs</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/core-library">Core Library<span class="clojure-version">(1.11.1)</span></a></li><li><a href="/quickref">Quick Reference</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Fdefn&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul></section><section><h4>Nav</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a data-animate-buffer="70" data-animate-scroll="true" href="#">Top</a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#examples">Examples <span class="examples-count"><span class="badge">11</span></span></a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#see-also">See Also <span class="badge">5</span></a></li><li></li></ul></section><section><h4>Namespaces</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/clojure.core">clojure.core</a></li><li><a href="/clojure.core.async">clojure.core.async</a></li><li><a href="/clojure.core.logic">clojure.core.logic</a></li><li><a href="/clojure.core.logic.fd">clojure.core.logic.fd</a></li><li><a href="/clojure.core.logic.pldb">clojure.core.logic.pldb</a></li><li><a href="/clojure.core.protocols">clojure.core.protocols</a></li><li><a href="/clojure.core.reducers">clojure.core.reducers</a></li><li><a href="/clojure.core.server">clojure.core.server</a></li><li><a href="/clojure.data">clojure.data</a></li><li><a href="/clojure.data.csv">clojure.data.csv</a></li><li><a href="/clojure.datafy">clojure.datafy</a></li><li><a href="/clojure.edn">clojure.edn</a></li><li><a href="/clojure.inspector">clojure.inspector</a></li><li><a href="/clojure.instant">clojure.instant</a></li><li><a href="/clojure.java.browse">clojure.java.browse</a></li><li><a href="/clojure.java.io">clojure.java.io</a></li><li><a href="/clojure.java.javadoc">clojure.java.javadoc</a></li><li><a href="/clojure.java.shell">clojure.java.shell</a></li><li><a href="/clojure.main">clojure.main</a></li><li><a href="/clojure.math">clojure.math</a></li><li><a href="/clojure.pprint">clojure.pprint</a></li><li><a href="/clojure.reflect">clojure.reflect</a></li><li><a href="/clojure.repl">clojure.repl</a></li><li><a href="/clojure.set">clojure.set</a></li><li><a href="/clojure.spec.alpha">clojure.spec.alpha</a></li><li><a href="/clojure.stacktrace">clojure.stacktrace</a></li><li><a href="/clojure.string">clojure.string</a></li><li><a href="/clojure.template">clojure.template</a></li><li><a href="/clojure.test">clojure.test</a></li><li><a href="/clojure.test.junit">clojure.test.junit</a></li><li><a href="/clojure.test.tap">clojure.test.tap</a></li><li><a href="/clojure.walk">clojure.walk</a></li><li><a href="/clojure.xml">clojure.xml</a></li><li><a href="/clojure.zip">clojure.zip</a></li></ul></section></div><div class="mobile-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Fdefn&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="sticky-wrapper mobile-push-wrapper"><div class="desktop-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Fdefn&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><div><div class="row"><div class="col-sm-2 sidenav"><div class="desktop-side-nav" data-sticky-offset="10"><div class="var-page-nav"></div><div class="library-nav"><h5>Namespaces</h5><ul class="ns-tree"><li><span>clojure</span><ul><li><span class="current"><a href="/clojure.core">core</a></span><ul><li><span><a href="/clojure.core.async">async</a></span></li><li><span><a href="/clojure.core.logic">logic</a></span><ul><li><span><a href="/clojure.core.logic.fd">fd</a></span></li><li><span><a href="/clojure.core.logic.pldb">pldb</a></span></li></ul></li><li><span><a href="/clojure.core.protocols">protocols</a></span></li><li><span><a href="/clojure.core.reducers">reducers</a></span></li><li><span><a href="/clojure.core.server">server</a></span></li></ul></li><li><span><a href="/clojure.data">data</a></span><ul><li><span><a href="/clojure.data.csv">csv</a></span></li></ul></li><li><span><a href="/clojure.datafy">datafy</a></span></li><li><span><a href="/clojure.edn">edn</a></span></li><li><span><a href="/clojure.inspector">inspector</a></span></li><li><span><a href="/clojure.instant">instant</a></span></li><li><span>java</span><ul><li><span><a href="/clojure.java.browse">browse</a></span></li><li><span><a href="/clojure.java.io">io</a></span></li><li><span><a href="/clojure.java.javadoc">javadoc</a></span></li><li><span><a href="/clojure.java.shell">shell</a></span></li></ul></li><li><span><a href="/clojure.main">main</a></span></li><li><span><a href="/clojure.math">math</a></span></li><li><span><a href="/clojure.pprint">pprint</a></span></li><li><span><a href="/clojure.reflect">reflect</a></span></li><li><span><a href="/clojure.repl">repl</a></span></li><li><span><a href="/clojure.set">set</a></span></li><li><span>spec</span><ul><li><span><a href="/clojure.spec.alpha">alpha</a></span></li></ul></li><li><span><a href="/clojure.stacktrace">stacktrace</a></span></li><li><span><a href="/clojure.string">string</a></span></li><li><span><a href="/clojure.template">template</a></span></li><li><span><a href="/clojure.test">test</a></span><ul><li><span><a href="/clojure.test.junit">junit</a></span></li><li><span><a href="/clojure.test.tap">tap</a></span></li></ul></li><li><span><a href="/clojure.walk">walk</a></span></li><li><span><a href="/clojure.xml">xml</a></span></li><li><span><a href="/clojure.zip">zip</a></span></li></ul></li></ul></div></div></div><div class="col-sm-10"><div class="row var-header"><div class="col-sm-8"><h1 class="var-name">defn</h1></div><div class="col-sm-4"><div class="var-meta"><h4><a href="/clojure.core">clojure.core</a></h4><span>Available since 1.0</span><span class="source-link"> (<a href="https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L285">source</a>) </span></div></div><div class="col-sm-12"><section><ul class="arglists"><li class="arglist">(defn name doc-string? attr-map? [params*] prepost-map? body)</li><li class="arglist">(defn name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?)</li></ul></section></div></div><section><div class="docstring"><pre>Same as (def name (fn [params* ] exprs*)) or (def
  name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
  to the var metadata. prepost-map defines a map with optional keys
  :pre and :post that contain collections of pre or post conditions.</pre><div class="copyright">&copy; Rich Hickey. All rights reserved. <a href="http://www.eclipse.org/legal/epl-v10.html">Eclipse Public License 1.0</a></div></div></section><section><div class="examples-widget" id="examples"></div></section><section><div class="see-alsos-widget" id="see-also"></div></section><section><div class="notes-widget" id="notes"></div></section></div></div></div></div></div></div><div class="sticky-push"></div></div><footer><div class="container"><div class="row"><div class="col-sm-12"><div class="divider">- ❦ -</div></div></div><div class="row"><div class="ctas"><div class="col-sm-6 left">Brought to you by <a href="https://zacharykim.com">Zachary Kim</a>. </div><div class="col-sm-6 right"><iframe allowtransparency="true" class="gh-starred-count" frameborder="0" height="20" scrolling="0" src="/github-btn.html?user=zk&amp;repo=clojuredocs&amp;type=watch&amp;count=true" width="80"></iframe><a class="twitter-share-button" data-text="Community-powered docs and examples for #Clojure" data-url="http://clojuredocs.org" data-via="heyzk" href="https://twitter.com/share">Tweet</a></div></div><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></div></div></footer><script src="/cljs/clojuredocs.js?9421f92fbece10f3ababd69dba14cf70"></script><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-17348828-1', 'auto');
  ga('send', 'pageview');</script><script>if(("standalone" in window.navigator) && window.navigator.standalone){
var noddy, remotes = false;

document.addEventListener('click', function(event) {

noddy = event.target;

while(noddy.nodeName !== "A" && noddy.nodeName !== "HTML") {
noddy = noddy.parentNode;
}

if('href' in noddy && noddy.href.indexOf('http') !== -1 && (noddy.href.indexOf(document.location.host) !== -1 || remotes))
{
event.preventDefault();
document.location.href = noddy.href;
}

},false);
}</script></body></html>
