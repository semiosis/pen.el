HTTP/1.1 200 OK
Date: Fri, 01 Nov 2024 19:45:12 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: ring-session=%2BDBwLjQ6kD7vGosQKVLW0C7hg3e2PHLjBlW44CRKigwwZt2B7teB55emqYj01ODNH0vY3w1kGmtBJQFLMRGPKmLKFGBkiG9uqes4XeikEf4%3D--V4T3VOfBh49D%2BYuJfm%2B8UHIFaef%2Bweuro%2FFVwRogYtA%3D;Path=/;HttpOnly
cf-cache-status: DYNAMIC
vary: accept-encoding
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=ok8Y4H76azAF%2B7zeHcjzYLhKyRCN1DqM1jRE62LgNt1xCodHpViF1I7vf4Z5bilf9DoKujKshcGAjuI1wN5xvO3QWW5rPr3V3En2x5rlwAd1l4PdqN%2BzTi0IXTX3qiG7HRULOzarAMehiEDY5zM%3D"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8dbe62457fe1689c-SYD
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=51576&sent=6&recv=8&lost=0&retrans=0&sent_bytes=3288&recv_bytes=533&delivery_rate=77059&cwnd=254&unsent_bytes=0&cid=b1471b4b2fbb5305&ts=540&x=0"

<!DOCTYPE html>
<html><head><meta content="width=device-width, maximum-scale=1.0" name="viewport"><meta content="yes" name="apple-mobile-web-app-capable"><meta content="default" name="apple-mobile-web-app-status-bar-style"><meta content="ClojureDocs" name="apple-mobile-web-app-title"><meta content="XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g" name="google-site-verification"><title>sequence - clojure.core | ClojureDocs - Community-Powered Clojure Documentation and Examples</title><link href="/opensearch.xml" rel="search" title="ClojureDocs" type="application/opensearchdescription+xml"><link href="/css/font-awesome.min.css?bbfef9385083d307ad2692c0cf99f611" rel="stylesheet"><link href="/css/bootstrap.min.css?385b964b68acb68d23cb43a5218fade9" rel="stylesheet"><link href="/css/app.css?9e9d4de52804fa9bff22ecaa7badf8f9" rel="stylesheet"><script>// <![CDATA[
window.PAGE_DATA="{:examples [{:var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :author {:login \"yasuto\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/cacfb7ecf08cb6461767e514c93b7bf9?r=PG&default=identicon\"}, :editors [{:login \"Dimagog\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/138993?v=3\"}], :body \"user> (sequence [1 2 3])\\n(1 2 3)\\nuser> (class (sequence '(1 2 3)))\\nclojure.lang.PersistentList\", :created-at 1307740020000, :updated-at 1423275662256, :_id \"542692c8c026201cdc326a16\", :user nil} {:updated-at 1477624741486, :created-at 1477624741486, :author {:login \"G1enY0ung\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/15034155?v=3\"}, :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :body \";; let us make a transducer\\nuser=> (def xf (comp (filter odd?) (take 5)))\\n#'user/xf\\nuser=> (sequence xf (range 1 10))\\n(1 3 5 7 9)\", :_id \"5812c3a5e4b024b73ca35a1c\", :user nil} {:updated-at 1519251895765, :created-at 1519251895765, :author {:login \"cljlc\", :account-source \"github\", :avatar-url \"https://avatars0.githubusercontent.com/u/36645452?v=4\"}, :body \";; turns a string into a sequence of characters:\\n(sequence \\\"abc\\\")\\n=> (\\\\a \\\\b \\\\c)\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :_id \"5a8df1b7e4b0316c0f44f8e4\", :user nil} {:updated-at 1646145858679, :created-at 1519691165450, :author {:login \"phreed\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/211644?v=4\"}, :body \";; combine a bunch of collections together\\n(sequence cat [[1 2 3] [5 6 7] [8 9 0]])\\n;=> (1 2 3 5 6 7 8 9 0) \\n(sequence cat [ '(1 2 3) '(5 6 7) '(8 9 0) ])\\n;=> (1 2 3 5 6 7 8 9 0)\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :editors [{:avatar-url \"https://avatars3.githubusercontent.com/u/211644?v=4\", :account-source \"github\", :login \"phreed\"} {:login \"siddharthjain-in\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/6537820?v=4\"}], :_id \"5a94a59de4b0316c0f44f8fb\", :user nil} {:updated-at 1585287974225, :created-at 1585287974225, :author {:login \"green-coder\", :account-source \"github\", :avatar-url \"https://avatars1.githubusercontent.com/u/598193?v=4\"}, :body \";; When called with multiples collections.\\n\\n(sequence (map vector) [1 2 3] [:a :b :c])\\n;=> ([1 :a] [2 :b] [3 :c])\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :_id \"5e7d9326e4b087629b5a18c4\", :user nil} {:updated-at 1614561640162, :created-at 1614561640162, :author {:login \"Crowbrammer\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/19522656?v=4\"}, :body \";; Comparison to seq\\n(def v [1 2 3])\\n(def l '(1 2 3))\\n(def ss (sorted-set 1 2 3))\\n(= (seq [1 2 3]) (sequence [1 2 3])) ;;=> true\\n(= (sequence v) (seq v))             ;;=> true\\n(= (sequence l) (seq l))             ;;=> true\\n(= (sequence ss) (seq ss))           ;;=> true\\n\\n;; Comparison for non-ordered stuff\\n(def m {:a 1 :b 2 :c 3})\\n(def s #{1 2 3})\\n(sequence m)                         ;;=> ([:a 1] [:b 2] [:c 3])\\n(seq m)                              ;;=> ([:a 1] [:b 2] [:c 3])\\n(sequence s)                         ;;=> (1 3 2)\\n(seq s)                              ;;=> (1 3 2)\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :_id \"603c4168e4b0b1e3652d7469\", :user nil}], :var {:added \"1.0\", :ns \"clojure.core\", :name \"sequence\", :file \"clojure/core.clj\", :static true, :type \"function\", :keywords \"sequence sequence\", :column 1, :line 2664, :arglists (\"coll\" \"xform coll\" \"xform coll & colls\"), :doc \"Coerces coll to a (possibly empty) sequence, if it is not already\\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\\n  transducer is supplied, returns a lazy sequence of applications of\\n  the transform to the items in coll(s), i.e. to the set of first\\n  items of each coll, followed by the set of second\\n  items in each coll, until any one of the colls is exhausted.  Any\\n  remaining items in other colls are ignored. The transform should accept\\n  number-of-colls arguments\", :library-url \"https://github.com/clojure/clojure\", :href \"/clojure.core/sequence\"}, :notes [{:author {:login \"glts\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/1483271?v=4\"}, :updated-at 1520634679847, :created-at 1520634679847, :body \"Interesting background about `sequence` versus `eduction`: https://groups.google.com/d/msg/clojure/9I6MtgOTD0w/NiG5PimBCP8J\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :_id \"5aa30b37e4b0316c0f44f91b\", :can-delete? false, :can-edit? false} {:author {:login \"divs1210\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/3773773?v=4\"}, :updated-at 1708597180110, :created-at 1708597180110, :body \"Since Clojure's implementation of `sequence` is in Java, and is pretty involved, I wrote a [pure Clojure version](https://gist.github.com/divs1210/53c86ddad2fc0f1bd30917e3d03840f0) to build intuition.\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :_id \"65d71fbc69fbcc0c226174a7\", :can-delete? false, :can-edit? false}], :see-alsos [{:created-at 1374149058000, :author {:login \"alilee\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/2fb0196dc5a7cd3a5cc73f1b9941c209?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"seq\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"sequence\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692eaf6e94c6970521a7e\", :doc \"Returns a seq on the collection. If the collection is\\n    empty, returns nil.  (seq nil) returns nil. seq also works on\\n    Strings, native Java arrays (of reference types) and any objects\\n    that implement Iterable. Note that seqs cache values, thus seq\\n    should not be used on any Iterable whose iterator repeatedly\\n    returns the same mutable object.\", :can-delete? false, :user nil} {:created-at 1520634654207, :author {:login \"glts\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/1483271?v=4\"}, :to-var {:library-url \"https://github.com/clojure/clojure\", :name \"eduction\", :ns \"clojure.core\"}, :from-var {:library-url \"https://github.com/clojure/clojure\", :name \"sequence\", :ns \"clojure.core\"}, :_id \"5aa30b1ee4b0316c0f44f91a\", :doc \"Returns a reducible/iterable application of the transducers\\n  to the items in coll. Transducers are applied in order as if\\n  combined with comp. Note that these applications will be\\n  performed every time reduce/iterator is called.\", :can-delete? false, :user nil}], :user nil}";
//]]></script></head><body class="var-page"><div class="mobile-nav-menu"><section><h4><i class="fa fa-rocket"></i>ClojureDocs</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/core-library">Core Library<span class="clojure-version">(1.11.1)</span></a></li><li><a href="/quickref">Quick Reference</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Fsequence&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul></section><section><h4>Nav</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a data-animate-buffer="70" data-animate-scroll="true" href="#">Top</a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#examples">Examples <span class="examples-count"><span class="badge">6</span></span></a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#see-also">See Also <span class="badge">2</span></a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#notes">Notes <span class="badge">2</span></a></li></ul></section><section><h4>Namespaces</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/clojure.core">clojure.core</a></li><li><a href="/clojure.core.async">clojure.core.async</a></li><li><a href="/clojure.core.logic">clojure.core.logic</a></li><li><a href="/clojure.core.logic.fd">clojure.core.logic.fd</a></li><li><a href="/clojure.core.logic.pldb">clojure.core.logic.pldb</a></li><li><a href="/clojure.core.protocols">clojure.core.protocols</a></li><li><a href="/clojure.core.reducers">clojure.core.reducers</a></li><li><a href="/clojure.core.server">clojure.core.server</a></li><li><a href="/clojure.data">clojure.data</a></li><li><a href="/clojure.data.csv">clojure.data.csv</a></li><li><a href="/clojure.datafy">clojure.datafy</a></li><li><a href="/clojure.edn">clojure.edn</a></li><li><a href="/clojure.inspector">clojure.inspector</a></li><li><a href="/clojure.instant">clojure.instant</a></li><li><a href="/clojure.java.browse">clojure.java.browse</a></li><li><a href="/clojure.java.io">clojure.java.io</a></li><li><a href="/clojure.java.javadoc">clojure.java.javadoc</a></li><li><a href="/clojure.java.shell">clojure.java.shell</a></li><li><a href="/clojure.main">clojure.main</a></li><li><a href="/clojure.math">clojure.math</a></li><li><a href="/clojure.pprint">clojure.pprint</a></li><li><a href="/clojure.reflect">clojure.reflect</a></li><li><a href="/clojure.repl">clojure.repl</a></li><li><a href="/clojure.set">clojure.set</a></li><li><a href="/clojure.spec.alpha">clojure.spec.alpha</a></li><li><a href="/clojure.stacktrace">clojure.stacktrace</a></li><li><a href="/clojure.string">clojure.string</a></li><li><a href="/clojure.template">clojure.template</a></li><li><a href="/clojure.test">clojure.test</a></li><li><a href="/clojure.test.junit">clojure.test.junit</a></li><li><a href="/clojure.test.tap">clojure.test.tap</a></li><li><a href="/clojure.walk">clojure.walk</a></li><li><a href="/clojure.xml">clojure.xml</a></li><li><a href="/clojure.zip">clojure.zip</a></li></ul></section></div><div class="mobile-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Fsequence&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="sticky-wrapper mobile-push-wrapper"><div class="desktop-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Fsequence&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><div><div class="row"><div class="col-sm-2 sidenav"><div class="desktop-side-nav" data-sticky-offset="10"><div class="var-page-nav"></div><div class="library-nav"><h5>Namespaces</h5><ul class="ns-tree"><li><span>clojure</span><ul><li><span class="current"><a href="/clojure.core">core</a></span><ul><li><span><a href="/clojure.core.async">async</a></span></li><li><span><a href="/clojure.core.logic">logic</a></span><ul><li><span><a href="/clojure.core.logic.fd">fd</a></span></li><li><span><a href="/clojure.core.logic.pldb">pldb</a></span></li></ul></li><li><span><a href="/clojure.core.protocols">protocols</a></span></li><li><span><a href="/clojure.core.reducers">reducers</a></span></li><li><span><a href="/clojure.core.server">server</a></span></li></ul></li><li><span><a href="/clojure.data">data</a></span><ul><li><span><a href="/clojure.data.csv">csv</a></span></li></ul></li><li><span><a href="/clojure.datafy">datafy</a></span></li><li><span><a href="/clojure.edn">edn</a></span></li><li><span><a href="/clojure.inspector">inspector</a></span></li><li><span><a href="/clojure.instant">instant</a></span></li><li><span>java</span><ul><li><span><a href="/clojure.java.browse">browse</a></span></li><li><span><a href="/clojure.java.io">io</a></span></li><li><span><a href="/clojure.java.javadoc">javadoc</a></span></li><li><span><a href="/clojure.java.shell">shell</a></span></li></ul></li><li><span><a href="/clojure.main">main</a></span></li><li><span><a href="/clojure.math">math</a></span></li><li><span><a href="/clojure.pprint">pprint</a></span></li><li><span><a href="/clojure.reflect">reflect</a></span></li><li><span><a href="/clojure.repl">repl</a></span></li><li><span><a href="/clojure.set">set</a></span></li><li><span>spec</span><ul><li><span><a href="/clojure.spec.alpha">alpha</a></span></li></ul></li><li><span><a href="/clojure.stacktrace">stacktrace</a></span></li><li><span><a href="/clojure.string">string</a></span></li><li><span><a href="/clojure.template">template</a></span></li><li><span><a href="/clojure.test">test</a></span><ul><li><span><a href="/clojure.test.junit">junit</a></span></li><li><span><a href="/clojure.test.tap">tap</a></span></li></ul></li><li><span><a href="/clojure.walk">walk</a></span></li><li><span><a href="/clojure.xml">xml</a></span></li><li><span><a href="/clojure.zip">zip</a></span></li></ul></li></ul></div></div></div><div class="col-sm-10"><div class="row var-header"><div class="col-sm-8"><h1 class="var-name">sequence</h1></div><div class="col-sm-4"><div class="var-meta"><h4><a href="/clojure.core">clojure.core</a></h4><span>Available since 1.0</span><span class="source-link"> (<a href="https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2664">source</a>) </span></div></div><div class="col-sm-12"><section><ul class="arglists"><li class="arglist">(sequence coll)</li><li class="arglist">(sequence xform coll)</li><li class="arglist">(sequence xform coll &amp; colls)</li></ul></section></div></div><section><div class="docstring"><pre>Coerces coll to a (possibly empty) sequence, if it is not already
one. Will not force a lazy seq. (sequence nil) yields (), When a
transducer is supplied, returns a lazy sequence of applications of
the transform to the items in coll(s), i.e. to the set of first
items of each coll, followed by the set of second
items in each coll, until any one of the colls is exhausted.  Any
remaining items in other colls are ignored. The transform should accept
number-of-colls arguments</pre><div class="copyright">&copy; Rich Hickey. All rights reserved. <a href="http://www.eclipse.org/legal/epl-v10.html">Eclipse Public License 1.0</a></div></div></section><section><div class="examples-widget" id="examples"></div></section><section><div class="see-alsos-widget" id="see-also"></div></section><section><div class="notes-widget" id="notes"></div></section></div></div></div></div></div></div><div class="sticky-push"></div></div><footer><div class="container"><div class="row"><div class="col-sm-12"><div class="divider">- ❦ -</div></div></div><div class="row"><div class="ctas"><div class="col-sm-6 left">Brought to you by <a href="https://zacharykim.com">Zachary Kim</a>. </div><div class="col-sm-6 right"><iframe allowtransparency="true" class="gh-starred-count" frameborder="0" height="20" scrolling="0" src="/github-btn.html?user=zk&amp;repo=clojuredocs&amp;type=watch&amp;count=true" width="80"></iframe><a class="twitter-share-button" data-text="Community-powered docs and examples for #Clojure" data-url="http://clojuredocs.org" data-via="heyzk" href="https://twitter.com/share">Tweet</a></div></div><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></div></div></footer><script src="/cljs/clojuredocs.js?9421f92fbece10f3ababd69dba14cf70"></script><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-17348828-1', 'auto');
  ga('send', 'pageview');</script><script>if(("standalone" in window.navigator) && window.navigator.standalone){
var noddy, remotes = false;

document.addEventListener('click', function(event) {

noddy = event.target;

while(noddy.nodeName !== "A" && noddy.nodeName !== "HTML") {
noddy = noddy.parentNode;
}

if('href' in noddy && noddy.href.indexOf('http') !== -1 && (noddy.href.indexOf(document.location.host) !== -1 || remotes))
{
event.preventDefault();
document.location.href = noddy.href;
}

},false);
}</script></body></html>
