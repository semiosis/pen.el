HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 55622
Server: nginx
Content-Type: text/html
Last-Modified: Fri, 15 Feb 2019 14:57:19 GMT
ETag: "5c66d34f-d946"
Expires: Wed, 30 Mar 2022 08:26:26 GMT
Cache-Control: no-cache, public
Fastly-Original-Body-Size: 0
Via: 1.1 varnish, 1.1 varnish
Accept-Ranges: bytes
Date: Wed, 30 Mar 2022 08:26:27 GMT
Age: 0
X-Served-By: cache-dfw18673-DFW, cache-akl10320-AKL
X-Cache: MISS, MISS
X-Cache-Hits: 0, 0
X-Timer: S1648628788.527516,VS0,VE160

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
<title>Control/Arrow.hs</title>
<link type='text/css' rel='stylesheet' href='hscolour.css' />
</head>
<body>
<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
<a name="line-2"></a><span class='hs-comment'>-- |</span>
<a name="line-3"></a><span class='hs-comment'>-- Module      :  Control.Arrow</span>
<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Ross Paterson 2002</span>
<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style (see the LICENSE file in the distribution)</span>
<a name="line-6"></a><span class='hs-comment'>--</span>
<a name="line-7"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
<a name="line-8"></a><span class='hs-comment'>-- Stability   :  experimental</span>
<a name="line-9"></a><span class='hs-comment'>-- Portability :  portable</span>
<a name="line-10"></a><span class='hs-comment'>--</span>
<a name="line-11"></a><span class='hs-comment'>-- Basic arrow definitions, based on</span>
<a name="line-12"></a><span class='hs-comment'>--      /Generalising Monads to Arrows/, by John Hughes,</span>
<a name="line-13"></a><span class='hs-comment'>--      /Science of Computer Programming/ 37, pp67-111, May 2000.</span>
<a name="line-14"></a><span class='hs-comment'>-- plus a couple of definitions ('returnA' and 'loop') from</span>
<a name="line-15"></a><span class='hs-comment'>--      /A New Notation for Arrows/, by Ross Paterson, in /ICFP 2001/,</span>
<a name="line-16"></a><span class='hs-comment'>--      Firenze, Italy, pp229-240.</span>
<a name="line-17"></a><span class='hs-comment'>-- See these papers for the equations these combinators are expected to</span>
<a name="line-18"></a><span class='hs-comment'>-- satisfy.  These papers and more information on arrows can be found at</span>
<a name="line-19"></a><span class='hs-comment'>-- &lt;<a href="http://www.haskell.org/arrows/">http://www.haskell.org/arrows/</a>&gt;.</span>
<a name="line-20"></a>
<a name="line-21"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Arrow</span> <span class='hs-layout'>(</span>
<a name="line-22"></a>                <span class='hs-comment'>-- * Arrows</span>
<a name="line-23"></a>                <span class='hs-conid'>Arrow</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Kleisli</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span>
<a name="line-24"></a>                <span class='hs-comment'>-- ** Derived combinators</span>
<a name="line-25"></a>                <span class='hs-varid'>returnA</span><span class='hs-layout'>,</span>
<a name="line-26"></a>                <span class='hs-layout'>(</span><span class='hs-varop'>^&gt;&gt;</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;^</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span>
<a name="line-27"></a>                <span class='hs-comment'>-- ** Right-to-left variants</span>
<a name="line-28"></a>                <span class='hs-layout'>(</span><span class='hs-varop'>&lt;&lt;^</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>^&lt;&lt;</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span>
<a name="line-29"></a>                <span class='hs-comment'>-- * Monoid operations</span>
<a name="line-30"></a>                <span class='hs-conid'>ArrowZero</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>ArrowPlus</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span>
<a name="line-31"></a>                <span class='hs-comment'>-- * Conditionals</span>
<a name="line-32"></a>                <span class='hs-conid'>ArrowChoice</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span>
<a name="line-33"></a>                <span class='hs-comment'>-- * Arrow application</span>
<a name="line-34"></a>                <span class='hs-conid'>ArrowApply</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>ArrowMonad</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>leftApp</span><span class='hs-layout'>,</span>
<a name="line-35"></a>                <span class='hs-comment'>-- * Feedback</span>
<a name="line-36"></a>                <span class='hs-conid'>ArrowLoop</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span>
<a name="line-37"></a>
<a name="line-38"></a>                <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;&gt;</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;&lt;&lt;</span><span class='hs-layout'>)</span> <span class='hs-comment'>-- reexported</span>
<a name="line-39"></a>        <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-40"></a>
<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>id</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>.</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
<a name="line-42"></a>
<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Fix</span>
<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Category</span>
<a name="line-46"></a>
<a name="line-47"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>5</span> <span class='hs-varop'>&lt;+&gt;</span>
<a name="line-48"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>3</span> <span class='hs-varop'>***</span>
<a name="line-49"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>3</span> <span class='hs-varop'>&amp;&amp;&amp;</span>
<a name="line-50"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>2</span> <span class='hs-varop'>+++</span>
<a name="line-51"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>2</span> <span class='hs-varop'>|||</span>
<a name="line-52"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>1</span> <span class='hs-varop'>^&gt;&gt;</span><span class='hs-layout'>,</span> <span class='hs-varop'>&gt;&gt;^</span>
<a name="line-53"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>1</span> <span class='hs-varop'>^&lt;&lt;</span><span class='hs-layout'>,</span> <span class='hs-varop'>&lt;&lt;^</span>
<a name="line-54"></a>
<a name="line-55"></a><span class='hs-comment'>-- | The basic arrow class.</span>
<a name="line-56"></a><span class='hs-comment'>--</span>
<a name="line-57"></a><span class='hs-comment'>--   Minimal complete definition: 'arr' and 'first'.</span>
<a name="line-58"></a><span class='hs-comment'>--</span>
<a name="line-59"></a><span class='hs-comment'>--   The other combinators have sensible default definitions,</span>
<a name="line-60"></a><span class='hs-comment'>--   which may be overridden for efficiency.</span>
<a name="line-61"></a>
<a name="line-62"></a><a name="Arrow"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
<a name="line-63"></a>
<a name="line-64"></a>        <span class='hs-comment'>-- | Lift a function to an arrow.</span>
<a name="line-65"></a>        <span class='hs-varid'>arr</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span>
<a name="line-66"></a>
<a name="line-67"></a>        <span class='hs-comment'>-- | Send the first component of the input through the argument</span>
<a name="line-68"></a>        <span class='hs-comment'>--   arrow, and copy the rest unchanged to the output.</span>
<a name="line-69"></a>        <span class='hs-varid'>first</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span>
<a name="line-70"></a>
<a name="line-71"></a>        <span class='hs-comment'>-- | A mirror image of 'first'.</span>
<a name="line-72"></a>        <span class='hs-comment'>--</span>
<a name="line-73"></a>        <span class='hs-comment'>--   The default definition may be overridden with a more efficient</span>
<a name="line-74"></a>        <span class='hs-comment'>--   version if desired.</span>
<a name="line-75"></a>        <span class='hs-varid'>second</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>)</span>
<a name="line-76"></a>        <span class='hs-varid'>second</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>swap</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>first</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>swap</span>
<a name="line-77"></a>                        <span class='hs-keyword'>where</span>   <span class='hs-varid'>swap</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span>
<a name="line-78"></a>
<a name="line-79"></a>        <span class='hs-comment'>-- | Split the input between the two argument arrows and combine</span>
<a name="line-80"></a>        <span class='hs-comment'>--   their output.  Note that this is in general not a functor.</span>
<a name="line-81"></a>        <span class='hs-comment'>--</span>
<a name="line-82"></a>        <span class='hs-comment'>--   The default definition may be overridden with a more efficient</span>
<a name="line-83"></a>        <span class='hs-comment'>--   version if desired.</span>
<a name="line-84"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>***</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>c'</span><span class='hs-layout'>)</span>
<a name="line-85"></a>        <span class='hs-varid'>f</span> <span class='hs-varop'>***</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>first</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>second</span> <span class='hs-varid'>g</span>
<a name="line-86"></a>
<a name="line-87"></a>        <span class='hs-comment'>-- | Fanout: send the input to both argument arrows and combine</span>
<a name="line-88"></a>        <span class='hs-comment'>--   their output.</span>
<a name="line-89"></a>        <span class='hs-comment'>--</span>
<a name="line-90"></a>        <span class='hs-comment'>--   The default definition may be overridden with a more efficient</span>
<a name="line-91"></a>        <span class='hs-comment'>--   version if desired.</span>
<a name="line-92"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>&amp;&amp;&amp;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>c'</span><span class='hs-layout'>)</span>
<a name="line-93"></a>        <span class='hs-varid'>f</span> <span class='hs-varop'>&amp;&amp;&amp;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>***</span> <span class='hs-varid'>g</span>
<a name="line-94"></a>
<a name="line-95"></a><span class='hs-comment'>{-# RULES
<a name="line-96"></a>"compose/arr"   forall f g .
<a name="line-97"></a>                (arr f) . (arr g) = arr (f . g)
<a name="line-98"></a>"first/arr"     forall f .
<a name="line-99"></a>                first (arr f) = arr (first f)
<a name="line-100"></a>"second/arr"    forall f .
<a name="line-101"></a>                second (arr f) = arr (second f)
<a name="line-102"></a>"product/arr"   forall f g .
<a name="line-103"></a>                arr f *** arr g = arr (f *** g)
<a name="line-104"></a>"fanout/arr"    forall f g .
<a name="line-105"></a>                arr f &amp;&amp;&amp; arr g = arr (f &amp;&amp;&amp; g)
<a name="line-106"></a>"compose/first" forall f g .
<a name="line-107"></a>                (first f) . (first g) = first (f . g)
<a name="line-108"></a>"compose/second" forall f g .
<a name="line-109"></a>                (second f) . (second g) = second (f . g)
<a name="line-110"></a> #-}</span>
<a name="line-111"></a>
<a name="line-112"></a><span class='hs-comment'>-- Ordinary functions are arrows.</span>
<a name="line-113"></a>
<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Arrow</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-115"></a>        <span class='hs-varid'>arr</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
<a name="line-116"></a>        <span class='hs-varid'>first</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>***</span> <span class='hs-varid'>id</span>
<a name="line-117"></a>        <span class='hs-varid'>second</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span> <span class='hs-varop'>***</span> <span class='hs-varid'>f</span>
<a name="line-118"></a><span class='hs-comment'>--      (f *** g) ~(x,y) = (f x, g y)</span>
<a name="line-119"></a><span class='hs-comment'>--      sorry, although the above defn is fully H'98, nhc98 can't parse it.</span>
<a name="line-120"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>***</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>g</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
<a name="line-121"></a>
<a name="line-122"></a><span class='hs-comment'>-- | Kleisli arrows of a monad.</span>
<a name="line-123"></a>
<a name="line-124"></a><a name="Kleisli"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>{</span> <span class='hs-varid'>runKleisli</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span>
<a name="line-125"></a>
<a name="line-126"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Category</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-127"></a>        <span class='hs-varid'>id</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-varid'>return</span>
<a name="line-128"></a>        <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
<a name="line-129"></a>
<a name="line-130"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Arrow</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-131"></a>        <span class='hs-varid'>arr</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
<a name="line-132"></a>        <span class='hs-varid'>first</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
<a name="line-133"></a>        <span class='hs-varid'>second</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
<a name="line-134"></a>
<a name="line-135"></a><span class='hs-comment'>-- | The identity arrow, which plays the role of 'return' in arrow notation.</span>
<a name="line-136"></a>
<a name="line-137"></a><a name="returnA"></a><span class='hs-definition'>returnA</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>b</span>
<a name="line-138"></a><span class='hs-definition'>returnA</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>id</span>
<a name="line-139"></a>
<a name="line-140"></a><a name="^>>"></a><span class='hs-comment'>-- | Precomposition with a pure function.</span>
<a name="line-141"></a><span class='hs-layout'>(</span><span class='hs-varop'>^&gt;&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span>
<a name="line-142"></a><a name="f"></a><span class='hs-definition'>f</span> <span class='hs-varop'>^&gt;&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>a</span>
<a name="line-143"></a>
<a name="line-144"></a><a name=">>^"></a><span class='hs-comment'>-- | Postcomposition with a pure function.</span>
<a name="line-145"></a><span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;^</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span>
<a name="line-146"></a><a name="a"></a><span class='hs-definition'>a</span> <span class='hs-varop'>&gt;&gt;^</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>f</span>
<a name="line-147"></a>
<a name="line-148"></a><a name="<<^"></a><span class='hs-comment'>-- | Precomposition with a pure function (right-to-left variant).</span>
<a name="line-149"></a><span class='hs-layout'>(</span><span class='hs-varop'>&lt;&lt;^</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span>
<a name="line-150"></a><span class='hs-definition'>a</span> <span class='hs-varop'>&lt;&lt;^</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;&lt;&lt;</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>f</span>
<a name="line-151"></a>
<a name="line-152"></a><a name="^<<"></a><span class='hs-comment'>-- | Postcomposition with a pure function (right-to-left variant).</span>
<a name="line-153"></a><span class='hs-layout'>(</span><span class='hs-varop'>^&lt;&lt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span>
<a name="line-154"></a><span class='hs-definition'>f</span> <span class='hs-varop'>^&lt;&lt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;&lt;&lt;</span> <span class='hs-varid'>a</span>
<a name="line-155"></a>
<a name="line-156"></a><a name="ArrowZero"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowZero</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
<a name="line-157"></a>        <span class='hs-varid'>zeroArrow</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span>
<a name="line-158"></a>
<a name="line-159"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowZero</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-160"></a>        <span class='hs-varid'>zeroArrow</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>mzero</span><span class='hs-layout'>)</span>
<a name="line-161"></a>
<a name="line-162"></a><a name="ArrowPlus"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>ArrowZero</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowPlus</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
<a name="line-163"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>&lt;+&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span>
<a name="line-164"></a>
<a name="line-165"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-166"></a>        <span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;+&gt;</span> <span class='hs-conid'>Kleisli</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>x</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>g</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
<a name="line-167"></a>
<a name="line-168"></a><span class='hs-comment'>-- | Choice, for arrows that support it.  This class underlies the</span>
<a name="line-169"></a><span class='hs-comment'>--   @if@ and @case@ constructs in arrow notation.</span>
<a name="line-170"></a><span class='hs-comment'>--   Any instance must define 'left'.  The other combinators have sensible</span>
<a name="line-171"></a><span class='hs-comment'>--   default definitions, which may be overridden for efficiency.</span>
<a name="line-172"></a>
<a name="line-173"></a><a name="ArrowChoice"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowChoice</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
<a name="line-174"></a>
<a name="line-175"></a>        <span class='hs-comment'>-- | Feed marked inputs through the argument arrow, passing the</span>
<a name="line-176"></a>        <span class='hs-comment'>--   rest through unchanged to the output.</span>
<a name="line-177"></a>        <span class='hs-varid'>left</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
<a name="line-178"></a>
<a name="line-179"></a>        <span class='hs-comment'>-- | A mirror image of 'left'.</span>
<a name="line-180"></a>        <span class='hs-comment'>--</span>
<a name="line-181"></a>        <span class='hs-comment'>--   The default definition may be overridden with a more efficient</span>
<a name="line-182"></a>        <span class='hs-comment'>--   version if desired.</span>
<a name="line-183"></a>        <span class='hs-varid'>right</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>d</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>d</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
<a name="line-184"></a>        <span class='hs-varid'>right</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>mirror</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>left</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>mirror</span>
<a name="line-185"></a>                        <span class='hs-keyword'>where</span>   <span class='hs-varid'>mirror</span> <span class='hs-layout'>(</span><span class='hs-conid'>Left</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Right</span> <span class='hs-varid'>x</span>
<a name="line-186"></a>                                <span class='hs-varid'>mirror</span> <span class='hs-layout'>(</span><span class='hs-conid'>Right</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Left</span> <span class='hs-varid'>y</span>
<a name="line-187"></a>
<a name="line-188"></a>        <span class='hs-comment'>-- | Split the input between the two argument arrows, retagging</span>
<a name="line-189"></a>        <span class='hs-comment'>--   and merging their outputs.</span>
<a name="line-190"></a>        <span class='hs-comment'>--   Note that this is in general not a functor.</span>
<a name="line-191"></a>        <span class='hs-comment'>--</span>
<a name="line-192"></a>        <span class='hs-comment'>--   The default definition may be overridden with a more efficient</span>
<a name="line-193"></a>        <span class='hs-comment'>--   version if desired.</span>
<a name="line-194"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>+++</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>c</span> <span class='hs-varid'>c'</span><span class='hs-layout'>)</span>
<a name="line-195"></a>        <span class='hs-varid'>f</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>left</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>right</span> <span class='hs-varid'>g</span>
<a name="line-196"></a>
<a name="line-197"></a>        <span class='hs-comment'>-- | Fanin: Split the input between the two argument arrows and</span>
<a name="line-198"></a>        <span class='hs-comment'>--   merge their outputs.</span>
<a name="line-199"></a>        <span class='hs-comment'>--</span>
<a name="line-200"></a>        <span class='hs-comment'>--   The default definition may be overridden with a more efficient</span>
<a name="line-201"></a>        <span class='hs-comment'>--   version if desired.</span>
<a name="line-202"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>|||</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span>
<a name="line-203"></a>        <span class='hs-varid'>f</span> <span class='hs-varop'>|||</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>untag</span>
<a name="line-204"></a>                        <span class='hs-keyword'>where</span>   <span class='hs-varid'>untag</span> <span class='hs-layout'>(</span><span class='hs-conid'>Left</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
<a name="line-205"></a>                                <span class='hs-varid'>untag</span> <span class='hs-layout'>(</span><span class='hs-conid'>Right</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>
<a name="line-206"></a>
<a name="line-207"></a><span class='hs-comment'>{-# RULES
<a name="line-208"></a>"left/arr"      forall f .
<a name="line-209"></a>                left (arr f) = arr (left f)
<a name="line-210"></a>"right/arr"     forall f .
<a name="line-211"></a>                right (arr f) = arr (right f)
<a name="line-212"></a>"sum/arr"       forall f g .
<a name="line-213"></a>                arr f +++ arr g = arr (f +++ g)
<a name="line-214"></a>"fanin/arr"     forall f g .
<a name="line-215"></a>                arr f ||| arr g = arr (f ||| g)
<a name="line-216"></a>"compose/left"  forall f g .
<a name="line-217"></a>                left f . left g = left (f . g)
<a name="line-218"></a>"compose/right" forall f g .
<a name="line-219"></a>                right f . right g = right (f . g)
<a name="line-220"></a> #-}</span>
<a name="line-221"></a>
<a name="line-222"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>ArrowChoice</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-223"></a>        <span class='hs-varid'>left</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>id</span>
<a name="line-224"></a>        <span class='hs-varid'>right</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>f</span>
<a name="line-225"></a>        <span class='hs-varid'>f</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Left</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>|||</span> <span class='hs-layout'>(</span><span class='hs-conid'>Right</span> <span class='hs-varop'>.</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span>
<a name="line-226"></a>        <span class='hs-layout'>(</span><span class='hs-varop'>|||</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>either</span>
<a name="line-227"></a>
<a name="line-228"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowChoice</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-229"></a>        <span class='hs-varid'>left</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>id</span>
<a name="line-230"></a>        <span class='hs-varid'>right</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-varid'>id</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>f</span>
<a name="line-231"></a>        <span class='hs-varid'>f</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-conid'>Left</span><span class='hs-layout'>)</span> <span class='hs-varop'>|||</span> <span class='hs-layout'>(</span><span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-conid'>Right</span><span class='hs-layout'>)</span>
<a name="line-232"></a>        <span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span> <span class='hs-varop'>|||</span> <span class='hs-conid'>Kleisli</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-varid'>either</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span>
<a name="line-233"></a>
<a name="line-234"></a><span class='hs-comment'>-- | Some arrows allow application of arrow inputs to other inputs.</span>
<a name="line-235"></a>
<a name="line-236"></a><a name="ArrowApply"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowApply</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
<a name="line-237"></a>        <span class='hs-varid'>app</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span>
<a name="line-238"></a>
<a name="line-239"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>ArrowApply</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-240"></a>        <span class='hs-varid'>app</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span><span class='hs-layout'>,</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x</span>
<a name="line-241"></a>
<a name="line-242"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowApply</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-243"></a>        <span class='hs-varid'>app</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
<a name="line-244"></a>
<a name="line-245"></a><span class='hs-comment'>-- | The 'ArrowApply' class is equivalent to 'Monad': any monad gives rise</span>
<a name="line-246"></a><span class='hs-comment'>--   to a 'Kleisli' arrow, and any instance of 'ArrowApply' defines a monad.</span>
<a name="line-247"></a>
<a name="line-248"></a><a name="ArrowMonad"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>ArrowApply</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowMonad</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ArrowMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-conid'>()</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
<a name="line-249"></a>
<a name="line-250"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>ArrowApply</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ArrowMonad</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-251"></a>        <span class='hs-varid'>return</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ArrowMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>arr</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
<a name="line-252"></a>        <span class='hs-conid'>ArrowMonad</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ArrowMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;&gt;</span>
<a name="line-253"></a>                        <span class='hs-varid'>arr</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>x</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-conid'>ArrowMonad</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span><span class='hs-layout'>,</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;&gt;&gt;</span>
<a name="line-254"></a>                        <span class='hs-varid'>app</span><span class='hs-layout'>)</span>
<a name="line-255"></a>
<a name="line-256"></a><span class='hs-comment'>-- | Any instance of 'ArrowApply' can be made into an instance of</span>
<a name="line-257"></a><span class='hs-comment'>--   'ArrowChoice' by defining 'left' = 'leftApp'.</span>
<a name="line-258"></a>
<a name="line-259"></a><a name="leftApp"></a><span class='hs-definition'>leftApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>ArrowApply</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
<a name="line-260"></a><span class='hs-definition'>leftApp</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>arr</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>arr</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-conid'>Left</span><span class='hs-layout'>,</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>|||</span>
<a name="line-261"></a>                 <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>d</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>arr</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>arr</span> <span class='hs-conid'>Right</span><span class='hs-layout'>,</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;&gt;&gt;</span> <span class='hs-varid'>app</span>
<a name="line-262"></a>
<a name="line-263"></a><span class='hs-comment'>-- | The 'loop' operator expresses computations in which an output value is</span>
<a name="line-264"></a><span class='hs-comment'>--   fed back as input, even though the computation occurs only once.</span>
<a name="line-265"></a><span class='hs-comment'>--   It underlies the @rec@ value recursion construct in arrow notation.</span>
<a name="line-266"></a>
<a name="line-267"></a><a name="ArrowLoop"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Arrow</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowLoop</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
<a name="line-268"></a>        <span class='hs-varid'>loop</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span>
<a name="line-269"></a>
<a name="line-270"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>ArrowLoop</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-271"></a>        <span class='hs-varid'>loop</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>c</span>
<a name="line-272"></a>
<a name="line-273"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadFix</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>ArrowLoop</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<a name="line-274"></a>        <span class='hs-varid'>loop</span> <span class='hs-layout'>(</span><span class='hs-conid'>Kleisli</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Kleisli</span> <span class='hs-layout'>(</span><span class='hs-varid'>liftM</span> <span class='hs-varid'>fst</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mfix</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f'</span><span class='hs-layout'>)</span>
<a name="line-275"></a>                <span class='hs-keyword'>where</span>   <span class='hs-varid'>f'</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>snd</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
</pre></body>
</html>
