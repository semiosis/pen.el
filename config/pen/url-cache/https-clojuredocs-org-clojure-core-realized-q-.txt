HTTP/1.1 200 OK
Date: Sat, 10 Sep 2022 02:35:13 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: ring-session=2%2B6Ec8SmDV9UYI7h4WWeWptKjm5jz2ScBCvT8DGncD4TvPmbp7YCfjzBary1iiyHLbm%2FbG14rqLYITRCCK2tH0J%2BsB1bhM4u5MASWgdil8%2FjPUafM47oXvYCQ5vcn4y2--4v69HTj7lUjfwlbIt2QQkplxAcK614F0w20b7Kpg5Ng%3D;Path=/;HttpOnly
CF-Cache-Status: DYNAMIC
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=nBJMKFFGh7wyVt6OUosBG2EaAFaFeJb31Rgag0UqGuIJSEapYQNRVTWSPVYtAvL1oezar72gqC%2BhAxH8adx6UKH5yAbIy9DYmdhN5mqgHrFGDQg8mJj5WHcETudfXbI28feYc%2Bo3sVpRii9cQ%2BA%3D"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 7484c4e1b9beaadb-SYD
alt-svc: h3=":443"; ma=86400, h3-29=":443"; ma=86400

<!DOCTYPE html>
<html><head><meta content="width=device-width, maximum-scale=1.0" name="viewport"><meta content="yes" name="apple-mobile-web-app-capable"><meta content="default" name="apple-mobile-web-app-status-bar-style"><meta content="ClojureDocs" name="apple-mobile-web-app-title"><meta content="XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g" name="google-site-verification"><title>realized? - clojure.core | ClojureDocs - Community-Powered Clojure Documentation and Examples</title><link href="/opensearch.xml" rel="search" title="ClojureDocs" type="application/opensearchdescription+xml"><link href="/css/font-awesome.min.css?bbfef9385083d307ad2692c0cf99f611" rel="stylesheet"><link href="/css/bootstrap.min.css?385b964b68acb68d23cb43a5218fade9" rel="stylesheet"><link href="/css/app.css?9e9d4de52804fa9bff22ecaa7badf8f9" rel="stylesheet"><script>// <![CDATA[
window.PAGE_DATA="{:examples [{:var {:library-url \"https://github.com/clojure/clojure\", :name \"realized?\", :ns \"clojure.core\"}, :author {:login \"neotyk\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/366ff985977b3aab09510bc335cd44a4?r=PG&default=identicon\"}, :editors [], :body \";; Create a promise\\nuser> (def p (promise))\\n#'user/p ; p is our promise\\n\\n;; Check if was delivered/realized\\nuser> (realized? p)\\nfalse ; No yet\\n\\n;; Delivering the promise\\nuser> (deliver p 42)\\n#<core$promise$reify__5727@47122d: 42>\\n\\n;; Check again if it was delivered\\nuser> (realized? p)\\ntrue ; Yes!\\n\\n;; Deref to see what has been delivered\\nuser> @p\\n42\\n\\n;; Note that @ is shorthand for deref\\nuser> (deref p)\\n42\", :created-at 1329847539000, :updated-at 1329847539000, :_id \"542692d5c026201cdc327063\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"realized?\", :ns \"clojure.core\"}, :body \";; For lazy sequences\\n\\nuser=> (def r (range 5))\\n#'user/r\\nuser=> (realized? r)\\nfalse\\nuser=> (first r)\\n0\\nuser=> (realized? r)\\ntrue\\n\\n; As of Clojure 1.7.0 range may return things other than a LazySeq.\\n; see https://groups.google.com/forum/#!topic/clojure/NFwHkZxUFuY\\n; and another example here.\\n\\nuser=> (def r (lazy-seq (range 5)))\\n#'user/r\\nuser=> (realized? r)\\nfalse\\nuser=> (first r)\\n0\\nuser=> (realized? r)\\ntrue\", :author {:login \"Dimagog\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/138993?v=3\"}, :created-at 1423041981596, :updated-at 1646323852599, :editors [{:avatar-url \"https://avatars1.githubusercontent.com/u/6127708?v=3\", :account-source \"github\", :login \"mhuerster\"} {:login \"mars0i\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/1836941?v=4\"}], :_id \"54d1e5bde4b081e022073c56\", :user nil} {:updated-at 1609789065763, :created-at 1609789065763, :author {:login \"timrobinson33\", :account-source \"github\", :avatar-url \"https://avatars0.githubusercontent.com/u/57178390?v=4\"}, :body \";; Note that for delay (but not future), if the body is currently executing\\n;; realized? will block until it completes.\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"realized?\", :ns \"clojure.core\"}, :_id \"5ff36e89e4b0b1e3652d7427\", :user nil} {:editors [{:login \"mars0i\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/1836941?v=4\"}], :var {:ns \"clojure.core\", :name \"realized?\", :library-url \"https://github.com/clojure/clojure\"}, :body \";; realized? does not work with all lazy sequences (since Clojure 1.7.0),\\n;; and some functions that return lazy sequences might not always return\\n;; a sequence to which realized? is applicable.\\n\\n;; realized? works with a bare call to range:\\nuser=> (realized? (range))\\ntrue\\nuser=> (realized? (rest (range)))\\nfalse\\n;; but not when range is given an argument:\\nuser=> (realized? (range 10000))\\nExecution error (ClassCastException) at user/eval2036 (form-init1890379966749060098.clj:1).\\nclojure.lang.LongRange cannot be cast to clojure.lang.IPending\\n\\n;; The reason is that range returns instances of different classes:\\nuser=> (class (range))\\nclojure.lang.Iterate\\nuser=> (class (range 10000))\\nclojure.lang.LongRange\\n\\n;; repeat is another example:\\nuser=> (realized? (repeat 10000))\\nExecution error (ClassCastException) at user/eval5991 (form-init1890379966749060098.clj:1).\\nclojure.lang.Repeat cannot be cast to clojure.lang.IPending\\nuser=> (class (repeat 10000))\\nclojure.lang.Repeat\\n\\n;; All of the sequences returned above behave lazily, however.\\n\\n;; The upshot is that realized? is not considered an important tool for use\\n;; with lazy sequences and probably shouldn't be depended on, except in \\n;; special cases.\\n\\n;; As noted in another example, there's an old discussion here:\\n;; https://groups.google.com/forum/#!topic/clojure/NFwHkZxUFu\", :author {:avatar-url \"https://avatars.githubusercontent.com/u/1836941?v=4\", :account-source \"github\", :login \"mars0i\"}, :created-at 1646325203994, :updated-at 1646325368517, :_id \"6220edd3e4b0b1e3652d75b1\", :user nil}], :var {:added \"1.3\", :ns \"clojure.core\", :name \"realized?\", :file \"clojure/core.clj\", :type \"function\", :keywords \"realized? realized?\", :column 1, :line 7533, :arglists (\"x\"), :doc \"Returns true if a value has been produced for a promise, delay, future or lazy sequence.\", :library-url \"https://github.com/clojure/clojure\", :href \"/clojure.core/realized_q\"}, :notes [], :see-alsos [{:created-at 1334256253000, :author {:login \"tcrawley\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9262893211442b0081f2bcd75bfd47f3?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"promise\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"realized?\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692eaf6e94c6970521c53\", :doc \"Returns a promise object that can be read with deref/@, and set,\\n  once only, with deliver. Calls to deref/@ prior to delivery will\\n  block, unless the variant of deref with timeout is used. All\\n  subsequent derefs will return the same delivered value without\\n  blocking. See also - realized?.\", :can-delete? false, :user nil} {:created-at 1334256260000, :author {:login \"tcrawley\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9262893211442b0081f2bcd75bfd47f3?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"delay\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"realized?\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692eaf6e94c6970521c54\", :doc \"Takes a body of expressions and yields a Delay object that will\\n  invoke the body only the first time it is forced (with force or deref/@), and\\n  will cache the result and return it on all subsequent force\\n  calls. See also - realized?\", :can-delete? false, :user nil} {:created-at 1334256266000, :author {:login \"tcrawley\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/9262893211442b0081f2bcd75bfd47f3?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"future\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.core\", :name \"realized?\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692eaf6e94c6970521c55\", :doc \"Takes a body of expressions and yields a future object that will\\n  invoke the body in another thread, and will cache the result and\\n  return it on all subsequent calls to deref/@. If the computation has\\n  not yet finished, calls to deref/@ will block, unless the variant of\\n  deref with timeout is used. See also - realized?.\", :can-delete? false, :user nil}], :user nil}";
//]]></script></head><body class="var-page"><div class="mobile-nav-menu"><section><h4><i class="fa fa-rocket"></i>ClojureDocs</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/core-library">Core Library<span class="clojure-version">(1.10.1)</span></a></li><li><a href="/quickref">Quick Reference</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Frealized_q&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul></section><section><h4>Nav</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a data-animate-buffer="70" data-animate-scroll="true" href="#">Top</a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#examples">Examples <span class="examples-count"><span class="badge">4</span></span></a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#see-also">See Also <span class="badge">3</span></a></li><li></li></ul></section><section><h4>Namespaces</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/clojure.core">clojure.core</a></li><li><a href="/clojure.core.async">clojure.core.async</a></li><li><a href="/clojure.core.logic">clojure.core.logic</a></li><li><a href="/clojure.core.logic.fd">clojure.core.logic.fd</a></li><li><a href="/clojure.core.logic.pldb">clojure.core.logic.pldb</a></li><li><a href="/clojure.core.protocols">clojure.core.protocols</a></li><li><a href="/clojure.core.reducers">clojure.core.reducers</a></li><li><a href="/clojure.core.server">clojure.core.server</a></li><li><a href="/clojure.data">clojure.data</a></li><li><a href="/clojure.datafy">clojure.datafy</a></li><li><a href="/clojure.edn">clojure.edn</a></li><li><a href="/clojure.inspector">clojure.inspector</a></li><li><a href="/clojure.instant">clojure.instant</a></li><li><a href="/clojure.java.browse">clojure.java.browse</a></li><li><a href="/clojure.java.io">clojure.java.io</a></li><li><a href="/clojure.java.javadoc">clojure.java.javadoc</a></li><li><a href="/clojure.java.shell">clojure.java.shell</a></li><li><a href="/clojure.main">clojure.main</a></li><li><a href="/clojure.pprint">clojure.pprint</a></li><li><a href="/clojure.reflect">clojure.reflect</a></li><li><a href="/clojure.repl">clojure.repl</a></li><li><a href="/clojure.set">clojure.set</a></li><li><a href="/clojure.spec.alpha">clojure.spec.alpha</a></li><li><a href="/clojure.stacktrace">clojure.stacktrace</a></li><li><a href="/clojure.string">clojure.string</a></li><li><a href="/clojure.template">clojure.template</a></li><li><a href="/clojure.test">clojure.test</a></li><li><a href="/clojure.test.junit">clojure.test.junit</a></li><li><a href="/clojure.test.tap">clojure.test.tap</a></li><li><a href="/clojure.walk">clojure.walk</a></li><li><a href="/clojure.xml">clojure.xml</a></li><li><a href="/clojure.zip">clojure.zip</a></li></ul></section></div><div class="mobile-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Frealized_q&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="sticky-wrapper mobile-push-wrapper"><div class="desktop-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.core%2Frealized_q&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><div><div class="row"><div class="col-sm-2 sidenav"><div class="desktop-side-nav" data-sticky-offset="10"><div class="var-page-nav"></div><div class="library-nav"><h5>Namespaces</h5><ul class="ns-tree"><li><span>clojure</span><ul><li><span class="current"><a href="/clojure.core">core</a></span><ul><li><span><a href="/clojure.core.async">async</a></span></li><li><span><a href="/clojure.core.logic">logic</a></span><ul><li><span><a href="/clojure.core.logic.fd">fd</a></span></li><li><span><a href="/clojure.core.logic.pldb">pldb</a></span></li></ul></li><li><span><a href="/clojure.core.protocols">protocols</a></span></li><li><span><a href="/clojure.core.reducers">reducers</a></span></li><li><span><a href="/clojure.core.server">server</a></span></li></ul></li><li><span><a href="/clojure.data">data</a></span></li><li><span><a href="/clojure.datafy">datafy</a></span></li><li><span><a href="/clojure.edn">edn</a></span></li><li><span><a href="/clojure.inspector">inspector</a></span></li><li><span><a href="/clojure.instant">instant</a></span></li><li><span>java</span><ul><li><span><a href="/clojure.java.browse">browse</a></span></li><li><span><a href="/clojure.java.io">io</a></span></li><li><span><a href="/clojure.java.javadoc">javadoc</a></span></li><li><span><a href="/clojure.java.shell">shell</a></span></li></ul></li><li><span><a href="/clojure.main">main</a></span></li><li><span><a href="/clojure.pprint">pprint</a></span></li><li><span><a href="/clojure.reflect">reflect</a></span></li><li><span><a href="/clojure.repl">repl</a></span></li><li><span><a href="/clojure.set">set</a></span></li><li><span>spec</span><ul><li><span><a href="/clojure.spec.alpha">alpha</a></span></li></ul></li><li><span><a href="/clojure.stacktrace">stacktrace</a></span></li><li><span><a href="/clojure.string">string</a></span></li><li><span><a href="/clojure.template">template</a></span></li><li><span><a href="/clojure.test">test</a></span><ul><li><span><a href="/clojure.test.junit">junit</a></span></li><li><span><a href="/clojure.test.tap">tap</a></span></li></ul></li><li><span><a href="/clojure.walk">walk</a></span></li><li><span><a href="/clojure.xml">xml</a></span></li><li><span><a href="/clojure.zip">zip</a></span></li></ul></li></ul></div></div></div><div class="col-sm-10"><div class="row var-header"><div class="col-sm-8"><h1 class="var-name">realized?</h1></div><div class="col-sm-4"><div class="var-meta"><h4><a href="/clojure.core">clojure.core</a></h4><span>Available since 1.3</span><span class="source-link"> (<a href="https://github.com/clojure/clojure/blob/clojure-1.10.1/src/clj/clojure/core.clj#L7533">source</a>) </span></div></div><div class="col-sm-12"><section><ul class="arglists"><li class="arglist">(realized? x)</li></ul></section></div></div><section><div class="docstring"><pre>Returns true if a value has been produced for a promise, delay, future or lazy sequence.</pre><div class="copyright">&copy; Rich Hickey. All rights reserved. <a href="https://www.eclipse.org/legal/epl-v10.html">Eclipse Public License 1.0</a></div></div></section><section><div class="examples-widget" id="examples"></div></section><section><div class="see-alsos-widget" id="see-also"></div></section><section><div class="notes-widget" id="notes"></div></section></div></div></div></div></div></div><div class="sticky-push"></div></div><footer><div class="container"><div class="row"><div class="col-sm-12"><div class="divider">- ❦ -</div></div></div><div class="row"><div class="ctas"><div class="col-sm-6 left">Brought to you by <a href="https://zacharykim.com">Zachary Kim</a>. </div><div class="col-sm-6 right"><iframe allowtransparency="true" class="gh-starred-count" frameborder="0" height="20" scrolling="0" src="/github-btn.html?user=zk&amp;repo=clojuredocs&amp;type=watch&amp;count=true" width="80"></iframe><a class="twitter-share-button" data-text="Community-powered docs and examples for #Clojure" data-url="http://clojuredocs.org" data-via="heyzk" href="https://twitter.com/share">Tweet</a></div></div><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></div></div></footer><script src="/cljs/clojuredocs.js?9421f92fbece10f3ababd69dba14cf70"></script><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-17348828-1', 'auto');
  ga('send', 'pageview');</script><script>if(("standalone" in window.navigator) && window.navigator.standalone){
var noddy, remotes = false;

document.addEventListener('click', function(event) {

noddy = event.target;

while(noddy.nodeName !== "A" && noddy.nodeName !== "HTML") {
noddy = noddy.parentNode;
}

if('href' in noddy && noddy.href.indexOf('http') !== -1 && (noddy.href.indexOf(document.location.host) !== -1 || remotes))
{
event.preventDefault();
document.location.href = noddy.href;
}

},false);
}</script></body></html>
