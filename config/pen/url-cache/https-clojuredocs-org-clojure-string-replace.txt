HTTP/1.1 200 OK
Date: Mon, 25 Nov 2024 19:38:45 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: ring-session=3mAoIayMTfh3DQvVbhn0Iu%2Bhly8Orxh452j%2FuXxt%2Fbq2QbDkQdjiDAnNJ9xUuJ1m3v99aro4EvD9Xv0UwvWymBqaVpLiwIVET3vv94pNaYg%3D--aVtLrUcwOj%2BVZeiHJiiwKMAEfgiLtFw7hxu%2F0WZ3CRU%3D;Path=/;HttpOnly
cf-cache-status: DYNAMIC
vary: accept-encoding
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=uuj1ZpJT4HCBQMWgP3YTJAir%2FAaFJsnPHGamVC89RBaAXzHYo7nn0Iy6gUF9eFEIff4BAM26KRpW%2Fc%2FKvdKEnwgZCMy61PQQENsdSBUo%2FhXQd8Pv47f%2Fsjp6hENw4CLT4cTzw9qXLWC7Gs41ljk%3D"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8e8419cf286de7be-SYD
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=51911&sent=6&recv=8&lost=0&retrans=0&sent_bytes=3287&recv_bytes=534&delivery_rate=76532&cwnd=254&unsent_bytes=0&cid=bb9cf36e1d214a9f&ts=348&x=0"

<!DOCTYPE html>
<html><head><meta content="width=device-width, maximum-scale=1.0" name="viewport"><meta content="yes" name="apple-mobile-web-app-capable"><meta content="default" name="apple-mobile-web-app-status-bar-style"><meta content="ClojureDocs" name="apple-mobile-web-app-title"><meta content="XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g" name="google-site-verification"><title>replace - clojure.string | ClojureDocs - Community-Powered Clojure Documentation and Examples</title><link href="/opensearch.xml" rel="search" title="ClojureDocs" type="application/opensearchdescription+xml"><link href="/css/font-awesome.min.css?bbfef9385083d307ad2692c0cf99f611" rel="stylesheet"><link href="/css/bootstrap.min.css?385b964b68acb68d23cb43a5218fade9" rel="stylesheet"><link href="/css/app.css?9e9d4de52804fa9bff22ecaa7badf8f9" rel="stylesheet"><script>// <![CDATA[
window.PAGE_DATA="{:examples [{:updated-at 1507930108317, :created-at 1284347892000, :body \"(clojure.string/replace \\\"The color is red\\\" #\\\"red\\\" \\\"blue\\\")\\n;=> \\\"The color is blue\\\"\", :editors [{:avatar-url \"https://www.gravatar.com/avatar/e2051c4ebaaa8c22fa9c0bb2f32f64fd?r=PG&default=identicon\", :account-source \"clojuredocs\", :login \"rustem.suniev\"} {:avatar-url \"https://avatars.githubusercontent.com/u/109629?v=3\", :account-source \"github\", :login \"jafingerhut\"} {:login \"phreed\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/211644?v=4\"}], :author {:avatar-url \"https://www.gravatar.com/avatar/e2051c4ebaaa8c22fa9c0bb2f32f64fd?r=PG&default=identicon\", :account-source \"clojuredocs\", :login \"rustem.suniev\"}, :var {:ns \"clojure.string\", :name \"replace\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692d1c026201cdc326f0b\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"replace\", :ns \"clojure.string\"}, :author {:login \"JD Huntington\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/a3d6887041bc564a5d60cdc811ae4ef9?r=PG&default=identicon\"}, :editors [{:login \"Domon\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/3fe8ae238c14d716a9fc16734a70765b?r=PG&default=identicon\"} {:avatar-url \"https://avatars3.githubusercontent.com/u/211644?v=4\", :account-source \"github\", :login \"phreed\"} {:login \"Panthevm\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/43318093?v=4\"}], :body \"(clojure.string/replace \\\"The color is red.\\\" #\\\"[aeiou]\\\"  #(str %1 %1))\\n;=> \\\"Thee cooloor iis reed.\\\"\\n\", :created-at 1295092425000, :updated-at 1604318073825, :_id \"542692d1c026201cdc326f0e\", :user nil} {:updated-at 1534289397632, :created-at 1324450115000, :body \";; Note: When replace-first or replace have a regex pattern as their\\n;; match argument, dollar sign ($) and backslash (\\\\) characters in\\n;; the replacement string are treated specially.\\n\\n;; Example: first substring that the pattern matches is \\\"fodder\\\", with\\n;; (o+) matching \\\"o\\\" and (\\\\S+) matching \\\"dder\\\".  Replacement string\\n;; says to replace the entire match \\\"fodder\\\" with $2, the string\\n;; matched by the second parenthesized group, \\\"dder\\\", followed by $1,\\n;; \\\"o\\\".\\n(str/replace \\\"fabulous fodder foo food\\\" #\\\"f(o+)(\\\\S+)\\\" \\\"$2$1\\\")\\n;=> \\\"fabulous ddero oo doo\\\"\\n\\n;; To avoid this special treatment of $ and \\\\, you must escape them with\\n;; \\\\.  Because it is in a Clojure string, to get one \\\\ we must escape\\n;; *that* with its own \\\\.\\n(str/replace \\\"fabulous fodder foo food\\\" #\\\"f(o+)(\\\\S+)\\\" \\\"\\\\\\\\$2\\\\\\\\$1\\\")\\n;=> \\\"fabulous $2$1 $2$1 $2$1\\\"\\n\\n;; To ensure the replacement is treated literally, call\\n;; java.util.regex.Matcher/quoteReplacement on it.  A shorter name\\n;; like re-qr can be handy.\\n(import '(java.util.regex Matcher))\\n;=> java.util.regex.Matcher\\n\\n(defn re-qr [replacement]\\n    (Matcher/quoteReplacement replacement))\\n;=> #'user/re-qr\\n\\n(str/replace \\\"fabulous fodder foo food\\\" #\\\"f(o+)(\\\\S+)\\\" (re-qr \\\"$2$1\\\"))\\n;=> \\\"fabulous $2$1 $2$1 $2$1\\\"\\n\\n;; Since 1.5, re-qr can be replaced by clojure.string/re-quote-replacement\\n(str/replace \\\"fabulous fodder foo food\\\" #\\\"f(o+)(\\\\S+)\\\" (str/re-quote-replacement \\\"$2$1\\\"))\\n;=> \\\"fabulous $2$1 $2$1 $2$1\\\"\", :editors [{:avatar-url \"https://avatars.githubusercontent.com/u/109629?v=3\", :account-source \"github\", :login \"jafingerhut\"} {:login \"phreed\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/211644?v=4\"} {:avatar-url \"https://avatars1.githubusercontent.com/u/20086?v=4\", :account-source \"github\", :login \"reborg\"}], :author {:avatar-url \"https://avatars.githubusercontent.com/u/109629?v=3\", :account-source \"github\", :login \"jafingerhut\"}, :var {:ns \"clojure.string\", :name \"replace\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692d7c026201cdc3270fe\", :user nil} {:updated-at 1507930204780, :created-at 1344740223000, :body \";; replaces all a's with 1 and all b's with 2\\n(clojure.string/replace \\\"a b a\\\" #\\\"a|b\\\" {\\\"a\\\" \\\"1\\\" \\\"b\\\" \\\"2\\\"})\\n;=> \\\"1 2 1\\\"\", :editors [{:login \"phreed\", :account-source \"github\", :avatar-url \"https://avatars3.githubusercontent.com/u/211644?v=4\"}], :author {:avatar-url \"https://www.gravatar.com/avatar/e33ee460f5f61bc5ba9b598934766215?r=PG&default=identicon\", :account-source \"clojuredocs\", :login \"dansalmo\"}, :var {:ns \"clojure.string\", :name \"replace\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692d7c026201cdc327100\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"replace\", :ns \"clojure.string\"}, :author {:login \"jafingerhut\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/109629?v=3\"}, :editors [], :body \";; Note: See clojure.core/subs for discussion of behavior of substrings\\n;; holding onto references of the original strings, which can\\n;; significantly affect your memory usage in some cases.\", :created-at 1379040065000, :updated-at 1379040065000, :_id \"542692d7c026201cdc327101\", :user nil} {:var {:library-url \"https://github.com/clojure/clojure\", :name \"replace\", :ns \"clojure.string\"}, :author {:login \"Corin\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/58ca01bfad092685652c8ea2b7bb3008?r=PG&default=identicon\"}, :editors [{:login \"Corin\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/58ca01bfad092685652c8ea2b7bb3008?r=PG&default=identicon\"} {:login \"zk\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/7194?v=2\"}], :body \";; To title case\\n(clojure.string/replace \\\"hello world\\\" #\\\"\\\\b.\\\" #(.toUpperCase %1))\\n\\\"Hello World\\\"\\n\\n;; Note that a vector is passed to your replacement function\\n;; when pattern contains capturing groups (see re-groups)\\n(clojure.string/replace \\\"hello world\\\" #\\\"\\\\b(.)\\\" #(.toUpperCase (%1 1)))\\n\\\"Hello World\\\"\\n\", :created-at 1397250241000, :updated-at 1412843380347, :_id \"542692d7c026201cdc327102\", :user nil} {:updated-at 1464723944272, :created-at 1464723944272, :author {:login \"alexbispo\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/6197542?v=3\"}, :var {:library-url \"https://github.com/clojure/clojure\", :name \"replace\", :ns \"clojure.string\"}, :body \";; Note that the s \\\"Vegeta\\\" is returned as is, because there is no matching.\\n(clojure.string/replace \\\"Vegeta\\\" #\\\"Goku\\\" \\\"Gohan\\\")\\n\\\"Vegeta\\\"\", :_id \"574de9e8e4b0bafd3e2a046c\", :user nil} {:updated-at 1636733826696, :created-at 1636733826696, :author {:login \"wdhowe\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/4631165?v=4\"}, :body \";; Removing characters, while ignoring case.\\n(clojure.string/replace \\\"Hello hello!\\\" #\\\"(?i)[h!]\\\" \\\"\\\")\\n\\n;=> \\\"ello ello\\\"\", :var {:library-url \"https://github.com/clojure/clojure\", :name \"replace\", :ns \"clojure.string\"}, :_id \"618e9382e4b0b1e3652d7572\", :user nil}], :var {:added \"1.2\", :ns \"clojure.string\", :name \"replace\", :file \"clojure/string.clj\", :type \"function\", :keywords \"replace replace\", :column 1, :line 75, :tag \"java.lang.String\", :arglists (\"s match replacement\"), :doc \"Replaces all instance of match with replacement in s.\\n\\n   match/replacement can be:\\n\\n   string / string\\n   char / char\\n   pattern / (string or function of match).\\n\\n   See also replace-first.\\n\\n   The replacement is literal (i.e. none of its characters are treated\\n   specially) for all cases above except pattern / string.\\n\\n   For pattern / string, $1, $2, etc. in the replacement string are\\n   substituted with the string that matched the corresponding\\n   parenthesized group in the pattern.  If you wish your replacement\\n   string r to be used literally, use (re-quote-replacement r) as the\\n   replacement argument.  See also documentation for\\n   java.util.regex.Matcher's appendReplacement method.\\n\\n   Example:\\n   (clojure.string/replace \\\"Almost Pig Latin\\\" #\\\"\\\\b(\\\\w)(\\\\w+)\\\\b\\\" \\\"$2$1ay\\\")\\n   -> \\\"lmostAay igPay atinLay\\\"\", :library-url \"https://github.com/clojure/clojure\", :href \"/clojure.string/replace\"}, :notes [{:updated-at 1351132541000, :var {:library-url \"https://github.com/clojure/clojure\", :ns \"clojure.string\", :name \"replace\"}, :body \"How can i replace \\\".\\\" with #\\\"\\\\s\\\"\", :created-at 1351132541000, :author {:login \"TejasBhatt\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/2953c9d9a1566f643e6910c4aa392525?r=PG&default=identicon\"}, :_id \"542692edf6e94c6970521ff2\", :can-delete? false, :can-edit? false}], :see-alsos [{:created-at 1318625174000, :author {:login \"mmwaikar\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/29d36f4c9f39c9f8ff61c07033b13118?r=PG&default=identicon\"}, :to-var {:ns \"clojure.core\", :name \"subs\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.string\", :name \"replace\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521e64\", :doc \"Returns the substring of s beginning at start inclusive, and ending\\n  at end (defaults to length of string), exclusive.\", :can-delete? false, :user nil} {:created-at 1318625263000, :author {:login \"mmwaikar\", :account-source \"clojuredocs\", :avatar-url \"https://www.gravatar.com/avatar/29d36f4c9f39c9f8ff61c07033b13118?r=PG&default=identicon\"}, :to-var {:ns \"clojure.string\", :name \"split\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.string\", :name \"replace\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521e65\", :doc \"Splits string on a regular expression.  Optional argument limit is\\n  the maximum number of parts. Not lazy. Returns vector of the parts.\\n  Trailing empty strings are not returned - pass limit of -1 to return all.\", :can-delete? false, :user nil} {:created-at 1323919331000, :author {:login \"jafingerhut\", :account-source \"github\", :avatar-url \"https://avatars.githubusercontent.com/u/109629?v=3\"}, :to-var {:ns \"clojure.string\", :name \"replace-first\", :library-url \"https://github.com/clojure/clojure\"}, :from-var {:ns \"clojure.string\", :name \"replace\", :library-url \"https://github.com/clojure/clojure\"}, :_id \"542692ebf6e94c6970521e66\", :doc \"Replaces the first instance of match with replacement in s.\\n\\n   match/replacement can be:\\n\\n   char / char\\n   string / string\\n   pattern / (string or function of match).\\n\\n   See also replace.\\n\\n   The replacement is literal (i.e. none of its characters are treated\\n   specially) for all cases above except pattern / string.\\n\\n   For pattern / string, $1, $2, etc. in the replacement string are\\n   substituted with the string that matched the corresponding\\n   parenthesized group in the pattern.  If you wish your replacement\\n   string r to be used literally, use (re-quote-replacement r) as the\\n   replacement argument.  See also documentation for\\n   java.util.regex.Matcher's appendReplacement method.\\n\\n   Example:\\n   (clojure.string/replace-first \\\"swap first two words\\\"\\n                                 #\\\"(\\\\w+)(\\\\s+)(\\\\w+)\\\" \\\"$3$2$1\\\")\\n   -> \\\"first swap two words\\\"\", :can-delete? false, :user nil} {:created-at 1534289083122, :author {:login \"reborg\", :account-source \"github\", :avatar-url \"https://avatars1.githubusercontent.com/u/20086?v=4\"}, :to-var {:library-url \"https://github.com/clojure/clojure\", :name \"re-quote-replacement\", :ns \"clojure.string\"}, :from-var {:library-url \"https://github.com/clojure/clojure\", :name \"replace\", :ns \"clojure.string\"}, :_id \"5b7364bbe4b00ac801ed9e54\", :doc \"Given a replacement string that you wish to be a literal\\n   replacement for a pattern match in replace or replace-first, do the\\n   necessary escaping of special characters in the replacement.\", :can-delete? false, :user nil}], :user nil}";
//]]></script></head><body class="var-page"><div class="mobile-nav-menu"><section><h4><i class="fa fa-rocket"></i>ClojureDocs</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/core-library">Core Library<span class="clojure-version">(1.11.1)</span></a></li><li><a href="/quickref">Quick Reference</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.string%2Freplace&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul></section><section><h4>Nav</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a data-animate-buffer="70" data-animate-scroll="true" href="#">Top</a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#examples">Examples <span class="examples-count"><span class="badge">8</span></span></a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#see-also">See Also <span class="badge">4</span></a></li><li><a data-animate-buffer="70" data-animate-scroll="true" href="#notes">Notes <span class="badge">1</span></a></li></ul></section><section><h4>Namespaces</h4><ul class="navbar-nav mobile-navbar-nav nav"><li><a href="/clojure.core">clojure.core</a></li><li><a href="/clojure.core.async">clojure.core.async</a></li><li><a href="/clojure.core.logic">clojure.core.logic</a></li><li><a href="/clojure.core.logic.fd">clojure.core.logic.fd</a></li><li><a href="/clojure.core.logic.pldb">clojure.core.logic.pldb</a></li><li><a href="/clojure.core.protocols">clojure.core.protocols</a></li><li><a href="/clojure.core.reducers">clojure.core.reducers</a></li><li><a href="/clojure.core.server">clojure.core.server</a></li><li><a href="/clojure.data">clojure.data</a></li><li><a href="/clojure.data.csv">clojure.data.csv</a></li><li><a href="/clojure.datafy">clojure.datafy</a></li><li><a href="/clojure.edn">clojure.edn</a></li><li><a href="/clojure.inspector">clojure.inspector</a></li><li><a href="/clojure.instant">clojure.instant</a></li><li><a href="/clojure.java.browse">clojure.java.browse</a></li><li><a href="/clojure.java.io">clojure.java.io</a></li><li><a href="/clojure.java.javadoc">clojure.java.javadoc</a></li><li><a href="/clojure.java.shell">clojure.java.shell</a></li><li><a href="/clojure.main">clojure.main</a></li><li><a href="/clojure.math">clojure.math</a></li><li><a href="/clojure.pprint">clojure.pprint</a></li><li><a href="/clojure.reflect">clojure.reflect</a></li><li><a href="/clojure.repl">clojure.repl</a></li><li><a href="/clojure.set">clojure.set</a></li><li><a href="/clojure.spec.alpha">clojure.spec.alpha</a></li><li><a href="/clojure.stacktrace">clojure.stacktrace</a></li><li><a href="/clojure.string">clojure.string</a></li><li><a href="/clojure.template">clojure.template</a></li><li><a href="/clojure.test">clojure.test</a></li><li><a href="/clojure.test.junit">clojure.test.junit</a></li><li><a href="/clojure.test.tap">clojure.test.tap</a></li><li><a href="/clojure.walk">clojure.walk</a></li><li><a href="/clojure.xml">clojure.xml</a></li><li><a href="/clojure.zip">clojure.zip</a></li></ul></section></div><div class="mobile-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.string%2Freplace&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="sticky-wrapper mobile-push-wrapper"><div class="desktop-nav-bar"><header class="navbar"><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><a class="navbar-brand" href="/"><i class="fa fa-rocket"></i>ClojureDocs</a><button class="btn btn-default navbar-btn pull-right mobile-menu"><i class="fa fa-bars"></i></button><ul class="navbar-nav nav navbar-right desktop-navbar-nav"><li><a href="/core-library">Core Library</a></li><li><a href="/quickref">Quick Ref</a></li><li><a href="https://github.com/login/oauth/authorize?client_id=d0242c22610efb54ebbe&amp;redirect_uri=http%3A%2F%2Fclojuredocs.org%2Fgh-callback%2Fclojure.string%2Freplace&amp;scope="><i class="fa fa-github-square"></i>Log In</a></li></ul><div class="nav-search-widget navbar-right navbar-form"><form autocomplete="off" class="search"><input autocomplete="off" class="placeholder form-control" name="query" placeholder="Looking for? (ctrl-s)" type="text"></form></div></div></div><div class="row"><div class="col-md-10 col-md-offset-1"><div class="ac-results-widget"></div></div></div></div></header></div><div class="container"><div class="row"><div class="col-md-10 col-md-offset-1"><div><div class="row"><div class="col-sm-2 sidenav"><div class="desktop-side-nav" data-sticky-offset="10"><div class="var-page-nav"></div><div class="library-nav"><h5>Namespaces</h5><ul class="ns-tree"><li><span>clojure</span><ul><li><span><a href="/clojure.core">core</a></span><ul><li><span><a href="/clojure.core.async">async</a></span></li><li><span><a href="/clojure.core.logic">logic</a></span><ul><li><span><a href="/clojure.core.logic.fd">fd</a></span></li><li><span><a href="/clojure.core.logic.pldb">pldb</a></span></li></ul></li><li><span><a href="/clojure.core.protocols">protocols</a></span></li><li><span><a href="/clojure.core.reducers">reducers</a></span></li><li><span><a href="/clojure.core.server">server</a></span></li></ul></li><li><span><a href="/clojure.data">data</a></span><ul><li><span><a href="/clojure.data.csv">csv</a></span></li></ul></li><li><span><a href="/clojure.datafy">datafy</a></span></li><li><span><a href="/clojure.edn">edn</a></span></li><li><span><a href="/clojure.inspector">inspector</a></span></li><li><span><a href="/clojure.instant">instant</a></span></li><li><span>java</span><ul><li><span><a href="/clojure.java.browse">browse</a></span></li><li><span><a href="/clojure.java.io">io</a></span></li><li><span><a href="/clojure.java.javadoc">javadoc</a></span></li><li><span><a href="/clojure.java.shell">shell</a></span></li></ul></li><li><span><a href="/clojure.main">main</a></span></li><li><span><a href="/clojure.math">math</a></span></li><li><span><a href="/clojure.pprint">pprint</a></span></li><li><span><a href="/clojure.reflect">reflect</a></span></li><li><span><a href="/clojure.repl">repl</a></span></li><li><span><a href="/clojure.set">set</a></span></li><li><span>spec</span><ul><li><span><a href="/clojure.spec.alpha">alpha</a></span></li></ul></li><li><span><a href="/clojure.stacktrace">stacktrace</a></span></li><li><span class="current"><a href="/clojure.string">string</a></span></li><li><span><a href="/clojure.template">template</a></span></li><li><span><a href="/clojure.test">test</a></span><ul><li><span><a href="/clojure.test.junit">junit</a></span></li><li><span><a href="/clojure.test.tap">tap</a></span></li></ul></li><li><span><a href="/clojure.walk">walk</a></span></li><li><span><a href="/clojure.xml">xml</a></span></li><li><span><a href="/clojure.zip">zip</a></span></li></ul></li></ul></div></div></div><div class="col-sm-10"><div class="row var-header"><div class="col-sm-8"><h1 class="var-name">replace</h1></div><div class="col-sm-4"><div class="var-meta"><h4><a href="/clojure.string">clojure.string</a></h4><span>Available since 1.2</span></div></div><div class="col-sm-12"><section><ul class="arglists"><li class="arglist">(replace s match replacement)</li></ul></section></div></div><section><div class="docstring"><pre>Replaces all instance of match with replacement in s.
  match/replacement can be:
  string / string
 char / char
 pattern / (string or function of match).
  See also replace-first.
  The replacement is literal (i.e. none of its characters are treated
 specially) for all cases above except pattern / string.
  For pattern / string, $1, $2, etc. in the replacement string are
 substituted with the string that matched the corresponding
 parenthesized group in the pattern.  If you wish your replacement
 string r to be used literally, use (re-quote-replacement r) as the
 replacement argument.  See also documentation for
 java.util.regex.Matcher's appendReplacement method.
  Example:
 (clojure.string/replace "Almost Pig Latin" #"\b(\w)(\w+)\b" "$2$1ay")
 -&gt; "lmostAay igPay atinLay"</pre><div class="copyright">&copy; Rich Hickey. All rights reserved. <a href="http://www.eclipse.org/legal/epl-v10.html">Eclipse Public License 1.0</a></div></div></section><section><div class="examples-widget" id="examples"></div></section><section><div class="see-alsos-widget" id="see-also"></div></section><section><div class="notes-widget" id="notes"></div></section></div></div></div></div></div></div><div class="sticky-push"></div></div><footer><div class="container"><div class="row"><div class="col-sm-12"><div class="divider">- ❦ -</div></div></div><div class="row"><div class="ctas"><div class="col-sm-6 left">Brought to you by <a href="https://zacharykim.com">Zachary Kim</a>. </div><div class="col-sm-6 right"><iframe allowtransparency="true" class="gh-starred-count" frameborder="0" height="20" scrolling="0" src="/github-btn.html?user=zk&amp;repo=clojuredocs&amp;type=watch&amp;count=true" width="80"></iframe><a class="twitter-share-button" data-text="Community-powered docs and examples for #Clojure" data-url="http://clojuredocs.org" data-via="heyzk" href="https://twitter.com/share">Tweet</a></div></div><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></div></div></footer><script src="/cljs/clojuredocs.js?9421f92fbece10f3ababd69dba14cf70"></script><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-17348828-1', 'auto');
  ga('send', 'pageview');</script><script>if(("standalone" in window.navigator) && window.navigator.standalone){
var noddy, remotes = false;

document.addEventListener('click', function(event) {

noddy = event.target;

while(noddy.nodeName !== "A" && noddy.nodeName !== "HTML") {
noddy = noddy.parentNode;
}

if('href' in noddy && noddy.href.indexOf('http') !== -1 && (noddy.href.indexOf(document.location.host) !== -1 || remotes))
{
event.preventDefault();
document.location.href = noddy.href;
}

},false);
}</script></body></html>
