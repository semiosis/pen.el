HTTP/1.1 200 OK
Date: Wed, 27 Nov 2024 02:30:11 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
x-amz-id-2: Zx581BM8LYQoJ1Ox8OaP4WDiSN+4irpNI+TcNCSxAJ5t765O8h2W3JUR3FIgtodO8X9YOVXCvEQ=
x-amz-request-id: 1CQRMYDF4GQWE27N
Cache-Control: max-age=0, no-cache
Last-Modified: Sat, 27 Jul 2019 23:29:17 GMT
x-amz-storage-class: REDUCED_REDUNDANCY
cf-cache-status: DYNAMIC
vary: accept-encoding
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=2gZMmUnjVer6imXbctjgX2h5gBYgbxmKy7fqV%2BDmECuo7%2Bv2ODR1MHA%2FCMw22rZTVg%2BeWYmWAgVxxFOhnOiSoD71TYWkkLYXfJSisgIAeuGK4LRzM5qlXtW33VId4fJrp%2BE%2FqMoIuKM3"}],"group":"cf-nel","max_age":604800}
NEL: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Server: cloudflare
CF-RAY: 8e8eb1e33866a7f5-SYD
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=148835&sent=22&recv=11&lost=0&retrans=9&sent_bytes=17179&recv_bytes=788&delivery_rate=28722&cwnd=251&unsent_bytes=0&cid=a416b48c18c572a4&ts=34495&x=0"

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"/><meta name="viewport" content="width=device-width, initial-scale=0.8"/><title>1&nbsp;Language-Oriented Programming</title><link rel="stylesheet" type="text/css" href="scribble.css" title="default"/><link rel="stylesheet" type="text/css" href="racket.css" title="default"/><link rel="stylesheet" type="text/css" href="manual-style.css" title="default"/><link rel="stylesheet" type="text/css" href="manual-racket.css" title="default"/><script type="text/javascript" src="scribble-common.js"></script><script type="text/javascript" src="manual-racket.js"></script><!--[if IE 6]><style type="text/css">.SIEHidden { overflow: hidden; }</style><![endif]--></head><body id="scribble-racket-lang-org"><div class="tocset"><div class="tocview"><div class="tocviewlist tocviewlisttopspace"><div class="tocviewtitle"><table cellspacing="0" cellpadding="0"><tr><td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_0&quot;);">&#9660;</a></td><td></td><td><a href="index.html" class="tocviewlink" data-pltdoc="x">Racket School 2019:<span class="mywbr"> &nbsp;</span> <br/>
<span class="Smaller">The &#8220;How to Design Languages&#8221; Track</span></a></td></tr></table></div><div class="tocviewsublisttop" style="display: block;" id="tocview_0"><table cellspacing="0" cellpadding="0"><tr><td align="right">1&nbsp;</td><td><a href="" class="tocviewselflink" data-pltdoc="x">Language-<wbr></wbr>Oriented Programming</a></td></tr><tr><td align="right">2&nbsp;</td><td><a href="mon-mor-lab.html" class="tocviewlink" data-pltdoc="x">Macro Expansion</a></td></tr><tr><td align="right">3&nbsp;</td><td><a href="mon-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Language Extensions via Macros</a></td></tr><tr><td align="right">4&nbsp;</td><td><a href="mon-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Simple Macros</a></td></tr><tr><td align="right">5&nbsp;</td><td><a href="tue-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Advanced Racket Macros</a></td></tr><tr><td align="right">6&nbsp;</td><td><a href="tue-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Syntax Patterns &amp; Classes</a></td></tr><tr><td align="right">7&nbsp;</td><td><a href="tue-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Lexical Scope, (Un)Hygienic Macros</a></td></tr><tr><td align="right">8&nbsp;</td><td><a href="tue-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Comfortable Macros</a></td></tr><tr><td align="right">9&nbsp;</td><td><a href="wed-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Modules, Macros, Languages</a></td></tr><tr><td align="right">10&nbsp;</td><td><a href="wed-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages via Macros</a></td></tr><tr><td align="right">11&nbsp;</td><td><a href="wed-aft-lecture.html" class="tocviewlink" data-pltdoc="x">More Language Variations</a></td></tr><tr><td align="right">12&nbsp;</td><td><a href="wed-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> Languages and Readers</a></td></tr><tr><td align="right">13&nbsp;</td><td><a href="thu-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Types and Type Checking</a></td></tr><tr><td align="right">14&nbsp;</td><td><a href="thu-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Typed Languages with Turnstile</a></td></tr><tr><td align="right">15&nbsp;</td><td><a href="thu-aft-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Lab</span> My First Turnstile Language</a></td></tr><tr><td align="right">16&nbsp;</td><td><a href="fri-mor-lecture.html" class="tocviewlink" data-pltdoc="x">Two Techniques</a></td></tr><tr><td align="right">17&nbsp;</td><td><a href="fri-mor-lab.html" class="tocviewlink" data-pltdoc="x"><span style="font-weight: bold">Extended Lab</span> Regexps</a></td></tr><tr><td align="right">18&nbsp;</td><td><a href="fri-aft-lecture.html" class="tocviewlink" data-pltdoc="x">Some Language Gems</a></td></tr><tr><td align="right">19&nbsp;</td><td><a href="fri-aft-lab.html" class="tocviewlink" data-pltdoc="x">Closure</a></td></tr></table></div></div><div class="tocviewlist"><table cellspacing="0" cellpadding="0"><tr><td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_1&quot;);">&#9658;</a></td><td>1&nbsp;</td><td><a href="" class="tocviewselflink" data-pltdoc="x">Language-<wbr></wbr>Oriented Programming</a></td></tr></table><div class="tocviewsublistbottom" style="display: none;" id="tocview_1"><table cellspacing="0" cellpadding="0"><tr><td align="right">1.1&nbsp;</td><td><a href="#%28part._.Welcome_to_the_2019_.Racket_.School_of_.Programming_.Languages%29" class="tocviewlink" data-pltdoc="x">Welcome to the 2019 Racket School of Programming Languages</a></td></tr><tr><td align="right">1.2&nbsp;</td><td><a href="#%28part._.One_.Project__.Many_.Programming_.Languages%29" class="tocviewlink" data-pltdoc="x">One Project, Many Programming Languages</a></td></tr><tr><td align="right">1.3&nbsp;</td><td><a href="#%28part._.One_.Programming_.Language__.Many_.Languages%29" class="tocviewlink" data-pltdoc="x">One Programming Language, Many Languages</a></td></tr><tr><td align="right">1.4&nbsp;</td><td><a href="#%28part._.One_.Racket_.Programmer__.Many_.Languages%29" class="tocviewlink" data-pltdoc="x">One Racket Programmer, Many Languages</a></td></tr><tr><td align="right">1.5&nbsp;</td><td><a href="#%28part._who-part2%29" class="tocviewlink" data-pltdoc="x">Who are we? What are doing here?</a></td></tr></table></div></div></div><div class="tocsub"><div class="tocsubtitle">On this page:</div><table class="tocsublist" cellspacing="0"><tr><td><span class="tocsublinknumber">1.1<tt>&nbsp;</tt></span><a href="#%28part._.Welcome_to_the_2019_.Racket_.School_of_.Programming_.Languages%29" class="tocsubseclink" data-pltdoc="x">Welcome to the 2019 Racket School of Programming Languages</a></td></tr><tr><td><span class="tocsublinknumber">1.1.1<tt>&nbsp;</tt></span><a href="#%28part._.Who_are_we__.What_are_doing_here_%29" class="tocsubseclink" data-pltdoc="x">Who are we? What are doing here?</a></td></tr><tr><td><span class="tocsublinknumber">1.1.2<tt>&nbsp;</tt></span><a href="#%28part._.Who_are_you__.Why_are_you_here_%29" class="tocsubseclink" data-pltdoc="x">Who are you? Why are you here?</a></td></tr><tr><td><span class="tocsublinknumber">1.2<tt>&nbsp;</tt></span><a href="#%28part._.One_.Project__.Many_.Programming_.Languages%29" class="tocsubseclink" data-pltdoc="x">One Project, Many Programming Languages</a></td></tr><tr><td><span class="tocsublinknumber">1.3<tt>&nbsp;</tt></span><a href="#%28part._.One_.Programming_.Language__.Many_.Languages%29" class="tocsubseclink" data-pltdoc="x">One Programming Language, Many Languages</a></td></tr><tr><td><span class="tocsublinknumber">1.4<tt>&nbsp;</tt></span><a href="#%28part._.One_.Racket_.Programmer__.Many_.Languages%29" class="tocsubseclink" data-pltdoc="x">One Racket Programmer, Many Languages</a></td></tr><tr><td><span class="tocsublinknumber">1.5<tt>&nbsp;</tt></span><a href="#%28part._who-part2%29" class="tocsubseclink" data-pltdoc="x">Who are we? What are doing here?</a></td></tr></table></div></div><div class="maincolumn"><div class="main"><div class="versionbox"><span class="version">7.4.0.4</span></div><div class="navsettop"><span class="navleft"><div class="nosearchform"></div>&nbsp;&nbsp;</span><span class="navright">&nbsp;&nbsp;<a href="index.html" title="backward to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">&larr; prev</a>&nbsp;&nbsp;<a href="index.html" title="up to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">up</a>&nbsp;&nbsp;<a href="mon-mor-lab.html" title="forward to &quot;2 Macro Expansion&quot;" data-pltdoc="x">next &rarr;</a></span>&nbsp;</div><h3>1<tt>&nbsp;</tt><a name="(part._mon-mor-lecture)"></a>Language-Oriented Programming</h3><div class="SAuthorListBox"><span class="SAuthorList"><p class="author">Matthias Felleisen</p></span></div><p><table cellspacing="0" cellpadding="0" class="boxed"><tr><td><p><span style="font-weight: bold">Goals</span></p></td></tr><tr><td><p> &#8212;<wbr></wbr> what this week is about: language-oriented programming</p></td></tr><tr><td><p> &#8212;<wbr></wbr> how we will approach it: designing languages in Racket</p></td></tr></table></p><h4>1.1<tt>&nbsp;</tt><a name="(part._.Welcome_to_the_2019_.Racket_.School_of_.Programming_.Languages)"></a>Welcome to the 2019 Racket School of Programming Languages</h4><h5>1.1.1<tt>&nbsp;</tt><a name="(part._.Who_are_we__.What_are_doing_here_)"></a>Who are we? What are doing here?</h5><p>For now, we just say &ldquo;hello&rdquo; and at the end of this first lecture, we&rsquo;ll
say what we&rsquo;re doing here.</p><h5>1.1.2<tt>&nbsp;</tt><a name="(part._.Who_are_you__.Why_are_you_here_)"></a>Who are you? Why are you here?</h5><p>Please introduce yourself to the Racket team and your peers. In the past we
have found that these introductions often intrigue others about your
background and open connections. So in this spirit, please</p><ul><li><p>tell us who you are, perhaps including a special tidbit about yourself</p></li><li><p>what you do for a living and how it related to Racket</p></li><li><p>why you chose to come to Racket week.</p></li></ul><h4>1.2<tt>&nbsp;</tt><a name="(part._.One_.Project__.Many_.Programming_.Languages)"></a>One Project, Many Programming Languages</h4><p>It has become common that a software project employs many different
programming languages. A &ldquo;full stack&rdquo; web application has software
running in the web browser and the web server, and this software is rarely
written in the same language. Furthermore the server is hardly ever a
monolithic piece of software in one language. It typically glues together
code that interprets requests (from the network), turns them into database
queries, checks some business logic, and many more actions. Each of them
might have been written in a different language (and possibly in a
different era).</p><p>A few years ago a colleague from IBM presented (roughly) the following
stack during his keynote address at POPL:</p><blockquote class="SCentered"><p><img style="vertical-align: 0px; margin: -3px -3px -3px -3px;" src="pict.svg" type="image/svg+xml"/></p></blockquote><p>Programming with multiple external programming languages has been a reality
for decades. It still is. Here are reasons why projects use many languages:</p><p><div class="SIntrapara"><ul><li><p>history&#8212;<wbr></wbr>someone started a project in a language, and the language
falls out of favor.</p></li><li><p>platform&#8212;<wbr></wbr>a new platform appears and demands attention. The new
platform (terminal, pc, browser, mobile) does not support the language in
which the software is currently written.</p></li><li><p>expressiveness, productivity&#8212;<wbr></wbr>on rare occasions, a team of
developers can convince the project manager that a new programming language
will make them more productive than the one that has been used so far.</p></li></ul></div><div class="SIntrapara">There are probably more such reasons but, regardless, the only way to add a
new component in a new language comes with a singular condition: there must
be a &ldquo;natural&rdquo; way to separate the two components. Usually &ldquo;natural&rdquo;
means the two components may communicated via an easy-to-use FFI or they
are forced to communicate via some form of input/output anyways (say, the
network for a view written for a web browser).</div></p><p>While one could call this form of programming, &ldquo;language-oriented
programming&rdquo; this is a wider notion than the one we care about. What we do
care about is the rationalization that different languages make solving
different problems easier. And programming language designers have long ago
recognized this fact, as a look at any programming language from the last
30 or 40 years shows.</p><h4>1.3<tt>&nbsp;</tt><a name="(part._.One_.Programming_.Language__.Many_.Languages)"></a>One Programming Language, Many Languages</h4><p>Almost every modern programming language comes with several distinct
sub-languages that deal with distinct programming domains. Let&rsquo;s look at a
couple of simple ones in Racket.</p><p><div class="SIntrapara">The first one is the familiar one of format strings:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><p><span class="RktVal">"~a :: ~a\n"</span></p></blockquote></div><div class="SIntrapara">By itself, such a format string is pointless. But, a programming language
supports interpreters for such strings to facilitate the rendering of values
into strings for output devices:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">formatting strings to prepare for printing</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._printf%29%29" class="RktValLink" data-pltdoc="x">printf</a></span><span class="hspace">&nbsp;</span><span class="RktVal">"~a :: ~a\n"</span><span class="hspace">&nbsp;</span><span class="RktVal">"hello"</span><span class="hspace">&nbsp;</span><span class="RktVal">'</span><span class="RktVal">String</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">The <span class="RktSym"><a href="http://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._printf%29%29" class="RktValLink" data-pltdoc="x">printf</a></span> function really plays the role of an interpreter for a
program written as a string, whose inputs is a sequence of arbitrary Racket
values. Of course, neither the Racket compiler nor the IDE understand the
program because it is a string. Hence they can&rsquo;t statically analyze it
(well) and the developer is left without much assistance.</div></p><p><div class="SIntrapara">In Racket there are several interpreters for such embedded string-programs:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><p><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._format%29%29" class="RktValLink" data-pltdoc="x">format</a></span><span class="hspace">&nbsp;</span><span class="RktVal">"~a :: ~a\n"</span><span class="hspace">&nbsp;</span><span class="RktVal">"hello"</span><span class="hspace">&nbsp;</span><span class="RktVal">'</span><span class="RktVal">String</span><span class="RktPn">)</span></p></blockquote></div><div class="SIntrapara">And this is a common phenomenon.</div></p><p><div class="SIntrapara">The language of regular expressions is a second string-based example that
is equally common in modern languages. Many (all?) modern programming
languages come with functions that interpret certain strings as regular
expressions and matching such expressions against strings:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">String -&gt; False of [List String Char-String Char-String])</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">extract-digits</span><span class="hspace">&nbsp;</span><span class="RktSym">year</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match%29%29" class="RktValLink" data-pltdoc="x">regexp-match</a></span><span class="hspace">&nbsp;</span><span class="RktVal">"20(.)(.)"</span><span class="hspace">&nbsp;</span><span class="RktSym">year</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">This is a function that extracts the last two digits of a string that
represents a 21st-century year:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym">extract-digits</span><span class="hspace">&nbsp;</span><span class="RktVal">"2018"</span><span class="RktPn">)</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">extract-digits</span><span class="hspace">&nbsp;</span><span class="RktVal">"1999"</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">Again, <span class="RktSym"><a href="http://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match%29%29" class="RktValLink" data-pltdoc="x">regexp-match</a></span> servers as an interpreter for an embedded
program here. Racket comes with different embedded languages of regular
expressions, and some facilitate solving this problem even more than plain
regular-expressions-as-strings:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">String -&gt; False of [List String Digit-String Digit-String])</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">extract-digits-version-2</span><span class="hspace">&nbsp;</span><span class="RktSym">year</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/regexp.html#%28def._%28%28quote._~23~25kernel%29._regexp-match%29%29" class="RktValLink" data-pltdoc="x">regexp-match</a></span><span class="hspace">&nbsp;</span><span class="RktVal">#px"20(\\d)(\\d)"</span><span class="hspace">&nbsp;</span><span class="RktSym">year</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">In the &ldquo;#px&rdquo; language of regular expressions, we know that &ldquo;\d&rdquo; really
matches just digits so this version of the function is &ldquo;more correct&rdquo;
than the previous one.</div></p><p><div class="SIntrapara">A programming language does not have to use strings to represent embedded
programs. The Racket-based teaching languages for &ldquo;How to Design
Programs&rdquo; supply a domain-specific language for dealing with events. We
can use this language inside of regular Racket programs:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktCmt">;</span><span class="RktCmt">&nbsp;</span><span class="RktCmt">dealing with events from the environment</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29" class="RktStxLink" data-pltdoc="x">require</a></span><span class="hspace">&nbsp;</span><span class="RktSym">2htdp/universe</span><span class="RktPn">)</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29" class="RktStxLink" data-pltdoc="x">require</a></span><span class="hspace">&nbsp;</span><span class="RktSym">2htdp/image</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">main</span><span class="hspace">&nbsp;</span><span class="RktSym">s0</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29" class="RktStxLink" data-pltdoc="x">big-bang</a></span><span class="hspace">&nbsp;</span><span class="RktSym">s0</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-tick%29%29" class="RktStxLink" data-pltdoc="x">on-tick</a></span><span class="hspace">&nbsp;&nbsp;&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._sub1%29%29" class="RktValLink" data-pltdoc="x">sub1</a></span><span class="RktPn">]</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-when%29%29" class="RktStxLink" data-pltdoc="x">stop-when</a></span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._zero~3f%29%29" class="RktValLink" data-pltdoc="x">zero?</a></span><span class="RktPn">]</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._to-draw%29%29" class="RktStxLink" data-pltdoc="x">to-draw</a></span><span class="hspace">&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29" class="RktStxLink" data-pltdoc="x">lambda</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">s</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpimage.html#%28def._%28%28lib._2htdp%2Fimage..rkt%29._circle%29%29" class="RktValLink" data-pltdoc="x">circle</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29" class="RktValLink" data-pltdoc="x">+</a></span><span class="hspace">&nbsp;</span><span class="RktVal">100</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29" class="RktValLink" data-pltdoc="x">*</a></span><span class="hspace">&nbsp;</span><span class="RktSym">s</span><span class="hspace">&nbsp;</span><span class="RktVal">10</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktVal">'</span><span class="RktVal">solid</span><span class="hspace">&nbsp;</span><span class="RktVal">'</span><span class="RktVal">red</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">]</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">Run <span class="RktPn">(</span><span class="RktSym">main</span><span class="stt"> </span><span class="RktVal">40</span><span class="RktPn">)</span> and watch how this program deals with clock-tick
events.</div></p><p><div class="SIntrapara">Writing down a keyword such as <span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29" class="RktStxLink" data-pltdoc="x">on-key</a></span> or even a complete
<span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29" class="RktStxLink" data-pltdoc="x">on-key</a></span> clause outside a <span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29" class="RktStxLink" data-pltdoc="x">big-bang</a></span> context is a syntactic
error:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><p><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._on-key%29%29" class="RktStxLink" data-pltdoc="x">on-key</a></span><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29" class="RktStxLink" data-pltdoc="x">lambda</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">s</span><span class="hspace">&nbsp;</span><span class="RktSym">ke</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29" class="RktStxLink" data-pltdoc="x">if</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._key~3d~3f%29%29" class="RktValLink" data-pltdoc="x">key=?</a></span><span class="hspace">&nbsp;</span><span class="RktVal">" "</span><span class="hspace">&nbsp;</span><span class="RktSym">ke</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28def._world._%28%28lib._2htdp%2Funiverse..rkt%29._stop-with%29%29" class="RktValLink" data-pltdoc="x">stop-with</a></span><span class="hspace">&nbsp;</span><span class="RktSym">s</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktSym">s</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">]</span></p></blockquote></div><div class="SIntrapara">Moving this clause inside the above <span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29" class="RktStxLink" data-pltdoc="x">big-bang</a></span> allows us to stop the
shrinking-circle animation in mid-sequence. Note how the JavaScript world
has developed many such domain-specific embedded framework-languages to
deal with events.</div></p><p><div class="SIntrapara">Finally, Racket&#8212;<wbr></wbr>like many modern functional languages&#8212;<wbr></wbr>supports
(algebraic) tree-matching:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktSym">simple-tree</span><span class="hspace">&nbsp;</span><span class="RktVal">'</span><span class="RktVal">(</span><span class="RktVal">a</span><span class="hspace">&nbsp;</span><span class="RktVal">1</span><span class="hspace">&nbsp;</span><span class="RktVal">2</span><span class="hspace">&nbsp;</span><span class="RktVal">3</span><span class="RktVal">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span><span class="hspace">&nbsp;</span><span class="RktSym">simple-tree</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktVal">`</span><span class="RktVal">(</span><span class="RktVal">a</span><span class="hspace">&nbsp;</span><span class="RktRdr">,</span><span class="RktPn">(</span><span class="RktSym">?</span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29" class="RktValLink" data-pltdoc="x">number?</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktRdr">,</span><span class="RktSym">y</span><span class="RktVal">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29" class="RktValLink" data-pltdoc="x">+</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktSym">y</span><span class="RktPn">)</span><span class="RktPn">]</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktVal">`</span><span class="RktVal">(</span><span class="RktVal">a</span><span class="hspace">&nbsp;</span><span class="RktRdr">,</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktRdr">,</span><span class="RktSym">y</span><span class="hspace">&nbsp;</span><span class="RktRdr">,</span><span class="RktSym">z</span><span class="RktVal">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29" class="RktValLink" data-pltdoc="x">*</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29" class="RktValLink" data-pltdoc="x">+</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktSym">y</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktSym">z</span><span class="RktPn">)</span><span class="RktPn">]</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29" class="RktStxLink" data-pltdoc="x">else</a></span><span class="hspace">&nbsp;</span><span class="RktVal">"error"</span><span class="RktPn">]</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">A <span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span> expression consists of an expression followed by sequence
of <span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span> clauses. Just as <span class="RktSym"><a href="http://docs.racket-lang.org/teachpack/2htdpuniverse.html#%28form._world._%28%28lib._2htdp%2Funiverse..rkt%29._big-bang%29%29" class="RktStxLink" data-pltdoc="x">big-bang</a></span> clauses, these
<span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span> clauses are a brand-new category of syntactic things that
Racket programmers can write down, once match becomes available. Each
<span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span> clause consists of a <span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span> pattern followed by any
number of Racket expressions. And again, patterns are a new syntactic
category, not comparable to anything that exists in Racket. But, they allow
escapes to arbitrary Racket code as the <span class="RktPn">(</span><span class="RktSym">?</span><span class="stt"> </span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29" class="RktValLink" data-pltdoc="x">number?</a></span><span class="stt"> </span><span class="RktSym">x</span><span class="RktPn">)</span> pattern
shows. (Naturally, the racket code in such sub-patterns could use match
again.) Again, the JavaScript world supports its own ways to match and
extract elements of the most important tree&#8212;<wbr></wbr>the DOM&#8212;<wbr></wbr>without writing
manual traversal functions; for example, jQuery treats the DOM as a
database from which programs may retrieve certain classes of nodes.</div></p><p>Of course there are other embedded languages that most programming
languages have to support in this day and age, with database queries being
an important one.</p><p><span style="font-weight: bold">Think</span> What kind of embedded domain-specific languages does your
favorite programming language support?</p><p>Language designers accept that code communicates ideas (about problems and
solutions) across time and that clear expression of ideas greatly
facilitates communication. They therefore include these sub-languages
because they know that these niche problem areas in programming&#8212;<wbr></wbr>from
preparing a string for printing to querying a database&#8212;<wbr></wbr>have their own
ways of describing solutions.</p><p><div class="SIntrapara">The advantage of sub-languages over external languages is clear: combining
such special-purposed languages into a coherent whole is much easier than
linking programs via input/output code:
</div><div class="SIntrapara"><ul><li><p>Composition is a mere syntactic act.</p></li><li><p>Computation is accomplished via translation into the host.</p></li><li><p>Communication is easy because embedded programs compute host values.
<span class="refelem"><span class="refcolumn"><span class="refcontent">Of course, this form of communicating poses its own problems.</span></span></span></p></li></ul></div><div class="SIntrapara">In short, internal languages take away a lot of the pain of program linking.</div></p><p>But normally language designers do not enable software developers to create
languages for niche application areas. Racketeers do, because they trust
programmers.</p><h4>1.4<tt>&nbsp;</tt><a name="(part._.One_.Racket_.Programmer__.Many_.Languages)"></a>One Racket Programmer, Many Languages</h4><p><div class="SIntrapara">Racket translates these insights into an explicit <span style="font-weight: bold">design goal</span>:
</div><div class="SIntrapara"><blockquote><p> Racket empowers developers to add (sub)languages,
and the process of adding these languages to the existing eco-system is
free of any friction.</p></blockquote></div><div class="SIntrapara">We call this <span style="font-weight: bold">language-oriented programming</span> (LOP).</div></p><p>Racket supports a large spectrum of LOP in a reasonably friction-free and
productive manner. The key is its API for the front-end of its
implementation, that is, the <span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax%29%29" class="RktStxLink" data-pltdoc="x">syntax</a></span> system, the ability to write
compile-time functions, and the possibility to hook such functions into the
compiler.</p><p>As a result, <span style="font-style: italic">Racket is easy to extend</span>. Adding new syntactic forms is
just a matter of writing compile-time functions. You would write such
functions because you want to abstract over recurring patterns in your code
that <span style="font-style: italic">cannot be abstracted over with functions</span> (or other means of
conventional abstraction).</p><p><div class="SIntrapara">Here is an example of two similar syntactic phrases for which functional
abstraction doesn&rsquo;t work:
</div><div class="SIntrapara"><table cellspacing="0" cellpadding="0"><tr><td valign="top"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="highlighted"><span class="RktSym">bigger-string</span></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._number-~3estring%29%29" class="RktValLink" data-pltdoc="x">number-&gt;string</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29" class="RktValLink" data-pltdoc="x">add1</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym">x</span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29" class="RktStxLink" data-pltdoc="x">provide</a></span></td></tr><tr><td><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/attaching-contracts-to-values.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._contract-out%29%29" class="RktStxLink" data-pltdoc="x">contract-out</a></span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="highlighted"><span class="RktSym">bigger-string</span></span><span class="hspace">&nbsp;</span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29" class="RktStxLink" data-pltdoc="x"><span class="nobreak">-&gt;</span></a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29" class="RktValLink" data-pltdoc="x">number?</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3f%29%29" class="RktValLink" data-pltdoc="x">string?</a></span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="RktPn">]</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></td><td valign="top"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td valign="top"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="highlighted"><span class="RktSym">smaller-than-5</span></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29" class="RktValLink" data-pltdoc="x">&lt;</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym">x</span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktVal">5</span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29" class="RktStxLink" data-pltdoc="x">provide</a></span></td></tr><tr><td><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/attaching-contracts-to-values.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._contract-out%29%29" class="RktStxLink" data-pltdoc="x">contract-out</a></span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="highlighted"><span class="RktSym">smaller-than-5</span></span><span class="hspace">&nbsp;</span><span class="highlighted"><span class="RktPn">(</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29" class="RktStxLink" data-pltdoc="x"><span class="nobreak">-&gt;</span></a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._number~3f%29%29" class="RktValLink" data-pltdoc="x">number?</a></span></span><span class="highlighted"><span class="hspace">&nbsp;</span></span><span class="highlighted"><span class="RktSym"><a href="http://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._boolean~3f%29%29" class="RktValLink" data-pltdoc="x">boolean?</a></span></span><span class="highlighted"><span class="RktPn">)</span></span><span class="RktPn">]</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></td></tr></table></div><div class="SIntrapara">But syntactic abstraction will work, and we will teach you how.</div></p><p>Racket&rsquo;s notion of language extension goes back to the primitive Lisp
macros from 1964. Unsurprisingly, the idea has been thoroughly studied in
the intervening 55 years, and Racketeers have advanced it more than any
other language community.</p><p>One direction of advancement concerns the creation of language modules.
Like all modern languages, Racket supports modules and a modular style of
programming. Unlike in other languages, a Racket programmer chooses the
programming language for each module in a software base independently of
what languages the other components are written in. Conversely, a language
is just a module. So to construct languages we write modules and to write
modules we use languages. This notion of langauge-modules is key to
writing software systems in Racket.</p><p><div class="SIntrapara">Here are two modules that use languages other than plan <span class="stt">racket</span>:
</div><div class="SIntrapara"><table cellspacing="0" cellpadding="0"><tr><td valign="top"><table cellspacing="0" cellpadding="0" class="SVerbatim"><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">#lang datalog</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">edge(a, b).</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">edge(b, c).</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">edge(c, d).</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">edge(d, a).</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt"></span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">path(X, Y) :- edge(X, Y).</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">path(X, Y) :-</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt"></span><span class="hspace">&nbsp;&nbsp;</span><span class="stt">edge(X, Z),</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt"></span><span class="hspace">&nbsp;&nbsp;</span><span class="stt">path(Z, Y).</span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt"></span></p></td></tr><tr><td><p><span class="hspace">&nbsp;&nbsp;</span><span class="stt">path(X, Y)?</span></p></td></tr></table></td><td valign="top"><p><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td valign="top"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29" class="RktModLink" data-pltdoc="x"><span class="RktMod">#lang</span></a><span class="hspace">&nbsp;</span><a href="http://docs.racket-lang.org/ts-reference/index.html" class="RktModLink" data-pltdoc="x"><span class="RktSym">typed/racket</span></a></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29" class="RktStxLink" data-pltdoc="x">provide</a></span><span class="hspace">&nbsp;</span><span class="RktSym">string-&gt;er</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym">:</span><span class="hspace">&nbsp;</span><span class="RktSym">string-&gt;er</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">String</span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/function-contracts.html#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._-~3e%29%29" class="RktStxLink" data-pltdoc="x"><span class="nobreak">-&gt;</span></a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">U</span><span class="hspace">&nbsp;</span><span class="RktSym">Exact-Rational</span><span class="hspace">&nbsp;</span><span class="RktSym">False</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">string-&gt;er</span><span class="hspace">&nbsp;</span><span class="RktSym">s</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktSym">r</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29" class="RktStxLink" data-pltdoc="x">parameterize</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/Reading.html#%28def._%28%28quote._~23~25kernel%29._read-decimal-as-inexact%29%29" class="RktValLink" data-pltdoc="x">read-decimal-as-inexact</a></span><span class="hspace">&nbsp;</span><span class="RktVal">#f</span><span class="RktPn">]</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._string-~3enumber%29%29" class="RktValLink" data-pltdoc="x">string-&gt;number</a></span><span class="hspace">&nbsp;</span><span class="RktSym">s</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29" class="RktStxLink" data-pltdoc="x">and</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._rational~3f%29%29" class="RktValLink" data-pltdoc="x">rational?</a></span><span class="hspace">&nbsp;</span><span class="RktSym">r</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/number-types.html#%28def._%28%28quote._~23~25kernel%29._exact~3f%29%29" class="RktValLink" data-pltdoc="x">exact?</a></span><span class="hspace">&nbsp;</span><span class="RktSym">r</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">ann</span><span class="hspace">&nbsp;</span><span class="RktSym">r</span><span class="hspace">&nbsp;</span><span class="RktSym">Exact-Rational</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></td></tr></table></div><div class="SIntrapara">Creating and experimenting with such languages has become straightforward
in the Racket eco-system.</div></p><p>Where there are languages, people will ask for types. The Racket story of
typed domain-specific languages is still in flux but we have one now. The
Turnstile system allows programmers to write down the type system within
the syntax extension system, and they get a typed language. But, this is
where the Racket world is pushing the boundaries. Turnstile is a research
prototype, and that&rsquo;s why this week is a research summer school.</p><p>The final stage of LOP concerns the creation of embedded languages. This
lecture demonstrated two languages embedded at the fine-grained level of
expressions: dealing with events and matching algebraic patterns.  These
languages exist in all kinds of programming languages, but in all but one
they have to be built into the compiler.  In Racket, such languages are
libraries.</p><p>Building languages that interleave with Racket expressions is possible but
our infrastructure remains somewhat primitive for this area. Like the above
language efforts, we want the creator of such embedded languages to inherit
as many &ldquo;good things&rdquo; from Racket as possible&#8212;<wbr></wbr>we dub this
<span style="font-style: italic">linguistic inheritance</span>&#8212;<wbr></wbr>because this reduces the overhead of
creating such languages. One particular idea embedded languages benefit
from is extensibility. Yes, we want embedded domain-specific languages to
be as extensible as Racket itself, and we can achieve this in some ways.</p><p><div class="SIntrapara">Here is an example concerning algebraic matching. The grammar production of
<span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span> patterns is extensible:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29" class="RktStxLink" data-pltdoc="x">define</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">private-adder</span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29" class="RktValLink" data-pltdoc="x">map</a></span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29" class="RktValLink" data-pltdoc="x">add1</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._define-match-expander%29%29" class="RktStxLink" data-pltdoc="x">define-match-expander</a></span><span class="hspace">&nbsp;</span><span class="RktSym">adder</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29" class="RktStxLink" data-pltdoc="x">lambda</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">stx</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29" class="RktStxLink" data-pltdoc="x">syntax-parse</a></span><span class="hspace">&nbsp;</span><span class="RktSym">stx</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29" class="RktStxLink" data-pltdoc="x">_</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29" class="RktStxLink" data-pltdoc="x">...</a></span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktRdr">#'</span><span class="RktPn">(</span><span class="RktSym">?</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Ffunction..rkt%29._curry%29%29" class="RktValLink" data-pltdoc="x">curry</a></span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29" class="RktValLink" data-pltdoc="x">equal?</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">private-adder</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29" class="RktValLink" data-pltdoc="x">list</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29" class="RktStxLink" data-pltdoc="x">...</a></span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">]</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29" class="RktStxLink" data-pltdoc="x">lambda</a></span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym">stx</span><span class="RktPn">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29" class="RktStxLink" data-pltdoc="x">syntax-parse</a></span><span class="hspace">&nbsp;</span><span class="RktSym">stx</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29" class="RktStxLink" data-pltdoc="x">_</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29" class="RktStxLink" data-pltdoc="x">...</a></span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktRdr">#'</span><span class="RktPn">(</span><span class="RktSym">private-adder</span><span class="hspace">&nbsp;</span><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29" class="RktValLink" data-pltdoc="x">list</a></span><span class="hspace">&nbsp;</span><span class="RktSym">x</span><span class="hspace">&nbsp;</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29" class="RktStxLink" data-pltdoc="x">...</a></span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">]</span><span class="RktPn">)</span><span class="RktPn">)</span><span class="RktPn">)</span></td></tr></table></blockquote></div><div class="SIntrapara">This extension allows the expression <span class="RktPn">(</span><span class="RktSym">adder</span><span class="stt"> </span><span class="RktVal">1</span><span class="stt"> </span><span class="RktVal">2</span><span class="stt"> </span><span class="RktVal">3</span><span class="RktPn">)</span> to mean one
thing in a Racket expression context:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><p><span class="RktPn">(</span><span class="RktSym">adder</span><span class="hspace">&nbsp;</span><span class="RktVal">1</span><span class="hspace">&nbsp;</span><span class="RktVal">2</span><span class="hspace">&nbsp;</span><span class="RktVal">3</span><span class="RktPn">)</span></p></blockquote></div><div class="SIntrapara">and something completely different in a Racket pattern context:
</div><div class="SIntrapara"><blockquote class="SCodeFlow"><table cellspacing="0" cellpadding="0" class="RktBlk"><tr><td><span class="RktPn">(</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29" class="RktStxLink" data-pltdoc="x">match</a></span><span class="hspace">&nbsp;</span><span class="RktVal">'</span><span class="RktVal">(</span><span class="RktVal">2</span><span class="hspace">&nbsp;</span><span class="RktVal">3</span><span class="hspace">&nbsp;</span><span class="RktVal">4</span><span class="RktVal">)</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktPn">(</span><span class="RktSym">adder</span><span class="hspace">&nbsp;</span><span class="RktVal">1</span><span class="hspace">&nbsp;</span><span class="RktVal">2</span><span class="hspace">&nbsp;</span><span class="RktVal">3</span><span class="RktPn">)</span><span class="hspace">&nbsp;</span><span class="RktVal">"success!"</span><span class="RktPn">]</span></td></tr><tr><td><span class="hspace">&nbsp;&nbsp;</span><span class="RktPn">[</span><span class="RktSym"><a href="http://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29" class="RktStxLink" data-pltdoc="x">else</a></span><span class="hspace">&nbsp;</span><span class="RktVal">"** failure **"</span><span class="RktPn">]</span><span class="RktPn">)</span></td></tr></table></blockquote></div></p><p>Now we can explain what the following days, lectures and labs, will teach
you.</p><h4>1.5<tt>&nbsp;</tt><a name="(part._who-part2)"></a>Who are we? What are doing here?</h4><p><div class="SIntrapara">This summer school presents the tools for creating languages in a
bottom-up, back-to-front manner:
</div><div class="SIntrapara"><ul><li><p><span style="font-weight: bold">Day 1</span> Matthias will review (for some participants, introduce)
a simple model of Racket&rsquo;s front-end implementation.</p><p>Jay will show how to use it to define language extensions.</p></li><li><p><span style="font-weight: bold">Day 2</span> Jay will cover more advanced techniques using Racket&rsquo;s
syntax system, including issues of scope and phasing.</p></li><li><p><span style="font-weight: bold">Day 3</span> Matthew will use the tools from the previous two
days to build domain-specific languages.</p></li><li><p><span style="font-weight: bold">Day 4</span> Jesse will show you how to equip domain-specific languages
with type systems, in theory and practice.</p></li><li><p><span style="font-weight: bold">Day 5</span> Robby will set up an extended lab that will give you a
glimpse at fine-grained embedded languages.</p><p>We will wrap up the summer school with a presentation of a language gem by
Robby and some concluding words by Matthias.</p></li></ul></div></p><div class="navsetbottom"><span class="navleft"><div class="nosearchform"></div>&nbsp;&nbsp;</span><span class="navright">&nbsp;&nbsp;<a href="index.html" title="backward to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">&larr; prev</a>&nbsp;&nbsp;<a href="index.html" title="up to &quot;Racket School 2019: 

The “How to Design Languages” Track&quot;" data-pltdoc="x">up</a>&nbsp;&nbsp;<a href="mon-mor-lab.html" title="forward to &quot;2 Macro Expansion&quot;" data-pltdoc="x">next &rarr;</a></span>&nbsp;</div></div></div><div id="contextindicator">&nbsp;</div></body></html>
