version: 2
root-markers:
  - .git/
lint-debounce: 1s

# These are not the code-actions
# They are executeCommand
# But they still appear under
# helm-lsp-code-actions
# That's so odd
commands:
  - command: pen-pretty-paragraph
    arguments:
      - ${INPUT}
    title: Pretty

# I guess, until I get code actions working, I should focus on changing
# language/context and supporting many completion and linting functions.

tools:
  pen-world-language-completion: &pen-world-language-completion
    # completion-command: "pen-ci -f -a penf -u -nj --pool pf-generic-completion-50-tokens/1"
    completion-command: 'POSITION=${POSITION} pen-lsp-complete'
    completion-stdin: true

  pen-programming-language-completion: &pen-programming-language-completion
    # completion-command: "pen-ci -f -a penf -u -nj --pool pf-generic-completion-50-tokens/1"
    # TODO create a code complete script
    # TODO Figure out how to get the language into this script
    # I probably need to extend efm-langserver
    completion-command: 'POSITION=${POSITION} pen-lsp-complete'
    completion-stdin: true

  pen-world-language-lint-and-format: &pen-world-language-lint-and-format
    lint-debounce: 2s
    lint-command: "pen-prompt-lint"
    lint-stdin: true
    lint-offset: 1
    format-stdin: true
    format-command: "pen-prompt-format"

  pen-programming-language-lint-and-format: &pen-programming-language-lint-and-format
    lint-debounce: 2s
    # TODO Figure out how to get the language into this script
    # I probably need to extend efm-langserver
    lint-command: "pen-prompt-lint"
    lint-stdin: true
    lint-offset: 1
    format-stdin: true
    format-command: "pen-prompt-format"

  glossary1: &glossary1
    # The impementation is a combination of documentation and hover
    # documentation is provided to the thing under the cursor

    # The rest go to the hover provider as signature docs
    hover-command: "pen-ci -f -a penf -u -nj --pool pf-define-word-for-glossary/1"
    # hover-command: "timeout -k 0.1 -s KILL 0.1 pen-ci -f -a cat"
    hover-stdin: true
    # hover-type: "markdown"
    # hover-type: "plaintext"
    format-command: 'pen-pretty-paragraph'

  glossary1-elisp: &glossary1-elisp
    # The impementation is a combination of documentation and hover
    # documentation is provided to the thing under the cursor

    # The rest go to the hover provider as signature docs
    hover-command: "pen-ci -f -a penf -u -nj --pool pf-define-word-for-glossary-elisp/1"
    hover-stdin: true
    format-command: 'pen-pretty-paragraph'

  eruby-erb: &eruby-erb
    lint-debounce: 2s
    lint-command: 'erb -x -T - | ruby -c'
    lint-stdin: true
    lint-offset: 1
    format-stdin: true
    format-command: htmlbeautifier

  # The linters, etc. should be generated.
  # Prompts should have a linter: on, for example

  # Explain each line
  code-explain-lint: &prose-explain-lint
    lint-command: 'code-explain-lint -'
    lint-stdin: true
    lint-formats:
      - '%f:%l:%c: %m'

  # Display the language for each line
  prose-lang-lint: &prose-lang-lint
    lint-command: 'prose-lang-lint -'
    lint-stdin: true
    lint-formats:
      - '%f:%l:%c: %m'

  # Display true/false for each line
  prose-truth-lint: &prose-truth-lint
    lint-command: 'prose-truth-lint -'
    lint-stdin: true
    lint-formats:
      - '%f:%l:%c: %m'

  make-checkmake: &make-checkmake
    lint-command: 'checkmake'
    lint-stdin: true

  markdown-markdownlint: &markdown-markdownlint
    lint-command: 'markdownlint -s -c %USERPROFILE%\.markdownlintrc'
    lint-stdin: true
    lint-formats:
      - '%f:%l %m'
      - '%f:%l:%c %m'
      - '%f: %l: %m'

  markdown-pandoc: &markdown-pandoc
    format-command: 'pandoc -f markdown -t gfm -sp --tab-stop=2'

  rst-pandoc: &rst-pandoc
    format-command: 'pandoc -f rst -t rst -s --columns=79'

  rst-lint: &rst-lint
    lint-command: 'rst-lint'
    lint-formats:
      - '%tNFO %f:%l %m'
      - '%tARNING %f:%l %m'
      - '%tRROR %f:%l %m'
      - '%tEVERE %f:%l %m'

  yaml-yamllint: &yaml-yamllint
    lint-command: 'yamllint -f parsable -'
    lint-stdin: true

  python-flake8: &python-flake8
    lint-command: 'flake8 --stdin-display-name ${INPUT} -'
    lint-stdin: true
    lint-formats:
      - '%f:%l:%c: %m'

  python-mypy: &python-mypy
    lint-command: 'mypy --show-column-numbers'
    lint-formats:
      - '%f:%l:%c: %trror: %m'
      - '%f:%l:%c: %tarning: %m'
      - '%f:%l:%c: %tote: %m'

  python-black: &python-black
    format-command: 'black --quiet -'
    format-stdin: true

  python-autopep8: &python-autopep8
    format-command: 'autopep8 -'
    format-stdin: true

  python-yapf: &python-yapf
    format-command: 'yapf --quiet'
    format-stdin: true

  python-isort: &python-isort
    format-command: 'isort --quiet -'
    format-stdin: true

  python-pylint: &python-pylint
    lint-command: 'pylint --output-format text --score no --msg-template {path}:{line}:{column}:{C}:{msg} ${INPUT}'
    lint-stdin: false
    lint-formats:
      - '%f:%l:%c:%t:%m'
    lint-offset-columns: 1
    lint-category-map:
      I: H
      R: I
      C: I
      W: W
      E: E
      F: E

  dockerfile-hadolint: &dockerfile-hadolint
    lint-command: 'hadolint'
    lint-formats:
      - '%f:%l %m'

  sh-shellcheck: &sh-shellcheck
    lint-command: 'shellcheck -f gcc -x'
    lint-source: 'shellcheck'
    lint-formats:
      - '%f:%l:%c: %trror: %m'
      - '%f:%l:%c: %tarning: %m'
      - '%f:%l:%c: %tote: %m'

  sh-shfmt: &sh-shfmt
    format-command: 'shfmt -ci -s -bn'
    format-stdin: true

  javascript-eslint: &javascript-eslint
    lint-command: 'eslint -f visualstudio --stdin --stdin-filename ${INPUT}'
    lint-ignore-exit-code: true
    lint-stdin: true
    lint-formats:
      - "%f(%l,%c): %tarning %m"
      - "%f(%l,%c): %rror %m"


  php-phpstan: &php-phpstan
    lint-command: './vendor/bin/phpstan analyze --error-format raw --no-progress'

  php-psalm: &php-psalm
    lint-command: './vendor/bin/psalm --output-format=emacs --no-progress'
    lint-formats:
      - '%f:%l:%c:%trror - %m'
      - '%f:%l:%c:%tarning - %m'

  html-prettier: &html-prettier
    format-command: './node_modules/.bin/prettier ${--tab-width:tabWidth} ${--single-quote:singleQuote} --parser html'

  css-prettier: &css-prettier
    format-command: './node_modules/.bin/prettier ${--tab-width:tabWidth} ${--single-quote:singleQuote} --parser css'

  json-prettier: &json-prettier
    format-command: './node_modules/.bin/prettier ${--tab-width:tabWidth} --parser json'

  json-jq: &json-jq
    lint-command: 'jq .'

  json-fixjson: &json-fixjson
    format-command: 'fixjson'

  csv-csvlint: &csv-csvlint
    lint-command: 'csvlint'

  lua-lua-format: &lua-lua-format
    format-command: 'lua-format -i'
    format-stdin: true

  blade-blade-formatter: &blade-blade-formatter
    format-command: 'blade-formatter --stdin'
    format-stdin: true

  mix_credo: &mix_credo
    lint-command: "mix credo suggest --format=flycheck --read-from-stdin ${INPUT}"
    lint-stdin: true
    lint-formats:
      - '%f:%l:%c: %t: %m'
      - '%f:%l: %t: %m'
    root-markers:
      - mix.lock
      - mix.exs

languages:
  text:
    - <<: *pen-world-language-lint-and-format
    - <<: *pen-world-language-completion
    - <<: *glossary1

  global:
    - <<: *pen-world-language-lint-and-format
    - <<: *pen-world-language-completion
    - <<: *glossary1

  elisp:
    - <<: *pen-world-language-lint-and-format
    - <<: *pen-world-language-completion
    - <<: *glossary1-elisp

  org:
    - <<: *pen-world-language-lint-and-format
    - <<: *pen-world-language-completion
    - <<: *glossary1

  awk:
    - <<: *pen-programming-language-lint-and-format
    - <<: *pen-programming-language-completion
    - <<: *glossary1

  eruby:
    - <<: *pen-programming-language-lint-and-format

  vim:
    - <<: *pen-programming-language-lint-and-format

  make:
    - <<: *pen-programming-language-lint-and-format

  markdown:
    - <<: *pen-programming-language-lint-and-format
    - <<: *markdown-pandoc

  rst:
    # liter
    - <<: *rst-lint
    # formatter
    - <<: *rst-pandoc

  yaml:
    - <<: *yaml-yamllint

  python:
    - <<: *python-flake8
    - <<: *python-mypy
    # - <<: *python-autopep8
    # - <<: *python-yapf
    - <<: *python-black
    - <<: *python-isort

  dockerfile:
    - <<: *dockerfile-hadolint

  sh:
    - <<: *sh-shellcheck
    - <<: *sh-shfmt

  javascript:
    - <<: *javascript-eslint

  php:
    - <<: *php-phpstan
    - <<: *php-psalm

  html:
    - <<: *html-prettier

  css:
    - <<: *css-prettier

  json:
    - <<: *json-jq
    - <<: *json-fixjson
    # - <<: *json-prettier

  csv:
    - <<: *csv-csvlint

  lua:
    - <<: *lua-lua-format

  blade:
    - <<: *blade-blade-formatter

  elixir:
    - <<: *mix_credo

  _:
    - <<: *glossary1
