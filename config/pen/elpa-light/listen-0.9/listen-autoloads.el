;;; listen-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from listen.el

(autoload 'listen-play "listen" "\
Play FILE with PLAYER.
Interactively, uses the default player.

(fn PLAYER FILE)" t)
(defvar listen-mode nil "\
Non-nil if Listen mode is enabled.
See the `listen-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `listen-mode'.")
(custom-autoload 'listen-mode "listen" nil)
(autoload 'listen-mode "listen" "\
Listen to queues of tracks and show status in mode line.

This is a global minor mode.  If called interactively, toggle the
`Listen mode' mode.  If the prefix argument is positive, enable
the mode,  and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='listen-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
 (autoload 'listen-menu "listen" nil t)
(defalias 'listen #'listen-menu)
(register-definition-prefixes "listen" '("listen-"))


;;; Generated autoloads from listen-info.el

(register-definition-prefixes "listen-info" '("listen-info--"))


;;; Generated autoloads from listen-lib.el

(register-definition-prefixes "listen-lib" '("listen-"))


;;; Generated autoloads from listen-library.el

(autoload 'listen-library "listen-library" "\
Show a library view of TRACKS.
PATHS is a list of `listen-track' objects, or a function which
returns them.  Interactively, with prefix, NAME may be specified
to show in the mode line and bookmark name.  BUFFER may be
specified in which to show the view.

(fn TRACKS &key NAME BUFFER)" t)
(autoload 'listen-library--bookmark-handler "listen-library" "\
Set current buffer to BOOKMARK's listen library.

(fn BOOKMARK)")
(register-definition-prefixes "listen-library" '("listen-library-"))


;;; Generated autoloads from listen-mpd.el

(autoload 'listen-library-from-mpd "listen-mpd" "\
Show library view of TRACKS selected from MPD library.
With prefix, select individual tracks with
`completing-read-multiple'; otherwise show all results.  NAME is
applied to the buffer.

(fn TRACKS &key NAME)" t)
(autoload 'listen-queue-add-from-mpd "listen-mpd" "\
Add TRACKS (selected from MPD library) to QUEUE.

(fn TRACKS QUEUE)" t)
(autoload 'listen-mpd-tracks-matching "listen-mpd" "\
Return tracks matching QUERY on TAG.
If SELECT-TAG-P, prompt for TAG with completion.  If QUERY is
nil, read it.

(fn QUERY &key (TAG \"file\") SELECT-TAG-P)")
(autoload 'listen-mpd-completing-read "listen-mpd" "\
Return files selected from MPD library.
Searches by TAG; or if SELECT-TAG-P, tag is selected with
completion.

(fn &key (TAG \\='file) SELECT-TAG-P)")
(register-definition-prefixes "listen-mpd" '("listen-mpd-track-for"))


;;; Generated autoloads from listen-queue.el

(autoload 'listen-queue "listen-queue" "\
Show listen QUEUE.

(fn QUEUE)" t)
(autoload 'listen-queue-play "listen-queue" "\
Play QUEUE and optionally TRACK in it.
Interactively, selected queue with completion; and with prefix,
select track as well.

(fn QUEUE &optional (TRACK (car (listen-queue-tracks queue))))" t)
(autoload 'listen-queue-new "listen-queue" "\
Add and show a new queue having NAME.

(fn NAME)" t)
(autoload 'listen-queue-add-files "listen-queue" "\
Add FILES to QUEUE.

(fn FILES QUEUE)" t)
(autoload 'listen-view-track "listen-queue" "\
View information about TRACK.

(fn TRACK)" t)
(autoload 'listen-queue--bookmark-handler "listen-queue" "\
Set current buffer to BOOKMARK's listen queue.

(fn BOOKMARK)")
(autoload 'listen-queue-list--bookmark-handler "listen-queue" "\
Set current buffer to `listen-queue-list'.

(fn BOOKMARK)")
(register-definition-prefixes "listen-queue" '("listen-"))

;;; End of scraped data

(provide 'listen-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; listen-autoloads.el ends here
