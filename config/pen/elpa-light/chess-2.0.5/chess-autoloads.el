;;; chess-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from chess.el

(autoload 'chess "chess" "\
Start a game of chess, playing against ENGINE (a module name).
With prefix argument, prompt for the engine to play against.
Otherwise use `chess-default-engine' to determine the engine.

(fn &optional ENGINE DISABLE-POPUP ENGINE-RESPONSE-HANDLER &rest ENGINE-CTOR-ARGS)" t)
(defalias 'chess-session 'chess)
(define-key menu-bar-games-menu [chess] '(menu-item "Chess" chess :help "Play Chess"))
(autoload 'chess-create-display "chess" "\
Create a display, letting the user's customization decide the style.
If MODULES-TOO is non-nil, also create and associate the modules
listed in `chess-default-modules'.

(fn PERSPECTIVE &optional MODULES-TOO)")
(register-definition-prefixes "chess" '("chess-"))


;;; Generated autoloads from chess-ai.el

(register-definition-prefixes "chess-ai" '("chess-ai-"))


;;; Generated autoloads from chess-algebraic.el

(register-definition-prefixes "chess-algebraic" '("chess-"))


;;; Generated autoloads from chess-announce.el

(register-definition-prefixes "chess-announce" '("chess-"))


;;; Generated autoloads from chess-autosave.el

(register-definition-prefixes "chess-autosave" '("chess-"))


;;; Generated autoloads from chess-chat.el

(register-definition-prefixes "chess-chat" '("chess-chat-"))


;;; Generated autoloads from chess-clock.el

(register-definition-prefixes "chess-clock" '("chess-clock-"))


;;; Generated autoloads from chess-common.el

(register-definition-prefixes "chess-common" '("chess-"))


;;; Generated autoloads from chess-crafty.el

(register-definition-prefixes "chess-crafty" '("chess-crafty-"))


;;; Generated autoloads from chess-database.el

(register-definition-prefixes "chess-database" '("chess-database-"))


;;; Generated autoloads from chess-display.el

(register-definition-prefixes "chess-display" '("chess-"))


;;; Generated autoloads from chess-eco.el

(register-definition-prefixes "chess-eco" '("chess-"))


;;; Generated autoloads from chess-engine.el

(register-definition-prefixes "chess-engine" '("chess-engine-"))


;;; Generated autoloads from chess-epd.el

(register-definition-prefixes "chess-epd" '("chess-"))


;;; Generated autoloads from chess-fen.el

(register-definition-prefixes "chess-fen" '("chess-"))


;;; Generated autoloads from chess-file.el

(register-definition-prefixes "chess-file" '("chess-file-"))


;;; Generated autoloads from chess-fruit.el

(register-definition-prefixes "chess-fruit" '("chess-fruit-"))


;;; Generated autoloads from chess-game.el

(register-definition-prefixes "chess-game" '("chess-game-"))


;;; Generated autoloads from chess-glaurung.el

(register-definition-prefixes "chess-glaurung" '("chess-glaurung-"))


;;; Generated autoloads from chess-gnuchess.el

(register-definition-prefixes "chess-gnuchess" '("chess-gnuchess-"))


;;; Generated autoloads from chess-ics.el

(autoload 'chess-ics "chess-ics" "\
Connect to an Internet Chess Server.

(fn SERVER PORT &optional HANDLE PASSWORD-OR-FILENAME HELPER &rest HELPER-ARGS)" t)
(define-key menu-bar-games-menu [chess-ics] '(menu-item "Internet Chess Servers" chess-ics :help "Play Chess on the Internet"))
(register-definition-prefixes "chess-ics" '("chess-ic"))


;;; Generated autoloads from chess-ics1.el

(register-definition-prefixes "chess-ics1" '("chess-"))


;;; Generated autoloads from chess-images.el

(register-definition-prefixes "chess-images" '("chess-images-"))


;;; Generated autoloads from chess-input.el

(register-definition-prefixes "chess-input" '("chess-"))


;;; Generated autoloads from chess-irc.el

(register-definition-prefixes "chess-irc" '("chess-irc-"))


;;; Generated autoloads from chess-kibitz.el

(register-definition-prefixes "chess-kibitz" '("chess-kibitz-"))


;;; Generated autoloads from chess-link.el

(autoload 'chess-link "chess-link" "\
Play out a game between two engines, and watch the progress.
If you want to run an engine as a bot, make the transport the first
engine, and the computer the second engine.

(fn FIRST-ENGINE-TYPE SECOND-ENGINE-TYPE)" t)
(register-definition-prefixes "chess-link" '("chess-link-"))


;;; Generated autoloads from chess-log.el

(register-definition-prefixes "chess-log" '("chess-log"))


;;; Generated autoloads from chess-message.el

(register-definition-prefixes "chess-message" '("chess-"))


;;; Generated autoloads from chess-module.el

(register-definition-prefixes "chess-module" '("chess-"))


;;; Generated autoloads from chess-network.el

(register-definition-prefixes "chess-network" '("chess-network-"))


;;; Generated autoloads from chess-none.el

(register-definition-prefixes "chess-none" '("chess-none-"))


;;; Generated autoloads from chess-perft.el

(register-definition-prefixes "chess-perft" '("chess-perft"))


;;; Generated autoloads from chess-pgn.el

(autoload 'chess-pgn-read "chess-pgn" "\
Read and display a PGN game after point.

(fn &optional FILE)" t)
(autoload 'chess-pgn-mode "chess-pgn" "\
A mode for editing chess PGN files.

(fn)" t)
(defalias 'pgn-mode 'chess-pgn-mode)
(add-to-list 'auto-mode-alist '("\\.pgn\\'" . chess-pgn-mode))
(register-definition-prefixes "chess-pgn" '("chess-"))


;;; Generated autoloads from chess-phalanx.el

(register-definition-prefixes "chess-phalanx" '("chess-phalanx-"))


;;; Generated autoloads from chess-plain.el

(register-definition-prefixes "chess-plain" '("chess-plain-"))


;;; Generated autoloads from chess-ply.el

(register-definition-prefixes "chess-ply" '("chess-"))


;;; Generated autoloads from chess-polyglot.el

(register-definition-prefixes "chess-polyglot" '("chess-polyglot-"))


;;; Generated autoloads from chess-pos.el

(register-definition-prefixes "chess-pos" '("chess-"))


;;; Generated autoloads from chess-puzzle.el

(autoload 'chess-puzzle "chess-puzzle" "\
Pick a random puzzle from FILE, and solve it against the default engine.
The spacebar in the display buffer is bound to `chess-puzzle-next',
making it easy to go on to the next puzzle once you've solved one.

(fn FILE &optional INDEX)" t)
(register-definition-prefixes "chess-puzzle" '("chess-puzzle-"))


;;; Generated autoloads from chess-random.el

(autoload 'chess-fischer-random-position "chess-random" "\
Generate a Fischer Random style position.")
(register-definition-prefixes "chess-random" '("chess-shuffle-vector" "pieces-vector"))


;;; Generated autoloads from chess-scid.el

(register-definition-prefixes "chess-scid" '("chess-scid-"))


;;; Generated autoloads from chess-sjeng.el

(register-definition-prefixes "chess-sjeng" '("chess-sjeng-"))


;;; Generated autoloads from chess-sound.el

(register-definition-prefixes "chess-sound" '("chess-sound"))


;;; Generated autoloads from chess-stockfish.el

(register-definition-prefixes "chess-stockfish" '("chess-stockfish-"))


;;; Generated autoloads from chess-transport.el

(register-definition-prefixes "chess-transport" '("chess-transport-"))


;;; Generated autoloads from chess-tutorial.el

(autoload 'chess-tutorial "chess-tutorial" "\
A simple chess training display." t)
(register-definition-prefixes "chess-tutorial" '("chess-tutorial-knight-1"))


;;; Generated autoloads from chess-ucb.el

(register-definition-prefixes "chess-ucb" '("chess-ucb-"))


;;; Generated autoloads from chess-uci.el

(register-definition-prefixes "chess-uci" '("chess-uci-"))


;;; Generated autoloads from chess-var.el

(register-definition-prefixes "chess-var" '("chess-var-"))

;;; End of scraped data

(provide 'chess-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; chess-autoloads.el ends here
