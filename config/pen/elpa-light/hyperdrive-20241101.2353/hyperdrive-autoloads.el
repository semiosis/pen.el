;;; hyperdrive-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from hyperdrive.el

(autoload 'hyperdrive-start "hyperdrive" "\
Start the gateway if not already running.
Calls function set in option `hyperdrive-gateway-start-function',
which see." t)
(autoload 'hyperdrive-stop "hyperdrive" "\
Stop the gateway if running.
Calls function set in option `hyperdrive-gateway-stop-function',
which see." t)
(autoload 'hyperdrive-gateway-version "hyperdrive" "\
Say version number of gateway and copy it to the `kill-ring'.
Return version if gateway is running; otherwise signal an error." t)
(autoload 'hyperdrive-new "hyperdrive" "\
Open new hyperdrive for SEED.

If SEED is not currently used as the petname for another
hyperdrive, the new hyperdrive's petname will be set to SEED.

(fn SEED)" t)
(autoload 'hyperdrive-mark-as-safe "hyperdrive" "\
Mark HYPERDRIVE as safe according to SAFEP.
Interactively, prompt for hyperdrive and action.

(fn HYPERDRIVE SAFEP)" t)
(autoload 'hyperdrive-purge "hyperdrive" "\
Purge all data corresponding to HYPERDRIVE.

(fn HYPERDRIVE)" t)
(autoload 'hyperdrive-set-petname "hyperdrive" "\
Set HYPERDRIVE's PETNAME.
Entering an empty or blank string unsets PETNAME.
Returns HYPERDRIVE.

With universal prefix argument \\[universal-argument], always
prompt for a hyperdrive.

(fn PETNAME HYPERDRIVE)" t)
(autoload 'hyperdrive-set-nickname "hyperdrive" "\
Set HYPERDRIVE's NICKNAME.
Returns HYPERDRIVE.

Asynchronous callback calls THEN with the updated hyperdrive as
its only argument.

With universal prefix argument \\[universal-argument], always
prompt for a hyperdrive.

(fn NICKNAME HYPERDRIVE &key (THEN #\\='ignore))" t)
(autoload 'hyperdrive-mode "hyperdrive" "\
Minor mode for buffers opened from hyperdrives.

This is a minor mode.  If called interactively, toggle the
`hyperdrive mode' mode.  If the prefix argument is positive,
enable the mode,  and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `hyperdrive-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{hyperdrive-mode-map}

(fn &optional ARG)")
(autoload 'hyperdrive-find-file "hyperdrive" "\
Find hyperdrive ENTRY.
Interactively, prompt for known hyperdrive and path.
With universal prefix argument \\[universal-argument], prompt for version.

(fn ENTRY)" t)
(autoload 'hyperdrive-view-file "hyperdrive" "\
View ENTRY in `view-mode', returning to previous buffer when done.
Interactively, prompt for known hyperdrive and path.
With universal prefix argument \\[universal-argument], prompt for version.

(fn ENTRY)" t)
(autoload 'hyperdrive-open-url "hyperdrive" "\
Open hyperdrive URL.

(fn URL)" t)
(autoload 'hyperdrive-delete "hyperdrive" "\
Delete ENTRY, then call THEN with response.
Call ELSE with `plz-error' struct if request fails.
Interactively, delete current file ENTRY or ENTRY at point in a
directory.  Otherwise, or with universal prefix argument
\\[universal-argument], prompt for ENTRY.

(fn ENTRY &key (THEN #\\='ignore) (ELSE #\\='ignore))" t)
(function-put 'hyperdrive-delete 'lisp-indent-function 'defun)
(autoload 'hyperdrive-download "hyperdrive" "\
Download ENTRY to FILENAME on disk.
Interactively, download current hyperdrive file or file at point
in a directory.  Otherwise, or with universal prefix argument
\\[universal-argument], prompt for ENTRY.

(fn ENTRY FILENAME)" t)
(autoload 'hyperdrive-download-url "hyperdrive" "\
Load contents at URL as a file to store on disk at FILENAME.

(fn URL FILENAME)" t)
(autoload 'hyperdrive-write-buffer "hyperdrive" "\
Write current buffer to new hyperdrive ENTRY.
If file already exists and OVERWRITEP is nil, prompt the user to
overwrite.

With universal prefix argument \\[universal-argument], overwrite
without prompting.

This function is for interactive use only since it calls
`select-safe-coding-system', which may prompt for input.
For non-interactive use, see `hyperdrive-write'.

(fn ENTRY &optional OVERWRITEP)" t)
(autoload 'hyperdrive-blob-mode "hyperdrive" "\
Minor mode for visiting previous versions of hyperdrive files.

This is a minor mode.  If called interactively, toggle the
`hyperdrive-blob mode' mode.  If the prefix argument is positive,
enable the mode,  and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `hyperdrive-blob-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)")
(autoload 'hyperdrive-bookmark-handler "hyperdrive" "\
Handler for Hyperdrive BOOKMARK.

(fn BOOKMARK)")
(autoload 'hyperdrive-upload-file "hyperdrive" "\
Upload FILENAME to ENTRY.
Interactively, read FILENAME and ENTRY from the user.
After successful upload, call THEN.  When QUEUE, use it.

(fn FILENAME ENTRY &key QUEUE (THEN (lambda (&rest _ignore) (h/open (h/parent entry)) (h/message \"Uploaded: \\=\\\"%s\\=\\\".\" (he/url entry)))))" t)
(function-put 'hyperdrive-upload-file 'lisp-indent-function 'defun)
(defvar hyperdrive-menu-bar-mode nil "\
Non-nil if Hyperdrive-Menu-Bar mode is enabled.
See the `hyperdrive-menu-bar-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `hyperdrive-menu-bar-mode'.")
(custom-autoload 'hyperdrive-menu-bar-mode "hyperdrive" nil)
(autoload 'hyperdrive-menu-bar-mode "hyperdrive" "\
Show \"Hyperdrive\" menu bar.

This is a global minor mode.  If called interactively, toggle the
`Hyperdrive-Menu-Bar mode' mode.  If the prefix argument is
positive, enable the mode,  and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='hyperdrive-menu-bar-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'hyperdrive-customize "hyperdrive" "\
Customize Hyperdrive options." t)
(autoload 'hyperdrive-info-manual "hyperdrive" "\
Open Hyperdrive info manual." t)
(with-eval-after-load 'markdown-mode (when (boundp 'markdown-follow-link-functions) (cl-pushnew #'hyperdrive--markdown-follow-link markdown-follow-link-functions)))
(autoload 'hyperdrive-install "hyperdrive" "\
Download and install the gateway.
If FORCEP, don't prompt for confirmation before downloading.

(fn &optional FORCEP)" t)
(register-definition-prefixes "hyperdrive" '("h/"))


;;; Generated autoloads from hyperdrive-describe.el

(autoload 'hyperdrive-describe-hyperdrive "hyperdrive-describe" "\
Display various information about HYPERDRIVE.

With universal prefix argument \\[universal-argument], always
prompt for a hyperdrive.

(fn HYPERDRIVE)" t)
(register-definition-prefixes "hyperdrive-describe" '("h/describe-"))


;;; Generated autoloads from hyperdrive-diff.el

(autoload 'hyperdrive-diff-file-entries "hyperdrive-diff" "\
Diff OLD-ENTRY and NEW-ENTRY, then call THEN in diff buffer.
Call ELSE if either request fails.
This function is intended to diff files, not directories.

(fn OLD-ENTRY NEW-ENTRY &key THEN)")
(function-put 'hyperdrive-diff-file-entries 'lisp-indent-function 'defun)
(register-definition-prefixes "hyperdrive-diff" '("h/diff-"))


;;; Generated autoloads from hyperdrive-dir.el

(autoload 'hyperdrive-dir-handler "hyperdrive-dir" "\
Show DIRECTORY-ENTRY.
If THEN, call it in the directory buffer with no arguments.

(fn DIRECTORY-ENTRY &key THEN)")
(register-definition-prefixes "hyperdrive-dir" '("h/" "hyperdrive-dir--invalidate-entry"))


;;; Generated autoloads from hyperdrive-download-monitor.el

(register-definition-prefixes "hyperdrive-download-monitor" '("h/"))


;;; Generated autoloads from hyperdrive-ewoc.el

(register-definition-prefixes "hyperdrive-ewoc" '("h/ewoc"))


;;; Generated autoloads from hyperdrive-history.el

(autoload 'hyperdrive-history "hyperdrive-history" "\
Display version history for current hyperdrive ENTRY.

Interactively, open version history for current file ENTRY or
ENTRY at point in a directory.  Otherwise, or with universal
prefix argument \\[universal-argument], prompt for ENTRY.

(fn ENTRY)" t)
(register-definition-prefixes "hyperdrive-history" '("h/history-" "hyperdrive-history--invalidate-entry"))


;;; Generated autoloads from hyperdrive-lib.el

(autoload 'hyperdrive-by-slot "hyperdrive-lib" "\
Return persisted hyperdrive struct whose SLOT matches VALUE.
Otherwise, return nil.  SLOT may be one of

- seed
- petname
- public-key

(fn SLOT VALUE)")
(register-definition-prefixes "hyperdrive-lib" '("h/" "he/"))


;;; Generated autoloads from hyperdrive-menu.el

 (autoload 'hyperdrive-menu "hyperdrive-menu" nil t)
 (autoload 'hyperdrive-menu-hyperdrive "hyperdrive-menu" nil t)
(register-definition-prefixes "hyperdrive-menu" '("h/m"))


;;; Generated autoloads from hyperdrive-mirror.el

(autoload 'hyperdrive-mirror "hyperdrive-mirror" "\
Mirror SOURCE to TARGET-DIR in HYPERDRIVE.

Only mirror paths within SOURCE for which FILTER returns
non-nil.  FILTER may be a function, which receives the expanded
filename path as its argument, or a regular expression, which is
tested against each expanded filename path.  SOURCE is a directory
name.

When TARGET-DIR is nil, SOURCE is mirrored into the
hyperdrive's root directory \"/\".

Opens the \"*hyperdrive-mirror*\" buffer with the list of files to
be uploaded and the URL at which each file will be published.  See
`hyperdrive-mirror-mode'.

When NO-CONFIRM is non-nil, upload without prompting.

Interactively, with one universal prefix argument
\\[universal-argument], prompt for filter, otherwise mirror
all files. With two universal prefix arguments
\\[universal-argument] \\[universal-argument], prompt for
filter and set NO-CONFIRM to t.

(fn SOURCE HYPERDRIVE TARGET-DIR &key (FILTER #\\='always) NO-CONFIRM)" t)
(register-definition-prefixes "hyperdrive-mirror" '("h/"))


;;; Generated autoloads from hyperdrive-org.el

(autoload 'hyperdrive-org-link-store "hyperdrive-org" "\
Store an Org link to the entry at point in current Org buffer.
To be called by `org-store-link'.  Calls `org-link-store-props',
which see.")
(autoload 'hyperdrive-org-link-follow "hyperdrive-org" "\
Follow hyperdrive URL.

(fn URL &optional PREFIX)")
(with-eval-after-load 'org (org-link-set-parameters "hyper" :store #'hyperdrive-org-link-store :follow #'hyperdrive-org-link-follow :complete #'hyperdrive-org-link-complete) (with-eval-after-load 'hyperdrive (cl-pushnew #'hyperdrive-org--open-at-point org-open-at-point-functions)))
(register-definition-prefixes "hyperdrive-org" '("h/org-"))


;;; Generated autoloads from hyperdrive-vars.el

(register-definition-prefixes "hyperdrive-vars" '("h/"))

;;; End of scraped data

(provide 'hyperdrive-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; hyperdrive-autoloads.el ends here
