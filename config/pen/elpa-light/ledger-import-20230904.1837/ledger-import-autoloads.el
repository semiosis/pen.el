;;; ledger-import-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from ledger-import.el

(autoload 'ledger-import-pop-to-buffer "ledger-import" "\
Make BUFFER visible, `ledger-import-buffer' if nil.

(fn &optional BUFFER)" t)
(autoload 'ledger-import-convert-ofx-to-ledger "ledger-import" "\
Convert ofx data for ACCOUNT in IN-BUFFER to Ledger format.
Display result in `ledger-import-buffer' and execute CALLBACK when done.

`ledger-import-autosync-command' is used to do the conversion.

ACCOUNT is a list whose items are defined in `ledger-import-accounts'.

If LEDGER-FILE is non nil, use transactions from this file to
guess related account names.

(fn ACCOUNT IN-BUFFER &optional CALLBACK LEDGER-FILE)" t)
(autoload 'ledger-import-fetch-boobank "ledger-import" "\
Use woob bank to fetch OFX data for FETCHER-ACCOUNT, a string.
When done, execute CALLBACK with buffer containing OFX data.

RETRY is a number (default 3) indicating the number of times
woob bank is executed if it fails.  This is because woob bank tends
to fail often and restarting usually solves the problem.

ADDITIONAL-PARAMETERS is a list of strings to pass to woob bank.

(fn FETCHER-ACCOUNT &optional CALLBACK ADDITIONAL-PARAMETERS RETRY)" t)
(autoload 'ledger-import-account "ledger-import" "\
Fetch and convert transactions of ACCOUNT.
Write the result in `ledger-import-buffer' and execute CALLBACK when done.

ACCOUNT is a list whose items are defined in
`ledger-import-accounts'.  Interactively, user is asked to choose
an account from `ledger-import-accounts'.

If LEDGER-FILE is non nil, use transactions from this file to
guess related account names.

(fn ACCOUNT &optional CALLBACK LEDGER-FILE)" t)
(autoload 'ledger-import-all-accounts "ledger-import" "\
Fetch transactions from all accounts and convert to Ledger format.
Accounts are listed `ledger-import-accounts'.

If LEDGER-FILE is non nil, use transactions from this file to
guess related account names.

(fn &optional LEDGER-FILE)" t)
(register-definition-prefixes "ledger-import" '("ledger-import-"))

;;; End of scraped data

(provide 'ledger-import-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; ledger-import-autoloads.el ends here
