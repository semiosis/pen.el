include: Generic Interpreter/3
task: Imagine a <language>-db interpreter
language: prolog
tags: prolog interpreter
subprompts:
- kickstarter: |+
    $ cat > db.pl <<HEREDOC
    food(burger).
    food(sandwich).
    food(pizza).
    lunch(sandwich).
    dinner(pizza).
    meal(X) :- food(X).
    HEREDOC
    $ gprolog
    GNU Prolog 1.4.5 (64 bits)
    Compiled Feb 23 2020, 20:14:50 with gcc
    By Daniel Diaz
    Copyright (C) 1999-2020 Daniel Diaz
    | ?- consult(db).
    compiling /home/user/db.pro for byte code...
    /home/user/db.pro compiled, 6 lines read - 700 bytes written, 3 ms
    
    yes
    | ?-
prompt: |+
    <history><expression>
# Double newline is a better default stop sequence
# Because 200 tokens will take a long time to generate.
stop-sequences:
- "\n\n"
- "| ?- "
vars:
- history
- expression
var-defaults:
- kickstarter
max-generated-tokens: 200
# sed wont even run if its input is empty so
# the postpostprocessor: cant ensure a prompt.
# But we cant force it.
postpostprocessor: pen-str newline-if-empty | sed -z 's/\(| ?-\)\?$/\n| ?- /'
examples:
- "| ?- "
- "write('Hello World')."
n-completions: 10
# validator: sed -z 's/\n\n.*//' | sed -n -z '/^\n[^?].*\n?-/p' | grep -qP .
# postprocessor: sed -z 's/\n\n.*//'