include: Generic Interpreter/3
task: Imagine a <language>-pseudocode interpreter
tags: prolog interpreter pseudocode
language: prolog
subprompts:
- kickstarter: |+
    % prolog
    food(burger).
    food(sandwich).
    food(pizza).
    lunch(sandwich).
    dinner(pizza).
    meal(X) :- food(X).
    ?- consult(db).
    true.
    ?- 
prompt: |+
    <history><expression>
# Double newline is a better default stop sequence
# Because 200 tokens will take a long time to generate.
stop-sequences:
- "\n\n"
- "?- "
vars:
- history
- expression
var-defaults:
- kickstarter
max-generated-tokens: 200
# sed wont even run if its input is empty so
# the postpostprocessor: cant ensure a prompt.
# But we cant force it.
postpostprocessor: pen-str newline-if-empty | sed -z 's/\(?-\)\?$/\n?- /'
examples:
- "?- "
- "write('Hello World')."
n-completions: 10
# validator: sed -z 's/\n\n.*//' | sed -n -z '/^\n[^?].*\n?-/p' | grep -qP .
# postprocessor: sed -z 's/\n\n.*//'