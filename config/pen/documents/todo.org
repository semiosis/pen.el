#+BEGIN_SRC text -n :async :results verbatim code
  23 Jesus replied, “If anyone loves Me, he will keep My word. My Father will love him, and We will come to him and make    
  Our home with him.  24 Whoever does not love Me does not keep My words. The word that you hear is not My own, but it is    
  from the Father who sent Me.
#+END_SRC

* 
[[https://www.youtube.com/watch?v=HddkucqSzSM][Official Trailer | The Secret Life of Walter Mitty {2013} | 20th Century FOX - YouTube]]

* Blog about gyrocopters, maybe
[[https://www.youtube.com/watch?v=wO8NRIkRZzc][What's so Special about a Gyroplane? - YouTube]]

[[chrome:gyrocopter schematics]]

https://www.buildagyrocopter.com/downloads/
https://www.buildagyrocopter.com/downloads/honey-bee-gyrocopter/

* TODO Respond to Milly and see Greg
https://mail.google.com/mail/u/0/#inbox/FMfcgzGpGBBmgsjSPdLFzsNfktfzWjnL

* TODO Look into Canon and Heresy

In his Church History, Philip of Side states
that "the ancients absolutely refused the
Gospel of the Hebrews, the Gospel of Peter and
the Gospel of Thomas, which they considered
the work of heretics."

** TODO Look at
*** Christianity
- https://en.wikipedia.org/wiki/Docetism
- https://en.wikipedia.org/wiki/Biblical_canon
- https://en.wikipedia.org/wiki/List_of_Gospels
- https://en.wikipedia.org/wiki/Apocalypse_of_Peter
- https://www.gotquestions.org/Acts-of-John.html
- [[https://en.wikipedia.org/wiki/Gospel_of_the_Hebrews][Gospel of the Hebrews]]
- [[https://en.wikipedia.org/wiki/Gospel_of_Peter][Gospel of Peter]]

** Philosophy
- https://en.wikipedia.org/wiki/Moral_influence_theory_of_atonement
- https://en.wikipedia.org/wiki/Apollonius_of_Tyana

* 
Wednesday 11am
Yup, 12.15 Thursday at the Black Dog. On me of course.

* TODO Do an overview of the canonical books

* TODO Do an overview of the extra-canonical books

| Title               | Approve |
|---------------------+---------|
| Gospel of Thomas    | Yes     |
| Gospel of Philip    | Yes     |
| Gospel of Nicodemus | Yes     |
| [[https://www.gotquestions.org/Acts-of-John.html][Acts of John]]        | No      |

* TODO Write about Philosophy
Go through Wikipedia stuff, and Otago Philosophy papers.
Write about philosophy.

* TODO Also write about surrealism
This is important to do.

* TODO Make a binding for both vim and emacs to fuzzy search for similar 'types' of org files from the current one

For example, when in the topmost 'perspective.org' file, fuzzy search downwards
for all 'perspective.org' files.

This is so I can more easily organise my writing.

* TODO Read and learn the book of Acts
- Take it seriously

* TODO Blog about this - take it all seriously. Interpret scripture, this is what I must do!
[[https://www.youtube.com/watch?v=ZDOh3jWiimE][Acts of Peter  Untold in the Bible! - YouTube]]

If you continue not in your
former works committed according to the
tradition of your father's and abstain from
every deceit and wrath from all cruelty and
fornication and pollution and pride and
jealousy and insolence and enmity Jesus the
Living God will forgive you what you have done
ignorant Lee wherefore ye servants of God let
every one of you put on peace serenity
mildness faith charity knowledge wisdom love
for the Brotherhood hospitality mercy
moderation chastity goodness righteousness
then you will have an eternity for your guide
the firstborn of every creature and the power
in peace with our Lord.

put on:
https://youtu.be/ZDOh3jWiimE?t=846

* TODO Do not become haughty

* TODO Learn how to translate scripture
Septuagint interlinear

- To get extra insight.

* TODO Write all about the lost gospels
- Try to dispel criticism

* TODO Listen to =Acts=

* TODO Write other people into my story
- Do not be completely solitary

* TODO Message Laria today/tomorrow
** TODO Come up with a list of tests
https://en.wikipedia.org/wiki/Artificial_general_intelligence

- NLP tests
- Turing-test-like tests
  - Melee

* TODO Most of these GitHub organisations are already taken
I should put them under my apologetics organisation.

#+BEGIN_SRC text -n :async :results verbatim code
  Theology Proper / Paterology
  - the study of God the Father.
  
  Christology
  - the study of the Person and work of Jesus Christ.
  
  Pneumatology
  - the study of the Person and work of the Holy Spirit.
  
  Bibliology
  - the study of the Bible.
  
  Soteriology
  - the study of salvation through Jesus Christ.
  
  Christian Anthropology
  - the study of the nature of humanity.
  
  Angelology
  - the study of angels.
  
  Christian Demonology
  - the study of demons.
  
  Ecclesiology
  - the study of the nature and mission of the church.
  
  Eschatology
  - the study of the end times / last days.
#+END_SRC

* TODO Set this up
#+BEGIN_SRC sh -n :sps bash :async :results none
  man vdirsyncer 
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  man 'vdirsyncer' | vs +/"Vdirsyncer  supports  synchronization  with  Google calendars"
#+END_SRC

https://github.com/pimutils/vdirsyncer

Don't use apt.

#+BEGIN_SRC sh -n :sps bash :async :results none
  msudo pip3.6 install 'vdirsyncer'
  msudo pip3.6 install 'vdirsyncer[google]'
#+END_SRC

* TODO Set up =khal=
#+BEGIN_SRC sh -n :sps bash :async :results none
  khal
#+END_SRC

* TODO I must be able to summarise entire youtube videos
- This is really important, actually

* TODO set up a terminal calender system
Yup, 12.15 Thursday at the Black Dog. On me of course.

It's really important that I have this.

https://github.com/insanum/gcalcli

** manage google calendar together with an offline version

* TODO I should definitely make a new github organisation for surrealism
It's important because it's necessarily not defined -- there is freedom to invent it.

* It's important that I build my project, rhizome

* TODO Make it so w3m is also cached

* Consciousness
https://www.frontiersin.org/articles/10.3389/fpsyg.2019.01535/full

* TODO Write about this, it looks extremely interesting
https://en.wikipedia.org/wiki/Cognitive_poetics

I have to become good at pulling together references from arbitrary things I
have learned.

Therefore, I need a search engine.

* I could, if I want, go through all of Mike Winger's videos
But I need to collect the subtitles so I can build up my knowledge graph, mind maps, etc.

* TODO It's really important to create a blog post about the fiction of Heretical Books
[[https://www.youtube.com/watch?v=D2cc_WHVfTg][The Truth About the "Banned Books" of the Bible: Evidence for the Bible pt14 - YouTube]]

It's *really* important to do this.

There are a lot of stories that are simply untrue.

* TODO I should build glossaries that are outside of specific topics
- Glossaries on a topic-of-investigation or project basis.
- Do this so I can pull different areas of study together.

* Moral or Sanctimonious 
https://www.icr.org/article/moral-or-sanctimonious/

* TODO I need a name for surreal art and poetry. Something I am proud of.
I might ditch 'frottage'.

What's a good name?

Ambiguity - something like this.
Interpretation - .

* TODO [#A] Set up a system for symbolising certain things and waiting for reification
- For example the metaetica symbol

- Compass and mirror.
- Divine compass.

** I need a database of symbols!
- This is important

** Yes, it's very important to set this up

* Ethics vs morals
- https://www.diffen.com/difference/Ethics_vs_Morals
- https://www.britannica.com/story/whats-the-difference-between-morality-and-ethics

* TODO Make my own symbol
Compass and mirror

** The masonic symbol is a compass and set square
🧭

** Mirror
- https://symbolsage.com/mirror-symbolism-meaning/

* TODO Build heaps more blogs
Begin separating the content into multiple blogs.

- Do so much work that people think I am multiple people

* TODO Make another git organisation on truth
- Talk about logic
  - weak Kleene scheme
  - strong Kleene scheme
- Talk about alethiology

* TODO Understand truth even better
- This will make me legitimate

* TODO Understand
- weak Kleene scheme
- strong Kleene scheme

* TODO Set up all of my blogs
- Under GitHub, LOL

* TODO I could also blog about physics or chemistry

* TODO Make a github organisation for philosophy
- But I need a good word
greek
philein sophia
philosophía
philosophia
metaphilosophia
metasophia

Already taken.

https://github.com/metasophia

** not taken
phileinsophia
philein-sophia
metaphilosophy
metasophia

** 
https://github.com/metaphilosophy

** I want something in applied moral philosophy
https://en.wikipedia.org/wiki/Applied_philosophy

- meta-ethics
  - metaética

https://github.com/metaetica

** This one is cool
https://github.com/metaphilosophia

* TODO Make another Hugo for talking about apologetics
https://github.com/apologetics

- [[https://www.youtube.com/watch?v=-GAGA9wnJ7k][A Very Challenging "Contradiction" in the Gospels: The Mark Series pt 57 {14:1-12} - YouTube]]

* TODO Otago Philosophy
https://www.otago.ac.nz/philosophy/undergrad/papers.html

e:$NOTES/ws/philosophy/otago.org

* TODO I should write about AI ethics
If I must get a degree in ethics, then sure.

* TODO I must write about surrealism, too

* TODO Learn about scaling laws for LLMs
[[e:/home/shane/Calibre Library/Unknown/Scaling Laws for Neural Language Models (212)/Scaling Laws for Neural Language Models - Unknown.txt]]

[[https://www.youtube.com/watch?v=V8FEFw50lg4][Explaining Neural Scaling Laws - YouTube]]

* TODO Do some studdy into Alignment
e:$NOTES/ws/alignment/glossary.txt
e:$NOTES/ws/scaling-laws/glossary.txt

https://arxiv.org/abs/2001.08361

* TODO Add these guys to my blogs and vlogs
https://www.youtube.com/c/DerekPrinceMinistries
https://www.youtube.com/watch?v=0bpu7hDoWOQ

* TODO I must focus on teaching such as Derek Prince's teaching

* TODO Do a blog article on various rubiks cube TUI games

* TODO Go over as many Derek Prince videos as I can

* TODO Consider learning hercules
https://github.com/wurosh/hercules

* TODO Finish this
e:$HOME/blog/posts/abomination-of-desolation.org

* Shadow of the Kingdom of God
https://biblehub.com/kjv/hebrews/10.htm

e:$HOME/blog/posts/the-shadow-of-the-kingdom-of-god.org

* [#A] This is important
https://github.com/OAI/OpenAPI-Specification

* TODO [#A] Update this for Pen.el
https://github.com/Aleph-Alpha/aleph-alpha-client

* TODO It's really important to set up a system for reading the bible

* Take up cross
[[https://www.youtube.com/watch?v=qp0u_iVsjFw][You Must Stop Doubting - YouTube]]

- Stop what you are doing
  - Take up cross, follow Jesus

* TODO Make a script to split asciicasts
e:$DUMP$NOTES/ws/brogue/25.06.22/pt2.cast

This is about reducing the size in megabytes.

It has to:
- get the timestamp from the first json object
- split the remaining cast into n records (that's easy)
- normalise the frame times, beginning with 0 second for the first frame of each split.

#+BEGIN_SRC sh -n :sps bash :async :results none
  cat $DUMP$NOTES/ws/brogue/25.06.22/pt2.cast | sed 1d | jq '[.[0] - 701, .[1], .[2]]' | v
#+END_SRC

e:$SCRIPTS/asciicast-split

* TODO Learn about AI alignment
e:$NOTES/ws/alignment/glossary.txt

* TODO Read some more about psychic surrealism
- https://www.artdex.com/dreams-fantasies-and-psychic-automatism-surrealism-explained/
- https://en.wikipedia.org/wiki/Remote_viewing

* TODO Talk about this
e:$NOTES/ws/talks/ai-alignment-and-spiritual-alignment

** Go over this
https://en.wikipedia.org/wiki/AI_alignment


* TODO Talk about AI alignment, spiritual alignment, surreality and sentience

* TODO Familiarise myself with the concordance, and this website generally
https://www.blueletterbible.org/lexicon/g4151/kjv/tr/0-1/

* TODO Make more prompts for learning
In need new ways of wrapping them up into programming languages.

* TODO Ensure I can org-clink submatches - this is super important
For example, select the entire list.

- https://www.youtube.com/watch?v=WpYBoEjS4xM
- https://www.youtube.com/watch?v=NI7mJXZlwjs

* TODO It's important to be able to study the scripture without needing internet for it

* TODO Is Jesus a divider?
- I am not a divider am i?
- If you do not hate your father and mother you cannot become my disciples

* TODO Consider using / learning this
https://github.com/mingrammer/diagrams

* TODO Add to my tapestry of truth
https://www.blueletterbible.org/nlt/jhn/3/8/s_1000008

- How it happens is unexplainable

* TODO Do some more blogging but about
- Imaginary programming
  - clojure
  - common lisp
  - prolog
  - haskell
  - smalltalk

* TODO Do some more learning surrounding these
e:$NOTES/ws/alethiology/glossary.txt
e:$NOTES/ws/epistemology/glossary.txt

* TODO Set this up? Does it run in a terminal?
https://github.com/CleverRaven/Cataclysm-DDA

#+BEGIN_SRC sh -n :sps bash :async :results none
  sudo apt install cataclysm-dda-curses cataclysm-dda-sdsudo apt install cataclysm-dda-curses cataclysm-dda-sdll
#+END_SRC

Yes, it looks like it does.

* TODO Complete my latin glossary
e:$NOTES/ws/latin/glossary.txt

* TODO Learn recutils
https://www.gnu.org/software/recutils/

https://www.gnu.org/software/recutils/rec-mode-manual/rec-mode.txt

recinf
csv2rec
recset
recfmt
recdel
recsel
rec2csv
recins

* TODO Get better at using =br=

* TODO Make an org-brain on cli tools
e:$SCRIPTS/br

* TODO Set up broot
https://github.com/Canop/broot

* TODO Find a nice way to merge directories
$NOTES/personal

https://github.com/luispedro/mergedirs/

* TODO Make a document on describing what is sinful

* TODO Go over the AI Alignment stuff which Paul Bricman emailed me

* TODO Build for myself an AI system which allows me to reason truthfully over things
And by truthfully I mean spiritually.
If I'm not ready for something, it's not truthful.

* TODO Design my own church
- I want to make an abstract church, with crypto
- How do I build it?
  - Learn to design a church

* TODO Start an org-brain for physics

* TODO Start an org-brain for math

* TODO Get the concordance working well in the terminal
https://www.biblestudytools.com/concordances/strongs-exhaustive-concordance/

* TODO I want to understand surreal art better than anyone

* I want to take Christianity more seriously than anyone
- I am a true believer
- But I also want to be practical
  - Faithfulness, etc.

** Practical

** Understanding
*** Prophets
**** Prophesies

*** Epistles

*** Doctrines

*** Churches

*** Spiritual gifts

*** Roles

*** Sin

*** Mysteries

* TODO Make a timeline of prophets

* TODO Make a timeline of religions

* TODO Make a timeline of philosophers, like Reuben did

* TODO Make the =org-brain= be able to generate quotes for different philosophers
[[brain:philosophy/quotes]]

* TODO 
https://www.biblegateway.com/passage/?search=1%20Corinthians%203&version=NIV

* It's really important to set up Khala

* 
- Trust God's goodness
- Lay down our independence
- Believe the scripture rather than our senses

* TODO Talk to the bank to withdraw my kiwisaver funds

If you are facing significant financial hardship, call us on 0800 269 549 to
discuss your options for possibly withdrawing your KiwiSaver savings.

* TODO Make a blog which condemns

* TODO Make a model of morality that opposes oppression and domination by rich people
- That calls out their evil

* Read
[[https://www.youtube.com/watch?v=DcA5TotAkhs][The Importance of Being Ethical, with Jordan Peterson - YouTube]]

* TODO Set this up
https://github.com/BibleJS/BibleApp

* 
Holy To The Lord

* TODO 
e:$PENEL_DIR/scripts/pen-cr
e:$SCRIPTS/show-dot
e:$SCRIPTS/dot-digraph
e:$SCRIPTS/dot-png

* TODO Do more philosophy of mind
** Absolutely read this
[[calibre:Philosophy of Mind, Revised Edition A Beginners Guide (Edward Feser) (z-lib.org)]]

Finish it, while building up my theory of mind.

* TODO [#A] Write about. Still finish these. Even before doing stuff for Melee
** Priority
e:$HOME/blog/posts/love.org
e:$HOME/blog/posts/alignment.org
e:$HOME/blog/posts/the-soul.org
e:$HOME/blog/posts/truthmaker-theory.org
e:$HOME/blog/posts/physiosemiosis.org
e:$HOME/blog/posts/case-for-christianity-over-spirituality.org
e:$HOME/blog/posts/an-anagogical-hermeneutic-of-christianity.org
e:$HOME/blog/posts/active-imagination-pt-1.org
e:$HOME/blog/posts/janism.org
e:$HOME/blog/posts/notes-on-the-language-of-surrealism.org
e:$HOME/blog/posts/forestalling-degeneration.org
e:$HOME/blog/posts/games-of-surrealism.org
e:$HOME/blog/posts/the-surreality-of-creativity-and-happiness.org

Do more resaerch on surrealist games and language games.

** Lower priority
e:$HOME/blog/posts/statement-of-belief.org
e:$HOME/blog/posts/false-christianity.org
e:$HOME/blog/posts/real-christianity.org

e:$HOME/blog/posts/gospel-of-thomas.org
e:$HOME/blog/posts/doctrine-of-the-mean.org
e:$HOME/blog/posts/dream-resume.org
e:$HOME/blog/posts/book-of-reasonable-assertions.org
e:$HOME/blog/posts/faithfulness-and-truthfulness.org
e:$HOME/blog/posts/made-in-the-image-of-god.org
e:$HOME/blog/posts/divine-law.org
e:$HOME/blog/posts/maxims.org
e:$HOME/blog/posts/your-enduring-treasure.org
e:$HOME/blog/posts/knowing-god.org
e:$HOME/blog/posts/the-theurgy-of-prayer.org
e:$HOME/blog/posts/abomination-of-desolation.org
e:$HOME/blog/posts/a-true-spirit.org
e:$HOME/blog/posts/meditation-thoughts.org
e:$HOME/blog/posts/living-water.org

It's important to establish my belief system.
And a belief system which is based on a theory of faith.

** Update
e:$HOME/blog/posts/the-eight-beatitudes.org

* TODO How would I go about making a terminal automation thing
- On a loop, check what's on the screen.
  - Run some logic.
    - If, say, there is a Yn prompt (which has not been responded to), then respond.

* TODO Make it so 'x' script can interact only if something is seen

* TODO Make the imaginary 'avy' command and imaginary org-links
Just build this stuff to the point that I am able to.

* TODO I guess I need to start a blog about love and truth

* TODO Fix emacs. Org modeppoly 

* TODO Make nvc pass through stdin
e:nvc

* TODO I must improve my research skills

* TODO Build some tool for building arguments
- A tool for 'working' with arguments would be even better
  - What types of NLP tasks would be required for that?

* TODO Get access to midjourney
https://www.midjourney.com/

* TODO These are NFTs
https://opensea.io/collection/botanical-machines

* TODO Add this
https://twitter.com/midjourney?lang=en

* TODO Make a writing tool to use certain words from my glossary depending on what I'm writing about
Reuse words I understand.

* TODO Make imaginary avy
[[show bible verse:Romans 14:13-18]].

- Use OpenAI search 

* TODO Make a way to automate looking up bible verses
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^1 John 2:15-17" "$HOME/org-brains/love/world vs father.org"
#+END_SRC

Do this by matching a fuzzy list of possible
tasks.

* People are going to lose their genuine relationship with God
- I really do not want to lose mine

* TODO It's important 

* TODO Look more into hearing the voice of God
[[https://www.youtube.com/watch?v=ehSKSqA2NAM][How To Hear The Voice Of God - Mel Bond - YouTube]]

* TODO [#A] Investigate symbolic AI
+ =Symbolic AI= :: high-level symbolic (human-readable) representations of problems, logic and search.

At least learn some algorithms.

* TODO [#A] Investigate Neuro-symbolic AI
- [[https://www.youtube.com/watch?v=WHCo4m2VOws][Symbolic AI: Crash Course AI #10 - YouTube]]
- [[https://www.youtube.com/watch?v=4PuuziOgSU4][MIT 6.S191 {2020}: Neurosymbolic AI - YouTube]]

** Then update my CV
https://mullikine.github.io/cv/

* TODO Make this work
j:debugger-vs

* TODO Need an elisp snippet for dividing up a string
- I should really be learning such things in common lisp LOL
  - Or Clojure

* TODO Do an article on libertarianism
https://en.wikipedia.org/wiki/Libertarianism

* TODO Make something for the emacs debug trace to take the current line, format it and open it in an external vim

* 
Bonum Nostrum: Thomas Aquinas and Love of Others for Their Own Sake

* Consider all of the questions I *would* ask google if I *could*
- And not just googling for answers, but using an unbias neural network such as GPT-3

** TODO It's important that I am able to contemplate thintgs with AI

* TODO Respond to Louis
[[https://www.youtube.com/watch?v=QayjldQmKaU][Lesson 5: The Heavenly Realms {Ephesians 1:3}  Bible Study in Ephesians - YouTube]]

* TODO Finish writing out my dreams and add to the dream resume
e:$DUMP/tmp/scratcht9taSE.txt

* TODO Next year talk to Reuben
- Say:
  - I haven't been on Facebook in a year.
  - All I have done is
    - Study AI Alignment, Ethics and Morality
    - Build =Pen.el=, my project for Melee
    - Study surrealism, so:
      - I have a common interest to share with Melee
      - I can make a turing test 2.0, and gamify my prompting using semiotics

* TODO Add Christian ethics / moral theology to my philosophy of morality
https://en.wikipedia.org/wiki/Christian_ethics

* TODO Look into this
https://en.wikipedia.org/wiki/Gospel_of_Marcion

* TODO Make an imaginary 'avy' system
- Tag everything in the buffer.
  - The link types should be determined. For example:
    - bible verse
    - date
    - name
    - etc.
- Upon clicking one, an imaginary function should run
  - If not handled, this should ultimately produce an endpoint
    - I.e. nothing runs, except the link type and function is displayed in a vim
    - This endpoint could then be semantically linked to a real handler

* TODO Make a list of metacognitive functions
- mode average result from query
- coalesce result from results
  - Come to a decision about a result from a bunch of possibilites

* TODO [#A] Make a semantic search for a predefined list
- It should semantically match the entry which is relevant

** For example
Given the list:
- bible verse
- date
- name
- etc.

* TODO [#A] Make a semantic information parser
Given the list:
- bible verse
- date
- name
- etc.

Extract the thing out of the text.

* This is interesting
[[https://www.youtube.com/watch?v=jOvyiN4hiPI][This Is Why You Don't Talk to Demons... - YouTube]]

* TODO Make a system to parse and go to Bible references, say
[[brain:christianity/everyone under law is guilty]]

** How
- Parse what is under

* TODO Do this with the Melee prompting game
[[https://www.youtube.com/watch?v=9GCjRXUICac][Furious Angels {Instrumental} - YouTube]]

I will complete it.

* TODO Provide alternatives to my own tools
- Obsidian

* TODO Start exposing graphs of notes, etc.

* DONE Make emacs links for google image search
  CLOSED: [2022-06-19 Sun 16:24]
- Do this so I can take notes, linking to artists I like

- [[gim:Henri Rousseau]]
- [[gim:escher mosaic]]

* TODO Make a 'spirits' part of my 'creation' system
- These are alignment parameters

It's so hard.
How on earth can I design this stuff rapidly when I don't have what I need to do it.
I need a relationship.
Therefore, I am corrupting myself while I don't have one by giving in to 'sin'.
It seems impossible to resist.
Yet when I do sin, it feels like I lose clarity on my task to work on AI alignment.

* TODO Message Laria
It's important I do this, perhaps today.

* It's quite important

* TODO Work on alignment

* TODO Work on this
e:$NOTES/ws/alignment/glossary.txt

* TODO Start creating such prompts
#+BEGIN_SRC text -n :async :results verbatim code
  escher mosaic
      https://www.google.com/search?q=escher+mosaic&sxsrf=ALiCzsbZxOxIjm0l-6Ha3-oeWUArfHR46Q%3A1655541950532&source=lnms&tbm=isch&sa=X&biw=1904&bih=911&dpr=1
      
      Make a text prompt:
      - 1st prompt: Elephant, Giraffe, Elephant Giraffe Escher Mosaic
      - 2nd prompt: Pineapple, House,
  
      Generate a multi-image prompt:
      - 1st prompt: Im:Elephant, Im:Giraffe, Im:Elephant Giraffe Escher Mosaic
      - 2nd prompt: Im:Pineapple, Im:House,
#+END_SRC

** It's quite important to work on a language

* TODO Create NLP prompts
- Collect salient words
- Disambiguate - narrow semantic domain
- Ambiguate - useful for politicians - widen semantic domain
- use more expressive words - useful for increasing density of text
- use less expressive words - useful for making text more accessible
- explain text using an analogy

** Firstly, I should make imaginary programming functions for these
- I have to remain meta
  - That should be a precursor to building the prompts

e:$MYGIT/semiosis/ilambda/el/ilambda-library.el

- This might be important for designing NLP tasks for alignment.

* TODO Ensure that I can move rapidly over terminals somehow
I want to easily be able to run macros.
Therefore, what I really need is to run =x=
scripts on the current terminal.

** TODO Make this
It will be very worth it.

* TODO Use AI to do some interesting things with art
e:$NOTES/view.org

* TODO It's really importa

* TODO Make a new article "What grinds my gears"
- https://youtu.be/oT511CZjePA?t=39

* TODO I guess I can write about fake people
- animatronics
- A prophet is never accepted in his own home
  - https://biblia.com/bible/nasb95/luke/4/23-27

* 
** How to not act like a robot / animatronic
Act with reason and common sense. This will
bring more control and sanity into your life,
and would help you avoid doing things that you
will regret later. Just think a moment longer
before acting, and try to see where your
actions and reactions would lead you.

* Set this up
- e:$MYGIT/lxgr-linux/pokete
- https://github.com/lxgr-linux/pokete

* TODO Make a function which gives me a file path but doesn't assign it to the buffer
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (save-temp-if-no-file)
#+END_SRC

j:save-temp-if-no-file

* Set up common lisp again?
https://towardsdatascience.com/how-to-set-up-common-lisp-ide-in-2021-5be70d88975b

* INFP
https://youtu.be/IPQWZxT-hhc?t=78
I've been reading a lot of cookbooks lately.
I don't know how to cook but I haven't tried yet.
But I like the idea of me cooking in the future.

* TODO Create a system for doing Christianity practically

* In my practical Christianity system
- faithfulness
- strong man
  - Try to work out where the 'strong man' are

* TODO Yes, it is important to set up a terminal GUI environment

* TODO Add this to a fuzzy apps list
mx:tzc-world-clock

* TODO Learn to convert timezones
https://github.com/md-arif-shaikh/tzc

* TODO Set up org-roam - figure out why it doesn't work
j:org-roam-db-build-cache

Might need to restart emacs.

* It's time to learn org-roam

* I have to make it so I can recall words a bit better

* TODO Automate the process of going through AI-alignment stuff
e:$MYGIT/mullikine/glossaries/alignment.txt

* TODO Learn and prove that I can do single-tasking
- Put this on the resume.

* TODO Poetry
e:$NOTES/ws/poetry/todo.org

* TODO Talk to Paul Bricman
Nice, thanks for taking the time! Let's do 10:00 UTC+2 / 20:00 UTC+12 on Saturday. I'm paulbricman#2527 on Discord.

* TODO Learn more about semiotics

* TODO Blog about =indexical= semiotics
- Do this as proof

* TODO Make this work for
j:link-hint--apply

* TODO Consider investing into Google Colab

* lookingglass
** TODO Make a lookingglass prompt for generating a list of subtopics
https://en.wikipedia.org/wiki/World_line

- Then another prompt to go to a similar [imaginary] page to the current one, but with a different topic

* Do not preach the gospel with wisdom of words
https://biblehub.com/nkjv/1_corinthians/1.htm

#+BEGIN_SRC text -n :async :results verbatim code
  Christ did not send me to baptize, but to
  preach the gospel, not with wisdom of words,
  lest the cross of Christ should be made of no
  effect.
#+END_SRC

* TODO I do actually need software for project management
- At a different level of abstraction to git repositories

** TODO I should create a git template for managing projects
- This should take care of things like gantt charts

* TODO Set up project management tools
- continue constructing my Christian faith zetteltasten

* Talk about the soul again

e:$HOME/blog/posts/mind-soul-kingdom.org

- Spirit
- Soul
- Body
- Future
  - Worldline
  - https://en.wikipedia.org/wiki/World_line

** Soul of the world
- This is what a person tries to unify themself with if they conform to the world.
  - Peace with the world is enmity towards God.

+ [[https://www.biblegateway.com/verse/en/James%204%3A4][James 4:4 KJV]] :: Ye adulterers and adulteresses, know ye not that the friendship of the world is enmity with God? whosoever therefore will be a friend of the world is the enemy of God.

We're not supposed to be unifying ourselves with the world.
Inner peace can come from also being in emnity to the world.

* Zettelkasten
** A zettelkasten should be used for
- Learning
- Training your AI persona

* TODO Absolutely finish this
e:$PENEL_DIR/scripts/container/new-project

* TODO Extract all images from art PDFs

* TODO Make something to get 'important' words from a text
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-str words 10
#+END_SRC

- Disambiguate
  - I need a function which disambiguates a phrase by providing suggestions

* TODO Create a prompt for this
I need a function which disambiguates a phrase
by providing suggestions.

* TODO Do more with regard to writing surrealist poetry
e:$HOME/blog/posts/antipathy.org

Make it a habit.

* TODO Study INFJs

* TODO Ensure I can easily create new projects inside Pen.el
e:$HOME/source/git/semiosis/pen.el/scripts/container/new-project

* TODO Learn more about building arbitrarily structured parsers

* TODO [#A] Work on this
e:$HOME/blog/posts/writing-prose-with-placeholders.org

Just make something.

* TODO Work more towards

* TODO Set up my new github repository
https://github.com/indexical

- Work on search engines with this

* I still more github organisations that are good for AI art

* TODO Make some nice github organisation based on literature if I can't find art

* Add to brain
** Christianity
*** Discrimination is wrong
Christians are not supposed to do this.

* TODO Go for the long hair look
https://youtu.be/J21GlIVT7js?t=260

I can probably do this for Melee.

* Christ consciousness is incorrect
https://www.biblestudytools.com/1-corinthians/passage/?q=1%20corinthians+2:11-16

* TODO I should spam that article every month

* TODO I have to learn more about human interaction
Use CLI tools to perform tasks.

** It's time to learn [and build] some new CLI tools

* TODO Look more into neural search
https://github.com/topics/neural-search
https://github.com/jina-ai/jina
https://github.com/neuml/txtai

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  py i txtai
#+END_SRC

- Only use things which will help me to learn

- It's quite important to upgrade my tools

* TODO It's important to have a semantic indexer

* TODO Consider maybe blogging about the Kingdom of God
e:$NOTES/ws/kingdom-of-god/17.06.22.org

* TODO Set this up, I guess
https://otter.ai/

* TODO Consider fine-tuning GPT-3 on my own stuff
https://gist.githubusercontent.com/louis030195/5295b069a34b5b972dab42d1f5c011c8/raw/7fae1e4fea7881c2d1065b294e42cb65afdd5550/gpt3_obisidian.py

* TODO Set up calendly for emacs
https://calendly.com/event_types/97846427/edit

* TODO Work on Pen.el
- Work on prompts for Dall-E

Ensure that I can do prompting.

** TODO Build a transient
** TODO Work on pcomplete

* TODO Learn even more emacs

* TODO Do an article about the judgement of the nations
https://www.christianbiblereference.org/faq_mt25_31.htm
https://biblia.com/books/nkjv/Joe3.1

* TODO r

* Respond to David from UofO
https://mullikine.github.io/posts/generating-pickup-lines-with-gpt-3/

* Telegram
https://t.me/+chtti0OMuLFkMGU0

* TODO Create a virtual platform for managing Christian faithfulness
- These are not set in stone
  - It's to help me think

** Judgements
** Forgiveness

* TODO Consider talking about this
https://fivefoldministry.com/static/learn-about-the-five-fold-ministry/

* TODO Finish my Gospel of Thomas interpretations
https://www.marquette.edu/maqom/Gospel%20of%20Thomas%20Lambdin.pdf

** Republish after fixed errors

* TODO Start a dedicated Christianity blog
- This way I can keep it all separate and mark my progress.

I need to be able to quickly grep through files, etc.

* TODO Come up with new methods of doing surreal art

* TODO Make better thinking tools

* Racket
** TODO Seriously, it's time to learn syntax/parse
https://www.youtube.com/results?search_query=syntax+parse+racket

[[https://www.youtube.com/watch?v=Z-c0vPKeRic][Inside Racket Seminar: Ryan Culpepper on syntax-parse - YouTube]]

* TODO Do more learning surrounding this
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-openai-list-engines | v
#+END_SRC

* TODO Get all the books including apocrypha etc.
https://scriptural-truth.com/apocrypha_books.html

* TODO Do an analysis of the missing books of the bible

* TODO [#A] Make contextualised prompting
e:$HOME/programs/tmux/capture/file_tmcapture_C6d6DD_rand-19066_pid-1582799.txt

For example, in this situation I need to prompt differently.
A contextualised transformation of the prompt overloads the basic completion operations, like word or line completion.

* TODO Make the blog article about 'knowing God'
- in various ways

** knowing Christ, the universe
https://www.gci.org/articles/the-divine-knowledge-and-power-in-christ-ephesians-115-23/

known partially through the created world (Psalm 19:1) and ultimately in Christ (Hebrews 1:1-3).

* TODO [#A] Learn pcomplete
- e:$EMACSD/packages28/eshell-z-20191116.333/eshell-z.el

** TODO I could design a really nice autocompleter for emacs
- For generating text

*** Define different types of prompts
- transformations

*** But I first need to improve my programming skills

* TODO Make it so the notification daemon sends notifications somewhere else, where I can read them later
Test with =erc=.

* TODO Make a blog on youtube video comments for consciousness - I should make a new 'consciousness' git organisation
Firstly, I'm enjoying these videos. He's not
wrong in that finite society is a house of
cards based on lies, and evil is part of us.
But we can change our identity, rather than
merely discover it. To identify with
(yin/yang) or the corruped consciousness is
the path of least resistance, for sure. But
it's also possible to spiritually identify
with idealised Truth and Love, and in doing
so, for the rest of our lives our ego tries to
conform to the image of the God of Truth. Now,
this love is knowable only after identifying
with it. What you identify with, you can tap
into and your consciousness expands into. This
is definitely NOT the path of least resistance
and is a lifelong journey, but it's very real.
It's another lifelong journey that will
preserve your 'innocence'. You don't strictly
need to spiritually identify with the
consciousness of this reality. It's not the
only path.

* TODO I should be writing a story about myself
How do I do this?

Document my own life structurally.
Later down the track, pull it all together into an autobiography.

* TODO Learn Prolog properly - it's more important thank smalltalk

* TODO Work on formatting subtitles
#+BEGIN_SRC sh -n :sps bash :async :results none
  readsubs "https://www.youtube.com/watch?v=F9p5Wp7ao9g&t=855s"
#+END_SRC

* TODO Make for myself a catalogue of prompts that represent things
I need a decent database for this.

* IRC Channels
#+BEGIN_SRC text -n :async :results verbatim code
  #spiritscience
  ##Bible
  #Christian
  ##Christian
  ##Christian-Chat-Chalice
  ##Bible-Study-Fellowship
  ##Bible-Trivia-Quiz
#+END_SRC

* TODO Make my own model of consciousness - i.e. my own consciousness
Well, I *am* doing that.

I simply have to apply programming to automate my own life.

Exoconscious functions sound scary.

** Model things like
- Realising goals

* 
https://en.wikiquote.org/wiki/The_All

* TODO [#A] I need to have a book semantic search
For those who are called according to his purpose

** Given a book
- Search the lines of the book semantically

* TODO Set up some new fuzzy finders for searching beneath directories

* TODO Commit to memory a new app launcher for setting up workspaces, such as writing thoughts
- Do I really need a new app launcher?
  - Or should I simply start by setting something up, then remembering the app/command name?

* TODO Turn myself into a beautiful person
- I must remain my authentic self, by not contaminating myself with the external world

** In order to do that, I must externalise all poetry, romance, thoughts
e:$MYGIT/mullikine/thoughts-for-megan-journal/31.08.20.org

- Continue to link my thoughts to real people, but hide those people
  - I could even user pseudonyms
    - That might be a good way to do it, actually
      - Make some script which replaces names upon saving

* TODO Make a github repository of micro-thoughts
http://github.com/mullikine/thoughts

** TODO Set up a semantic search mechanism to search them
*** Then publish them every now and then
**** Become prolific
***** Basically become a guru
****** Categorise them in any which way as I am writing

* Instead of merely blogging, make lists of thoughts
- I notice the beauty of their soul and want to take care of it

** Do this so other people can draw from me like a well

* Blog about
** The difficulty of being religious and intelligent
https://www.christianitytoday.com/ct/2013/august-web-only/brains-and-belief-arent-mutually-exclusive.html

* TODO Blog about this - This is legitimately my stance
- https://careynieuwhof.com/how-to-talk-about-christian-morality-in-a-post-christian-world/
- https://careynieuwhof.com/why-christians-should-let-non-christians-off-the-moral-hook/

However, it's basically impossible to get such
a relationship in Dunedin.

* TODO I should blog about post-Christian ethics and morals

* TODO I should blog about what I think are incorrect ethics

* TODO Do a blog article
** It's not possible to get what you want as an intellectual
- If I am too smart, no one will talk to me

** It's not possible to have intent with who to marry
- Faithfulness means nothing

*** You can't set your heart on anything

* TODO Make a blog on Sin
e:$NOTES/ws/hamartiology/notes.org

https://en.wikipedia.org/wiki/Christian_views_on_sin

A blog specifically about sin.
Wow.

** What's the aim of it
Well, discussion, prevention.
The difference between this and simply reading online is:
- It's generally what I actually believe

*** Also, what about virtual reality
When does fiction become real? - Oh, that's a big question.
For example, are words real or damaging? And how?

* Pen.el
** TODO Make something to network Pen.el and do quizes with other people
- Go through checklists and things
  - For example, a list of things to determine what the other person thinks is sinful

* TODO Set up my art blog
https://github.com/frottage

- Do this because it will bring me a lot of meaning
  - AI art
  - I will not have to be so anxious about things I do not have

* TODO Write about an idealised relationship

* TODO 
- I must get into a pattern of seeking out and interviewing other people
  - Automate it
  - I guess this is a better method of finding people than putting up job posts

* TODO Figure out what is generating 'tags' file in vim upon save

* TODO I must learn as much as I can about, and document as a witness, (for the rest of my life) the Holy Spirit
https://en.wikipedia.org/wiki/Holy_Spirit_in_Christianity#Procession_of_the_Holy_Spirit

* TODO Start publishing to this
https://pneumatology.github.io/

* TODO It's very important to get into common lisp and haskell
- Go hard!

* TODO Set up the github repo for pneumatology
https://github.com/g1eny0ung/hugo-theme-dream
https://github.com/CaiJimmy/hugo-theme-stack

* Ask for ethereum to this address
#+BEGIN_SRC text -n :async :results verbatim code
  0x9C491a173048Bb2C6c5c5B9cb12A2153be88bf6D
#+END_SRC

* TODO I must be able to generate one-liners for things like this:
- Filter the least common words from this text.

Then apply it to readsubs.

* TODO Blog about how
** In my experience
- Without corrupting oneself, a person cannot get married inside a church

A person must be with sin to have  

*** But then
The only reason people can still call themself Christian afterwords is if
Jesus' forgiveness works and even after sin / taking what they want they still
feel forgiven.

**** Therefore, because I'm in a position of relative honesty, I should write for God

* TODO Make a new blog for philosophy, religion and art/surrealism
https://themes.gohugo.io/themes/hugo-theme-dream/

* TODO Just start going through surrealist poetry

** Then try to write my own

* TODO I have to get back into ESP

** Make a method of completing structured documents such as this
e:$NOTES/ws/pen-el/eula-generator/eula.txt

** Make a text format similar to emacs' =hyperbole=
Maybe even use hyperbole.

*** For example
#+BEGIN_SRC text -n :async :results verbatim code
  This is a file
  I want to complete <complete> this text.
#+END_SRC

**** [#A] Make a mechanism for simply completing at various sections of a prompt file, interactively
That should be easy.

* TODO Make an EULA license generator prompt

* [#A] Make this
** I want branching trees of decision-making, and thoughts
- Or graphs

*** Decision tree
https://en.wikipedia.org/wiki/Decision_tree

I want to use it to think.

*** Decision graph
https://www.bayesserver.com/docs/introduction/decision-graphs

* TODO Work towards a Case for Christianity over Spirituality

* Modern spirituality
- https://en.wikipedia.org/wiki/Spiral_Dynamics

* Confrontation with Christianity
#+BEGIN_SRC sh -n :sps bash :async :results none
  new-article "The Morality of Exposing Changing Beliefs Through Time"
#+END_SRC

* TODO I only need to make things like EULA generators
Wizards which do things automatically.

This way I can make money automatically.
This could honestly be making so much money lol.
That is true.
Money... how important is it?
We're not supposed to have a love for money.
I do not love money.

* TODO Relicense the prompts repo as a single user license.
https://en.wikipedia.org/wiki/Software_relicensing

* TODO Make GPT-3 functions for doing things such as summarising
https://en.wikipedia.org/wiki/Faith_healing

* TODO Ensure that when exporting org-babel, I have a nice CSS file

* TODO Monitor this
https://huggingface.co/spaces

* I have to learn some new things

* TODO Perhaps host some demos on huggingface hub with streamlit?
- https://streamlit.io/

[[https://www.youtube.com/watch?v=Ky2oSgGp66M][Deploy static website on Hugging Face Spaces | Free Portfolio Hosting - YouTube]]

** Just make some static sites
https://huggingface.co/spaces/mullikine/ilambda

They're git repositories, like github.

* It's important to be making DSLs for language and thought

* TODO Define
** Ego vs self-esteem/self-confidence
To have confidence is to have faith in your own abilities and believe in
yourself, but the ego is something else, entirely. Unlike confidence, the ego
operates out of self-interest. It seeks approval, accolades and validation at
all costs in order to be seen as “right”.

* TODO Start constructing personal identities and 'Personas'
This has to be done rigorously.

People think that they have a single identity but there's nothing to stop them
from creating multiple.

Having multiple identities, however, is degenerate and corruptive (morally detrimental, unwholesome).

** True self and persona of true self

* TODO I need to keep an extremely streamlined model of spirituality
- Truth - personal truth - is what underpins many mystical theories of the soul

* TODO Look into Zoroastrianism
It's an ancient religion but they do seem to have a lot of overlap with Judaism
and Christianity.

* TODO Expose questions surrounding Christianity
e:$NOTES/ws/christianity/questions.org

* TODO Come up with some decision-making prompts

* TODO 
Symbolic Artificial Intelligence
NLP, Lisp, Prolog, Haskell
Prompt-Engineering
Programming Language Theory
Parsing, Design & Implementation
Software Automation & Testing

* TODO On GitHub, make a repository of prayers

* TODO Make a prompt which helps you to make decisions
- Circumstance: <circumstance>
- Should I do this?
- Yes, you should.

** In order to build something, I should use =org-brain=, probably
I don't know, actually.

I need to be able to manage a huge database of decisions.
This is what is important.

* TODO Set up a graph notes system?

* TODO Set up a concordance in emacs
#+BEGIN_SRC text -n :async :results verbatim code
  Godliness is a significant term in the
  Christian faith. According to Strong's
  Concordance, the word is translated from the
  Greek word for "piety", and is used in the New
  Testament fourteen times in the letters of
  Peter and Paul. While the expression also
  refers to the divinity of God, godliness in
  the Bible is mainly used to describe a
  positive way of life influenced by God, and
  inspired reflection in the tenets of the
  Christian faith.
#+END_SRC

** TODO Test to see if it works well

http://manpages.ubuntu.com/manpages/bionic/man1/bible.1.html

#+BEGIN_SRC sh -n :sps bash :async :results none
  agi bible-kjv
#+END_SRC

/usr/lib/bible.data.conc

* TODO Make a fuzzy finder for org files under the current directory

* TODO Write poetry like this. Write literally
Keep in mind that names mean nothing in the future.
Make it completely normal to write in a way which is truthful.

- I die to self every day
  - When I want Melee I must die to self
    - I cannot speak to her
    - I realise that I have eternal life because I have Jesus. I have known God.
      - https://biblia.com/books/esv/1Jn4.6

* TODO Make homilies
#+BEGIN_SRC text -n :async :results verbatim code
  Homily
      A homily (from Greek ὁμιλία, homilía) is a
      commentary that follows a reading of
      scripture, giving the "public explanation
      of a sacred doctrine" or text.
      
      The works of Origen and John Chrysostom
      (known as Paschal Homily) are considered
      exemplary forms of Christian homily.
#+END_SRC

* TODO I want to find answers to things not talked about in Christianity
- What is 'godliness'?

* TODO Make my own timeline of religions
e:$MYGIT/mullikine/glossaries/religions.txt

The reason why I should do religions:
- This is to become aware

* TODO Consider making a timeline of philosophers, as well

* TODO I must go over all the surrealist techniques

* TODO Get various versions of the Book of Enoch

Versions:
- Aramaic (fragments)
- Koine Greek (fragments)
- Latin (fragments)
- Ethiopian Ge'ez (complete)
- Hebrew (no surviving copies)

The book itself asserts that its author was Enoch, before the biblical flood.

* TODO Make

* Start a journal on thoughts about Reuben

* TODO I suppose I can continue working on ESP language server

* TODO Look at
- pyautogit

* TODO Try to set up matrix again
https://github.com/tulir/gomuks

** Though, it might be for the best that I use emacs

* This looks good
https://github.com/ryota-ka/twterm

* Looks interesting
https://github.com/coderholic/pyradio

* This looks interesting
https://github.com/cantino/mcfly

* TODO Learn
- A TUI framework

** TODO Talk to Reuben again
Mention that I don't know if I can handle it, being forcefully separated from
her, without them being reasonable at all.

* This looks really good, actually
https://dystroy.org/broot/

* A new text editor -- looks cool
https://github.com/helix-editor/helix

* TODO Look into text colouring
https://github.com/thermage/thermage

* Took again at this
https://github.com/rothgar/awesome-tuis

* TODO Learn taskell
It's nice and fast.

Investing in this will be totally worth it.
As would investing more into emacs.
External programs are good though, in their own ways.

* TODO I should definitely start automating the process of building things
** I need better project management, for my terminal

- Jira alternatives

[[egr:jira alternative cli]]

No, I do not want team management.
I want project management.

[[egr:www.guru99.com project management]]

https://www.guru99.com/project-management-tutorial.html

No, I do not want this type of project management either.
I want something like trello, but for the CLI.

[[egr:open source kanban manager cli]]

*** This looks good - I should use and learn this
https://github.com/smallhadroncollider/taskell

*** What set of skills do you need for project management?

* TODO Go over this again
https://github.com/rothgar/awesome-tuis

* TODO Add 

* TODO Learn new ways of graphing notes
- Perhaps I just need to upgrade my emacs knowledge. It's been a while.

* TODO I need to construct a working model of religion
And help myself to carry it out.

** I might call it 'Active Christianity'
I need to be able to organise various things.
It's technology to help me to maintain a Christian faith in spite of everything.
Free software.

For example,
- Construct a graph and lists of things
  - Things I am faithful about

* TODO Write down my thoughts as they come in
** Hope thoughts
** Despair thoughts

* TODO Come up with strategy documents
** I must create project and strategy documents
- This is important
- It's important to maintain a balanced

* I should take lots of quotes from books I read as I read them
Just read books, take quotes and put them into blog posts.

* TODO Come up with a new way of making notes
- Combine AI with a graph to make notes

* TODO Make a list of questions that I am not able to have answered through the internet
e:$NOTES/ws/christianity/questions.org

* TODO Incorporate this
https://ag91.github.io/blog/2022/06/09/make-adding-a-clojure-require-more-interactive-with-cider-and-cljr/

* I should describe my shadow
As I integrate it.

It's going to be my biases, etc.

What people do I not want to be like.
Do this so people can understand my personality more.

* In my model of morality

* TODO Get myself nice non-jacket clothes
I also do not want to be a vain person.
I do not want to identify with certain demographics.

- Shirt
- Pants

* TODO Learn about the 'old masters'
Raphael
Vermeer

* I could spend a tonne of time reading philosophy and writing my own learnings about ethics and morality
I can do this to prove to Reuben that.

** What would be even better is if I could begin by Matt's example to do this thing regarding Theurgy
Even 

** At the same time I can document

* Reading the Bible critically
e:$HOME/blog/posts/reading-critically-the-bible.org

I have an issue with the way scripture can so easily be used for manipulation.

* TODO Learn Carl Jung
e:$HOME/blog/posts/a-model-of-morality.org

* TODO Make a quotes collection system
One does not become enlightened by imagining
figures of light, but by making the darkness
conscious. (Carl Jung)

* It's still important to come up with my own model of morality based on a model of spirituality
This is extremely important, actually.
I see cracks in modern Christianity, and I do not believe it, because of the hypocrisy.

* TODO Write poetry for Melee
That might work.

Write a bunch of poetry about how Melee makes me feel.
Keep it light and simple.

* I have to tell Reuben. It's really hard sometimes
- It's not right that you completely ignore me
  - I'm not sure how you think that's not an evil thing to do
- It makes it extremely difficult when 

* Optical tricks
** Look at keyboard and squint eyes. Allow to refocus on keys.
- Works pretty well for an apple keyboard.

Should we start designing technology to avoid such things.

keyboard juxtaposition

https://en.wikipedia.org/wiki/Impossible_color

* TODO Make a list of evil people
- Megan Goodwin
  - For not allowing communication over such a long period of time
- Reuben Dowle
  - For not allowing communication over such a long period of time

* Write a book about evil
** Violating divine law
- This is evil

*** Violating any of them is violating all of them
- Preventing communication
  - Not making 'God' a factor in every aspect of life
  - Violated by:
    - Completely preventing communication between people

** Who is socially evil
** Who is evil with respect to me
** Degeneration is evil

* I have to write about injustice, and make it public
- lamentation

* TODO I have to push forward
** Keep Melee inside of my Truth

* TODO Write about Neville Goddard
Make it clear what Neville's stance is, when reviewing his books.

They are certainly interesting.
But I do not believe merely in immanence and the psyche.

* TODO Blog about Inner Work: Using Dreams and Active Imagination for Personal Growth

* TODO Blog about
neville goddard imagination creates reality

* I must work hard for Melee
- I must show Reuben that he is wrong
  - How to prove Reuben wrong
    - 

* TODO Describe Melee
- demureness

I should make an AI to describe Melee, using my 'creation' platform.
An AI version of what I know of Melee's character.

* TODO Make a logo for my Melee prompting game

* TODO Break up the Tapestry of Truth appendix

* TODO At some stage I must upgrade my note-taking system
At some stage I must upgrade my note-taking system.

* Alice in Wonderland
https://www.cluedupp.com/cart

** Finish it
https://mullikine.github.io/posts/a-mad-tea-party/

I still have to finish it.
Even if noone is there.
And even if it's very late.

** I wont be bale to atttend

e:$HOME/blog/posts/alice-in-wonderland-dunedin.png

** Alternatively, I can make the imaginary story
I can't attend, but I can make an imaginary version which is better.

* TODO Buy this book in real life
https://www.amazon.com/Book-Surrealist-Games-Alastair-Brotchie/dp/1570620849/ref=as_li_ss_il?ie=UTF8&qid=1458243081&sr=8-1&keywords=surrealist+games&linkCode=li3&linkId=591d63e25a152b669ac5760afbebeb85

* Proper interpretation of dreams
+ =Jeremiah 23:25-28= :: I have heard what the prophets have said who prophesy lies in my name, saying, ‘I have dreamed, I have dreamed!’ How long shall there be lies in the heart of the prophets who prophesy lies, and who prophesy the deceit of their own heart, who think to make my people forget my name by their dreams that they tell one another, even as their fathers forgot my name for Baal? Let the prophet who has a dream tell the dream, but let him who has my word speak my word faithfully. What has straw in common with wheat? declares the Lord.

* TODO Add this to Pen.el Melee
- [[https://www.youtube.com/watch?v=-TUimRw7ld4][A new surrealist writing technique for you to try! - YouTube]]
- https://www.oldschoolcarroll.com/works/fiction-short-story-with-surrealist-pairing-technique

* I can describe Melee now and write poetry about her

* Integrate shadow
Contemplate and consider your resentment.
Speak up about it - discrimination, etc.
Radical honesty.
Only the weak do evil things.

#+BEGIN_SRC text -n :async :results verbatim code
  resentment
      A complex, multilayered emotion that has
      been described as a mixture of
      disappointment, disgust, anger, and fear.
      
      Other psychologists consider it a mood or
      as a secondary emotion that can be
      elicited in the face of insult and/or
      injury.
#+END_SRC

https://youtu.be/q6VRWX1Sz5s?t=330

* Maybe get some tshirts
https://www.cafepress.com/gosurreal

* TODO I have to learn the Red Book
I really like Carl Jung.
A gnostic.

* Definitely make an article about this
** Carl Jung
+ Apocatastasis in immanence :: [[https://www.youtube.com/watch?v=3xU2AMOdkEc][Christ, a Symbol of the Self, by Carl Jung {audiobook} - YouTube]]

* I should probably come up with my own pseudonym

* It's important to work on better GPT-3 tools
Yes, I will absolutely be needing to design new languages for GPT-3.

Start working more with racket and Haskell.
That stuff is absolutely vital.

* I should make a new way of typing that will enable me to write subconsciously
and things would be transcribed fairly well.

* I guess try to make a hexaflexagon
- https://codegolf.stackexchange.com/questions/93248/flexagonal-flexagation
- https://www.youtube.com/watch?v=VIVIegSt81k

* 
Find the original 1978 version of Game of Death bruce lee

Most egregious was the original 1978 version of Game of Death, which uses just
11 minutes of Lee's original footage and, in controversial, macabre fashion,
even used shots of Lee's own real life funeral, according to AV Club.

original Game of Death

* TODO Demonstrate high dream recall

* It's important to get back into pen.el. Find my keyboard

* I guess I *need* to start writing poetry
That may be the only way.

* I must continue to work on Pen.el - It's my own Red-Book

* I absolutely want to learn this active imagination technique. I have a strong mind and the time and space for it

* TODO Research Carl Jung, and his Red Book

* TODO Learn to listen for visions, but with respect to the True God
** Habbakuk
https://youtu.be/UIewjUWhSPs?t=431

...I will watch to see what he will say to me, and how
I should answer when corrected...

"Write down this vision and clearly inscribe it on
tablets, so that a herald may run with it. For the
vision awaits an appointed time, it testifies of end and it does
not lie. Though it lingers, wait for it since it will surely come
and it will not delay.

* Active Imagination
...Works by encouraging the conscious and unconscious mind to communicate through
making our conscious attention explore down into the unconscious mind.
No tree, it is said, can grow to Heaven unless its roots reach down to Hell.

* TODO Learn both Carl Jung and Nikola Tesla's techniques
https://www.youtube.com/watch?v=UIewjUWhSPs

* Learn this, for sure
[[https://www.youtube.com/watch?v=UIewjUWhSPs][Active Imagination: Carl Jung's Technique vs Nikola Tesla's - Part 1 - YouTube]]
https://en.wikipedia.org/wiki/The_Red_Book_(Jung)

* Take care of Melee
[[https://www.youtube.com/watch?v=N5kKenry2kU][Beach House - Take Care - YouTube]]

* TODO Set up github sponsors

* TODO Start using LISP for scripting
[[https://www.youtube.com/watch?v=QHwghMNKVtg][Rewrite Your Scripts In LISP - with Roswell - YouTube]]

* I should aim to do this
https://bakztfuture.substack.com/p/dall-e-2-unofficial-natural-language-b14?s=r

* Blog about this
https://en.wikipedia.org/wiki/LSD:_Dream_Emulator

* TODO I should make some abstract sumaries of a bunch of interesting books
- Interpretation of Dreams
- Surrealist Manifesto

etc.

* TODO Get this book
Language, Saussure And Wittgenstein: How To Play Games With Words

https://youtu.be/iFZb8O0Zn_o?t=516

* TODO Begin my dream resume
- Recall as much as I can

e:$HOME/blog/posts/dream-resume.org

https://www.psypost.org/2022/05/heightened-dream-recall-ability-linked-to-increased-creativity-and-functional-brain-connectivity-63139

* I should add this
https://youtu.be/acffjQ-fJqo?t=222

* Quickly go over this
https://studylib.net/doc/8592905/assignment--value--30%25-of-course-grade---due-week-9-

* When writing about the Model of Morality
https://tifwe.org/resource/moral-law-and-the-ten-commandments/

Also talk about.

* TODO See if I can apply 'doctrine of the mean' theory to the 10 commandments

* TODO Come up with my own "Doctrine of the Mean"
e:$HOME/blog/posts/doctrine-of-the-mean.org

* TODO Acquire
** Confucionism sacred texts
*** The Four Books
- The Doctrine of the Mean
- The Great Learning
- The Analects of Confucius
- The Book of Mencius

** Aristotle
*** Doctrine of the Mean
https://www.jstor.org/stable/27743819

* TODO Put my blog on mirror
https://mirror.xyz/

* TODO Build the Melee prompting game
** Put basically everything into this
I'm going to pour my friggen heart into this.

* TODO Put this into practice
https://www.bible.com/bible/463/LUK.12.35-48.NABRE

** How am I girding my loins?

** How am I lighting my lamp?

** I have to do both

* TODO Instead of writing sad stuff, I should concentrate on making things which will be of value for God
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  vim +/"Book of reasonable assertions" "$NOTES/perspective.org"
#+END_SRC

https://www.bible.com/bible/463/LUK.12.35-48.NABRE

* It's important to 
https://www.bible.com/bible/463/LUK.12.35-48.NABRE

* Add to post about discrimination
https://biblehub.com/bsb/james/2.htm

* TODO Do some more work, then check Facebook
[[e:$HOME/blog/posts/living-water.org]]

* TODO Make an article about straightening the heart

** What happens after the heart is straight?
- Is my own heart straight?
  - Yes.

Do I covet that which I *can't* have?
Usure. Can I *have* Melee? Maybe. It's not off the table yet.
My heart is straight and I want Melee.

* TODO Make a bible search engine
** It might need to use google search as a proxy
https://www.biblegateway.com/passage/?search=2%20Thessalonians+2&version=NIV

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  gl Proverbs 5 KJV | grep biblegateway.com | head -n 1
#+END_SRC

Frustratingly, I can't use URLs.
I have to create a custom search engine system.

I could run my own redirecting proxy server.

[[egr:polipo redirect http proxy server]]

j:biblegateway

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun biblegateway (query)
    (interactive (list (read-string-hist "BibleGW:")))
    (let ((result (snc (format "gl %s KJV | grep biblegateway.com | head -n 1" query))))
      (eww result)))
#+END_SRC

* DONE Make a 'look.org'
  CLOSED: [2022-06-04 Sat 21:03]
=M-Q g O=

* TODO Absolutely learn this
e:$NOTES/ws/surrealism/glossary.txt

* TODO Create my dream resume
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"dream résumé" "$NOTES/ws/surrealism/glossary.txt"
#+END_SRC

* TODO Get into Surrealist games
Perhaps I can simply firstly write a book of surrealist games.

http://www.fact-index.com/s/su/surrealist_techniques.html

* Brother Callum band - it's pretty good actually
[[egr:lime cordiale]]

* TODO Buy Nick Phoenix's album
https://lnk.dmsmusic.co/nickphoenix_wideworld

* TODO Get clued up on surrealism
https://www.zazie.at/
https://www.zazie.at/collabs.html

I must get deep into surrealism.

This is fascinating.

* TODO Build
- Parallel Collage

* TODO Write about divine law
This is important.
The mechanics of how these things work will be important anyway for building an ASI.

* My next thing should be writing about surrealism
If I want Melee, I can probably have her.
But it requires huge amounts of patience and faith.

* TODO I must ensure that I can search scripture easily
** TODO Make search tools for searching my notes / github repo, say, with GPT-3

** It's extremely important to build my own theology

* 1 Timothy 4:2–5 (ESV)
https://biblia.com/bible/esv/1-timothy/4/2-5

#+BEGIN_SRC text -n :async :results verbatim code
  2 through the insincerity of liars whose consciences are
  seared, 3 who forbid marriage and require abstinence from foods that God
  created to be received with thanksgiving by those who believe and know the
  truth. 4 For everything created by God is good, and nothing is to be rejected
  if it is received with thanksgiving, 5 for it is made holy by the word of God
  and prayer.
#+END_SRC

* Write about Christianity, Confucianism (5th BC), Daoism (6th BC) and Buddhism (5th BC)
https://en.wikipedia.org/wiki/Confucianism
https://youtu.be/VS-sKQwB-fc?t=239

For the first 2000 years, the Chinese people worshipped a single god/God.
SHANG DI
https://en.wikipedia.org/wiki/Shangdi
Tian
Shang Tian

** Shi Ji (Vol. 28, Book 6, Pg. 624)
#+BEGIN_SRC text -n :async :results verbatim code
  "Shang Di is another name for
  Tian. The spirits do not have
  two Lords."
#+END_SRC

"Of old in the beginning, there was the
great chaos, without form and dark. The
five planets had not begun to revolve, nor
the two lights to shine. In the midst of it
there existed neither form nor sound.
You, O spiritual Sovereign, came forth in
Your sovereignty, and first did separate the
impure from the pure. You made heaven;
You made earth; You made man. All things
became alive with reproducing power."

* Acts 2:17
17 And it shall come to pass in the last days, saith God, I will pour out of my
Spirit upon all flesh: and your sons and your daughters shall prophesy, and
your young men shall see visions, and your old men shall dream dreams:

* TODO It's important to write about water
Start the blog immediately and work on it.

e:$HOME/blog/posts/living-water.org

Melee is so cute.
I have to finish this.

* TODO Get Melee's 'water' DP and do something with it

* TODO Write about surrealism
- The Surreal Manifesto vs Truth

** Maybe vs realism, or something

e:$HOME/blog/posts/maxims.org

* TODO At church wear my shark tshirt and pendant this time
The pendant should have Melee's portrait on it.
Use her 'water' drawing.

** If I do this, I want to do it properly
I could try to redraw Melee's water. Or I can print it out.

* TODO Become an expert at sharing the living water
The only way to do this is to firstly attempt to maintain it myself.
It's a spring.

* [#A] My next blog post should be water, and about living water
I should do it for Melee.

e:$HOME/blog/posts/living-water.org

I believe that it feels like the opposite of
that burning sensation you get when something
is wrong - it feels amazing.

That's the thing that hasn't entered into the human heart, I think.

Literally, I think that is what it is.

It is eternal life. It's a little bit of living water. It becomes a spring.
I think I do get it. It feels like extreme love and joy.
It feels like healing of the spirit and soul and especially heart.
It feels like cool water being poured over embers and setting out flames and going further - it doesn't stop when the flames are out.
At which point it feels like laughter, joy, dopamine inside the heart.

http://www.livingwaterskingston.com/why-living-waters/

#+BEGIN_SRC text -n :async :results verbatim code
  Isaiah 12:3: “With joy you will draw water from the wells of salvation.
#+END_SRC

Why does everyone stand around the well but not go in?

This is absolutely the next article I should write, and I should be proud to use Melee's photo.

** He makes an astounding promise:

https://biblehub.com/john/7-38.htm

#+BEGIN_SRC text -n :async :results verbatim code
  “As the scripture has said, ‘Out of the believer’s heart shall flow rivers of living water.’
#+END_SRC

** 
#+BEGIN_SRC text -n :async :results verbatim code
  Jesus replied, ‘If you only knew the gift God has for you and who you are speaking to, you would ask me, and I would give you living water.’”  (John 4:10)
#+END_SRC

https://web.mit.edu/jywang/www/cef/Bible/NIV/NIV_Bible/JOHN+4.html#:~:text=Jesus%20answered%20her%2C%20%22If%20you,have%20given%20you%20living%20water.%22

** 
https://www.christianity.com/wiki/christian-life/how-to-fight-fire-with-living-water.html

** Should I not try to go in?
I think I should *definitely* try.

But how?

When 

** This is my next one
Do a poem.
Maxims.

*** Describe what it feels like
Then it can be animated.

* TODO Write about what matters with regard to knowing God
** To combat Alzheimer's a person just needs to be spiritually sound
If they have during their life known God and
sought to identify themself with love, and if
their partner is similar, then nothing really changes.

[[https://www.youtube.com/watch?v=2iHUXSVv8Mg][Early onset Dementia video - YouTube]]

* This is cool
https://en.wikipedia.org/wiki/Surrealist_techniques

I want to learn *all* about surrealism.
I also want to learn to appreciate it.
I have to factor in authentic appreciation and memories.
The best way to do that, like the 'Star Train' incident leading to the Starlink star train is to have authentic memories.

* TODO Come up with a method of describing what I want to see visualised, and then allowing the AI to complete it
** The real power, I think is in allowing the AI to complete your own thoughts

* Pen.el
** Ensure =pwd= is passed on
e:$PENEL_DIR/scripts/container/sps-w-pin

** haskell-playground
e:$PENEL_DIR/scripts/container/haskell-playground
** =td=
e:$PENEL_DIR/scripts/container/td

* What do these mean in ghci?
#+BEGIN_SRC text -n :async :results verbatim code
  :set prompt-function <expr> set the function to handle the prompt
  :set prompt-cont-function <expr> set the function to handle the continuation prompt
#+END_SRC

* TODO Use Haskell through Pen.el
** Learn ghci, etc.
Learn the tooling.

* Order replacement keys for the DELL XPS
https://www.replacementlaptopkeys.com/dell-xps-15-9560-keyboard-keys-replacement/?sku=DCKEY-US-9100

* TODO Automate =at= with =x=
https://linuxconfig.org/how-to-set-alarm-on-linux

#+BEGIN_SRC sh -n :sps bash :async :results none
  x \
      -sh "at 8:30 tomorrow" \
      -e "at>" \
      -s "vlc $EMACSD/packages28/alarm-clock-20191204.716/alarm.mp3" \
      -c m \
      -e "at>" \
      -c d \
      -i
#+END_SRC

** TODO Make an emacs TLB for this?

* This is 16 years old, but I can learn it if I want
See Appointments in the Emacs info Calendar/Diary node.
...
Nice to see how this can be done.
Post by Mathias Dahl
It is very simple. It does not, for example, keep track of multiple
alarms so that you can cancel them individually.
appt does it for you

M-x appt-activate
M-x appt-add
M-x appt-delete

* TODO Look at this
https://github.com/anufrievroman/calcure

* Progressive Christianity
** We are gods
https://www.youtube.com/watch?v=Rz_jxb5wmW8

The 'we are gods' thing is partially true, I think. It does not mean we are God
Himself. When people use it in this context, it's in terms of power to create
reality. This is definitely true for yourself. Your actions in this world have
consequences, some actions which will lead to life and other actions which lead
to death for yourself. The fact that we are spiritual beings and like 'gods', i
guess, means that we have free will and there are eternal consequences for
ourself. If we do not rid ourselves of corruption through repentance and the
blood of Christ then we self-destruct. If we become perfect without corruption,
then we become children of God, which is like a lesser god - true, I think. The
other way the word 'god' is used is in making something your 'god' -
idolisation. Therefore, anything 'can' be a 'god' if you make it one. What I
think we have to do is accept Jesus as God and conform our own identities to
Jesus - draw closer to assuming the role and archetype of Jesus - become Jesus,
and in this we can justify calling ourselves Children of God, and 'gods'. This
is being born again in God, I think. Then we join the Kingdom of God.

* TODO Look into Kafka for the Westpac job
Since it's a data engineer job.

I need to claim I have solid experience.

* The MSD appointment is at 9am-9:45am Jun 2

* TODO I have to show people that we can still repent and turn to God post-fact
[[https://www.youtube.com/watch?v=ntX0xWvjGrI][Douglas Murray | 'The Incoherence of LGBTQI+'  #CLIP - YouTube]]

** What is post-fact? Similar to post-truth

* TODO Have discipline and be consistent

* TODO Make it so penf starts a zrepl after displaying the signature

* TODO Message people
** Reuben
Can I talk to her next year?

* The best thing I can do is ask Megan through David
Just be straight up honest.
State the facts.
Let him ask.
Await response.

** I have to ask without caring about the response

* I could write about philosophy of truth and lies

* TODO Ask David if I can talk to Megan

* TODO Write about true baptism
https://www.simplybible.com/f78n-acts-c8-v1-25.htm

#+BEGIN_SRC text -n :async :results verbatim code
  ¶“9There was one man, named Simon, who had been doing sorcery in the city.
  He'd amazed the people of Samaria, making himself out to be some great one.
  10All the people, from the least to the greatest, had listened to him. They'd
  said of Simon, 'This man is that great power of God.' 11They listened to him
  because he'd long amazed them with his sorceries. 12But when the people of
  Samaria believed Philip preaching good news concerning the Kingdom of God and
  the name of Jesus Christ, they were baptized, both men and women. 13Simon
  himself also believed. After being baptized, he continued on with Philip,
  amazed by the signs and great miracles that he saw.” (Acts 8:9-13).
#+END_SRC

* TODO Attempt to talk to Megan again next week

* TODO Make a book of short adages

* Write an article 'The Theurgy of Prayer'
e:$HOME/blog/posts/the-theurgy-of-prayer.org

* Make a blog article
+ =1 Corinthians 2:13 NIV= :: “We speak not in words taught us by human wisdom but in words taught by the Spirit, expressing spiritual truth in spiritual words.” 

* Assertions
- Not by works, but by faith

** Tapestry of truth method
Agree 100% - Water the baptism of Repentance paves the way to baptism by the
Spirit. Most of the Jews would've had some conception of the 10 commandments.
Authentic obedience in heart of the divine law that is the 10 commandments
teachces a person some knowledge of who God the Father is in character since He
can't be a hypocrite, and what sin is. Next step, follow Jesus. Persecution for
immitating Jesus teaches you who Jesus is, at the heart level - it's this act
of authentic obedience. Only after following with integrity from the heart is a
person then ready to receive the Holy Spirit and grace

* TODO Make a diagram

- Gospel
- Faith
  - Trust God to save
- Truth
- Knowledge
- Conversion
  - See, Hear, Understand

* TODO Go to this - Looks fun
https://www.cluedupp.com/products/alice-dunedin?utm_term=Alice-Dunedin-NZL-10-12-2022&fbadid=6279674189496

* TODO Send to Dave
https://jpsears.s3.us-east-2.amazonaws.com/Man+Scripts+for+PDF.pdf

* Absolutely take laptop with me tomorrow
e:$NOTES/perspective.org

- Keep on this

* Just look as nice as I can possibly look for tomorrow
That sounds quite vain.
That *is* vain.

** Don't just look nice - make an effort to talk to people I want to talk to
But in order to be 'accepted' I need to look approachable.

How to look approachable?
Just fit in and look normal, I guess.

* TODO Aim to get to Church ealy tomorrow
But that means I should go to sleep soon.
Then also, I should aim to look a) young.
Yes, because I plan on joining the YAs this week. Why? Because I want to be where Megan is. That seems *right* to me. I should force that.
b) really good. I have to look *hot*.
How? I have to seriously tidy myself up.
Shave, for starters. Completely shave? IDK, maybe.
I mean, I probably should.
I don't *have* to.
It's actually OK to just try to fit into the YA crowd.
IDK, maybe I can even talk to Lucy if I fit in well enough?
In that case, I should wear my loom band and shave as well as I can.
Wear both loom bands.
Wear my taniko necklace too.
Take my laptop to do some study of the sermon.
I have to be doing the complete opposite of everyone else.
In some sense, I should *not* be fitting in.
OK, do that.

* TODO Start practicing this
https://www.youtube.com/watch?v=_Kk7zAlGOyA

** Play it to Jack at some stage

* TODO Consider looking into Tenor-Alto duets
https://musescore.com/branmich/my_favourite_things

* TODO Do a blog article on the number of different ways you can get to heaven, though Jesus
I believe in the duck test, “If it walks like a duck and it quacks like a duck,
then it must be a duck”.

| Type | Water Baptism | Actual water baptism | Spirit Baptism
|-
| Orthodox | 

** Duck typing

* TODO I need to be able to search over a bunch of URLs
The best way to do this is to construct fuse filesystems.

** It's quite important to master that skill

* Speak to Ben
e:$NOTES/ws/interviews/ben-tinyprojects-gpt3/28.05.22.org

* TODO Look into Sophian Gnosticism
https://www.yumpu.com/en/document/view/44546444/introduction-to-sophian-gnosticism-study-guide-magdalene-circle
https://www.indiebound.org/book/9780738707181

* I need to improve my scripture reading and search tools

* TODO Go over all of these
https://www.earlychristianwritings.com/index.html

Read and study like crazy.

* Theurgy
** Prayer
#+BEGIN_SRC text -n :async :results verbatim code
  ¶: Offer Not an Earthly Prayer or Sacrifice
  Jesus said, "First must the one who prayeth, who offereth his prayer,
  well consider his gift to see whether there be any spot found in it; and
  then shall he offer it, that his offering remain not upon the earth."
  
  [Aphrahat]
#+END_SRC

When speaking to God the Father, ensure that the words spoken are without
earthly blemish, and that the prayer is true in all the heart.

** Faith commands
#+BEGIN_SRC text -n :async :results verbatim code
  Jesus said, "If two shall come together as one, and they say unto the
  mountain, 'Pick thyself up and cast thyself into the sea,' it shall be
  done."

  [Didascalia 3:7:2]
#+END_SRC

You need complete integrity of heart and action.
Mind and spirit must be working in consonance.
This means without any doubt.

Remember, there is a confusion which leads to life and one which leads to death.
The confusion which leads to life must be followed.

* TODO Watch
- Being John Malkovich
  - A bit like Alice in Wonderland

- The Man From Earth
  - About a guy who is thousands of years old - Seems to be a bit like

- Enemy
  - https://www.imdb.com/title/tt2316411/?ref_=ttls_li_tt
  - A man seeks out his exact look-alike after spotting him in a movie.

* TODO Make a blog article about "cowardice in false christianity"

* TODO Build a system for selecting a word from my own glossary
- Based on semantic search
- Based on full text search

* TODO Merge fonts
https://superuser.com/questions/490922/merging-two-fonts

- Monospace with Aurebesh

* TODO Mention this in the Tapestry of Truth - we will be like God -- children of, that is, and part of the same organism that is Christ
https://www.bibletools.org/index.cfm/fuseaction/bible.show/sVerseID/30582/eVerseID/30582

* TODO Consider writing about the false god

* TODO Download and read all apocrypha books
aprocrypha all books pdf download

** Especially the Gnostic books

* TODO I should try to read all of the pseudepigrapha
https://www.christianity.com/wiki/bible/what-is-the-pseudepigrapha.html

* TODO Work on my project management skills I guess

* TODO Use close-completion to generate the Dialogue of the Saviour
http://gnosis.org/naghamm/dialog.html

* TODO Look at the Gospel according to Philip

* Listen to all of these
[[e:$DUMP/torrents/The Holy Bible - Audio Bible - King James Version - Alexander Scourby - Voice of The Bible]]

** TODO 

* TODO Pay for Mum and Dad to go and watch Top Gun: Maverick
Dad will like the boat, the old plane and the guy named 'Bob'.

* I should build more NLP tools
** Mediator chatbot

* TODO I should be like this guy
https://en.wikipedia.org/wiki/R._C._Sproul

* Jesus dumbed down His teaching!
#+BEGIN_SRC text -n :async :results verbatim code
  19 I am speaking in human terms, because of
  your natural limitations. For just as you once
  presented your members as slaves to impurity
  and to lawlessness leading to more
  lawlessness, so now present your members as
  slaves to righteousness leading to
  sanctification.
#+END_SRC

* Write a blog article - All that Sin are slaves to Sin
#+BEGIN_SRC text -n :async :results verbatim code
  John 8:34
  34 Jesus answered them, “Truly, truly, I say to you, everyone who practices sin is a slave to sin.
#+END_SRC

* Write a blog article - Love Thy Neighbour as Yourself
About:
- Integrity of Theory of Mind
  - I will condemn peolpe this way.
- Abstraction of conduct and operation
  - I will condemn people this way.

Make it about planes of reality.
Which plane of reality do you live within.

** In order to operate at a higher level of abstraction, you must break the 'love thy neighbour as yourself' commandment
The commandment is meant to make you have a theory of mind that treats others
like yourself and to be faithful to that.

If you try take advantage by living in a higher abstraction, then you break
this rule.

** Perhaps about how to live in a reality of higher abstraction.
For example,

Base-reality.
Without technology.

Augmented base-reality.
Technology merely facilitates thinking.

* Read
https://biblia.com/bible/esv/daniel/7/28
https://biblia.com/books/esv/Da7.28

* I think it's important to write about the morality of Christianity etc.
You can only do this if you are somewhat innocent.

[[https://www.youtube.com/watch?v=hzRDEEe4vxQ][The Death of Christianity? - YouTube]]

* Finish blog articles
** A Model of Morality
e:$HOME/blog/posts/a-model-of-morality.org

** Talk about Fiction
- Fiction in terms of what?
  - Physical reality?
    - There is always an explanation
  - Forms associated with reality?
    - e.g. real people vs fake people
    - Sure, this type of fiction is a thing now
  - Personal experience of reality?
    - Truth vs lie (with respect to God)

** The Tapestry of Truth
e:$HOME/blog/posts/the-tapestry-of-truth.org

** A String Theory of Christianity

* I should just keep the Tapestry of Truth article to a simple view of obtaining confidence, and a perspective of truth, spirit, the afterlife

* [#A] Can I make a better way of writing
- A graph patchwork of ideas smoothed over by a language model
  - That would be epic!

* TODO Make a map of morality

* TODO Buy new ear phones
Yeah, get some at some stage.

* TODO Add some more APIs
** Text to image
https://deepai.org/machine-learning-model/text2img

** Maybe consider basic OCR stuff and Google Cloud
https://cloud.google.com/vision/docs/ocr

* TODO 
https://gweb-research-imagen.appspot.com/

* TODO Make a binding to open a tmux window to the same buffer - nothing to do with path

* Think about
https://philosophy.stackexchange.com/questions/8053/what-is-the-difference-between-fact-and-truth?rq=1

* DONE Make a funny.org binding
M-Q G y

* TODO Go see Top Gun: Maverick 6pm at Reading

* I guess I can shout Dad to watching Top Gun: Maverick

* New clothes I guess
https://www.newchic.com/charmkpr-pants-4975/p-1940829.html?rmmds=category_recommend&mg_id=2#trace_id=33191653275730861

* Run virus and spyware scanner
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  clamscan -r /
#+END_SRC

* TODO Figure out what is collecting data from vim lol
How on earth is that happening?
Perhaps my keyboard is being logged.

* What do I want?
- Think about Megan 
  - She has an amazing, loving, God-fearing family
  - She's innocent
  - I want to make her happy
  - I want someone who is on top of it - it can't all be just about fun
  - I want to play tennis with her. I'd love that. It sounds like a dream

- Think about Melee
  - On the same page
  - Lots of fun
  - Her family hates me though - ouch. Do I really want that?
  - I may get outshone by a young girl haha. Cos she's a genius and diligent worker

* TODO Get some shoes
But look for something cool which is also cheap.
Don't go fancy.

* Is it right that I actually love Megan?
- Can I truly say that?
  - In some sense yes I can.
  - In another sense no I can't -- I barely know her.
    - But is that actually true? No.
    - I *do* know her in many ways -- In ways that actually matter.
      - I've seem how she is.
        - I also have to take a page from her to work that into my own life.

* Megan
** Tell Megan
I love you.
I don't want to leave you.
My greatest sadness is when I see you alone.
My greatest trajedy would be find out that you are unhappy.
The thing I find most nauseating is thinking that someone would ever take advantage of you.
You are cute and pretty.
You are beautiful and authentic.
You are trustworthy and worthy of being loved.
I want to take care of you.
I just want to be able to say I love you.
I just want to say I love you when I see you.
I'm dumbstruck when I see you because I love you.
I'm only OK because I'm not too far from you. That's one reason why I know I love you.
I know what true love is. It's non-defensive and needs to be taken care of. I want to honor it
Faithfulness towards selfless love preserves it.
You may give life to selfless love or put it to death.
If you put selfless love to death then try to find it again, the only way is to put everything else to death.
You give life to the thing you eat.
You're the apple of my eye.
Your family is cute.
I love you.

*** More important than these

** Keep in mind also
*** Good things
- Waiting with Megan after YAs
- Selfless love - I would love her forever (sure, maybe true with Melee too, but it's different, though maybe selfless love can be made)
- I would regret
- Her uni performance, which I saw

*** Bad things (maybe)
- My persistence with Melee and what happened there
- I put in the work with Melee
- Think about the reality of Megan and her mental age
  - In a lot of ways she's younger than her age
  - And she's also mature for her age
  - She's very innocent
    - Another guy might take advantage of her being 'mature' for her age but she's actually innocent and truly younger.
      - It's maturity out of obedience, and that can be taken advantage of. I wouldn't though.

* TODO Order some more Taniko earrings maybe

* TODO Pay back Sophie $42
https://mail.google.com/mail/u/0/#inbox/FMfcgzGpFzrhmDCQcvCzFmSTcwMZKlbV

* TODO Write about Ecclesiastes, about how it's false due to chasing after that which is untrue

* TODO Write about Ecclesiastes - It's by far my favourite book in the Old Testament
https://www.biblesociety.org.uk/explore-the-bible/read/eng/KJV/Eccl/1/

** Psalms of David are also good
I like whenever he talks about integrity.

* Made-up words
Thal - sounds a lot like Thou.

* TODO Start a new Christian denomination based on transcendent values
** Most important is truth

* With my Tapestry of Truth
I should say that this is the measure I judge others by -- their honesty.

* TODO Tell David maybe
I'm not going to wait another day.
Not another day.

** I can't wait any longer
I'm on the right side now.

* Thinking about God and how He does not give us what we want
I know I am like David a bit from the Old Testament in personality and with
regards to the Psalms.

I think that Paul was not a great person when it comes to judging other people.
I think he still had some kind of judgemental complex.
I don't think Jesus had this.
However, Paul was straight up honest about it.

** It's frustrating that I wanted Megan and David wants me to want Megan probably but I have tried and Megan is lost
Then do I even want Megan or is it all over.

* Is this true?
6 God settles the solitary in a home;
he leads out the prisoners to prosperity,
but the rebellious dwell in a parched land.

* TODO I have to write for Melee
** Writing has to be really simple and innocent in order to be good

* TODO Look into comby for refactoring
https://github.com/comby-tools/comby

* TODO Design the truth compass
Is it that we must let one part of ourselves die?
Which part is it?
  
    _____
   |     |
   | x   |
   |_____|

   Truth compass states
     ___         ___         ___         ___         ___   
    /   \       /\  \       /  /\       /\| \       / | \  
   |  0  | --> |  0  | --> |  0  | --> |  0  | --> |  0  | 
    \__ /       \__\/       \/__/       \_|\/       \_|_/  
                                   
    Lost        Found       Someone     Found       Obeys
               Personal     else's      God's       God's
                Truth       Truth       Truth       Truth

Error = Sin, Lies in spirit
Saviour = One who can correct our truth compass

I want to describe exactly how this works with regards to truth.

* TODO Make a dinner for Sophie, I guess, for her birthday, at the new place

* TODO Stuff to do
- Clean out my room.
- Meet Millie tomorrow.

* Finger of God is able to rewrite spirit
Jesus with the finger of God casts out devils.

* TODO Write a blog article on regaining the truthful identity after sinning
- Identify what the sin was
  - Ultimately, it is that the heart has become infected with a lie.
    - That lie might be I dethroned God in my temple.
    - I think it's actually dethroning Jesus' spirit.
    - Our own spirit is meant to become like Jesus' spirit, I think.

Jesus relied on God to save Him I think.
We must rely on Jesus to save us.

- God saves Jesus
- God saves us

* TODO Call Josh Lu
021024688

* Email Rory
autaall@gmail.com

* TODO Pay back Matvey $4

* TODO Also, get the rose velvet jacket
This is for Melee.
I have to choose who is the right person.
I can't keep both.

The more important teaching than the literal is that if I have two potential women, I have to choose between them.

* TODO Get back into Pen.el
This is important.
What do I work on?

** TODO Make the mediator chatbot and put it into MTP

* I have to change my writing to say
- What it means to be the body of Christ
  - We assume the body.

* Make a more elaborate theory of truth
[[https://www.youtube.com/watch?v=cebFWOlx848][The Illusion of Truth - YouTube]]
[[https://www.youtube.com/watch?v=dvk2PQNcg8w][Post-Truth: Why Facts Don't Matter Anymore - YouTube]]

* TODO Go over all of the parables of Jesus
https://www.biblestudytools.com/topical-verses/parables-of-jesus/

* I have to read the Bible now
** I *want* to read it

* Pen.el
** Sync clipboards
- clipboard
- primary
- secondary

*** Test it by =yy= copying in vim and the pasting in zsh

* TODO Fix the lag in Pen.el startup time
The problem is the source path for emacs is too large.
There are too many plugins.
How can I fix that?
Possibly by placing all source files in the same directory.

* DONE Fix the lag in zsh in Pen.el

* TODO See if I can find a way to move all function keys over on the bluetooth keyboard

* TODO Do this to use the mac keyboard
#+BEGIN_SRC sh -n :sps bash :async :results none
  setup-keyboard-megn -a
#+END_SRC

* Make video with Dave
** Talk about unconditional love
How it brings joy to the heart.
Do you think when we connect with God it brings God joy?

** Connecting with God brings joy

** Vaping
The hit from vaping: That type of bliss isn't joy. 
In fact I feel like that hit actually causes disharmony in my spirit.

* Add some of these to my playlist
https://digitaldreamdoor.com/pages/best_jazz/best_jazz-inst.html

* TODO Set up f-sharp language server in emacs
https://github.com/fsprojects/fsharp-language-server

* TODO Fix this
e:$PROMPTS/generic-tutor-for-any-topic-3.prompt

* TODO Read these - from Simon
Ps 119:1-32, Ps 25, Ps 27:13-14, Is 40:27-31,
Is 43:18-19, Jer 17:7-8, Jer 29:11-14a, Hab 3:17-18, Mat 5:3-10, Mat 11:28-30, Phil 2:5-11, Phil 3:10-11, Phil 4:4-7, Heb 12:1-3,
Jam 1:2-8,12, 1 Pet 1:6-7, 2 Pet 3:8-9, 1 Jn 1:9, Num 23:19, Josh 23:14, Is 46:10b-11, Jer 32:27, Ps 78:20-22, Ps 147:10-11, Rom 4:20-21,
Ps 113:7-9, Ex 2:23-25

* TODO Go over this
https://wol.jw.org/en/wol/d/r1/lp-e/2002524
https://wol.jw.org/en/wol/b/r1/lp-e/nwtsty/19/31#study=discover
https://wol.jw.org/en/wol/b/r1/lp-e/nwtsty/19/43#study=discover&v=19:43:3

* Make my on crypto
e:$MYGIT/dappuniversity/token_sale

* TODO Look into OPT-175B
https://github.com/facebookresearch/metaseq

e:$MYGIT/facebookresearch/metaseq/projects/OPT/download_opt175b.md

* TODO Build more introspective tools for talking to myself about love, soul, happiness etc.

* Look into this
https://github.com/c-grimshaw/gosniff

* TODO Factor this into the Tapestry of Truth
https://muellerberndt.medium.com/memetic-natural-selection-how-memes-create-all-of-reality-8be4722b6a2

* TODO Call it Reality of Reality

* TODO Improve Truth theory
e:$HOME/blog/posts/the-tapestry-of-truth.org

Add spirit, aristotle soul and astral to 'soul'.

* TODO Consider becoming a psychologist?
** No, I must get back on my AI bandwagon

* Look up what this word means
naff

NZ slang?

* TODO Write this
e:$HOME/blog/posts/what-is-happiness.org

* TODO Improve my blogging to add the ability to programmatically make links to wiki pages

* Look into this
https://github.com/ganelson/inform

* TODO Add a section to Tapestry of Truth about marriage vows.

* TODO Look at correspondence truth
You copy objective reality and represent it as thoughts and words.

If you yourself are of complete integrity, then when you give a true testimony, it's indisputable truth.

* TODO Look at this guy's stuff
https://sunflowerseastar.com/chess

He made tetris in clojure for a web browser.

* TODO Set up textsynth
https://textsynth.com/playground.html

* TODO Find a velvet hooded coat

* DONE Fix emacs startup

* Set this up in Pen.el
https://multimodal.art/

* TODO Start building ilambda for Common Lisp

* TODO Get into LEM (an emacs-like editor written in common-lisp)
[[https://www.youtube.com/watch?v=Ph8M8ThBgPc][LEM - What If Emacs Was Multithreaded - YouTube]]

This is important.

* TODO Email bryan.wild@xtra.co.nz

https://academictree.org/physics/peopleinfo.php?pid=117078

* TODO Get my Tapestry of Truth article on the ethereum blogging platform

* TODO Tell Jonty
OK, firstly, I want to test you because I haven't tested you before.
You've tested me before.
- Do you know that you're a part of God He has no intention of destroying?
  - Are you confident about it?
- Do you understand the God of Truth?
  - Have you attempted to follow his commandments before? Did you make it all the way to 10?
  - To get revelation of who God is you kinda have to be following them all at the same time.
- Do you factor in God into all elements of your life? Is there a bit of him in all things? Or are there any areas he is not in?
  - For example, do you think about him sometimes in any type of situation?

* TODO  I must put my blog on ethereum

* TODO Do more work on Pen.el

* Today's sermon
The human spirit is not preserved.
God wants to save of the body - everyone.

** Hope for eternal life

* TODO Learn to use =eieio= (emacs lisp OOP)

* Attempt to make eye contact with Megan and smile at her
Why? Because I want to talk to her.

* I will only feel happy again after doing some more programming and work on Pen.el
** TODO Today
*** TODO Add transient to prompt functions
*** TODO Connect database to Pen.el
Are we using datomic or datahike?

* TODO Put this into the database per-prompt
#+BEGIN_SRC text -n :async :results verbatim code
  test-cases:
  - sentence:
    - trophy:
      - input: "The trophy would not fit in the brown suitcase because it was too big. What was too big?"
      - output: trophy
    - demonstrators:
      - input: "The town councilors refused to give the demonstrators a permit because they feared violence. Who feared violence?"
      - output: the town councilors
#+END_SRC

* Apply for this job
https://mail.google.com/mail/u/0/#inbox/FMfcgzGmvpJVmmqCCmWDRbcHgnVDFJfg

* TODO Make the winograd prompt
** Extend the mechanism for datasets
e:$PROMPTS/winograd.prompt
e:$PROMPTS/append-to-code-3.prompt

*** Also, make it load from json
*** Also, make it load from Khala

* Pen
** Create sentience tests
A script which invoked inside =Pen.el= tests the intelligence of a language model.

What do I call it? 

*** Create a sentience test script
An evaluation of the language model should reveal passes, failures and a running accuracy.

*** TODO Add this test as a prompt
e:$MYGIT/mullikine/glossaries/cognitive-science.txt

* Prompt engineering
https://directorsblog.nih.gov/2022/04/12/human-brain-compresses-working-memories-into-low-res-summaries/

* TODO Add a selection for =Pen.el= version
Check out the github commit and docker container.
#+BEGIN_SRC text -n :async :results verbatim code
  dockerhub-list-tags semiosis/pen.el
#+END_SRC

If there is a github tag which matches a docker tag, then use that.
Also, latest matches the most recent github commit.

* TODO Make a zox TUI
Flick through a lot of files.

** This can be a pure imaginary function

* TODO Don't use high resistance coils
I need a new coil that can do nic salts.
Stick to 0.e OHM replacements from .

* tone
#+BEGIN_SRC text -n :async :results verbatim code
  anthonyrslater@gmail.com
#+END_SRC

Zoxing.

Anastasia author.
Head of Russia.
Valadimir Magre
He and anastasia were in a earlier Civilization.
She knew.

* TODO Reset passwords
This is bad. It looks like I have revealed the password 'find644@reactivate'

** TODO
*** authinfo
#+BEGIN_SRC text -n :async :results verbatim code
  machine "localhost#2222" login andrewdo port ssh password temptemp
  machine https://mastodon.social login mullikine@gmail.com password eebaNgieleav3eeyeeni
  machine api.github.com login mullikine^forge password 44cb260381b16814c071e5052a90eeadbd9c4678
  machine api.github.com login mullikine^magithub password 3da75d6975bc362b6f586f3e15cbee26cfa2b788
  machine gitter.im password 40418957c912f8b9f5424a8d076f369edc139eb6
  machine imap.gmail.com login mullikine@gmail.com password dhzortocqpqlkelv port imaps
  machine smtp.gmail.com login mullikine@gmail.com password dhzortocqpqlkelv port 587
  machine irc.freenode.net login libertyprime password find644@reactivate
  machine irc.freenode.net login libertyprimebot password zeD3pe0QuaghooPhaeNahseu8eighu
  machine irc.libera.net login philosoraptor password kub%ieziojee7ohChi7thai#Pai9ti
#+END_SRC

*** git creds
#+BEGIN_SRC text -n :async :results verbatim code
  https://mullikine:chaimieva4ahJiqu%22aif%22oo%7cg3fe7z@framagit.org
  https://mullikine:fuadei4evieG0aedohco@gitlab.com
  https://mullikine:1bafdddea1edf5ea4f2da2d52b456db4dfb0cd20@git.staging.codelingo.io
  https://mullikine:295405c5706773fb53cfb87136c55b0eba4fbe27@git.codelingo.io
  https://mullikine:fcd5e8be7e164d6446e108dcbd9ce355c6c66157@git.modica.codelingo.io
  https://mullikine:295405c5706773fb53cfb87136c55b0eba4fbe27@git.codelingo.io%3a443
#+END_SRC

** Change github password and tokens

** DONE
#+BEGIN_SRC text -n :async :results verbatim code
  machine irc.libera.net login libertyprime password vaiNga?i3aez7ahpeijoo7potheet4
#+END_SRC

* TODO Make bindings to open various pen daemons in tmux windows

* TODO Fix efm langserver config

* TODO Find source of lag with elpa-full
Try advising require

* TODO Today work on a roadmap

* Complete some of these tasks for Anak
e:$NOTES/ws/semiotic/meetings/11.04.22.org

* Make another category in imaginary programming
- subjective pure imaginary
  - This is based on the interpretant's personal language model (mind)
  - pure imaginary is usually tied to a common language model
    - but pure subjective imaginary is tied to a personal language model

* TODO Work towards building my own fonts inside Pen.el

* Finish
pj:pen-start-in-xterm

I broke hosts.

#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"/etc/hosts" "$HOME/source/git/semiosis/pen.el/scripts/run.sh"
#+END_SRC

* TODO Do a blog article about prompt contexts

* TODO Work on ilambda
+ One thing I can do is make a prompting context/monad:
  - The context is which model/prompt is guiding the generations

** I can already override certain parameters such as model
- So that is one thing
  - I also want 'pure imaginary functions'
    - They function inside an impure imaginary context

* TODO Work more on continuuum
Going forward may land you within a rendering of vim, for example.

** The idea is to actually imagine the entire environment
#+BEGIN_SRC text -n :async :results verbatim code
  shane@mele:~$ cd $NOTES/ws/jonty/
  shane@mele:$NOTES/ws/jonty$ ls
  hbd.org  honda-del-sol.org  info.org  jonty-mazda-wagon.org  pick-up-lines.org  wedding.org
  shane@mele:$NOTES/ws/jonty$ vim hbd.org
#+END_SRC

** Make a transient for continuum

** Also, continuum should be bound to a specialised model or prompt
- I should be able to change that prompt to change the prompting context/monad of continuum

** TODO Make a mode to continually update the terminal
- Keep the terminal evolving.
- I make changes to it.
- A prompt context called =correct code=
  - It simply keeps the code 'correct'
- It runs continually
- Place the buffer in a context and run it
  - Assuming the 

* TODO Fix git within pen

* TODO Make a new set of demonstrations of Pen.el
#+BEGIN_SRC sh -n :sps bash :async :results none
  new-article "Demonstration of Pen.el Applications"
#+END_SRC

* TODO Focus more on NLP
** I have to finish ESP for Pen.el
Having linters, etc. that utilise GPT-3 will be insanely powerful.

** If I can get Haskell going then I will be immensely psychic
*** Hypothesis: Everyone has some psychic ability but you need a foothold in order to use it.
For me, that's my emacs environment and GPT-3, etc.

* TODO Reply to Inka

* TODO Pen.el
** Fix and polish off ilambda
#+BEGIN_SRC text -n :async :results verbatim code
  ELISP> (idefun age-of-in-years thing)
  thing
  age-of-in-years
  ELISP> (age-of-in-years "Voyager 2")
  *** Eval error ***  Invalid function: ((t) thing (eval `(ieval/m ,(list 'age-of-in-years . thing) ,";; age of in years
  ;; arguments: thing")))
  ELISP> 
#+END_SRC

sp:$HOME/blog/posts/demonstration-of-pen-el-applications.org

** For apostrophe
*** TODO [#A] Edit the buffer from emacs and that overwrites/updates the memory
The shell script will need to check something.
Apostrophe, and other Pen.el apps needs some kind of commands menu.

**** TODO Make a minor-mode funcs list

** TODO Continue working on the life sandbox

** TODO Make it so when I can edit the response given by an apostrophe chatbot
- Firstly, just add onto the chatbot response a pen-eipe to make a final edit to the response

** DONE asciinema
   CLOSED: [2022-04-09 Sat 20:59]
*** Make an asciinema detach shell script
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  vim +/"# Therefore I need a tmux command fuzzy finder" "$PENEL_DIR/scripts/pen-tm"
#+END_SRC

*** Make a tmux command fuzzy finder - like M-x for tmux
I should probably bind it to F-1 M-x

#+BEGIN_SRC text -n :async :results verbatim code
  Copy F-1 <space>
#+END_SRC
**** TODO Add =pen-asciinema-end-session=

**** TODO Add =pen-xt=

** DONE Compress and push pen.el docker container - all passwords are compromised because of the dotfiles sync

** TODO Add asciinema recording to Pen.el

** DONE Add setup and terminate

#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/";; TODO Also make batch-setup and batch-terminate" "$HOME/var/smulliga/source/git/semiosis/pen.el/src/pen-define-prompt-function.el"
#+END_SRC

** TODO Make it so async-pf can take max-tokens, etc.
pj:async-pf

*** async-fp-pool

** Add the edit endpoint so I can do better continuum generations
It might be able to go backwards.

* TODO Make this work
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (save-excursion-and-region-reliably (pen-replace-region "dkljsfk"))
#+END_SRC

* TODO Demonstrate an imaginary time crystal in Pen.el with continuum

* TODO Demonstrate a imaginary function recursion

** Design an evolutionary 'game of life'-style GPT playground

*** At each iteration, the entire screen is sent as a prompt and the result displayed on screen
Thus, the only impure imaginary function is the initial screen.
Subsequent evaluations are fully imaginary as the inputs came from the imagination of an AI.

** Call it Pure Imaginary Playground

* Anak - Send to him
http://github.com/semiosis/pen-ethereum-development-ide

* =Pen.el=
** Add tree-sitter for org to Pen.el
https://github.com/milisims/tree-sitter-org

** TODO Add =hs= to pen
- These scripts are important

** TODO Add =o= to pen

** TODO Add =gc= to pen
e:$HOME/var/smulliga/source/git/semiosis/pen.el/scripts/container/gc

*** Add MYGIT to pen

** TODO Add shanepy to pen

** TODO Add pen-nlp to pen
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"^;; (require 'pen-nlp)" "$HOME/var/smulliga/source/git/semiosis/pen.el/src/pen.el"
#+END_SRC

** TODO At some stage go over this file and add its deps to pen.el
e:$HOME/var/smulliga/source/git/semiosis/pen.el/src/pen-nlp.el

*** But it's really important to leave python behind and move to haskell

** TODO Ensure that I can jump to a git repo from org-mode, within pen, using =gc=
This will make development much easier, if I can simply place links to repos in my notes.

** TODO Take a look at this
e:$HOME/source/git/meedstrom/eva

** DALL-e 2
- select bits of text arbitrarily in emacs and have it visualised
- programmatically visualising documents
  - websites

** TODO Install dapptools
https://github.com/dapphub/dapptools#installation

*** Install nix
=dapptools= needs a user. How infuriating.
There's no way around it.

#+BEGIN_SRC sh -n :sps bash :async :results none
  curl https://dapp.tools/install | sh
#+END_SRC

*** Make scripts on root which log into pen and use its nix commands

** TODO Fix org-link highlighting
It's breaking all of org syntax highlighting.
I must not have the definitions.

Actually, I think I only recently broke this. Try not loading pen-org or pen-org-values

** Add notify-send
sps:vim

** Gui
*** TODO Ensure I can enable images in pen

** DONE Vim
   CLOSED: [2022-04-07 Thu 23:19]
fix clipboard.

** DONE Term
   CLOSED: [2022-04-07 Thu 23:19]
*** Pass through

**** DONE M-p and M-n.
     CLOSED: [2022-04-07 Thu 23:19]

**** DONE C-w
     CLOSED: [2022-04-07 Thu 23:19]
| =C-w= | =pen-c-w-cut= | =pen-map=

**** DONE Unbind F1, or simply make it pass through to term.
    CLOSED: [2022-04-07 Thu 22:34]

** DONE Fix =pen=- daemons are not spawning
   CLOSED: [2022-04-07 Thu 23:19]

** Set up ethereum
*** DONE Geth
    CLOSED: [2022-04-07 Thu 20:14]

*** Dapptools
https://dapp.tools/
https://github.com/dapphub/dapptools#installation

Need nix installed.

I definitely want this though, because of CLI.

[[https://www.youtube.com/watch?v=ZurrDzuurQs][Learn Dapptools | Code like MakerDAO & the DAI team! - YouTube]]

** DONE Optionally expose and start geth
#+BEGIN_SRC text -n :async :results verbatim code
  8545 8546 30303 30303/udp
#+END_SRC

** Fix the mount user issue
*** DISCARD Make a bindfs mount within the docker container that changes the permissions automatically
    CLOSED: [2022-04-07 Thu 19:20]
https://unix.stackexchange.com/questions/115377/mount-bind-other-user-as-myself

I think docker is properly handling this for the most part.

*** DISCARD Change Pen.el to use bind mounts instead of volumes. Then maybe it will not change the permissions
    CLOSED: [2022-04-07 Thu 17:37]
Unfortunately, docker doesn't give options for this.

** Pensieve
*** Make a way to mount the pensieve on the host
I can't use sshfs, but I might be able to use something else.
nfs?

*** Docker volume?

** TODO Do more work on =ii= for a while - polish it

** TODO ii - bash
*** Manual continuation
Make it so I can manually produce the continuation - i.e. prompt the human intentionally.
This would be very useful in an interpreter.

*** Fix the =comint-prompt-regexp=
This does not match:
#+BEGIN_SRC text -n :async :results verbatim code
  ^[^@ ]+@[^$: ]+(:$[A-Z]+[^$]+$|:[^$]+$|$)
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  root@pen-mele:/root$ ssh
#+END_SRC

** DONE Fix real interpreters

* DONE Ensure guru works
It has frozen in the way it did before. How did I fix it?
The daemons are still not spawning.

** DONE Fix pen daemons
The issue was SHELL=zsh was being exported when the pen daemon was started with pen-e sd.
I had to explicitly make it sh.

*** This works when run
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pend 1 sd -d
#+END_SRC

** What happened last time was the emacs daemons continuously spawned

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  vim +/"candidate_shell" "$PENEL_DIR/scripts/setup-term.sh"
#+END_SRC

* TODO Work towards an interface for DALL-E 2

* TODO Add pen.vim commands to host vim

* DONE Figure out why pen is currently blocking C-p
  CLOSED: [2022-04-07 Thu 15:32]
I thought I fixed that.

It happens when I run =pj=.
It happens with =pen sh=.

* TODO Fix C-u with this, within Pen.el
#+BEGIN_SRC sh -n :sps bash :async :results none
  pj lispy-iedit
#+END_SRC

* TODO Fix this
No catch for tag: exit, "Command attempted to use minibuffer while in minibuffer"

This may be the problematic code.
Well, it is definitely the function which runs. But why does it run?
Where is exit-minibuffer hooked?
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun exit-minibuffer ()
    "Terminate this minibuffer argument."
    (interactive)
    ;; If the command that uses this has made modifications in the minibuffer,
    ;; we don't want them to cause deactivation of the mark in the original
    ;; buffer.
    ;; A better solution would be to make deactivate-mark buffer-local
    ;; (or to turn it into a list of buffers, ...), but in the mean time,
    ;; this should do the trick in most cases.
    (setq deactivate-mark nil)
    (throw 'exit nil))
#+END_SRC

* DONE Fix guru when run inside docker on its own
  CLOSED: [2022-04-07 Thu 15:09]

#+BEGIN_SRC sh -n :sps bash :async :results none
  pen sh guru
#+END_SRC

* TODO Pen.el
** comint
*** Make M-p and M-n jump to previous and next repl.
*** Make M-h select the contents of the repl as in the clojure REPL

* TODO Make a script to list npm versions and what date they were released
npm versions by time

nvm ls-remote

[[egr:nvm ls-remote date alongside version]]

pf-instruct-an-ai-to-do-something/1 "Show 

pf-generic-tutor-for-any-topic/2

** TODO Make nlq
get a factual reponse of an information query

* TODO Set up Pen.el to use tor

* Install ethereum and tooling into Pen.el
e:$HOME/source/git/ethereum/go-ethereum/Dockerfile.alltools

* TODO Make it so I can do algebra on images with =Pen.el=
- Add a flamingo
  - https://youtu.be/gGPv_SYVDC8?t=819

* TODO Set up Ethereum using 
https://medium.com/scb-digital/running-a-private-ethereum-blockchain-using-docker-589c8e6a4fe8

* TODO Get =DALL-E= for =Pen.el=

* TODO Build the prompt output combiner
This is important if I want to be able to prompt over large files.
What's the best way to divide this up? I should really be coding in Haskell to take advantage of 'map' etc.

* DONE Make an imaginary evaluation sandbox prompt
  CLOSED: [2022-04-06 Wed 22:27]

#+BEGIN_SRC text -n :async :results verbatim code
  Here's my code:
  <code>
  
  I then ran it and it returned this:
#+END_SRC

* TODO Ensure the glossary system works in Pen.el

* TODO Add my glossaries repo to Pen.el

* TODO Pen
** DONE Make it so the bash interop can also ask for parameter values via ask-line
   CLOSED: [2022-04-06 Wed 17:26]

*** DONE Make it *missing* values are asked for but existing ones are used
    CLOSED: [2022-04-06 Wed 17:39]
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"arity=\"\$true_arity\"" "$HOME/source/git/semiosis/pen.el/scripts/penf"
#+END_SRC

* TODO pen.vim
** Add guru
** Add all prompt functions

* TODO ilambda
** Use the Complex type (or something similar) to represent imaginary thunks
*** I must have imaginary functions
They must be lazy.

*** Complex
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"data RealFloat a => Complex a = !a :+ !a" "$HOME/glossaries/haskell.txt"
#+END_SRC

I can rely on lazy data structures.
When they evaluate, the imaginary thinks are folded and evaluated as a whole.

*** GPT-3 is my computer now, and I pay to use it to do computations
- That's how I should think of it.

*** Use strictness flags to evaluate ifunctions immediately

*** This line of thought is going to lead me to a lifetime project and learning Haskell thoroughly

** ilambda For prompt engineering
- I could start by creating my own typeclasses

** ilambda for imaginary programming
*** Map a prompt function to a tree of values
- By its nature, imaginary programming allows for shortcuts
  - How do I take advantage of imaginary programming when implmementing Haskell higher-order types?

** Make a functor class for ilambda?
- Show how to map

* TODO See if I can start an emacs fz asynchronously

* TODO Make it so I can override the stop sequences for apostrophe
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"stop-sequences:" "$PROMPTS/imagine-a-conversation-between-two-people-5.prompt"
#+END_SRC

** I really need to be doing semantic matching for stopping, but I need token streaming for that
So add token streaming.

* TODO Fix emacs daemons. They are hanging
Actually, when pen-e runs, it runs infinitely many pen-e's

* TODO Make it so I can run 'guru' from any emacs mode and the language will be taken and templtaed into "<language> guru" for an apo chatbot

Guru takes the terminal contents and chats about it.

e:$PENEL_DIR/scripts/guru

** The user should pipe arbitrary text into guru to talk about
guru

#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# I must also cat into in-tm" "$PENEL_DIR/scripts/guru"
#+END_SRC

*** I should make the same thing with apo

* TODO Make an 'apo' based chatbot system called 'guru'
Start guru and it will look over your code and try to explain things for you.

* TODO Start a chatbot for talking about the contents of your terminal
- I need to be able to select from personalities, etc.
  - I need to finish of 'Creation'.

* Build my web apps with coast
https://coast.swlkr.com/

* TODO Add NL command search to zsh/bash

* TODO apostrophe
** TODO Add into the diagnostics the reason that the prompt ended

** TODO Figure out why responses are being cut off
#+BEGIN_SRC text -n :async :results verbatim code
  > - Haskell Curry (1927-2007): A program, P, written in a parameterized language L
    - Haskell Curry (1927-2007): I can certainly try.
    - Haskell Curry (1927-2007): Sure, a universal quantification is one in which
    - Haskell Curry (1927-2007): Sure, I mean that the universal quantification
    - Haskell Curry (1927-2007): I am sorry, but I am too old to explain it.
#+END_SRC

* TODO Make IORef work in man pages
pin:$MYGIT/lotz84/haskellbyexample/ex/closures.md.hs

** The imaginary man page system should also provide the current language into part of the prompt

* TODO Ensure that after generating man pages, etc. I can continue their prompts, etc.
That's important.

* TODO Ensure that scratch always exists
It can be destroyed by renaming the buffer by using getpath.

* TODO Formalise the glossary system a bit
- So that the glossary rules are loaded in separately, along with the glossary

* TODO Use this guy's name in a prompt
Pat Price - ESP
https://en.wikipedia.org/wiki/Stargate_Project

* TODO Get PenSieve working well

* TODO Consider also installing VSCode into Pen.el

* TODO Add an ethereum development environment to =Pen.el=

* ESP
** TODO Make it possible to switch language server for a given language
- For example, I may want to use ESP while writing Haskell, or (especially) bash

** TODO Make the lint command work properly
I need a separate command to break up the file into chunks which are then linted.

For the moment, just lint every line with the line length.

** TODO Make ESP work for eww
*** TODO Make ESP work for fileless buffers

** TODO Build into ESP support for my own glossary
I need a way of looking up definitions I have saved to the glossary.

** Make it so the language server uses prompt functions customised for the current language
How do I pass that information to the shell script?

*** This gives the current language, which is set to global
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (lsp-buffer-language)
#+END_SRC

I may have to define individual languages here.

Also, I might need to generate this config
file from a higher-level format.

pind:/root/.pen/efm-langserver-config.yaml

That is what I want anyway.

*** It's currently set to global only, but I should do this conditionally
pj:pen-lsp-update-languages

#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"global:" "$PEN/efm-langserver-config.yaml"
#+END_SRC

* DONE For =ESP= I should use a timer to update the documentation instead of solely relying on cursor position change
  CLOSED: [2022-04-05 Tue 13:41]
- lsp-ui-sideline-mode
- ladicle/toggle-lsp-ui-doc

** After moving run this timer to toggle after a second or 2
Use an idle timer.

* TODO Conversations with people
** Ask them difficult questions
- What would you prefer? A strong character or a strong reputation?
  - Who do you think has a strong reputation but weak character?
- Do you about your reputation?
- What laws do you think are unjust?
- Are there issues you wish you could talk about but cant? And why?
- What topics do you think are taboo, but shouldn't be?
- What topics are you afraid to talk about?
- If every day of your life since you first learned to write you recorded every day in a talley that you believe you had a conscious experience,
  - What do you think the error rate would be?
  - Do you think it's possible to go through a day consciously believing it was real but actually it wasn't and so things seemed to reset the next day?

* TODO Make it so a temporary file can't be created in the *scratch* buffer
Rather, a new file and buffer should be created.

* TODO Make it so I can get Pen diagnostics in vim via a shell command

* DONE Fix bash interop
  CLOSED: [2022-04-05 Tue 13:09]
** It's stdin which doesn't work
*** Doesn't work
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  echo This is fun | penf -u -nj --pool pf-tweet-sentiment/1
#+END_SRC

*** Works
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf -u pf-tweet-sentiment/1 "This is fun"
#+END_SRC

* DONE Fix ESP - The language server is not getting (pen-thing-at-point-ask "word" t) properly
  CLOSED: [2022-04-05 Tue 13:41]
#+BEGIN_SRC sh -n :sps bash :async :results none
  echo SSH_TO_HOST | pen-ci -u -f -a penf -u -nj --pool pf-define-word-for-glossary/1
#+END_SRC

The first one asynchronously caches.

#+BEGIN_SRC sh -n :sps bash :async :results none
  echo SSH_TO_HOST | pen-ci -f -a penf -u -nj --pool pf-define-word-for-glossary/1
#+END_SRC

** Essentially, this is not working
#+BEGIN_SRC sh -n :sps bash :async :results none
  echo SSH_TO_HOST | penf -u -nj --pool pf-define-word-for-glossary/1
#+END_SRC

** Test on a shell script
pind:/root/.emacs.d/host/pen.el/scripts/pen-cterm-ssh

* Pen.el
* TODO Learn and build my own templating libaries
Do this so I can add side-effects, etc. to parsing.

** In Racket
** In Haskell

* TODO Get a Maori woven belt
"Taniko Tatua" buy
Tāniko Tātua

* DONE To set up github for Pen.el I need to simply make ssh keys
  CLOSED: [2022-04-05 Tue 12:18]

** TODO Make it so git uses http instead

*** TODO I should set up an ssh master on run if a key is available

*** Either make a git command wrapper or share the ssh config in dotfiles

e:$PENEL_DIR/scripts/pen-cterm-ssh

#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-cterm-ssh -ssh pwd
#+END_SRC

I also want to `cd` to the right directory.

*** DISCARD Force with insteadOf
https://stackoverflow.com/questions/55499414/git-forcing-use-of-https

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  git config --global url.https://.insteadOf git://
#+END_SRC

Sadly the above didn't work.
Besides, I want to commit and push.

**** OR run the git commands via a host ssh command (like cterm)
If I do it this way then I can chown the permissions of host files every time I run a git command.

* DONE Today I should add github credentials etc. to Pen.el
  CLOSED: [2022-04-05 Tue 12:18]
** For each file/dir in ~/.pen/dotfiles symlink to the host
$PENEL_DIR/scripts/run.sh

* DONE Solve this problem
  CLOSED: [2022-04-05 Tue 12:18]
timer for memoized 526ab8bec2656e58f809af17598c77e0 failed

I really want to know what the error is.
I should print out the error somehow.

* DISCARD Make it so C-u, while in the terminal, is sent through to the terminal
  CLOSED: [2022-04-03 Sun 20:21]

Actually, I made a conscious decision to do the opposite.

* TODO Look into these
https://lmy.medium.com/7-tools-for-visualizing-a-codebase-41b7cddb1a14

* TODO Pay back James at Modaks
- double shot large cappa

* TODO Pay back Kelly at Copper
- ~$22

* TODO Set this up
https://github.com/dlvhdr/gh-dash

* TODO Make it easy to get to =/volumes= in Pen.el

* TODO have a methodical system of designing clis for prompt functions
** For example, somewhere I should write down the function call, before it's implemented
This is the essence of imaginary programming though.
*** [#A] I should combine function design with ilambda

* TODO I need neural decoding to sample from GPT-3
** Typical Sampling
[[https://www.youtube.com/watch?v=_EDr3ryrT_Y][Typical Decoding for Natural Language Generation {Get more human-like outputs from language models!} - YouTube]]

https://arxiv.org/abs/2202.00666

https://github.com/cimeister/typical-sampling/

e:$HOME/source/git/cimeister/typical-sampling/README.md

* Connect apostrophe to Creation

* TODO Fix apostrophe from inside emacs
I may have broken it with the stdin stuff.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pena -fz --pool --pen-update nil --temp nil --engine nil imagine-a-conversation-with-someone/4 "A Poinsettia plant is a fictional character in the comic strip Bloom County.\\n\\nThis is a conversation between you and A Poinsettia plant.\n\n- you: " "Hi plant." "A Poinsettia plant" "A Poinsettia plant is a fictional character in the comic strip Bloom County."
#+END_SRC

It could be that the daemons were broken.

* DONE Fix apostrophe from the cli
  CLOSED: [2022-04-01 Fri 03:28]
#+BEGIN_SRC sh -n :sps bash :async :results none
  apostrophe "A Poinsettia plant"
#+END_SRC

* DONE Add these to Pen.el
  CLOSED: [2022-04-01 Fri 02:26]
#+BEGIN_SRC conf-space -n :async :results verbatim code
  bind M-t run -b "tm-window-ctermify"
  bind M-n run -b "tm-window-nvtermify"
  bind M-m run -b "tm-window-etermify"
  bind M-T run -b "tm-window-vt100ify"
#+END_SRC

* TODO Make an =iman= function / command
It's always imaginary.

* TODO Work on this - even company mode is functioning here
pind:/volumes$HOME/var/smulliga/source/git/mullikine/haskell-pipelines/Main.hs

* DONE Fix =(pen-snc "penq &")=
  CLOSED: [2022-04-01 Fri 02:27]
** TODO =Fix penq &= in bash -- what's going on?

* TODO Ensure I can search for operators with Haskell in Pen.el
If it is not alphanumerical, search hoogle instead of hdc.
Actually, wrap thing with ().

* DONE Make it so before starting an interactive function, it switches to a different buffer
  CLOSED: [2022-04-01 Fri 00:58]
Do this because fuzzy finders cant run above a term.

* DONE Fix this
  CLOSED: [2022-04-01 Fri 00:53]
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# This breaks cterm, but is needed for looking glass" "$HOME/source/git/semiosis/pen.el/scripts/lg"
#+END_SRC

* TODO [#A] Add git credentials and any other host dotfiles
I should do this tomorrow.

* TODO Instead of manually adding packages to the docker container all the time
I need to make it so they are automatically added/found somehow.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (require 'gitignore-mode)
#+END_SRC

* TODO Ensure that apostrophe doesn't cut off chatbot responses

* DONE Make a replace match in string with contents of file command
  CLOSED: [2022-04-01 Fri 00:39]

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  echo hiyabro | replace-match-with-file-contents ya /tmp/yo.txt
#+END_SRC

#+RESULTS:
#+begin_src bash
hiyobro
#+end_src

* DONE Make it so I can talk to a tutor about the haskell code I am writing
  CLOSED: [2022-04-01 Fri 00:40]
** Select some code, start an apostrophe REPL with a tutor

j:apostrophe-chat-about-selection
pj:apostrophe-chat-about-selection

* Ensure that I can provide a function symbol instead of elisp
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^actions:" "$PROMPTS/explain-some-code-1.prompt"
#+END_SRC

* I really need to be able to edit stuff with Pen.el
It would enable me to work more productively on Pen.el.

** When I write a file, chown it?
- I have to know the host's user id.
Then I can do chown 100:100, or whatever.

* DONE Add =compile-run= to Pen.el
  CLOSED: [2022-03-31 Thu 20:59]
So I can test out haskell scripts.

e:$HOME/var/smulliga/source/git/semiosis/pen.el/src/pen-compile-run.el
e:$HOME/source/git/semiosis/pen.el/scripts/pen-cr

* Go over mark watson's haskell stuff
pind:$MYGIT/mark-watson/haskell_tutorial_cookbook_examples/CommandLineApp

* Create this for Anak before tomorrow
http://github.com/mullikine/penel-paper

* VPS testing
** TODO Ensure pen.el will run even if it is in the wrong directory

** TODO Make it so the container picks up on the host pen.el repo. Currently it is not

* TODO Make it so Pen.el knows if it has been run as a GUI or not, regardless of the fake X server

* Focus on my emacs a bit more
https://github.com/alphapapa/org-make-toc

* TODO Get to work making a paper

* TODO Keep an eye out for an X server that runs and can be viewed inside a terminal, like browsh

* TODO Ensure stdin works for pen from inside the container

* TODO Set up a fake X server for the Pen.el clipboard, for within pen if a display doesn't exist

https://frantzroulet.com/blog/jekyll/update/2019/08/25/how_to_launch_a_fake_minimal_x_session_for_obtaining_a_clipboard_in_docker_container.html

* TODO Make something to 

* TODO Fix Pet changing the colours
- Also, pet seems to be a little broken with ghci

* Set up gcal in emacs
org-gcal calfw-gcal

M-x cfw:open-calendar-buffer

* Anak
** TODO Write a paper for Pen.el
Also since you want to write write paper of
pen.el with me. Can you list TOC, and we can
review it together. This should be gradual
process. Every other blockchain project
constantly change content in their white paper
and yellow paper as long as version are not
changed.

Lets do prompt. because I will mention about
iNFT market place, so encrypting prompt data
with semosis protocol can be a great way to
establish why the project matters.

aight. will get back to you. need to write paper.

* TODO Set up ghcid in Pen.el
https://gitlab.cecs.anu.edu.au/pages/2020-S2/courses/comp1100/resources/10-install/

* DONE Set up the cabal REPL in ilambda
  CLOSED: [2022-03-31 Thu 14:37]
** This is important to be able to try out functions
Done.

* TODO It appears that other commands such as =pet= and =cterm= also change the fonts
How do I fix this?
I fixed =lg= by asking it to redraw the fonts when it is run.
Perhaps I need to put something into every =-ic= in the =pen= wrapper command.

* TODO Make it so I can edit files on the host, using Pen without mangling their permissions

* TODO Add this to Pen.el because I'm using the setting now
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun toggle-text-contrast (&optional changestate)
    (interactive)
  
    ;; 0 is a query
    (if (eq 0 changestate)
        (toggle-myrc "text_high_contrast" nil t)
      (let ((newstate (cond
                 ((eq -1 changestate) 1)
                 ((eq 1 changestate) nil)
                 (t 1 (toggle-myrc "text_high_contrast" nil t)))))
        (toggle-myrc
         "text_high_contrast"
         (if newstate
             "off"
           "on"))
        (set-text-contrast-from-config))))
#+END_SRC

* TODO Ensure that when pen starts from scratch, the emacs frame doesnt crash
- Start by stopping the container

* DISCARD Fix this in Pen.el - it's breaking lookingglass
  CLOSED: [2022-03-31 Thu 01:14]
I think the issue is most likely unicode inside my emacs, or ansi colours in my emacs.
Unfortunately there's no way around this.

#+BEGIN_SRC sh -n :sps bash :async :results none
  'pen-x' '-sh' "$(pen-nsfa pen-emacsclient -a '' -t)" '-i'
#+END_SRC

** Sadly this doesn't work either
#+BEGIN_SRC sh -n :sps bash :async :results none
  'pen-x' '-sh' bash -e '#' -s "pen-emacsclient -a '' -t" -c m '-i'
#+END_SRC

** Neither does simply starting bash followed by 
#+BEGIN_SRC sh -n :sps bash :async :results none
  'pen-x' '-sh' bash -i
#+END_SRC
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-emacsclient -a '' -t
#+END_SRC

* DONE Ensure =lg= is working fine again
  CLOSED: [2022-03-31 Thu 01:14]
#+BEGIN_SRC sh -n :sps bash :async :results none
  lg "https://vitaminc-gummies.com/health/"
#+END_SRC

Try first from inside the docker container.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (progn (get-buffer-create "*scratch*")(load-theme 'spacemacs-dark t)(pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (funcall-interactively 'lg-eww "https://news.ycombinator.com/item?id=30843922")))
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  emacsclient -a "" -t -e "(progn (get-buffer-create \"*scratch*\")(load-theme 'spacemacs-dark t)(pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (funcall-interactively 'lg-eww \"https://news.ycombinator.com/item?id=30843922\")))"
#+END_SRC

Make this work:
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (call-interactively-with-default-prefix-and-parameters 'eww "https:/en.wikipedia.org/wiki/United_States_presidential_visits_to_Eastern_Europe_and_Northern_Asia")
#+END_SRC

** lg completely breaks pen when run

* TODO Set up magit inside pen.el

* TODO Keep learning Haskell
https://www.youtube.com/watch?v=pe6S5skZwNE

** I need to ensure my ilambda library is set up and ready to develop

* TODO Set up my prolog environment tomorrow

* TODO Set up a Smalltalk environment

* TODO Make this work
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (browse-url "http://www.google.com/search?ie=utf-8&oe=utf-8&q=containers-0.4.0.0")
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (engine/search-google "haskell something")
#+END_SRC

* TODO Add search functions to pen
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key my-mode-map (kbd "M-8 M-g") 'grep-app)
  (define-key my-mode-map (kbd "M-8 M-s") 'eegr)
#+END_SRC

* TODO Add prolog to =Pen.el=

* TODO Get the type from lsp for haskell -- it's more reliable

** This would be useful when building ESP, to be able to extract the sideline info from LSP
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key lsp-mode-map (kbd "s-8") 'pen--lsp-get-sideline-text)
#+END_SRC

* DONE Add dante to pen (for get type)
  CLOSED: [2022-03-30 Wed 19:33]

** DISCARD Add intero to pen
  CLOSED: [2022-03-30 Wed 19:13]
This is for =(pen-intero-get-type)=.

* TODO Make suggest imports using codex?, or with a set of tuples/seds
e:$HOME/source/git/semiosis/pen.el/scripts/container/hs-suggest-imports

* TODO Make fix-imports work
#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$HOME/repos/fix-imports"; cabal install
#+END_SRC

** Actually, forget it
The lsp server probably has this feature built in.
Plus, I need =stack= to compile it.

* Pen
** TODO Rebind M-_
It used to be mapped to go to a previous line with a different character at the column

* TODO Fix the eww decoding problems
I think it's due to curling https websites.
pj:url-retrieve

Also, the url-retrieve calls render when done. So render is the place to see the results.

I don't think this is the function.

* TODO Add this to Pen.el
** hdc
https://github.com/lazamar/haskell-docs-cli

It's called =hdc=.

** fix-imports
https://hackage.haskell.org/package/fix-imports

* TODO Make it so that when pen quits it chmods the =~/.pen= directory and whatever was mounted in volumes

* TODO Make it so I can create snippets inside of pen.el and have them save to the host

* TODO Make a prompt to turn Haskell into NL
https://www.youtube.com/watch?v=pe6S5skZwNE

** And back again

* TODO Look into dissolving blood clots

* TODO Make my shell into common lisp or something
That would be better.
Being able to utilise CL sexps as one-liners instead of zsh, for instance.

* TODO Stop gaming and start programming again
I have to find a new place to sit down and code every day.

* TODO Set up =Pen.el= with ilambda for various languages

* TODO Set up Haskell today. Why not?
I should add Haskell, Prolog and Ethereum to Pen.el.
That should be my next goal.

https://haskell-language-server.readthedocs.io/en/latest/installation.html

** =Pen.el= will become an IDE for using the languages I want
- An IDE which others can download, use and enjoy

* TODO Ensure there is a faster way of quickly generating code snippets for particular languages
- What would be cool though is to generate yasnippets using GPT-3.

* TODO Set up the Haskell environment in Pen.el so I can do it when I'm bored

* NZ tunic
https://www.warwicks.com.au/collections/ww1-reproduction/products/ww1-new-zealand-tunics

* TODO Acquire a "ww1 australian army tunic" - One in good condition
Get badges and a belt - like this guy.

https://www.google.com/search?q=ww1+australian+army+tunic&tbm=isch&oq=ww1+australian+army+tunic&sclient=img#imgrc=mHfWsZi2xGgTGM

* TODO Ensure I have nice shoes first
- Buy some decent shoes for Anzac Day.
- Also ensure I have decent suit pants that match my suit jacket.
- Ensure I have my suit hat too if I want.

* The hat must always match the suit -- Take inspiration from the Queen
https://www.google.com/search?q=queen%27s+hats&sxsrf=APq-WBsI5HMqUBsKyWvmQHNBqcrxspfH1g%3A1648166684277&tbm=isch&source=iu&ictx=1&vet=1&fir=ifotAX6gwfgaoM%252CNDS_Waq0SDdo7M%252C_%253BXi_9kRlvqU4SnM%252CA8YoQ_V3h85YPM%252C_%253BjIjUB5VOjh5C3M%252CJewpcBB6C8sWLM%252C_%253B28Ir-6UyC6RfrM%252CLB1Rf9oiFxqxWM%252C_%253Bb-HAr9JLnpfikM%252Cibki3a2KxZTCeM%252C_%253BWXueQxc1UlWDWM%252ClAKbv3CuaA8WHM%252C_%253Byrbp9nNsY8sy5M%252C9UazmCA18G2XhM%252C_%253Bl3QjiaXqsD2gKM%252CLDiPFfgWxsuc8M%252C_%253BptVd-KiWQ3URzM%252CYRWCFLFIY6Mw6M%252C_%253BE30R9OyKRqOpoM%252Cl10FnA7uE-SOyM%252C_%253BF9bNJop80FqB1M%252C9UazmCA18G2XhM%252C_%253BvFNyvSpN1KMxAM%252CnvVOxO-u2qjkNM%252C_%253B6C-HaB6kjm7-jM%252C-FIKAAnGRLK-JM%252C_&usg=AI4_-kQyNOYoxQ-ZckFpdoGljIzVTzRcKg&sa=X&biw=1920&bih=927&dpr=1#imgrc=l3QjiaXqsD2gKM

* TODO Get some Anzac Day stuff
https://www.bradford.co.uk/flanderspoppypinbge.html
https://www.etsy.com/market/anzac_red_poppy_pin

** Attempt to look nice on Anzac Day
- Suit, etc.

Make myself look exceedingly sharp.

* TODO Set up both Prolog and Haskell in Pen.el, as I have done with Clojure

* DONE lg
** TODO Make lg start with eww
** TODO Make lg start eww in TUI
** TODO Make lgx start eww in GUI

* DONE Figure out what the issue with this is in eww
https://riptutorial.com/clojure/example/19536/basic-channel-operations--creating--putting--taking--closing--and-buffers/

* TODO Make a debug startup mode for pen

* TODO Before 2 weeks, try to finish the Creation pipeline

* TODO Look into utilising this
https://github.com/metarank/metarank

* Prompts must be able to simply point to an endpoint and forward their variables as the POST parameters to that endpoint
- This is because prompts will be fine-tuned.
- This is absolutely essential to do.

+ Extend my pen-openai script:
  - If there is an endpoint name, I should be able to omit the prompt template and instead provide the fine-tuned prompt endpoint
  - Automatically generate the API url etc.

* TODO Consider using nix to set up the haskell environment in =Pen.el=

** I have to create a new user, and use that new user, in order to use nix

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  sh <(curl -L https://nixos.org/nix/install) --no-daemon
#+END_SRC

Forget nix for the moment in Pen.el.

* TODO Install the script =o= into Pen.el
e:$HOME/scripts/o

** Also, set up the repository cloning system

* It's important to learn to do transients, and also to being using Haskell a lot

* It's important to set up the ethereum development environment inside =Pen.el= as well

* TODO Add host git configuration and authentication
How to do that?
Mount directories.
Create a new syntax for mounting / overlaying directories?

* TODO Add emacs extensions

* TODO Integrate the note taking of development of Pen.el into Pen.el itself

Just use this for instance to do my todo lists.

#+BEGIN_SRC sh -n :sps bash :async :results none
  pind /root/notes/todo.org
#+END_SRC

* TODO Make the interactive dir hist thing for running Clojure functions
Test it on J:mount-pensieve.

Press =E= on it.

pj:pen-lispy-eval-eval

* TODO I realise I have hit a low point
** I want to get back to my former self who I whole-heartedly respected
- How do I do that?
  - I have to become immensely productive in Clojure
  - I have to return to Church
  - I have to quit vaping
  - I have to talk to CEOs
  - I have to talk to my pastor, Philip
  - I have to tell Simon I was wrong and ask for his forgiveness
  - What was the guy in the red jacket's name again?
    - I should try to get back into contact with him

* Done
J:mount-pensieve

* TODO Make a handle binding for a language-based goto symbol function
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key nil (kbd "M-l M-r M-j") 'handle-goto-symbol)
#+END_SRC

* TODO Is there such a thing as a zero knowledge proof / anonymous parser?

* TODO Make a crypto for anonymous polling
- A complete pipeline must be set up for this
  - A language model on blockchain must detect sentiment (do lots of anonymous analysis of some text)

* TODO Train myself to be OK with 72 hours between hits
This is an extremely good idea to take back control over vaping.
That is because considering the first 72 hours is the hardest,
I'm always within control and can stop altogether if I want.
72 hours must be my absolute maximum delay if I do a series of hard rips.
If I do one rip then I could probably do that every day.
But first I have to wean myself off it -- I have to go in reverse for a while.
What I have done is maintained a high nicotine concentration for about a month.
That has caused addiction.

* TODO Make a 'launch pen in terminal' menu option

* TODO Learn about Clojure 1.11
https://clojure.org/news/2022/03/22/clojure-1-11-0

* TODO Learn to do this?
https://github.com/eccentric-j/cljs-tui-template

** Or rather I should probably focus on improving my competency with Haskell, prolog or racket
Those should be my main goals.

* TODO Go at least 2 weeks without doing *any* vaping
It's important to take big breaks so I do not get addicted to it.
I already am addicted to nicotine at a small level and I should stop.

* TODO Add full lsp config to pen

* TODO Make it so I can fuzzy search for more pen things
- fuzzy search for created personalities
- fuzzy search for created chatbots (with chat log)
- fuzzy search for created books

* TODO Make in-tm able to use stdin
** Then upgrade pen sh
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  vim +/"docker exec -it" "$PENEL_DIR/scripts/pin"
#+END_SRC

* DONE Turn pen's ensure tmux logic is in its own separate script, so I can wrap other commands with it
e:$HOME/source/git/semiosis/pen.el/scripts/container/in-tm

** Test with this
#+BEGIN_SRC sh -n :sps bash :async :results none
  psh j pen-cider-go-to-symbol
#+END_SRC

* TODO New functions
** Run any symbol in the REPL
- change the namespace, then run the symbol

** TODO Make J links for clojure symbols
- J will go to a clojure symbol inside pen

** Load Khala namespace first
- I have to first load the right namespace
  - So load Khala first

#+BEGIN_SRC sh -n :sps bash :async :results none
  pen sh in-tm pen-e -e "(find-file \"/root/.emacs.d/host/khala/project.clj\")(pen-cider-go-to-symbol \"mount-pensieve\")"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$HOME/source/git/semiosis/khala"; grep -HnoP -- "defn [a-z \!?-]+" **/*.clj
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  pen sh in-tm pen-e -e "(find-file \"/root/.emacs.d/host/khala/project.clj\")(khala-go-to-symbol \"mount-pensieve\")"
#+END_SRC

** TODO Make j:, pj: work inside and outside of pen
- Or maybe I should call it J. Yeah I should.

** TODO Make a fuzzy finder for symbols - then go to the symbol
j:helm-cider-apropos-symbol

pj:pen-cider-go-to-symbol

*** All namespaces need to be loaded
This isn't possible. Only one at a time can be loaded.
It might be easier to make something which simply uses grep to find it.

*** TODO Make an fz with a second column saying the namespace

*** This goes to one
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (cider-find-var nil "mount-pensieve")
#+END_SRC

*** TODO I need to be able to exhaust a set of helm sources

*** Then make a handle binding for it
- And in future, make a thing to go to any symbol in the project

* Practice on this
pind:/volumes$HOME/var/smulliga/source/git/ftravers/datomic-tutorial/src/datomic_tutorial/core.clj

* TODO Make running clojure functions interactive

* TODO Consider using dynamic mounting of the container
https://developpaper.com/how-to-dynamically-add-volume-to-a-running-docker-container/

- This requires root on the host
  - Ask the user if they want to mount with root

It's quite a hack and only works for block devices, so maybe I shouldn't do this.

* DONE Make it so git repos are copied into Pen.el? But how
  CLOSED: [2022-03-22 Tue 14:59]
e:$HOME/source/git/Datomic/day-of-datomic/bin

If the file is in a git directory, and is not a special directory, sync it to ~/.pen/repos

e:$HOME/source/git/Datomic/day-of-datomic/src/datomic/dod/composites.clj

** But just remember that if I write to these repos, it will make them root

** DONE [#A] Perhaps I could configure in ~/.pen/pen.yaml a list of volumes to mount
   CLOSED: [2022-03-22 Tue 14:59]
Then check that list to see if the desired path is in below of the directories in that list.

* TODO Continue learning the cognitect tools - this is what I should be aiming for right now. It's the way
- https://github.com/cognitect/transit-clj
- https://github.com/cognitect-labs/aws-api
- https://github.com/Datomic
- https://github.com/Datomic/day-of-datomic

* TODO Make it so M-F1 doesn't kill pen
It should merely close the client.

** Or just start using C-q C-q to close pen clients
docker will only close the client if it is not the main client

** Make it so pen will reset the terminal after it closes
This way C-q C-q will not leave a mangled terminal.

* DONE Make it so pen converts particular paths into pen-local paths
  CLOSED: [2022-03-22 Tue 13:25]
This way I can more easily open source code from the host.

* Directory bindings
** DONE Make a pen binding to go to documents
   CLOSED: [2022-03-22 Tue 13:32]
M-l d q d

** DONE Also, make one to go to notes
   CLOSED: [2022-03-22 Tue 13:33]
M-l d q n

** DONE Make them work inside emacs too
   CLOSED: [2022-03-22 Tue 13:33]

* DONE Make it so the Pen.el notes directory is overridden (with a symlink) by the ~/.pen/notes directory if it exists
  CLOSED: [2022-03-22 Tue 14:14]
Then I can write notes with Pen.el

* DONE Add stdin to =pin= without docker -- it has to work from within docker
  CLOSED: [2022-03-22 Tue 12:15]
#+BEGIN_SRC sh -n :sps bash :async :results none
  echo hi | pin
#+END_SRC

* DONE Add stdin capabilities to =psh= / =pen sh=
  CLOSED: [2022-03-22 Tue 12:12]
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  echo hi | sps psh vim -
#+END_SRC

#+RESULTS:
#+begin_src bash
#+end_src

I have to handle the stdin myself because of a bug with docker.
Neither =-it= =nor =-i= will work for something like =vim -=.
Docker thinks it needs tty for both 0 and 1.

* DONE Add vim utils to Pen.el
  CLOSED: [2022-03-22 Tue 12:56]
** I need =utils.vim=
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  psh vime "strftime(\"%c\")"
#+END_SRC

#+RESULTS:
#+begin_src bash
Tue 22 Mar 2022 12:47:13 AM UTC
#+end_src

* DONE Make it work for =pen.el=
  CLOSED: [2022-03-22 Tue 12:58]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (vime "strftime(\"%c\")")
#+END_SRC

It's used to generate a commit message.

* Pensieve
** Make mock penf functions for rapid development purposes

* DONE Make this more memorable
  CLOSED: [2022-03-22 Tue 09:52]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun regex-match-string-1 (pat s)
    "Get first match from substring"
    (save-match-data
      (and (string-match pat s)
           (or (match-string-no-properties 1 s)
               (match-string-no-properties 0 s)))))
  (defalias 'regex-match-string 'regex-match-string-1)
  (defalias 's-substring 'regex-match-string-1)
#+END_SRC

* Host emacs
** DONE Fix =M->=
   CLOSED: [2022-03-21 Mon 22:01]
- fix selected
  - something loaded from pen has probably broken it
    - use pen-require

** DONE Fix ivy bindings on host
   CLOSED: [2022-03-21 Mon 22:01]
- Also, my ivy bindings have changed on the host
  - something loaded from pen has probably changed it

* DONE Make a binding to attach the current tmux window as a vt100
  CLOSED: [2022-03-21 Mon 21:30]

* DONE Make an isolated scripts directory for Pen.el
  CLOSED: [2022-03-22 Tue 09:47]
- It should not be sourced on the host

It should be a subdirectory of the pen =scripts= directory.

* TODO Make another attempt with Megan
Firstly acknowledge that I acknowledge she has no interest in me, but I am still interested in her.

* TODO Make it so the =pen-specific= zsh config is automatically synced to the container

* clj
** TODO Make it so if I go to the REPL by default it changes the namespace
With =C-u= the namespace should be unchanged.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (call-interactively 'cider-repl-set-ns)
#+END_SRC

* TODO Add lsp config to pen.el - esp. for the colour scheme
** The colour scheme is quite useful for focusing on reading lsp refs, etc.
** Then learn pensieve, etc.

* TODO Look into this -- it actually seems quite interesting
https://www.toptal.com/freelance-jobs/what-sets-toptal-apart/remote-lifestyle?utm_medium=talent&utm_content=LS_Ima1_Tx2

* Pen
** TODO Make a =pen-glossify= function, which opens the file you're looking at and runs the glossary over it

** TODO Make a =H-p= binding for Pen.el to run a =(fz)= based =slmenu=

** Make a handle binding for renaming symbols
#+BEGIN_SRC text -n :async :results verbatim code
  H-* r s         cljr-rename-symbol
#+END_SRC

** Cider
*** Make a command to run any function over all project namespaces

** DONE Fix opening dev.clj from =mount_test.clj=
   CLOSED: [2022-03-21 Mon 16:46]
pind:/root/.emacs.d/host/khala/test/khala/mount_test.clj

It is asking for which language server to run.
It's doing that because I a using C-u.

** DONE Make =psh= and =ptm=. It should be normal within pen, but if called from outside pen, it should ssh into pen
   CLOSED: [2022-03-21 Mon 16:29]
#+BEGIN_SRC sh -n :sps bash :async :results none
  psh v +/"^(def simplechan (chan))" "/root/.emacs.d/host/khala/src/khala/mount.clj"
#+END_SRC

** DONE Consider making an interactive E mechanism where I can supply the parameters using a =read-string-hist=
   CLOSED: [2022-03-21 Mon 17:06]

** DONE Enable slmenu and M-<space> for zsh - this will speed things up for running external commands such as firefox

** Make an =H-p= slmenu which functions like xmonad's =s-p=
But that wouldn't work for tmux, only emacs.
It wouldn't work for tmux because I have to emulate =H-p= with a chord and tmux can't do chords.

- technically, I already have =F-1 <space>=

* DONE Disable this
j:project-switch-project
j:projectile-switch-project

** DONE It's cider-auto-jack-in which does this
j:cider-auto-jack-in

* DONE Make it possible to restart khala http server without exiting the app
https://webcache.googleusercontent.com/search?q=cache:wg-EveobS08J:https://practical.li/clojure-webapps/app-servers/atom-based-restart.html+&cd=7&hl=en&ct=clnk&gl=nz

* TODO Get up to speed with testing in clojure

* TODO Go down the path of datomic, because I want the tooling
https://practical.li/clojure/clojure-cli/data-browsers/

- Do this because I want to use all their fancy tools
  Such as the REBL data browser https://practical.li/clojure/clojure-cli/data-browsers/

* TODO Make it so an entire git repository can be loaded into pen by opening a file inside of it
- It should detect the git repo and copy it into ~/.pen/documents

* DONE Add
e:$PENEL_DIR/src/pen-context-functions.el
e:$PENEL_DIR/src/pen-major-mode.el

** DONE Make it so =e= will run a test case
j:pen-clojure-eval-last-sexp

It already works.

* TODO Make it so E, in clojure runs the form in the REPL
cider-eval-last-sexp-to-repl

* DONE Make it so e, in clojure changes the namespace of the REPL if it is a namespace
  CLOSED: [2022-03-21 Mon 13:24]

Use j:cider-repl-set-ns

advise
j:cider-eval-last-sexp

* TODO Make it so when cterm loads, the color scheme/background does not change
Test it out by opening a cterm on a buffer.

* TODO Also make sure Pen.el is set up for these laguages
- racket
- prolog
- haskell
  - However, as far as haskell goes, I will only use one compiler version, and keep my programming simple.
- smalltalk
- unison

* TODO Add asciinema recording to Pen.el

* TODO Fix the lsp right click menu. It's not working

* DONE Make this a handle binding
j:projectile-toggle-between-implementation-and-test

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key clojure-mode-map (kbd "H-T") 'handle-toggle-test)
#+END_SRC

* TODO Make a binding to create a test case
j:clojure-open-test

** It already exists
j:projectile-toggle-between-implementation-and-test

* TODO Work towards having more isolation of the docker container, so even the scripts directory does not need to be downloaded

* TODO Fix lsp with clojure in pen.el
It must've broken after adding pen-lsp.el.

e:$PENEL_DIR/src/pen-lsp.el

* TODO Figure out how to search through all symbols loaded by cider/lein repl, from within emacs
- Or are there other tools which will let me do that?

* Fix pensieve
Khala isn't loading because get-pensieve-directories is broken

* DONE Set up yasnippet

* TODO Add
e:/root/.emacs.d/host/pen.el/src/pen-sx.el

* DONE Add
e:$PENEL_DIR/src/pen-git.el
e:$PENEL_DIR/src/pen-nix.el

* TODO Add the github user, etc. via dotfile extension

* TODO Write new filesystem navigation scripts with transient
To replace sh-general, etc.
Instead of copying them across.

* TODO Add asciinema recording

* DONE Add vc-cd-top-level

* TODO Consider setting up a new test framework
https://github.com/marick/Midje

* TODO Ensure I am making Clojure test cases while I am writing it
- https://practical.li/clojure/testing/unit-testing/
- https://ericnormand.me/mini-guide/example-based-unit-testing-in-clojure

** TODO Make a binding to start working on the test file for this particular clj file
I need a handle binding for this.

* Investigate ts.el
https://www.opensourceforu.com/2019/09/the-emacs-series-exploring-ts-el/

* TODO Fix the =timer for memoized failed= hang

* pen
** DONE Add
   CLOSED: [2022-03-20 Sun 13:09]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key my-mode-map (kbd "M-l M-q M-v") 'customize-variable)
  (define-key my-mode-map (kbd "M-l M-q M-g") 'customize-group)
#+END_SRC

** DONE Make it so the REPL doesn't automatically appear when it's ready
   CLOSED: [2022-03-20 Sun 13:09]

** Fix opening images
- Doesn't load in terminal anymore after changes to openwith
- =pen-win= is not designed yet to specify GUI as a flag

** DONE Fix copy
   CLOSED: [2022-03-20 Sun 01:54]
=pen-m-w-copy= doesn't work in most places.

Neither is M-Y M-Y right now.

- Start with *scratch*

** DONE Make =<M-f3>= work inside emacs inside pen
   CLOSED: [2022-03-20 Sun 01:19]

** Add =open-selection-sps= - select path then (=gf=)

** TODO Set up git auth - using dotfile syncing

** DONE Ensure that in clojure, M-w will expand macros
   CLOSED: [2022-03-20 Sun 00:30]
- I can't have =xc= bound to =M-w= in =pen-map=

It must be bound to j:pen-m-w-copy.

** DONE Add =M-] h= for going to the next change - git-gutter+-next-hunk
** TODO Make it to C-k goes to the proper clipboard
- It might only be paredit-kill which is causing this
** DONE Make it so the clojure jack in message buffer is always buried
   CLOSED: [2022-03-20 Sun 13:09]
j:cider-jack-in-around-advice
*** TODO I must prevent cider from jacking in too many times
- When I request a jack in I should set a variable to make it idempotent
- Once the jack in completes, it should signal I don't need to jack in
- Use the buffer as the sentinel
** DONE Fix M-h, whatever that is bound to is debugging immediately
   CLOSED: [2022-03-19 Sat 23:05]
- j:pen-lispy-select-parent-sexp

* This command sets me up to work on khala
sps:khala-edit

** TODO Set up another one for pensieve

* pen
** TODO Make the minibuffer documentation work

* TODO Add extension support for pen.el
** TODO syncing dotfiles from host into the pen docker container
- Use a directory in pen containing your dotfiles
- Then ensure I can commit and push

** TODO load external emacs lisp

* TODO Make a command to sync projects to my host machine
e:$HOME/scripts/sync-openai-complete-clj

* TODO Use this to make a curl version of the openai api
e:$HOME/var/smulliga/source/git/mark-watson/Clojure-AI-Book-Code/openai_api/src/openai_api/core.clj
pind:/root/.emacs.d/host/khala/src/khala/core.clj

* TODO Figure out why C-p inside docker's shell (including tmux and pen) is an escape code -- I have to press it twice
https://forums.docker.com/t/ctrl-p-within-docker-container/5232
https://github.com/docker/compose/issues/3311
https://docs.docker.com/engine/reference/commandline/cli/#configuration-files
https://stackoverflow.com/questions/25267372/correct-way-to-detach-from-a-container-without-stopping-it#:~:text=You%20can%20use%20the%20%2D%2D,the%20container%2C%20without%20killing%20it.

* DONE Add C-o
  CLOSED: [2022-03-19 Sat 23:00]
my-holy-jump

* TODO Make this work with selection
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-wgrep-thing-at-point (pen-thing-at-point) (vc-get-top-level))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (wgrep (pen-eatify "require") (vc-get-top-level))
#+END_SRC

* DONE Add =pen-counsel-ag=
  CLOSED: [2022-03-19 Sat 17:46]

* TODO Get the Edit API going. That will help me to continue developing

* TODO Get a basic haskell set up going
That's all that's really needed to get started.
From there I can build up my learning etc. with GPT.

* Pen
** DONE Fix this
   CLOSED: [2022-03-19 Sat 15:12]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-umn "$HOME/source/git/semiosis/pen.el/src/pen-func-lists.el")
#+END_SRC

** DONE Start by adding evil and magit to Pen.el
   CLOSED: [2022-03-19 Sat 15:13]

** DONE Keybindings -- Add these to within Pen.el
   CLOSED: [2022-03-19 Sat 15:13]
- custom
- source
- post bindings

| kb        | f                                                  |
|-----------+----------------------------------------------------|
| M-l d q m | $PEN_ENGINES_DIR                                   |
| M-l d q e | $HOME/source/git/semiosis/efm-langserver           |
| M-l d q K | $MYGIT/semiosis/khala                              |
| M-l d q P | $PENSIEVE_DIR                                      |
| M-l d q l | $MYGIT/semiosis/ilambda                            |
| M-l d q V | $HOME/var/smulliga/source/git/semiosis/protoverses |
| M-l d q v | $HOME/var/smulliga/source/git/semiosis/metaverses  |
| M-l d q C | $HOME/var/smulliga/source/git/semiosis/creation    |
| M-l d q 7 | $HOME/var/smulliga/source/git/semiosis/channel     |

* TODO Make it so I can load external emacs lisp

* TODO Make the chatbot which can talk to you about your code

* Annoyingly, I will only be able to develop with libpython inside the Pen.el docker container
- So set it up.

* TODO Start developing a clojure-libpython-based completion script for the OpenAI API -- this is very important to secure the future of that
#+BEGIN_SRC sh -n :sps bash :async :results none
  agi libpython3-dev libpython3.8-dev libpython3.8
#+END_SRC

** Annoyingly, libpython-clj is quite slow -- too slow to run with a script
So I will need to write this with =curl=, or figure out a solution to keep it loaded.
It would need to function as an API if I want to make libpython-clj fast.

*** I probably *should* use an API
- If I follow this line of thought then I will build something epic in Clojure and become a Clojure expert.

**** [#A] Maybe I should build this into =khala=.
Yeah I should. It would save time.

e:$HOME/var/smulliga/source/git/semiosis/khala/src/khala/core.clj

** This is lm-complete
http://github.com/semiosis/lm-complete

** [#A] But perhaps I should start from openai-complete and work my way up
#+BEGIN_SRC sh -n :sps bash :async :results none
  new-project -semiosis openai-complete.clj clj
#+END_SRC

http://github.com/semiosis/openai-complete-clj
e:$HOME/var/smulliga/source/git/mark-watson/Clojure-AI-Book-Code/nlp_libpython/src/nlp_libpython_spacy/core.clj

*** Rewrite e:$HOME/source/git/semiosis/pen.el/scripts/pen-openai-complete in Clojure, using the Python library

*** Then add support for the =Edits= endpoint using Clojure and curl
Build the API client from scratch in Clojure this way.

e:$HOME/var/smulliga/source/git/mark-watson/Clojure-AI-Book-Code/openai_api/src/openai_api/core.clj

* TODO Disable the Pen.el language server as the server for python in my main emacs

* TODO Make an =x= script for starting the openai client to get info on what's available
It might not be possible to use the Edit endpoint with the python client yet.

* TODO Go through all the python notebooks and try to add features to it
https://github.com/openai/openai-python

** embeddings
- https://github.com/openai/openai-python/blob/main/examples/embeddings/Classification.ipynb

e:$HOME/source/git/openai/openai-python/examples/embeddings/Clustering.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Regression.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Code_search.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Obtain_dataset.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Get_embeddings.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Recommendation.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Classification.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Visualize_in_2d.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Visualize_in_3d.ipynb
e:$HOME/source/git/openai/openai-python/examples/finetuning/olympics-3-train-qa.ipynb
e:$HOME/source/git/openai/openai-python/examples/finetuning/olympics-2-create-qa.ipynb
e:$HOME/source/git/openai/openai-python/examples/finetuning/olympics-1-collect-data.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Zero-shot_classification.ipynb
e:$HOME/source/git/openai/openai-python/examples/finetuning/finetuning-classification.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/User_and_product_embeddings.ipynb
e:$HOME/source/git/openai/openai-python/examples/embeddings/Semantic_text_search_using_embeddings.ipynb

* tekakuli
https://github.com/tekakutli/yemaka/

* TODO I might need to make a new underlying mechanism for the .prompt format to send utilise specialised API endpoints
- Custom API parameters

How would that work though?

- Design the system to accomodate other endpoints
- Export all variables to the endpoint command by default
- Allow overriding the model and endpoint command in the prompt
- Specify the endpoint command

* Prompts and engines should be loaded into a database which is very easy to search, discover, navigate and query
- I really need this

** Also, there should be practically no time spent load prompts etc.

* TODO Prompts must have a mechanism of choosing the engine / deferring to a different prompt

** This should mean there is actually a hierarchy of prompt files
Some prompts might simply defer to other prompts via some logic.

* DONE Add these bindings to Pen.el
e:$PENEL_DIR/src/pen-post-bindings.el

* TODO Add the OpenAI edit endpoint to Pen.el

* Disable OpenCyc to lower memory usage
Find flp-quick-start defun in this file and comment out:
e:/var/lib/myfrdcsa/codebases/minor/free-life-planner/free-life-planner.el

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (cmhsm-cyc-quick-start)
#+END_SRC

Then be sure to kill Cyc.

* TODO Start using Clojure libpython here
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^# Or I could write this in clojure with libpython" "$PENEL_DIR/scripts/pen-openai-complete"
#+END_SRC

* TODO After running the prompt through preprocessors, split the prompt and create the suffix

* Try out devzat
https://github.com/quackduck/devzat

Test out my chatbots on it.

* TODO Make it so a prompt can override the endpoint completion script

* TODO Set up this for Pen.el
** I need to make a curl-based openai script
$PENEL_DIR/scripts/pen-goose

*** Convert to shell
$PENEL_DIR/scripts/pen-openai-complete
$PENEL_DIR/scripts/pen-openai.sh

This *should* be coded in a better scripting language though.
A lisp, ideally.
Racket would be a good scripting language to do it in.

That is because suffix is not yet available in the python library.

** Insert
https://openai.com/blog/gpt-3-edit-insert/

Inserting text Beta

The completions endpoint also supports inserting text within text by providing
a suffix prompt in addition to the prefix prompt. This need naturally arises
when writing long-form text, transitioning between paragraphs, following an
outline, or guiding the model towards an ending. This also works on code, and
can be used to insert in the middle of a function or file. Visit our code guide
to learn more.

To illustrate how important suffix context is to our ability to predict,
consider the prompt, “Today I decided to make a big change.” There’s many ways
one could imagine completing the sentence. But if we now supply the ending of
the story: “I’ve gotten many compliments on my new hair!”, the intended
completion becomes clear.

** Add edit endpoint
https://beta.openai.com/docs/guides/completion/editing-text
https://beta.openai.com/docs/api-reference/edits/create

* Set this up for emacs
https://github.com/minad/osm
https://github.com/jd/google-maps.el

https://developers.google.com/maps/documentation/embed/get-api-key

[[el:(customize-group 'google-maps)]]

cg:google-maps

* Pen.el
** Add magit
$PENEL_DIR/src/pen-magit.el
$PENEL_DIR/scripts/pen-magithub.el
$PENEL_DIR/scripts/pen-magit-section-mode.el

** TODO Ensure I have a good common lisp environment in emacs so I can work on LogicMOO
Add common lisp to my emacs and then Pen.el.

* PDDL
- https://www.youtube.com/watch?v=mH1J56abKxE

** Tutorials
https://www.youtube.com/watch?v=nP6cvh6e1O0&list=PL1Q0jeuU6XppflOPFx1qQVuWbXTcjxevU&index=6

* TODO Make this mouse click handler able to not take an event
- Perhaps I should figure out how to fabricate an event

pen-lsp-mouse-click

* TODO Add Panoply into Pen.el

* TODO Set up Prolog within Pen.el so I can hack on FLP using Pen.el

* TODO Make an emacs binding for the minbuffer to open the last output inside a buffer

* TODO Continue setting up racket - This would be a great long-term language to hack on

* Emacs
** Add sshfs to 'sps' so when I get a tramp directory, mount an sshfs and go to it that way
This would be a really nice way to mount ssh.
- Go via tramp first.

* TODO Copy the Panoply libraries to my host system
Then the prolog language server will probably work.

* TODO Continue improving the development environments of
- Perl5

* TODO Start using PDDL and Cyc within my own programs
** That would position me well for FRDCSA and LogicMOO
- Though there would be much more to learn with LogicMOO

* TODO Learn
- Cyc
- PDDL
- Perl5
  - Improve my development environment

* emacs
** term
*** DISCARD Make C-u C-c M-x send M-x to the remote terminal
C-c M-x sends M-x to the current emacs, which is correct behaviour.

M-x sends to the remote terminal.

* TODO Fix path when using tramp
- Clipboard stops working
  - Test by
    - navigate to:
      [[e:/ssh:andrewdo@localhost#2222:/var/lib/myfrdcsa/codebases/internal/frdcsa-el/]]
    - Pasting with F3

I think many things stop working.

It's a result of the current directory breaking, and (sn) breaking as a result.

* TODO Start using Cyc in Pen.el? - For what?
Cyc + Prolog sounds very powerful.

* Install Pen.el in Panoply
** Docker
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  sudo apt install apt-transport-https
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  
  # echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  # It's debian 9
  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
  
  sudo apt update --allow-unauthenticated --allow-insecure-repositories
  sudo apt-get install docker-ce docker-ce-cli containerd.io
  
  sudo groupadd docker
  sudo usermod -aG docker $USER
#+END_SRC

** Install Pen.el
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  git clone "https://github.com/semiosis/pen.el"
  git clone "https://github.com/semiosis/prompts"
  
  docker pull semiosis/pen.el:latest
  
  mkdir -p $HOME/.pen
  
  # Put in your keys, or do not, it's up to you!
  echo "sk-<openai key here>" > $HOME/.pen/openai_api_key       # https://openai.com/
  echo "<ai21 key here>" > $HOME/.pen/ai21_api_key              # https://www.ai21.com/
  echo "<hf key here>" > $HOME/.pen/hf_api_key                  # https://huggingface.co/
  echo "<nlpcloud key here>" > $HOME/.pen/nlpcloud_api_key      # https://nlpcloud.io/
  echo "<alephalpha key here>" > $HOME/.pen/alephalpha_api_key  # https://aleph-alpha.de/
  echo "<cohere key here>" > $HOME/.pen/cohere_api_key          # https://cohere.ai/
  
  # Add the scripts to the PATH
  echo export PATH="$(realpath .)/pen.el/scripts:\$PATH" >> $HOME/.profile
  
  # Add this to prevent C-s from freezing the terminal
  echo "stty stop undef 2>/dev/null; stty start undef 2>/dev/null" | tee -a $HOME/.zshrc >> $HOME/.bashrc
  
  # Source your .profile
  . $HOME/.profile
  
  # Run pen
  pen
#+END_SRC

Commonsense Reasoning by Erik T. Mueller
and also in teh "Handbook of Knowledge Representation"

* Learn Bison
https://www.gnu.org/software/bison/manual/html_node/A-Simple-C_002b_002b-Example.html

* For the experience, try to use the .cpp here
e:$HOME/source/git/KCL-Planning/VAL/build/bin/pddl+.y
e:$HOME/source/git/KCL-Planning/VAL/build/bin/pddl+.cpp

https://github.com/ezaquarii/bison-flex-cpp-example/blob/master/Makefile

[[e:bison generate cpp from y]]

[[sps:cd $HOME/var/smulliga/source/git/KCL-Planning/VAL/build/bin; bison -o pddl+-mine.cpp pddl+.y]]

** Also, generate python bindings, and maybe a different language too

* Pencil emoji
🖉

* TODO Ask Andy
- How do I install LogicMOO?
  - What subset of LogicMOO can I set up?

* PDDL
- Learn PDDL, I guess.
  - But I need an application for it.
  - What can I run the parser and evaluator on?

** Ensure I can have Planer output in emacs, as in this
- Also enable lispy-mode and my/lisp-mode

https://youtu.be/XW0z8Oik6G8?list=PL1Q0jeuU6XppflOPFx1qQVuWbXTcjxevU&t=271

https://github.com/tomsilver/pddlgym
$HOME/source/git/caelan/pddlstream
e:$MYGIT/tomsilver/pddlgym/pddlgym/pddl/fridge/problem5.pddl

*** Get a parser and evaluator
https://github.com/KCL-Planning/VAL
$HOME/var/smulliga/source/git/KCL-Planning/VAL/build/bin

https://github.com/KCL-Planning/VAL/blob/master/applications/README.md

*** Online editor
http://editor.planning.domains/

*** Hello world
https://www.youtube.com/watch?v=nP6cvh6e1O0&list=PL1Q0jeuU6XppflOPFx1qQVuWbXTcjxevU&index=2

* Cyc
e:$NOTES/ws/cyc/remember.org

** TODO Set up
Use docker. It's easier.

* LogicMOO
+ Read wiki [0/1]:
  - [ ] http://logicmoo.org/xwiki/bin/view/Main/Technical%20Description/
  - [ ] [[https://docs.google.com/document/d/14sR8q9Btg1nvcav1-pkhmhasKwdphb5C-3GJA6htHHo/edit#][Design]]

** TODO Ask Andy for wiki access again

* TODO Watch a bunch of videos on the technologies surrounding LogicMOO
- [[https://www.youtube.com/watch?v=Tw0F7cS6KYk][PDDL  Planning   Artificial Intelligence  - YouTube]]

* TODO Build =Pen.el= into a Prolog engineering environment
** Try to run logicmoo inside of it

* TODO Visit Jack. It's his birthday
- Play him some UB40 I guess.

* TODO Finish filter-to-filter
- e:$HOME/scripts/apply-filter-to-filter

* TODO Watch all the LogicMOO videos - and possibly set it up
- https://www.youtube.com/watch?v=sdG6GVCwJrw
- https://www.youtube.com/watch?v=oON8o6ioG08
- https://www.youtube.com/watch?v=ExnDJO2MxOM
- https://www.youtube.com/watch?v=TJH9nTBnNM8

* Pen.el
** Create a MUD/MOO/Multi-user application
http://mudstats.com/World/Rupert

- This is the next step beyond mad tea-party.
- Things are created with Pen/Creation and added to the MOO in instantiated form.
- The application is grown collaboratively

** TODO I could make a SmallTalk Pen.el if I wanted
That would be awesome!
I mean smalltalk has an amazing context menu and such configurability.
I should just try to see what I can make with SmallTalk! :)
SmallTalk is a project I could go very [[https://www.urbandictionary.com/define.php?term=Hundy][Hundy]] with.

** TODO [#A] Make a LM storytelling game
Using AI completion (or whatever you have at your disposal), continue the story on.
Players vote on which is the best continuation and run with that.
The best storyteller gets free AI prompting credits so they can continue prompting.

* TODO Set up SmallTalk
https://squeak.org/

** Set up Emacs and GNU SmallTalk

** Maybe I will enjoy programming in it
- What could I use it for?

Perhaps designing actors in a MUD.

* TODO Do this
http://www.cs.otago.ac.nz/cosc347/

** Haskell
http://www.cs.otago.ac.nz/coursework/cosc347/References/FP/index.html
http://www.cs.otago.ac.nz/coursework/cosc347/References/FP/Code/Exer01.htm

** Prolog
http://www.cs.otago.ac.nz/cosc347/References/LP/LeedsTutorial/book.html
http://www.cs.otago.ac.nz/cosc347/References/LP/index.html
http://www.cs.otago.ac.nz/cosc347/References/LP/LeedsTutorial/

*** Parsing english
http://www.cs.otago.ac.nz/cosc347/References/LP/LeedsTutorial/node101.html

** SmallTalk
No Otago CS resources.

But SmallTalk is like an Emacs. Therefore, I *have* to learn it.

* TODO Solve wumpus with Prolog
e:$HOME/var/smulliga/source/git/mullikine/prolog-examples/wumpus.pl

This is definitely worth learning.

[[https://www.youtube.com/watch?v=EkWJMU16GrU][TI 99/4 Hunt the Wumpus Walkthrough - YouTube]]

+ I guess have both:
  - Wumpus/world/game
  - AI player/solver

* TODO Create my bible reading mode
** Original language annotations
- https://www.blueletterbible.org/
- https://biblehub.com/interlinear/

** Commentary
- https://www.logos.com/bible-study-tools?campaign=logos-web-extension&mwm_id=520750683020

* TODO See if I can find any other brilliant TUI IDEs.

* emacs
** term
*** figure out how to restart the term command
- I should simply get the start command from a buffer variable, kill the term and run a new term

Use this:
term-exec

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (process-command (get-buffer-process (current-buffer)))
#+END_SRC

Pattern match?

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  ;; This gets the last argument, which is the script name.
  (let* ((p (get-buffer-process (current-buffer)))
         (c (car (seq-reverse (process-command p))))
         (n (process-name p)))
    (term-exec (current-buffer) n c nil nil))
#+END_SRC

* Prolog
** tutorial
https://www.cpp.edu/~jrfisher/www/prolog_tutorial/contents.html

* TODO Cancel Discord subscription ASAP

* TODO Try to construct a shell-based external predicate in prolog

* TODO Make prolog scripts
$SCRIPTS/test-prologscript.pl

** Learn to use shell pipes
https://www.swi-prolog.org/pldoc/man?section=process

* TODO See if I can get Pen.el to use other docker images

* Stick to SWI Prolog
https://www.swi-prolog.org/pldoc/man?section=clpfd-sudoku

** Learn to solve problems

* TODO Set up scryper prolog?
docker run -it mjt128/scryer-prolog
$> docker run -v /home/user/prolog:/mnt -it mjt129/scryer-prolog
?- consult('/mnt/program.pl').

** I don't know...

* TODO Learn constraint logic programming
e:$MYGIT/triska/clpz/README.md

* DONE Set up editing for this
e:$NOTES/ws/prolog/scratch/sudoku.pl

** Step 1: M-x ediprolog-consult to load the buffer
** Step 2: M-x ediprolog-dwim while on top of a %?-

* Run these
e:$MYGIT/triska/clpz

* Look into how this is made
https://github.com/winfsp/hubfs

* TODO Tell people on discord
Feeling generally unwell.

* DONE Make it so the =x= script can communicate with other =x= scripts via tmux sentinels
  CLOSED: [2022-03-12 Sat 21:14]
That way I can wait for things and trigger other x scripts to continue.
- Trigger the event with an expect and then run a system command (tmux)
- Receive and wait for the event via running a system command (tmux)

e:swipl-playground

* TODO Befriend Philip
This is the way.
This is a golden opportunity.
Earnestly seek him out.

** Start working on the building things based on the Bible
What types of things?

*** Chatbots for speaking to people about passages and topics

* Prolog
e:$HOME/source/git/rolph-recto/learn-prolog

* =Pen.el=
** TODO [#A] Prompt to finish off a prompt, in some cases (such as for a transformation)
- I can probably only do this with prompt examples or fine tuning

This would be incredibly useful though, and make the completions so much richer.

** TODO [#A] Spawn a chatbot to discuss a piece of code

* TODO Think of new ways to increase the power of my Pen.el

* Buy for flo
** Cat cone
https://themarket.com/nz/p/2-x-style-1-2-cute-adjustable-e-collar-for-cat/5336-743764Z?skuid=10915540

* DONE Fix Pen.el
  CLOSED: [2022-03-12 Sat 18:04]
- It's probably the whitespace tab highlighting

** Faces broken
- calibre
- helm

** DONE Retract pen-selected from main emacs
** DONE Fix tldr

* Try to save half of my money next week for Flo in case she needs it

* TODO Ask the Police to not publish us on Police Ten 7
YA7964

27 Feb 2022
12.30am

* Play clarinet outside the boosh batch
- can't help falling in love

Lots of UB40.

* TODO Learn prolog and problog
- use the prolog language server for problog, because i still get useful docs for some functions

* TODO Definitely set this up
https://github.com/clibs/clib

* TODO Consider making a thing in problog which tells you, with a dice roll
- Maybe given age, sex and vaccination status, and other variables
- Will you get covid
- How bad you will get it
- What symptoms you will get

* TODO Buy clothes from here
https://nz.tommy.com/

* TODO My next project is 'creation'

* TODO Make this
- What would be really nice is a GPT-3 / codex based search engine which finds
  documentation for the current function/symbol

* TODO Do research on this
https://www.pbs.org/wgbh/pages/frontline/shows/religion/maps/primary/thunder.html

* TODO Make the match-filter system
** It's not this -- I need to use a filter such as xurls to match
$SCRIPTS/awk-apply-to-match

** Look for some parser that can do this?
Just make it myself.

- Firstly, use a filter to get the list of literals
- then use a different filter to transform them.
- Construct a list of match-replacement pairs
- Apply to the original input
- Then perform org-clink on urls

** Use it on urls and remember it somehow

* I still need to make cosmoginies in the creation pipeline
https://youtu.be/QskgCfwYO0g?t=660

The flow of reality from eternity into nature and back.
The flow is represented by the godess Sophia (Wisdom)

** Demiurge
The demiurge is the author of their own creation repo.

** Arche / Archea are important
arche - the source of all things
logos - the underlying order that is hidden beneath appearances
harmonia - numerical ratios in mathematics

- arche/a can be used as the first template for a given tree
- logos can denote the universal language used in all archaea and creations/emanations

* Double down on my red and blue woolen look with the jersey from the Den

* Covid
** TODO preparations
- Get ginger to make ginger water
- Lots of hot tea to bring up the mucus
- Raw unfiltered honey on a tablespoon made the pain stop immediately so i could at least get some rest.
- Honey with a slice of lemon in boiled water cooled down a little helps a lot, it also aids with sore throat recovery.
- always always always sleep in your stomach, or if you can’t (like me) sleep
  in your side! Covid messes up your lungs and you don’t wanna develop
  pneumonia, sleeping on your back can really destroy your lungs during Covid
  if you got a bad one.

** Expectations
- On day 7 after testing positive for Covid, I feel about 70% , I only had a
  fever the first day , achy neck , back and knees and a headache for 3 days
  and just physically exhausted after that , BUT I had a horrible smell in my
  nose the whole time.
- Felt the had like piece of glass on the throat. No energy and definitely it's
  something you have never felt on your life. I have the full vaccination I
  could not imagine how it would be without vaccination.
- fever for three days. Today is the first day without a fever, but I have
  traded that for incredibly full feeling ears and a sore throat. Have had a
  dry cough through out. Body aches/chills, but mostly when I had a fever. And
  before I realized I was sick, I experienced some nausea and loose stool two
  days before all the head symptoms 🤷
- had Covid and she was sick about 5 days. She's on day 8 now and says she's
  feeling much better. Fever is gone.
- COVID for like 15-16 days and honestly I still fill pretty bad the first 3
  days were the worst with body aches and high fever but like this week my legs
  hurts so much and my heart kinda hurts more often ;I have one dose)
- My wife and I had no fever the entire duration. She’s 13 days out from her
  initial symptoms beginning and has a lingering cough and some light
  congestion. She had pretty severe sinus congestion for about 3 days but
  that’s the worst of it. Im on day 7 of symptoms and I’ve got a little chest
  congestion and light sinus congestion and no sense of smell. Other than that,
  we’re both doing pretty well.
- I had delta last Summer and had a fever for about 10 days. It was initially
  pretty high for the first 3-4 days, and then became a low grade fever for the
  remainder of my sickness. I didn't really feel right until 3 weeks after I
  had my initial symptoms.  I currently have Omicron (Day 4 of symptoms) and
  initially had a high fever for the first two days along with body aches and
  teribble head pain. My fever subsided yesterday surprisingly and so far
  hasn't returned. Now I'm currently just very congested and stuffy w/ a
  lingering sore throat but no longer fatigued. Hoping I'm through the worst of
  it.
- I have Omicron right now, started with sudden fatigue that came out of
  nowhere, and few hours later developed a sore throat, followed by waves of
  heat, like hot flushes over my body. Then came the fever, which lasted about
  30 hours, and as for the body aches and chills... I still have them 6 dash
  later. My ears are also completely blocked, but more so than what I have ever
  experienced... The pressure in my ears is intense. Coughing a lot now also,
  throat is still sore

* Go over Learn Prolog
http://lpn.swi-prolog.org/lpnpage.php?pageid=online

* TODO The way to getting work is to simply focus on Clojure for ages

* TODO Start learning a foreign language, since I can
https://www.youtube.com/watch?v=fjEjIWDPDeA

French would be nice.

* TODO Combine khala and rhizome?
Yeah, I probably should.

* TODO Fight through it - I know who I am. I'm not the tinder guy, but I'm still legit
I have to fight through the discrimination to reach the other side.
I should warn you. I'm the type that is discriminated against and I will fight through to the other side.
You can't just put up a wall. I won't respect it.

* Rosetta stone as the base truth for language model
https://programming-idioms.org/cheatsheet/Clojure

* TODO Ensure this is more easily accessible, and I have suggestions
#+BEGIN_SRC text -n :async :results verbatim code
  pf-code-snippet-from-natural-language/2
#+END_SRC

* DONE Create a website kinda like this, but for prompts
  CLOSED: [2022-02-28 Mon 16:21]
- https://programming-idioms.org/idiom/49/split-a-space-separated-string
- https://programming-idioms.org/random-idiom

* TODO Consider going on a bit of a clothes shop
But maybe I should find some places online for that.

* TODO Just stop the vaping
It doesn't feel good.
It wont mix well with omicron.

* TODO Creation datahike
** Create a persistent database
- Interact with the database from emacs. How?
  - API?
    - If http, then might as well bundle khala with datahike into a single application?
      - I don't really want it to be combined with khala
      - Give it a separate API?
        - Do I even use http? Might as well?
        - I should look into datahike projects to discover interops and application design
- The logic within Pen.el to create the database
** Import the database from yaml

* TODO [#A] Construct creations by doing a datalog query
I need to embed datalog into =pen.el=.
To generate UI, etc.

The whole creations repo etc. should be loaded into datahike.
And exported back to yaml.

** This is important

* Learn a full clojure stack
** datahike
** figwheel
https://figwheel.org/tutorial.html

* TODO Learn datahike
https://alekcz.gitbook.io/datahike-tuts/

** TODO Do this
$HOME/source/git/alekcz/datahike-starter

https://alekcz.gitbook.io/datahike-tuts/getting-started

** TODO Do this
http://gitlab.com/replikativ/datahike-invoice

*** Basic transacting
https://alekcz.gitbook.io/datahike-tuts/basic-transacting

* TODO Make calls on both of these numbers
If people are freedom camping in non-designated areas or causing problems, please call Dunedin City Council on 03 477 4000.
For wildlife or conservation concerns, please call the Department of Conservation on 03 477 0677.

#+BEGIN_SRC text -n :async :results verbatim code
  Kia ora Shane
   
  Thank you for your email regarding some lost camping equipment in the Maori Hill area.
  
  This request for information has now been forwarded directly through to the Parks Department for their attention and response.  Please note that the reference number for this service request is 644553.
  
  If you have any further queries, please contact us.
#+END_SRC

** At some stage I need to fill this out
https://www.dunedin.govt.nz/do-it-online/infringement-explanation/freedom-camping-infringement-explanation

** I have to hunt down the camping equipment

* TODO I must pressure the council basically every day with searching for the camping equipment
** I must hunt it down
It may easily become lost in the system

* TODO Track down the camping equipment
https://www.doc.govt.nz/footer-links/contact-us/office-by-name/?mode=details&office=2723

* TODO Look for the clothes I want to impress melee with?
** Not necessarily. I just have to be myself
*** Keep the perspective that I do it my way
Lower the creepiness level.
Increase the amount I try.
Increase my normalness, I guess.
I must increase.

* TODO Do a blog article for using dni lang inside .prompt files
#+BEGIN_SRC yaml -n :async :results verbatim code
  task: "Generate wiki blurb"
  tags: web chatbot
  doc: "Create a wiki blurb"
  prompt-version: 2
  dni:
  - name: "Shane"
  prompt: |+
      <topic> - Wikipedia
      <(identity name)>
      
      en.wikipedia.org › wiki › <topic>
  
      Short article:
      <:pp><topic> 
  engine: "OpenAI Codex"
  temperature: 0.3
  max-generated-tokens: 200
  top-p: 1.0
  # End of the first sentence. Sadly, if there is J.R.R. Tolkien, etc. this will break
  stop-sequences:
  - "."
  cache: on
  vars:
  - "topic"
  examples:
  - "John Dee"
  postprocessor: pen-str join ' ' | sed -z 's/\s*\n$//' | sed -z 's/[^a-zA-Z0-9]*$//' | sed -z 's/$/./'
  info: on
  filter: off
  completion: off
  insertion: off
#+END_SRC

* DONE M-h may kill emacs now
Fix that. I keep hitting it.

** When in emacs lisp
j:my-lispy-select-parent-sexp

* TODO Make an embellish prompt

* TODO Test dni
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"(if ,dni" "$HOMEvar/smulliga/source/git/semiosis/pen.el/src/pen-define-prompt-function.el"
#+END_SRC

* Speed up this
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"^(defvar context-tuples)" "$HOMEvar/smulliga/source/git/config/emacs/config/my-syntax-extensions.el"
#+END_SRC

** TODO Make the context tuples also contain the blacklist predicates

** upgrade pen too
e:$PENEL_DIR/src/pen-context.el

add my-defun to pen too

* TODO Make a new defun which also supplies context predicates
I should define functions this way.

j:my-defun

* TODO Abandon Datomic for Datahike for rhizome
e:$MYGIT/Datomic/day-of-datomic

* TODO The creation repo is important
** Make it along with datahike, etc.

** It's really important
I could just take artworks from places and make cool stuff with it

*** Then I can talk to Melee about it, maybe, if I don't screw things up

* TODO Find a jq for sexps
** Load the lisp code as data

* TODO Design the creation repo and pipeline a bit better
Should I have 3 stages for each? Or arbitrary numbers of evolutionary stages?
Arbitrary numbers seems better.
Every type of creation is never actually finished.

A creation refers to samething at any stage of the pipeline.
It has a list of next evolutionary stages.
All of these can be defined in the same file, but don't have to be.

http://github.com/semiosis/creation
e:$MYGIT/semiosis/creation

** TODO Remove from pen
- personalities
- protoverses
- metaverses
- tomes

*** But add to Pen.el some way of loading these into the menu systems, etc.

** The creation pipeline shouldn't be unnecessarily skuomorphic
It should make obvious sense.
It needs to:
- describe what each part of the pipeline results in.
- what repo (if any) the artifacts may be exported to

** TODO Load all phylogenies

* TODO Add 'dni' into .prompt files
It could be run just prior to the prompt template running.
It goes just before 'prompt'.

It uses the variables.
It is its own template mechanism.
So, surround the dni let with an eval let for the vars.
Run the template.

** TODO Test this
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"(if dni" "$HOME/smulliga/source/git/semiosis/pen.el/src/pen-define-prompt-function.el"
#+END_SRC

Don't expand the template in the same place?
How to make use of dni variables?
Run the dni template expander on the prompt itself?

* TODO Message Melee
Shane really wants to talk to you again.
Do you want him to wait and try again in a year.
keep trying.

* TODO Creation pipeline
** Generalise the pipeline even more
- Each thing (at any stage of evolution) may take from others.

* I have to:
** a) Get back into my zone where I'm able to make things for Melee
** b) Try to contact Melee again
I have to do everything I can.
Go back to Dunedin.
Try to get a bus back?

* TODO Continue working on moving to the creation repo
- This is what I should focus on for the next while
  - It might take some time to finish

** TODO Tonight combine all the current smaller repos into the Creation repo
- This will greatly simplify everything
  - It will be a lot of refactoring, but worth it

* Pen.el
** TODO For the moment, set up the menu and repository for Creation
- But polish off personalities, metaverses, chatbots and artworks first.
- I can, of course work on both in parallel
- I can, also officially support particular archaea of creations.

** Formalise and use this everywhere

*** Creation Pipeline
The creation pipeline is an abstraction over metaverses, personalities, tomes
and artworks.

- archaea
  - chatbot
  - artwork/pictograph
  - book
  - make more types...
- protozoa
- metazoa

It generalises the process to allow new types of constructions.

Therefore, I need to store these things somewhere.
Make a git repository called creations.
Organise it into proto, meta and actualised.
I need another type which describes the types of creations.
A metaproto.
The each creation will have a metaproto which says.

- Steps
  - Click on archaea -> tome
    - Click one of:
      - create new protome
      - Query protome - this creates a meta tome
        - After creating a metome, it will automatically run the metome, but you may cancel
  - Click on proto -> tome
    - Click one of:
      - create new protome
      - Query protome - this creates a meta tome
        - After creating a metome, it will automatically run the metome, but you may cancel
  - Click on meta -> tome
    - Click one of:
      - create new metome
        - This may ask if I want to create from a protome, or design from scratch
      - Actualise metome
        - This will generate the tome / book, and automatically proceed to reading it, unless cancelled
  - Click on actualised -> tome
    - Click one of:
      - read tome

- Pipeline
  - archaea
    - Each archaea defines a type of creation, rather than their
      - Tome
      - Chatbot/personality
      - Artwork
  - Evolutionary progress
    - Proto
      - Is more like a query
      - Has neither name nor description
      - Tome: an encyclopaedia of birds, or how to draw a picture
      - Chatbot/personality: a surreal artist
      - Art: a surreal artwork
    - Meta
      - Has a name and or a description or none
      - Tome: The Standard Encyclopaedia of Birds
      - Chatbot/incarnation: Melee
      - Art: artwork name: Surrealeptitious Strawberry
    - Actualised/collapsed
      - What's a better name for this? Well, I could just leave out the prefix
      - Has a name and a description
      - Has content
      - Tome: The Standard Encyclopaedia of Birds, with content
      - Chatbot: Melee, with transcripts
      - Art: Surrealeptitious Strawberry, with final image

** Make a creations menu
*** Under there should be 'proto', 'meta' and 'actualised' menus

** TODO Make
*** proto tomes
- a protome is a more abstract description of the book you want, which turns into a tome
  - For example, 'an encyclopaedia of birds'
    - This will turn into a tome, which has a name and a description, and may be used to generate a multiverse of possible descriptions of that book
*** proto art
- how to draw a picture
- might be something like
  - an artwork by Melee
  - an inspirational artwork
*** tomes / metome
- A tome is a well-defined prompt template for a book
*** meta-art / metart
- has a name mand a description of an actual artwork, but can be used to generate possible reifications of the artwork
- what should this be called?
*** Actome / Actualasied meta tome
*** Act-art / Actualasied meta artwork

** TODO Make it so I can save an incarnation into a YAML.

** TODO Make it so I can generate metaverses and incarnations and then share them
- I need to make an incarnations repo

** It's important to have logic within the D'ni language
- I need to embed elisp into the file format.
  - Well, not necessarily
    - I could use the tainted d'ni language to embed elisp as well as dni, along with other snippets in yaml
    - Perhaps I should write protoverses in that language
    - That seems too skuomorphic
    - I should have elisp at the very least within d'ni, so I can use ilambda within it

** This is an important prerequisite to doing my programming in clojure and using datahike

** DONE Fix =pin=. It is using =run.sh= every time

* TODO How should the dni language work
I need a 'dni-let' form.

* TODO mkdir models
Models

* TODO Make it so =.person= files

* TODO Make a system of respawning tmux panes to run a chatbot avatar

* Pen.el
** TODO Make a prompt scripting format based on the way I do metaverses and incarnations
- Call it dni

** Work on protoverses
$PENEL_DIR/src/pen-metaverses.el

* TODO Ensure I have a lisp-based template engine
#+BEGIN_SRC text -n :async :results verbatim code
  "(pf-instruct-an-ai-to-write-something/1 "Write a bio about a girl who was trafficked")"
#+END_SRC

Embed this in the personalities.

Explain how to draw a picture

Oh, I have no idea, I drew a child who was trafficked. Likely would be illiterate

* TODO Make more prompts based on InstructGPT
Write a short story about the moon and the stars: 

* TODO Tell Jonty
It's an important day today and I want to make something for Melee.
It's the anniversary of the last time I got to talk to Melee.
I wasn't able to sleep at all last night. If it's OK I'd like to just work today to make something for her.

** Make a chatbot to talk to her painting of the freckled girl

* TODO Set up Chavatar in Pen.el
https://github.com/alphacep/vosk-api/

* TODO Before turning into a standalone docker image, try to set up Chavatar directly inside Pen.el

* TODO Attend the Church and talk to Melee and possibly her parents
** I could paint something for her?
** I can make things for her and give them to her at church
** I can talk to her at church
- I will break down that wall

* TODO I have to do something for Melee today because it's been a year

* Finish the Melee prompting game
** 

* TODO Do not back down - Melee is the one I want
- I have to ramp up my efforts somehow

** How to maximise chances of running into Melee again
- Attend church
- Make things for Melee - finish everything including the prompting game
- Make her artworks famous

** TODO Go to church and try to talk to Melee again
*** Tell Melee these things
- My heart is set on you
- You are my happiness

* Look into this
https://github.com/automerge/automerge

* Pen.el
** Build a helm for the emacs menu bar
Do this so I can use helm instead of clicking around.

** Finish this
e:$PROMPTS/ghostwriter.prompt

** Add the actual yasnippets to Pen.el

* TODO [#A] Make a way to list all unique keys in all prompts
- This is necessary for building new prompts, because I don't always remember what the full list of parameters are

I should probably use clojure for this, because it would be faster...

I should  convert to jq then show the schema

e:pen-list-all-prompt-keys

* TODO Make a prompt to write as someone
A ghostwriter is hired to write literary or
journalistic works, speeches, or other texts
that are officially credited to another person
as the author.

* TODO Make it so when apostrophe selects responses from the chatbot using fzf, it only suggests the reponse, non-inclusive of the chatbot's name

* TODO Generate the book "Which Owl?"
** Make a repository of fictional book descriptions
Which Owl? is a book series, presumably related to owls, that consists of at
least three volumes, the third of which, at least, was written by Miranda
Goshawk and was published by 4 August, 1992.

- People should place their fictional book descriptions into this repo
  - And work on improving them over time
  - Call the repository 'tomes'

* Pen.el - far off
** Use GPG to 'store' passwords
https://jherrlin.github.io/posts/emacs-gnupg-and-pass/

** TODO Make the emacs fzf
- It should use one of the free daemons.
  - It wouldn't currently be any better though than what's available with fzf, because there's no room for editing or prompting while fz is running.

** Ensure that when the eipe starts word wrap is properly enabled

** TODO Make my chatbots so advanced that I can build one that represents myself, and 

** Create a patronus charm function
It should present to the user their happiest memory.
- It should visualise it.

*** Maybe I could make as a starter, a

* Pen.el
** TODO Make it so I can run a prompt function but select from prompt results history instead of actually regenerate
- It's becoming important to build the cryptocurrency

** TODO Save recent chatbots
- Perhaps the best way to do this though is to look at prompt history

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-e-sps (pen-lm (comint-quick "apostrophe-repl \"Bilbo\" \"\" \"Bilbo is a hobbit who lives in the shire, is good friends with Gandalf and passes most of his time with the company of dwarves.\"" user-home-directory "^-[^<pen-colon>]*<pen-colon> ")))
#+END_SRC

** TODO Use rsync to sync snippets from their repos when the prompts are reloaded
- prompts
- metaverses
- personalities

** TODO Add my ranger config to Pen.el
*** TODO Make it so ranger in Pen.el uses `pin` by default as the editor.

** Create includes for different types of tomes
- Novel
  - Have the beginning of the prompt be, for example:
    <book title>

    Chapter I:
** TODO Add the actual yasnippet snippets to Pen.el so I can develop prompts, tomes, etc. inside of Pen.el

** TODO Ensure that tomes, metaverses and personalities directories are directed to the host counterparts if available

** TODO Make it so images can be inserted into the emacs buffer
Instead of simply displaying the image.

** TODO Get this going
M-l M-f M-z
pen-fwfzf

** Fix right click?
When running pen inside host tmux, only the first right click with C-M-z works

** Remove CIDER from emacs menu

** DONE Add M-r er/expand-region

** DONE Disable # swap files in Pen.el

** DONE Add yp to pen emacs
   CLOSED: [2022-02-19 Sat 23:52]

** DONE Add handle bindings to pen emacs
   CLOSED: [2022-02-19 Sat 23:52]
- repl

** TODO Ensure =prolog= works well inside Pen.el

** DONE Add Yas to Pen.el
Test out on autocompleting elisp.

*** I want to be developing entirely within Pen.el, eventually

** TODO Finish setting up my Clojure environment in Pen.el and start using it to do my coding

* TODO Tomorrow just listen to these cat videos while I work
[[https://www.youtube.com/watch?v=eBNDRH1T6cU][Cat and Dog TV 4K Baby Bunnies and Bird Friends - Calming Pets with Garden Birds, Squirrels, Pigeons - YouTube]]

* TODO Work towards storing API keys securely with emacs and unlocking them somehow
I probably need to learn PGP.

* TODO Add a way of retaining ink after running through a filter
It would only work if all the text is the same ink.

* TODO Add my text filter system to Pen.el

* TODO Add commit to emacs docker

* TODO Make it so =ttyd= shows a different website title

* TODO Get vitamins for my gut
Those might be important to prevent long covid, actually.

* TODO Tomorrow I should work on Melee game again, etc.
** Do more with Pen.el
- Finish what I started
- Also, work on Melee's artwork for AletheaAI

*** I have to continue doing this for my sanity and to stay motivated
- Don't allow others to stop me from doing this

* TODO Add the Anya code for the demo

* TODO Make an fzf system for searching both file extension and contents

* TODO Get Croogle working again
#+BEGIN_SRC sh -n :sps bash :async :results none
  sudo /etc/init.d/apache2 start
#+END_SRC

** Consider using it only for Pen.el
Since it takes forever to index my host system.

* TODO Fix epc. I think that is the reason that EAF does not work

* TODO Fix penx
It's reloading pen.
That's not right.

penx doesn't exist yet.
It should be the same as 'pen'.

* If I can combine all of these, that is *win*
- todo list
- programming
- knowledge management
- emacs in the browser

* Focus on community
** Clojure org-mode like
https://logseq.com/

** Data collection
Tree-sitter something that may be the key.
The more someone uses Pen.el, the better it will suit them.

Stephan Wolfram built this data-collection framework for himself.

*** Look into mouldable emacs
Integrate it and then try to combine.

** Limitations of emacs lisp as a language

** Copilot for the web
Maybe integrate EAF - emacs application framework

https://github.com/emacs-eaf/emacs-application-framework

** emacs 2.0
Focus on the workflow that people actually use for work.
We can maximise the rememberance AI idea.

- Mode focused on a workflow, not the file itself.
- A way to collect data that matters to collect the actual workflow.

- A browser, everyone can have a browser.

** Anak wants to focus on the blockchain
The problem is we don't have enough users to scale.
If we shift the direction into the emacs2.0, then we will get the users.
Try and finish the blockchain first and see how difficult.

*** 2 directions for block
- State channel
- DAO

* TODO Make a function to search the movie Across The Universe for strawberries

* TODO Put this on my Facebook page?
[[https://www.youtube.com/watch?v=vvZwPQVhyqE]["it's just a protest" - YouTube]]

* TODO Pen.el
** =M-r=
- This is important for writing lisp / clojure

| kb    | f                  |              |
|-------+--------------------+--------------|
| =M-r= | =er/expand-region= | =global-map= |

** Clojure
- ensure cider-mode starts/jacks in automatically
- ensure handle bindings are bound
  - and that the =REPL= starts

** Rhizome
e:$MYGIT/replikativ/datahike-invoice
https://github.com/replikativ/datahike

* TODO Finish prompt memory
e:$PROMPTS/synonym-1.prompt

- TODO Save/Append to a file (or database) somewhere from the endpoint (lm-complete) script

** Use the database script

* TODO Make pen-ds/pen-gs use the datahike database

* TODO Make a nonsense generator prompt?

* TODO Work on my alice in wonderland adaption
- Only pictures
  - Everything must have a picture
- Nothing but nonsense
  - Nothing should be what it is
  - Everything should be what it isn't
    - What it wouldn't be, it would

- Flowers talk

- Everyone has half a dozen blue birds

- Listen to a babbling brook and hear a song that she could understand

** For example:
- Instead of saying meow, the cat would say, "Yes, Miss Alice".

** How much should be real?
There should be a decent portion of real material.

* Alice Dreams of Wonderland
This is a story about alice realising she is in wonderland already.
Alice realises she is alice.
There is a dream, that is.

* Characters
- Flo is a cat that is my best friend
- Hubert is a Rabbit that lives next door
- imad delivers the food

* TODO Continue making my emacs into the environment I used for everything
Make it conform more and more to the likeness of my host config.

* TODO Fix the engine/prompts loading lag

* TODO Consider setting this up
https://github.com/CZ-NIC/pz

* TODO Pen.el
** Make it so I can run the =last-prompt-command= in debug mode

* TODO Learn a calculator

* Prepare for Covid
** TODO Get cooking appliances

** Food
https://freezedriedemergencyfood.co.nz/product-category/emergency-food/

** 
Omicron exposure is inevitable, an optimised immune system is not.

Omicron Symptoms:
Omicron incubation 2 days
Symptomatic disease with omicron is shorter
Most people could leave isolation at 5 days
Long covid, probably less than with delta

Current symptoms:
- Runny nose, 73%
- Headache, 68%
- Fatigue, 64%
- Sneezing, 60%
- Sore throat, 60%
- Persistent cough, 44%
- Hoarse voice, 36%
- Chills or shivers, 30%
- Fever, 29%
- Dizzy, 28%
- Brain fog, 24%
- Altered smell, 23%
- Sore eyes, 23%
- Unusual muscle pains, 23%
- Skipped meals, 21%
- Loss of smell, 19%
- Chest pain, 19%
- Swollen glands, 19%
- Feeling down, 16%

Remember, the 6 Ps:
- Poor preparation promotes probable poor performance

* TODO Get these
** Lateral flow test

** Supplements
- Vitamin D
- Zinc

** Eat a wide variety of fresh fruit and vegetable
- Avoid juice

** Sleep 1 hour early
- No big meals before bed
- No alcohol and caffeine in the evening

* TODO Get myself a WhatsApp?

* TODO Use my instagram more?

* TODO [#A] Say Happy Birthday to Matvey

* TODO Pen.el
** TODO Set up some kind of peer sharing system
Perhaps a git repo for the time being.

** TODO Test Pen.el with =yggdrasil= as the sole network

** After starting =yggdrasil=, get the IPv6 address

** Prompt through yggdrasil
#+BEGIN_SRC sh -n :sps bash :async :results none
  curl --header "Content-Type: application/json" --request POST --data "{\"fun\": \"pf-tweet-sentiment/1\", \"args\": \"[\\\"I love chocolate\\\"]\"}" -g -6 "http://[200:93b4:f017:9126:26c9:d3d8:e38d:4f98]:9858/prompt"
#+END_SRC

*** Test locally

#+BEGIN_SRC sh -n :sps bash :async :results none
  curl --header "Content-Type: application/json" --request POST --data "{\"fun\": \"pf-tweet-sentiment/1\", \"args\": \"[\\\"I love chocolate\\\"]\"}" http://127.0.0.1:9858/prompt
#+END_SRC

** yggdrasil
#+BEGIN_SRC sh -n :sps bash :async :results none
  yggdrasil -genconf > ~/.pen/yggdrasil.conf
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  yggdrasilctl getPeers
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  ssdpy-server my-special-service --location 'http://10.0.0.1:8080/hello'
#+END_SRC

** TODO Implement a memory mechanism into prompts
Each prompt should have a template for adding memory into it, which can be overridden.

e:$PROMPTS/synonym-1.prompt

=<:mem>= is the start of where new memory should be taken.

=<memory>= is where old memory should be substituted in.

Prompt memory should be editable.

#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"memory-collect-from-pos" "$HOMEvar/smulliga/source/git/semiosis/pen.el/src/pen-define-prompt-function.el"
#+END_SRC

*** TODO I have to save the memory to the database, or actually add it to a file somewhere
e:$PENEL_DIR/scripts/hf-complete.sh
e:$PENEL_DIR/scripts/openai-complete.sh

*** I need a way for the user to evaluate the response and add to the memory if they want

**** I should add a mechanism for socratic feedback
And so counter-examples can be added to the memory.

*** A feedback mechanism might be a good idea too
https://arxiv.org/abs/2201.06009

To add some kind of socratic feedback, so future prompts are better.

** TODO Look for prompt databases to include to make better prompts

** Incorporate memory-assisted prompt training
$MYGIT/madaan/memprompt

** Set up SSDP
simple service discovery protocol

https://ssdpy.readthedocs.io/en/latest/cli.html

#+BEGIN_SRC sh -n :sps bash :async :results none
  pip3 install ssdpy
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  ssdpy-discover ssdp:all | vim -
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  ssdpy-server khala --location 'http://10.0.0.1:$(cat ~/.pen/ports/khala.txt)/hello'
#+END_SRC

*** UPnP? - maybe not

http://miniupnp.tuxfamily.org/

To install on Ubuntu: sudo apt install miniupnpc To add a port forward: upnpc -a 192.168.1.2 22 3333 TCP To remove a port forward: upnpc -d 3333 TCP Info from po-ru.com/2013/02/17/using-upnp-igd-for-simpler-port-forwarding

** Fork the services. Get listed
https://github.com/yggdrasil-network/yggdrasil-network.github.io/edit/master/services.md

** TODO Set up the p2p network on =yggdrasil=
https://github.com/yggdrasil-network

#+BEGIN_SRC sh -n :sps bash :async :results none
  yggdrasil -genconf -json > $HOME/.pen/yggdrasil.conf
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  yggdrasil -useconffile $HOME/.pen/yggdrasil.conf
#+END_SRC

*** TODO Automatically add Peers from the git repo

*** TODO Keep a static IPv6 address by not continually remaking the config file

*** curl using ipv6
#+BEGIN_SRC sh -n :sps bash :async :results none
  curl -g -6 'http://[fe80::3ad1:35ff:fe08:cd%eth0]:80/'
#+END_SRC

*** Set up a public service
https://yggdrasil-network.github.io/services.html

** TODO Make a start on the crypto
I need the NFTs to secure the information about where the prompters are, somehow.

*** Set up Ganache in Pen.el
https://github.com/trufflesuite/ganache

I probably need to use a more recent version of node.

#+BEGIN_SRC sh -n :sps bash :async :results none
  npm install ganache --global
#+END_SRC

Why does it have to be such a nightmare?

#+BEGIN_SRC sh -n :sps bash :async :results none
  nvm use v15.12.0
  nvm install v15.12.0
  
  npm install -g node-gyp node-pre-gyp
#+END_SRC

** TODO Add a menu binding for adding a host ssh key, so =cterm= can interact with host terminals

** TODO I could create a better chatbot potentially by responding not to merely the text written, but also to other potential generations
How can I reply in a way that's good for responding to not merely the written prompt from the other person but also potentially multiple other possible but not reified/manifested prompts, that the other person may actually be thinking.

My reasoning is this:
- When people respond to others they are not merely responding to exactly what the other person said/wrote.
  - People may suspect that the other person has a hidden agenda, hidden thoughts, and perhaps a intention behind what they have just said.
  - Therefore, the way a responds is not always direct, expected, or in an amenable way.

** TODO Start =Khala= automatically

** TODO Although I can prompt over a network, it's currently using =lm-complete= directly
Now although I should be able to specify a human prompter on the other end, I don't truly want to do it that way.
I prompt not knowing if it will be human or AI.

** I must create a khala endpoint that runs thin-client functions

** TODO Ensure I can specify the proxy with the shell interop

** TODO Test Pen.el in a network
#+BEGIN_SRC sh -n :sps bash :async :results none
  pin -cn pen1 -n -n1
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  pin -n -n1
#+END_SRC

*** Prompting megn

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pf-very-witty-pick-up-lines-for-a-topic/1 "writing" :proxy "192.168.1.9:9845")
#+END_SRC

*** TODO Prompt one-another

** TODO Make a way to specify different ports for different Pen.el container names
The port number should be generated from the container name, and the container
name sent to the container.

*** I have to calculate them *outside* the container
That means I need to use whatever language is available for that.
Probably not perl.

** TODO Add a parser for this which extracts the "from" and the emacs as separate entities
$PROMPTS/generate-email-2.prompt

** TODO Look into =timp=
https://github.com/mola-T/timp

*** Set up the network socket for daemon->daemon communication.

** TODO Make an fzf that can run in the background without a tty but make a call back to the same (currently open) emacs daemon for fz

** TODO Make a way to view nodes on the network
- A tabulated list mode, like docker.el

*** Make a way to prompt those users on the network
- Bindings for the network view mode

** TODO Today, complete
- the tags hierarchy menu
- prolog database per chatbot
  - Keep the databases in the [[e:~/.pen/prolog/databases]] directory

** In the future I should generate chatbot context from the prolog databases

** TODO Generate a menu using the prompt tags

** TODO Interactively add functions for pausing then resuming control of chatbots with functions to assist in talking
e:$PROMPTS/friendly-chat-response-1.prompt

** Classify all prompts
*** Put this under lookingglass functions
h:pf-detect-missing-web-page/2

*** Create a menu system for prompts

** TODO Get a free port for each of the services
- khala
  - khala should also have an endpoint that says what ports the node is exposing
- irc

** Add a button to go to timeouts
#+BEGIN_SRC sh -n :sps bash :async :results none
  v ~/.pen/timeouts.txt
#+END_SRC

** TODO Finish adding =personalities= and =metaverses= to =Pen.el=

* Melee
** Exquisite Corpse
** Imitation game
** Art Interpretation
** Text games
- Wordl

* Multiple =Pen.el= containers

* MTP
People need to be able to connect to a remote IRC server of a node, for MTP.

* TODO Make it so you can play wordle over semiosis protocol
** Or any terminal game

** Play for someone else

* TODO Finish what I need to finish for Valentines day

* TODO Come up with some rates for charging for my services

* TODO Use prolog in =Pen.el=
- Add prolog database per buffer

* DONE Finish this
  CLOSED: [2022-02-08 Tue 16:37]
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"if has_placeholder \"\$@\"; then" "$PENEL_DIR/scripts/pen"
#+END_SRC

* TODO Multi-modal prompts
I want to embed the images inside of emacs though
so you can just select text and images and in turn stream that into another multi-modal prompt

* TODO Add wordl
[[https://www.youtube.com/watch?v=v68zYyaEmEA][Solving Wordle using information theory - YouTube]]

* Wordle
** Add wordle to Pen.el
https://crates.io/crates/cl-wordle

* TODO Add an action

* TODO In the Melee prompting game, I should generate images to do surreal art interpretation
menu-bar-images-menu

** TODO Make a binding to visualise and display the selection
pf-given-a-textual-description-visualise-it-with-an-image/1

* TODO Think of a way to apply text embeddings
** It would be interesting to be able to reconstruct text from embeddings with OpenAI API

** Semantic search?
- Not sure yet.
- I need lots of smaller documents.

* TODO Make it so I can run multiple Pen.el instances on my machine
I should supply a node name.
- That should change:
  - hostname
  - ~/.pen directory
- They will need different ports for the various services.
  - khala

* TODO Make the game Melee
** Exquisite corpse
- Game starts by initating the story
- The players proceed in a daisy-chain of prompting via the network

*** Do I need a player lobby?

*** I start the game
Then I add new users.
- These users can be AIs or humans.

* TODO I have to tell Reuben that I want Melee
At some stage.

* TODO Use memoisation inside channel to speed it up

* TODO Make a chatbot which can control my host computer
- Run commands for me
- Relay information for me

** Start by basing it on Apostrophe

* TODO Set up a code search prompt for Pen.el

* TODO Set up instruct codex? (if it exists) for running commands on my host machine

* Time to set up the Melee prompting game

* TODO Set up a metaverses repository
This is for chatbot metaverses.

* TODO Set up metaverses
e:$HOME/var/smulliga/source/git/semiosis/metaverses/metaverses/mad-teaparty.verse

http://github.com/mullikine/metaverses/blob/master/metaverses/mad-teaparty.verse

* TODO Set up personalities
e:$MYGIT/semiosis/personalities/personalities/libertyprime.person

https://github.com/semiosis/personalities/blob/master/personalities/libertyprime.person

** Integrate these into apostrophe and chann.el

** YAML File type

* TODO Make this work
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (progn (pen-term (pen-nsfa "\"pen-cterm-ssh\" \"-ssh-to-host\" \"n\" \"-cwd\" \"$HOME/notes/\" \"-cmd\" \"\\\"mtp\\\" \\\"Richard\\\"\" \"-user\" \"shane\" \"mtp\" \"Richard\"") t "pen-cterm-ssh" "cterm-mtp-richard" "(pen-run-after-time 5 '(pen-tv \"hi\"))"))
#+END_SRC

* TODO Once I have optimised MTP on IRC I should build a web platform for it

* TODO Try out my chatbots on freenode / libera.
** TODO Set up MTP to optionally connect to libera instead

* TODO Pen.el
Set up Chann.el to debug bots by wrapping around a libera IRC channel and then.

* TODO Place an MTP chatbot into an IRC channel

* TODO I have to provide sentinels for the execution of multiple simultaneous eval.sh on the same daemon
This is important.

- cterm
- non-repetetive prompting

* Jonty case
LAB165

P049568624

* MTP
** Make a script to start a bunch of chatbots given a list of names.
Perhaps bring them in one at a time.

* TODO Alice in Wonderland adaption
** Firstly, make The Flora of Wonderland
** Secondly, make the extrapolation of Alice in Wonderland
Just try to extend Alice in Wonderland a bit,
and add a tonne of prompting into it.

* Pen.el
** TODO Add the HF GLIDE API to Pen.el
https://hf.space/gradioiframe/valhalla/glide-text2im/api

e:$HOME/var/smulliga/source/git/semiosis/engines/engines/glide.engine

*** HuggingFace support is very important for Pen.el

** TODO Turn the helm-google mechanism into a way of asynchronously prompting

** TODO Make it so I can see the currently selected ivy candidate

** DONE Consider using helm instead of ivy for Pen.el
   CLOSED: [2022-02-06 Sun 20:10]
Because if its power.

*** Perhaps use it for multi-line completions
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (helm-completing-read-default-1 "kldjfs" '(a b c) )
#+END_SRC

e:$EMACSD/config/my-helm.el
e:$PENEL_DIR/src/pen-helm.el

** DONE Make this work
   CLOSED: [2022-02-06 Sun 14:27]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (buffer-string-visible)
#+END_SRC

The problem is that the current window contains the window dimensions I need.

I need a with-current-window function.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (with-current-buffer "*scratch*" (buffer-string-visible))
#+END_SRC

It's the key to getting MTP working.

** =Chann.el=
- Add users based on who is already in the chat.

** TODO Make it possible to prompt the daemons instead, as a parameter
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pf-say-something-on-irc/4 room users conversation yourname :pool t)
#+END_SRC

** TODO With Chann.el, I should be able to chat to a chatbot on IRC, and that chatbot should be able to control a terminal
- I could ask it to run some command for me, and it would have access to the terminal
  - This should be the first step
- Also, the actions it takes must be in response to what it sees on the terminal
- The chatbot should be able to relay information to me about the terminal
- The chatbot should be able to be given a task, such as responding to events, and execute that task
  - Therefore, I must be able
  - I need a prompt which interprets the task into a canonical format, and the runs a command loop
    - The task may be to continually monitor for a particular event and report back to me, or to run a command on the shell, or something
- Therefore, the chatbot needs
  - To see the chatroom
  - To see a terminal, running a TUI
  - To see a shell prompt

** TODO To make mouse click work for people who use tmux
I need to also automatically install the terminfo definition?
Not sure about that.

** I need to fix mouse click.

** TODO Make a pronounciation prompt
Translate text from a foreign language into English phonetic spelling.

** TODO Install babashka into Pen.el and start using that instead of bash

** TODO Make it so when a Pen.el terminal closes there is an automatic screen refresh

** =ilambda= for racket would be awesome!
- continuations! - https://beautifulracket.com/explainer/continuations.html

** TODO I should create a book list on my website

** TODO Disable or stash emacs swap files

** TODO Work on ilambda for a little bit to make sure it's all working smoothly

** TODO Give building a language in racket a go
At least set up the Racket IDE in Pen.el.

** TODO Make it faster to do blog posts
- Sync the Semiosis and Bodacious Blog posts.

** TODO Add to =Chann.el=

** TODO Start committing prompt history to =Rhizome=

** TODO Add code search using the OpenAI search models

* TODO Make a prompt for the interpretation of dreams

* TODO Consider starting a new project
** Surealism
Finding a bridge between the subconscious and reality.

** TODO While writing using the surrealist methodology, connect this to things

* TODO Attempt to incorporate surrealism into the way I work
e:$NOTES/ws/surrealism

** Well, actually my mission should be to make sense of it
"Finding a bridge between the subconscious and reality."

*** Therefore, I should be constructing surreal artworks

** This is an important skill to attain

* TODO Consider making an ilambda for ASM

* DONE Make a prompt for searching for which binary file some hexadecimal binary code belongs to
  CLOSED: [2022-02-04 Fri 09:59]

* Another easy thing I can do is add the buttons with PEN_EIPE_DATA

* TODO Ensure term modes are working
I want to make bindings for MTP.

* TODO [#A] Ensure I can recursively call a prompt function, with =burst-preprocesor=
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pf-list-subdirectories/1 &optional WORKING-
  DIRECTORY &key NO-SELECT-RESULT INCLUDE-PROMPT
  NO-GEN SELECT-ONLY-MATCH VARIADIC-VAR PRETEXT
  INJECT-GEN-START CONTINUE-DEFAULT TEMPERATURE
  OVERRIDE-PROMPT FORCE-INTERACTIVE PROMPT-HIST-
  ID INITIAL-TRANSIENT FINAL-TRANSIENT CLIENT
  SERVER)
#+END_SRC

* TODO [#A] Make a prompt =burst= system, with a preprocessor
- =burst-preprocessor=

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (burst-postprocessor (ht-get yaml-ht "burst-postprocessor"))
  (burst-length (ht-get yaml-ht "burst-length"))
#+END_SRC

** Reuse the =pen-last-prompt-data=

** Every =burst-length= chars, concat and run the preprocessor

** TODO Make better text generation from Codex
Do this by generating partial text up to a
point and then postprocessing (which may chop
off part of the text or otherwise transform
it) then continuing the generation, and do
this regularly.

* Pen.el
** TODO Make a start on continuum
- I need to record inputs and save them to state somewhere and call upon them later

- Or maybe I should take snapshots of the screen in advance and the prompt can call upon them

** TODO Add multi-prompt support for Pen.el
Perhaps use this just for multi-completions.

** TODO Consider adding streaming support into Pel.el

* TODO Take a photo of the neighbor's rabbit Hubert with a coat and a watch?

* I should probably try to get the Pen.el proxy working with the openai client, as Goose has done
https://goose.ai/docs/api

* TODO Set this up for Pen.el
https://goose.ai/

* TODO Automate the removal of empty dirs under /host
$PENEL_DIR/scripts/run.sh

** So that if  I commit the image, there will be no problems

* TODO Begin using GPT-3 / Codex for fact-checking, but store results inside a prolog database, or something
** I should most certainly be storing all of my prompting.

* TODO Make sure Melee can have this
https://www.youtube.com/watch?v=b2D_5G_npVI

https://www.escapemotions.com/products/rebelle/about?//products/rebelle/index.php

* TODO Make a start with automating the creation of prolog databases
Might as well put the functionality into Pen.el.

** What should I log?
I should certainly log something.

** The other way is to parse to generate facts. What should I parse?
I should create parser for prolog, too.

* Post in the Pen.el server
$DUMP$NOTES/ws/screenshots/file_1643784441_screen_71ccpL_rand-18997_pid-2035786.png

* TODO Run the prompt for 'On This Day'

* It's 2/2/22, 7:25
I'm watching Alice in Wonderland from 1988, the year of my birthday.
Surely that has some kind of significance.

* TODO Spend all of my time on this Alice in Wonderland adaption for a little while

* TODO Make the Adaption of the Mad Tea-Party from Alice in Wonderland
- Throw pebbles into a teacup filled with tea
  - Like in the 1988 movie

- The white rabbit next door

- Try to introduce the characters using the AI as well
  - Describe their place in the real world

  - In the 1988 movie, the rabbit escapes, puts on a suit, etc. looks in the mirror
    - Takes out a watch from inside itself. Every time it does this, wood chippings spill out onto the floor
    - Alice says "Hello Bunny" and the rabbit runs away
    - Then goes inside a drawer
    - Alice follows it and continues through a crawlspace
    - Alice finds the rabbit eating wood chippings. 
    - Alice says "Hello Bunny" and the rabbit runs away
    - Alice tries to eat the wood chippings but spits them out
    - Alice follows the bunny
    - She steps on a rake, it whacks her head and she falls into a bucket. But she falls through the bucket and into a miniature elevator shaft, which takes her down
    - On the way down she passes shelves of marrionetes, dolls, masks and timepieces, and other old junk or treasures
    - As she passes a shelf full of preserved food in jars, she takes one and opens it
    - The jam contains a tack pin
    - She looks to the shelves again, which are passing by, and notices pickled jars of clocks, lightbulbs and other objects
    - Continuing she passes rows of taxidermies and animal bones on display
    - And at last falls into a heap of leaves next to a locked door
    - The Rabbit pops out of the leaves and says "Oh Dear", then burrows back down
    - The heap of leaves begin moving on its own and sucks itself into a drawer that was concealed within itself (the heap)
      - This is time-reversed
    - Alice looks inside the drawer and finds a tiny key
    - The key is far too small for the door but she sees another tiny door at the base of the big one, which she opens
    - Peering inside Alice hears the sound of water dripping and birds chirping but the tiny room befond the door has only curtains and artworks that depict a fountain, birds and potted plants
    - Alice says "Hello Bunny" and the rabbit runs away
    - The door is too small for alice so she puts the key back in the drawer, but when she goes to shut the drawer, a bottle of ink rolls out
    - It has no label but she tries it then goes and drinks the whole thing
    - She shinks into a doll
    - She then tries to open the door but it is locked
    - But the key is on the top of the table

- It could be interesting to write it in reverse
  - A time-reversed version of Alice in Wonderland

- I could also write it as Alice in New Zealand

- I *could* do this while we are having the party
  - Maybe I should do just a little bit

* TODO Before building Melee, I need to build Mad Tea-Party

* TODO Today I need to
- Work on PenSieve
- Check to see any response from Reuben
- Learn how to use the web-based loom
  - And use that to build the Alice In Wonderland adaption

* PenSieve
** TODO Make this run asynchronously so I can debug in the REPL
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (-main "pensieve" (expand-home "~/pensieve"))
#+END_SRC

** TODO Need to ensure I can unmount
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  sudo umount -l ~/pensieve
#+END_SRC

* TODO [#A] Add something *like* loom into Pen.el
** I should probably design it specifically with a tree for navigation

** I *do* need a tree widget

*** [#A] I could use a filesystem for this actually, based on PenSieve
This might be the best way to do it actually.

When you open a file in PenSieve, it could not only open the resulting
generation, but also update emacs in a static window to reflect the current
location.

* Proxy
** TODO Make it so results dont have an extra lin
** DONE Fix unicode
  CLOSED: [2022-02-02 Wed 01:30]
* TODO How can I make a tree-based writing system like Loom?
A filesystem isn't the right tool.

A tree + a document, like loom is what is required.

* I have to continue 1-upping myself for Melee

* TODO Spend more time engrossing myself into the surrealistic method, etc.
** Try to apply it to what I'm doing.
*** Then teach Melee to do it if she wants to learn.
**** Otherwise, keep tabs on things she could use, such as Laria's Loom

** It's important to finish the iNFT art for Melee
That is important as it may be the way young people such as Melee apply
themselves in the future.

* TODO Add this into Pen.el
https://ag91.github.io/blog/2021/11/22/moldable-emacs-lets-make-english-easy-to-query/

* TODO Make myself the Melee game -- that's important
https://latitude.io/

To compete with the likes of this.

* TODO Make a tree-mode for autocompletions?

* TODO 
e:$DUMP/tmp/scratchXS68E2.txt

* TODO Add the emacs mechanism for killing the khala port, using my emacs UI
e:$EMACSD/config/my-net.el
e:$EMACSD/config/my-server-suggest.el

* TODO Add mitmproxy to Pen.el

* Buy this and give to Melee later
https://www.amazon.com/dp/B089KDT81N
https://www.amazon.com/dp/B08B4L8YYN

* Pen.el
** TODO Consider adding the Ethereum VM into Pen.el

** TODO Make a Codex-search based fuzzyfinder based on Helm

** TODO Put fzf in a cterm or pet?
*** TODO Add support for stdout in cterm and pet

e:$PENEL_DIR/scripts/cterm
e:$PENEL_DIR/scripts/pen-pipify

** TODO Make an fzf that uses a Pen.el daemon and ivy

** TODO Begin working on the real life adaption of Alice in Wonderland

** Also, start messing around with prolog at some stage
But I want to base it on PenSieve, etc.

** TODO Add a key entry for your host SSH key

* TODO Go through the process of building the prolog emacs environment

* TODO Make an emacs version of fzf
Launchable from the terminal.

* TODO Make it so an emacs daemon can run an ivy via the bash interop

* TODO Talk to Reuben
** You've made me out to be the worse kind of human being
** And I'm the best kind
- You're an idiot

* Pen.el
** Clojure
Ensure that I can run the server from the emacs lein repl. Then run external
test scripts and have the server be debugged inside of emacs.

j:pen-test-proxy-lm-complete

* TODO Make a system of generating entire sets of new vim syntax files with Codex

* TODO When I talk to Reuben
- Ask him

* TODO Set up the Arcatelier website
$SCRIPTS/sh-arcatelier

Make a whole bunch of surreal art.

* TODO Finish the Pen.el proxy
** I need to collect the results here
If a proxy command is run then the results will be a single json file.

j:pen-pfp-resultsdirs

** Perhaps I should make json the default format, actually.
Hmm. Maybe not.
Just create results dirs from the json.

* TODO Make a mechanism to synchronise the pen emacs config across all daemons

* DONE Upon starting pen, copy the vimrc file across if a host repo is available

* TODO Consider finishing this
https://en.wikipedia.org/wiki/User_talk:Mullikine-shane?markasread=238707788&markasreadwiki=enwiki#c-Liz-2022-01-28T19:06:00.000Z-Your_draft_article,_Draft:Imaginary_programming

* TODO Add fuzzy selection to the bash interop

* TODO Make it so =pet=/=cterm= can accept stdin
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (shell-command-on-region (point-min) (point-max) (concat-string "pen-tsp -wincmd " "nw" " -fa " "pet v"))
#+END_SRC

** TODO Make it work with =cterm= too

#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# In order to make this also work on the host, the temporary file must go into the $HOME/.pen directory" "$HOME/source/git/semiosis/pen.el/scripts/cterm"
#+END_SRC

* TODO export the environment variables to the proxy
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  jq -ne '{"location":env.}'
#+END_SRC

#+RESULTS:
#+begin_src bash
{
  "location": "zsh"
}
#+end_src

* TODO Make some strawberry pictures and post on FB about it
** Do some GPT-3 generations to describe it

In the context of surrealism, especially art, the word surrealeptitious (a
portmanteau of surreal and surreptitious) refers to a work which uses surreal
imagery, figurative or otherwise, to covertly convey to the bearer a meaning
that he or she would only understand or would only be inferred with a hint. For
example, a surreptitious strawberry drawn in the shape of a heart in the
context of valentines day would go unnoticed if not for the context.

This surrealeptitious strawberry

* Pen.el
** Make it so prompts can be asynchronous
This way, I can get the result later and do something with it then.

Useful for image generation.

* TODO Get myself a more powerful computer

* TODO Learn to use these
https://practical.li/blog/posts/code-snippets-for-clojure-lsp/

* TODO Place this into my own right click menu, and into Pen.el's one
j:lsp-mouse-click

* TODO Start LSP for all Pen.el clojure projects, then commit the docker image

* TODO Set up Eth for development
https://github.com/trufflesuite/ganache

** TODO Get right into this
This is definitely the future of my business, money and my ability to work.

* Tell Melee
You're a part of me I can't let go.

* TODO Go over the semiotics side column for terms
https://en.wikipedia.org/wiki/Interpretant

* Pen.el
** TODO Create a completely new function generator for semiotic functions
Wait:
- I already have it (thin client)

** Excise the env/results section of =define-prompt-function= into a new function
This is needed for the proxy engine, so I can prompt without specifying the
function, but rather the raw parameters.

j:pen-pfp-data
j:pen-pfp-resultsdirs
j:pen-pfp-results

The point of the proxy function

** TODO Give away as much Semiosis Protocol as possible
Create a faucet within Pen.el.

** TODO Finish the proxy engine
j:pen-api-endpoint

- Supply a remote engine parameter, to request that engine
  - That could be the human engine
    - The remote human may decline, of course

*** Make a way to run a prompt with all parameters in the e:sp script
Circumventing prompt functions entirely.

** TODO Make the Semiotic function proxy mechanism
- Based on the Pen.el thin-client, but working across the internet
- I should extend the thin-client to implement this.

** Make =semiotic functions=
These are not prompt functions.

*** Should I be able to prompt full-featuredly using an engine?
- Nah, probably not.

** DONE Fix Khala
https://github.com/ring-clojure/ring/blob/master/ring-jetty-adapter/src/ring/adapter/jetty.clj
https://github.com/ring-clojure/ring/blob/master/ring-core/src/ring/middleware/keyword_params.clj

11:02 < hiredman> you need a bunch of ring middleware
11:07 < hiredman> the http body (the inputstream) will be read and decoded by the middleware if it is something that that middlware handles
11:07 < hiredman> so there will be nothing to read in the body

** TODO Fix stop sequence

* Fork the openai client
- Add ethereum key

* Use state channels
If a user keeps prompting and gets through their subscription then they *must* pay.

* TODO Look into combining Pen.el with magnet links and bittorrent
This way I might be able to prevent spam and preserve anonymity.

* Khala
https://tutswiki.com/rest-api-in-clojure/

** Ditch http-kit
*** Use ring for server
*** Use http.async instead for client
https://github.com/cch1/http.async.client

* Cool new tools
https://github.com/micha/resty

#+BEGIN_SRC text -n :async :results verbatim code
  $ resty http://127.0.0.1:8080/data #Sets up resty to point at your endpoing
  $ GET /blogs.json                  #Gets http://127.0.0.1:8080/data/blogs.json
                                     #Put JSON
  $ PUT /blogs/2.json '{"id" : 2, "title" : "updated post", "body" : "This is the new."}'
                                     # POST JSON from a file
  $ POST /blogs/5.json < /tmp/blog.json
#+END_SRC

$HOME/source/git/rbsec/sslscan

* TODO Make the Pen.el prompting server without using HTTP data for the moment

* I'm going to drive to Melee after I make the stuff for her
After I make the surreal art game, etc.

* TODO Build the iNFTs for Melee and then email the Alethea.AI people again
Show them what I want to make.

* Pen
** TODO Add support for many more models
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pen-openai-list-engines
#+END_SRC

#+RESULTS:
#+begin_src bash
[organization=user-4m7aoqj4idasrvb1tt0pax3v] ada
ada-code-search-code
ada-code-search-text
ada-instruct-beta
ada-search-document
ada-search-query
ada-similarity
babbage
babbage-code-search-code
babbage-code-search-text
babbage-instruct-beta
babbage-search-document
babbage-search-query
babbage-similarity
code-cushman-001
code-davinci-001
code-search-ada-code-001
code-search-ada-text-001
code-search-babbage-code-001
code-search-babbage-text-001
curie
curie-instruct-beta
curie-instruct-beta-v2
curie-search-document
curie-search-query
curie-similarity
cushman-codex
davinci
davinci-codex
davinci-instruct-beta
davinci-instruct-beta-v3
davinci-search-document
davinci-search-query
davinci-similarity
text-ada-001
text-babbage-001
text-curie-001
text-davinci-001
text-search-ada-doc-001
text-search-ada-query-001
text-search-babbage-doc-001
text-search-babbage-query-001
text-search-curie-doc-001
text-search-curie-query-001
text-search-davinci-doc-001
text-search-davinci-query-001
text-similarity-ada-001
text-similarity-babbage-001
text-similarity-curie-001
text-similarity-davinci-001
#+end_src

** TODO Add to =cr= a binding to begin running a lein application automatically
*** Start out with simply using direct paths
I may want to start a =zrepl= or to do a =lein run= immediately

** TODO Consider building a chatroom from scratch
https://functional.works-hub.com/learn/lets-build-a-clojurescript-chatroom-570e9
#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$HOME/source/git/briangorman/hablamos"; lein figwheel
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  chrome "http://localhost:3449/"
#+END_SRC

** Khala
Get it working without async, then add async.

https://functional.works-hub.com/learn/lets-build-a-clojurescript-chatroom-570e9

** TODO Make it so the emacs man function imagines a man page if it doesn't exist
Call it iman? Or what's the name of an imaginary book.

** I should be able to select a daemon to use when using --pool

** I need to be able to kill a particlar daemon and restart it
Sometimes they screw up and every time you run =pend 1= it will try to imagine evaluating emacs lisp
This happens after using ilambda.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pen-e -D pen-emacsd-1 k
  pen-e -D pen-emacsd-1 sd
#+END_SRC

** TODO Make something to sync the config across all daemons

** TODO Fix the ilambda REPL
- firstly make sure it works

** DONE The pipeline is hung right now. I dont' know why
Some requires -- probably auto-mode-load

** TODO Fix =-p=. The prompt is not showing
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf -p -u --pool pf-generic-completion-50-tokens/1 "Once upon a time"
#+END_SRC

** To fix the list of missing packages, investigate this
package--save-selected-packages

** Add a shell interop function to reload the prompts
If people are to exclusively use the shell interop then I'll also have to add a shell interop function to reload the propmts

** Emacs is adding =#= files everywhere. I have to disable that.

* TODO Use this as the menu key and retain =M-m= for menu operations
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key jump-tree-map (kbd "M-,") 'jump-tree-jump-prev)
#+END_SRC

** I want to make a better version of my current system and pour everything into it

* TODO Tell Zara
We could all catch Covid and have a miserable year.
Maybe this is the best thing that could happen this year.
For me, talking to Melee would be the best thing.

There's no power issue. If anything I would empower her. I have to build it for Mele so she can learn AI and prompting. And I'm making this thing because I care about helping her.  Some people get really tied up by things that don't matter. I'm just focusing on what matters.
- I haven't done anything wrong and don't deserve to be treated as if I'm a criminal.

* TODO Seek to get the AlephAlpha API
https://aleph-alpha.us7.list-manage.com/subscribe?u=63d4ab1e8214933236114e656&id=2f5bc4ac44

* TODO Install Browsh into Pen.el
How do I do that? I need multiple docker containers.

* TODO Make this
a surreal artwork surreptitiously concealing a strawberry

* I must absolutely delve into Clojure
Ensure that the Clojure development environment is set up and working perfectly with lispy, cider and LSP in Pen.el.

* =Pen.el=
** TODO Make a database for the real
** TODO Make a database for the imaginary

** I have to expose an http server which accepts requests
For this I should use khala.

http://github.com/semiosis/khala/blob/master/src/khala/core.clj
https://github.com/divyum/clojure-simple-http/blob/master/src/clojure_simple_http/core.clj

I need to be able to send information.
I would have to use http payloads to send all the info I need to send.

*** Test the proxy engine on myself

*** This is an OK tutorial
https://medium.com/@alekcz/http-kit-compojure-and-your-first-clojure-server-1df1b0c9da3d

- But it doesn't get onto
  - how to send http payloads.
  - async

*** TODO Figure out how to do async requests with =http-kit=
If you've got to I/O you gotta make everything async.

- Sadly is java. No examples.
https://github.com/http-kit/http-kit

*** Add =compojure= for routing
e:$HOME/var/smulliga/source/git/semiosis/khala/src/khala/core.clj

** For imaginary interpreters, add expected partial output
Generate the prompt. Place it as initial input inside the human prompt.
In the future I will have to send such information via proxies and via semiosis protocol.
But not today.

** TODO Export a command via a safe ssh?
*** Use =wish=
Seems complicated

The docker container doesn't run an ssh daemon though.

Then I should set up =wish=.

I need to run this to download dependencies.

#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$HOME/repos/wish/examples/bubbletea"; go run main.go
#+END_SRC

** DONE Fix this issue with pen help
   CLOSED: [2022-01-27 Thu 15:59]
e:$HOME/programs/tmux/capture/file_tmcapture_ZpDgFF_rand-21776_pid-1978529.txt

I'm quite sure I need to serialise the environment variables.

The issue is here:
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"envstring+=\" \$e=\\\\\"\$val\\\\\" \"" "$PENEL_DIR/scripts/pen-tm"
#+END_SRC

** DONE Make it so =pen-tmux-edit= works with dired

** TODO Ignore package import warnings here
e:$PENEL_DIR/src/pen-emacs.el

** Create a Pen.el proxy system via a Pen.el external prompt engine to deploy Pen.el to the web

** DONE Install localtunnel into =Pen.el=

** TODO Fix cterm

** TODO Work towards Melee prompting game and the cryptocurrency as fast as possible

** TODO Make options to disable things like
- prepend-previous

#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^prepend-previous: on" "$PROMPTS/imagine-evaluating-emacs-lisp-2.prompt"
#+END_SRC

** TODO Make a menu bar item to quickly force the engine
It would be desirable to have checkboxes in the menu bar.
But alas we do not have those.

** TODO It might be time very soon to develop the cryptocurrency

** TODO Ensure I can easily use Asciinema to record

** Make accept and abort overlay buttons

* TODO Use j:lsp-ui-doc--display to display the documentation

* TODO Look into this
https://www.emacswiki.org/emacs/AutoOverlays

* TODO It might be best to use an overlay for the human prompt

* DONE Get this going
  CLOSED: [2022-01-26 Wed 20:32]
#+BEGIN_SRC sh -n :sps bash :async :results none
  echo Hello | "pen-tvipe" "-wintype" "sps" "-cl" "\"pen-eipe\" \"-pt\" \"He\" \"-ov\" \"sup\""
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  echo Hello | "pen-eipe" "-pt" "He" "-ov" "sup"
#+END_SRC

* DONE Get this going
  CLOSED: [2022-01-26 Wed 20:06]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (apply
   (intern "pen-action-show-translation")
   (list "Original language: English\nEnglish translation:\nPerhaps I should change the hostname for the docker container. Good idea"))
#+END_SRC

** TODO Make this work

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-sn "pen-teipe" "hello" nil nil t)
#+END_SRC

** DONE Make this work
   CLOSED: [2022-01-26 Wed 18:28]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-sn "tv" "hello" nil nil nil t)
#+END_SRC

* Pen.el
** TODO Change the hostname for the docker container
Perhaps I should change the hostname for the docker container. Good idea

* TODO I should definitely start parsing pen generations into a struct
- Firstly into json (because it might go into datahike).
- Then into a struct

** Get .prompt action to accept elisp
- selecting an action should be able to be disabled
  - :no-select-action
  - but by default the action should be interactively selected

*** Give access to the parsers

#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^action: \"(pen-show-translation (parser-json))\"" "$PROMPTS/translate-to-english-1.prompt"
#+END_SRC

If the action is an elisp function symbol, then provide the prompt output as the first argument.
Otherwise, if the action is =(...)= then run
the lisp as is but provide dynamic context
with both the output as a variable, and the parsers as functions.

** eipe overlay
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"pen-eipe" "$EMACSD/pen.el/src/pen-library.el"
#+END_SRC

** Have a key =parsers=
And a list of parsers, which I can use any of.
These are outputs.

#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"translate-to-english-1-json) {" "$PENEL_DIR/scripts/pen-str"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^parsers:" "$PROMPTS/translate-to-english-1.prompt"
#+END_SRC

** TODO Enable elisp actions
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^action: \"(pen-show-translation <q:json>)\"" "$PROMPTS/translate-to-english-1.prompt"
#+END_SRC

** TODO Enable multiple actions per prompt, which I can select from

** I should learn better methods of parsing plain text
=json= key for =.prompt=.

* TODO I need to be able to see prompts and generations lined up, tabulated
** Sometimes just for the sake of being able to see what I prompted

* TODO Make it so I can extract multiple fields from the end and place it into json if I want
e:$PROMPTS/translate-to-english-1.prompt

Use a combination of =postprocessor= and =action=.

#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^action: pen-find-file" "$PROMPTS/list-subdirectories-1.prompt"
#+END_SRC

=postprocessor= should be used to put the output
into a useful struct or something.

* TODO Make a function to translate this entire file using GPT-3
[[e:$HOME/Calibre Library/CCS/Surrealisme (Paris, France _ 1924) (272)/Surrealisme (Paris, France _ 1924) - CCS.txt]]

* I should try to do some surrealistic writing
That would be super fun!

* TODO Generate compliments for Christina Taft
Hmm just different types, though the last 10K
could be about Technology or Space or
Intelligence somehow would be interesting...

However, most of the compliments you generated
with Momoa actually are accuate for the topics
they focus on her which is often about her
appearance, personality, career. 

I just think ending it on a smart/tech note
would be ironic...

They also started to add some tech stuff, and
try to claim they're 'forensic scientists' or
'not a bot' or 'not sentient beings' so they
do get the tech stuff, or even 'metta sq rt 2'
and 'ratios' so it's useful...

This is the inside joke:
"Amber Heard - American Actress, Model, and
most beautiful woman according to the
calculations of science."

I put in "Science" topic there, and I always
found it ironic really that they had that
article, I think when she was with Elon Musk.

We could also shake it up and do 10K of Gal
Gadot on Amber Heard, since they star in
Justice League together and both with DC.

So it could be 50K on Musk and AH, or 40K and
10K or 50K and 10K...

The last ones from Musk on Amber could be
about Technology/Science/Space/Intelligence.
Then the rest free-form...

What amounts do you think is best, 50K, 60K?
AH & Musk, Gal Gadot & AH?

* TODO Find myself a cool surreal tshirt haha

* TODO Download the surrealist manifesto

* TODO Get much deeper into symbolic art, with Alethea
This is the way.

* TODO Make another attempt at further describing Melee's art

* TODO Learn a lot about abstact art, so I can have a conversation with Melee

* TODO Email Arif
** What I can provide

* TODO Fill up my abstract art glossary
https://betanew.thedali.org/wp-content/uploads/2020/03/Art-and-Surrealism-Glossary.pdf

* TODO Set myself up to program in solidity/Ethereum

* TODO Look into incorporating something like this into =Pen.el=
https://www.youtube.com/watch?v=Wbid5rvCGos&ab_channel=TwoMinutePapers
http://gaugan.org/gaugan2/?text_input=a+mountain

* TODO Look at this
https://github.com/AletheaAI/alethea-contracts

** Unfortunately, they are not currently public

* TODO Message Zara
Yay I messaged her.

* TODO Fully support =Alethea.AI=, even before Semiosis
https://alethea.ai/studio

* TODO Create some =Alethea.AI= stuff for Melee
** Upload her artwork
+ Train it how?
  - Train it by pouring my heart out into it.
  - By describing it.

** Train her artworks
Train all of them.

*** This is my goal

* TODO Incorporate this into Pen.el
https://github.com/huginn/huginn

* TODO Talk to BNZ about my kiwisaver account
#+BEGIN_SRC text -n :async :results verbatim code  
  +64 4 931 8209
#+END_SRC

** Keep in mind =MyIRD= is correct

** TODO Talk to them about the dates I have been in Australia and NZ.
*** Confirm with them that I live in NZ, and have not spent enough time in Australia to change anything about my kiwisaver
5 months only.

** TODO Ask to withdraw my kiwisaver
- Because I believe they have been mishandling it.

* TODO Go to this, just to talk to Reuben
https://www.trybooking.com/nz/events/landing?eid=6263&

* Attend more art shows, I guess
And I should be applying my AI to it.

* TODO Do more - Make the adversarial art prompting game for Melee
- Network it.

** This is quite important to do

Perhaps today I can simply work on setting this up, and the Pen.el networking.

* TODO Go along to art shows
https://www.dunedinartshow.co.nz/

* =Pen.el=
** TODO Make a mechanism for running elisp after opening a file
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-e -D pen-emacsd-1 -e "(point-max)" "/tmp/tf_pipe_buffer3yZaqeW.txt"
#+END_SRC

** TODO Ensure that killing daemons doesn't kill the host daemon

** TODO Add support for prompting other humans

** TODO Add Charm ? -- Yeah, I should be using this
https://github.com/charmbracelet/charm
https://github.com/charmbracelet/bubbletea

** TODO Can I generate video with a language model, and how would I put that together?
This is what I should be focusing on with =Pen.el= - ASCII minority report generation, using a language model.

** When a prompt appears for the human in =Pen.el=, it must be presented along with information on what prompt it is
- What is the prompt function?
- What is the prompt?
  - In read-only text.
- What is the expected output?
  - Make a text overlay that is flush to the top right of the screen
    - Put in here:
      - the prompt function name
      - the expected output

** TODO Fix both broken "hidden terminal with pet" functions

** TODO Make the readonly prompt for humans

** TODO Fix the comint timeout issue
- test with apostrophe

** TODO Ensure that Pen.el allows you to do certain types of prompting that would otherwise be unavailable
- For example, burst mode

** TODO Make it possible to bring up the menus with Alt bindings

** Make it so the server starts the docker run sh command before running the main one
Then manually kill the container when needed.

** Melee, p2p adversarial game
the daemons are fixed btw. And a full clojure environment installed into pen.el. though there is a little more to automate to get it perfect
another thing im currently working on are read-only prompts to be displayed when prompting the human. That way the human knows how to respond
The idea is this: Network Pen.el so that you can prompt other humans on the p2p network
The prompts and generations are stored in Rhizome, the datahike database
Melee, the adversarial prompting game will utilise this p2p network
Alternatively, you can compete against AIs only, so you can play Melee on your own

** Daemons
Fix the daemons. They probably require more packages now.

** Clojure
*** TODO Finish environment
- load lispy
- load LSP
- load Cider

** Make the Pen.el background properly black, like my host machine
It's nicer, especially with overlays and things, such as lsp and menus.

** Menus and keybindings
*** TODO Make a menu item to go to the .pen directory
*** TODO Make M-F1 function as in my host system

* TODO Set up Clojure development inside Pen.el

* TODO Set up Khala
https://github.com/divyum/clojure-simple-http
$MYGIT/divyum/clojure-simple-http
http://github.com/semiosis/khala
$MYGIT/semiosis/khala

* TODO I have to prune the docker container somehow

* TODO Today
** Make better keys (and possibly buttons) for =apply= and =abort=

** Pass M-F4 through eterm

** TODO Make a http server for =Pen.el=

** It's important to set up Datomic or Datahike or something inside of Pen.el
Do this soon. Maybe tomorrow.

$MYGIT/replikativ/datahike/examples/basic

*** Datahike requires a postgres database

* TODO Add my ranger config to =Pen.el=

* TODO Tell Reuben I need to speak to him and I want him to talk to me like an adult and not get angry
- Talk to him about why Melee
  - Stress that I believe she's my soulmate.
  - Stress that I believe I should be taking care of her
  - Stress that I believe he's living in noise

- You will listen to me because you care about Melee

* TODO Ensure all websites are cached inside of =Pen.el=

* TODO Set up and start doing some things with the HuggingFace API.

* TODO Set up environments in emacs
** TODO Also set up tree-sitter. At least have the emacs environment for it completely sorted
** Clojure
Ensure I can work on pensieve with only the docker container.

* TODO Set up the huggingface fill-mask engine
https://huggingface.co/tasks/fill-mask

* TODO Talk to Reuben
Tell him about the Red Ribbon.

Tell him that this is really important.

* TODO Add some support for huggingface tasks
https://huggingface.co/tasks

** How can I incorporate things like =fill-mask= from HuggingFace into prompts?
Before adding stuff like that, make my burst prompting system.

** Initially I should probably just remember the URLs to these services, because I plan on utilising them in the future

* $10 Go along to this at the Dog this thursday
https://www.trybooking.com/nz/events/landing?eid=6263&

And talk to Reuben.

* ESP
** Make it so emacsclient daemons do not use the human prompt source
I don't want a flood of emacs daemons querying the user.

Also, frustratingly, the list of available
daemons runs out fairly rapidly because they
are used both for prompting the user and for
running prompt functions.

I need 2x number of daemons to fully test the human engine for ESP.

* =Pen.el=
** TODO Create a menu bar per application/mode
This might be tricker to make work for minor modes.

- Try 

** TODO For =Pen.el=, I must ensure that I am using basic but fully-featured shells inside of cterm/pet
- bash
- zsh

*** However, I can feel free to be a little bit unique within =Pen.el=

** TODO Create some kind of http tunnel thing to pair program with Anak

** TODO Clicking in custom works for the gui
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (define-key custom-mode-map (kbd "<down-mouse-1>") 'widget-button-click)
#+END_SRC

That is because the [Toggle] buttons for boolean values respond to mouseup.
And the terminal is not sending those properly?
So I need to map them to mousedown instead as a quick workaround.

** Apostrophe
It's still timing out with the human engine.

** Hidden terminal
*** Make it so the hidden terminal only uses xterm if there is a DISPLAY
- e:$HOME/source/git/semiosis/pen.el/scripts/pen-hidden-terminal
- e:$HOME/source/git/semiosis/pen.el/scripts/pen-xt

*** Make it so if an xterm is used the original eterm/vterm disappears

** TODO Make a menu item to stop the ESP server

** TODO Make a help system of watching asciinema recordings to learn how to use =Pen.el=
- org-links

** TODO [#A] Ensure the ilambda shell interop still works and make a comint repl for it
e:$HOME/blog/posts/ilambda-bash-interop.org

** Plan
I also downloaded the rich library for python, so I may consider making some separate TUIs.
I really think that the crypto for prompting is rather urgent, but like the xbox, i think it's important to have some killer features before launching a crypto

+ Some things I want to do are:
  - Complete the Melee adversarial prompting game. Tie that to the semiosis protocol (prompting cryptocurrency)
  - I will give the vast majority of the crypto to the free software foundation.
  - Make the prompts&prompting database. Tie all prompts somehow to the semiosis protocol, perhaps.
  - Network the Pen.el containers so you can specify remote human prompters
  - bridge the IRC networks between containers
  - Distribute the docker container as a standalone app with a single command installation 
  - If I build TUIs with rich then I may be able to create simplified point-and-click interfaces to Pen.el, which will make accessibility to the crypto a bit more viable

And hopefully, I won't be shut down before all that happens lol.
I'm taking greater advantage of the windowing system on the host, to provide, for example a hidden terminal for prompting a human. However, most such applications will still be running /within/ the docker container.

* TODO Build the =Melee= game, and incorporate it into =Semiosis Protocol= in order to generate money (well, as one way)

* Talk about this screenie
e:$DUMP$NOTES/ws/screenshots/file_1642764229_screen_ndosJD_rand-17898_pid-3420409.png

* Pen.el
** TODO Fix audio for e:pen-timgv

** TODO Make it so mouse scrolling is bound to term, and it passes through
Do this also for vterm.

** TODO Make it so the hidden terminal appears in a new xterm, if X is available and inside the docker container
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pen-xt bash
#+END_SRC

This might take care of the red/blue issue.

** Install
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  agi feh
#+END_SRC

** TODO Make it so I can optionally use vterm, then run timg inside that
Then I can run videos inside terminals inside the emacs GUI.

- It works. It's not great but it works.

- However, video inside vterm inside emacs inside tmux is not great.

- Video inside tmux is great though.

I wonder if I can run videos natively inside the GUI.

** MadTeaParty - fix the erronous nickname issue
#+BEGIN_SRC text -n :async :results verbatim code
  09:12 -!- the-march-hare-the-hatter-and-the-dormouse Erroneous Nickname
#+END_SRC

I either need to use underscores, or make it shorter.

** Allow playing host machine media through the terminal
** Also try to connect audio from container to host, so I can hear vlc running inside the container
** vlc cant run as root
** Try mplayer

** TODO Make =pen-win=
e:$HOME/source/git/semiosis/pen.el/scripts/pen-win

** TODO Make it so images display somehow in emacs
If it's a tty then display using =timg=.

** Apostrophe
** Fix =apostrophe-start-chatbot-from-selection=
It's currently broken.

** TODO Find a way to deliver GUI emacs to a web browser

** Use a shell script to make this more reliable
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# Sadly, this isn't reliable enough. I may need to use a shell script." "$HOME/source/git/semiosis/pen.el/config/tmux.conf"
#+END_SRC

** Ensure I can right click and do basic things like kill a buffer

** Add pen-custom to the menu

** TODO Ensure I can re-enable minor modes such as pen-mode from right lcicking on the minibuffer
Or simply disable them from being disabled with clicking.
It's better without them being enabled.

** TODO Work on
- ilambda shell interop
- ilambda repl

** TODO Add =Rich= to the Pen.el docker image, for building TUIs in python

https://github.com/Textualize/rich

* TODO Make a binding to reload a file

* TODO All I need to do is make a basic mouse UI for emacs
An advanced mouse UI would be better, though.
How?

** The easiest way is probably to change the entire File menu
*** Shortcuts
- Go to prompts
- Go to engines

*** File
- pen-kill-emacs

*** Apps
- ii
- paracosm

** I should spend a lot of time simply making emacs point-and-click

*** Move =my-shackle.el= across

* TODO Start visiting Reuben every time he has a show
- Wait for him after the show, but don't heckle him
  - Say I want to talk to him
  - Give him my completed Alice in Wonderland adaption

** Tell him I need Melee
Tell him why I need Melee.

** Just bide my time and do what I say I do

* TODO Make it so =pen-find-file= actually imagines the file if it does not exist

* TODO =PenSieve=
** =PenSieve= will take a fair bit of prompt engineering, and also regular programming to make it good
And it might be a worthy project.

** Parameters
allow the user to specify to pensieve what the underlying prompts/functions should be for the functions of listing directory contents and viewing files

* Pen
** DONE Make it so empty results are filtered out
   CLOSED: [2022-01-20 Thu 16:22]

** TODO Make it so the user can be prompting from outside of =Pen.el= (=Pen.el= may create an xterm on the host)

** TODO Use =<pen-empty>= to bypass defaults?

* PenSieve
e:$PROMPTS/list-subdirectories-1.prompt

#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"^(defn api-get-pensieve-directories \[\]" "$HOME/var/smulliga/source/git/semiosis/pensieve/src/pensieve/pensieve.clj"
#+END_SRC

* For some reason the host pen.el is not being loaded when pen starts
Instead the docker version is loaded.

* TODO Make a prompt for finishing some code I have started writing
** Consider using =pf-quick-fix-code/1=

* TODO Start using the =shaneclj= package

* DONE [#A] Fix the =```= delimiter
  CLOSED: [2022-01-20 Thu 10:32]
It looks like even selecting code with =`= in it will break the prompting pipeline.

* Imaginary Internet
+ 3 parts:
  - Internal imaginary
    - Your mind
  - Middle imaginary
    - Pen.el
  - External imaginary
    - Externally imagined

* Prompts
** Make a prompt to fix some code
Just select the code and run fix code.

* =Pen.el=
** TODO Make the readonly prompt for human engine now

** TODO Demonstrate using one =Pen.el= server for an entire classroom
Present to =Otago University=.

** TODO Focus on building myself the tools I need to make sense of the imaginary internet
That is, the part that is generated not by my own models, but by others' models.

** TODO Look up other magical apparatus to include in Semiosis
- orb

** emacs
Ensure =kill-new= works like =kill-ring-save= in that the host clipboard is updated.

Do this so copying with =M-w= works from anywhere in emacs.
Currently, I can't even copy from magit.

* Prompt function output alignment mechanisms
** History
Store the list of last n inputs.

** PenSieve
Make a dired binding for pensieve.

** TODO Have a history mechanism for prompts

* TODO Can I set up Terry Davis's TempleOS in Pen.el and would that be useful?
Perhaps one day.

* Set this up
https://github.com/zevlg/telega.el

* Train Anak in Pen.el
#+BEGIN_SRC text -n :async :results verbatim code
  Anak — Today at 3:08 PM
  wednesday and saturday or pair programming? 5 pm both day.
  mullikine — Today at 3:18 PM
  OK! But let's start next week
  Too much to do this week
#+END_SRC

* TODO Make a system of reversing the date
Me to Florida, and back, for example.

#+BEGIN_SRC text -n :async :results verbatim code
  mullikine — Today at 3:19 PM
  I just need to automate a bit of time conversation. Florida <-> NZ would be nice, then automate the alarm clocks, etc.
#+END_SRC

Fuzzy search the timezones.

[[egr:list timezones for date linux]]

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  (pf-asktutor/3 "timezone" "zoneinfo" "Which timezone do I use for Florida?")
  (fz (pen-snc "cd /usr/share/zoneinfo/posix && find * -type f -or -type l | sort "))
#+END_SRC

env TZ=America/New_York date

** 
Then I might make some emacs mode, comint, I guess., to just enter a place name and have it output the current date and time

** I need to be able to search for the timezone I want
Should I use the autocompletion of a programming language to do this? I probably should.

* TODO Dedicate an entire day writing the Flora of Wonderland

* TODO Dedicate an entire day creating the Alice in Wonderland adaption

* Pen
** PenSieve
*** Plan
http://github.com/semiosis/pensieve
e:$MYGIT/semiosis/pensieve/src/pensieve/pensieve.clj

- V1 should not be recursive
- Make it recursive

** Bugs
*** I can't select this and explain the syntax. It's probably because of backtick or tilde, etc.
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (fn [sym] `(quote ~(keyword sym)))
#+END_SRC

* TODO Make an explain syntax prompt, similar to the explain with steps

* TODO Make a command =pen-install= to install configuration files such as
- tmux.conf
- vimrc

Into their places.
And automatically do so when starting the docker image.

This way I can work without updating the docker image all the time.

* TODO Make the pensieve

* TODO Try to get right click working again

* Pen
** Add rtcmd
$MYGIT/semiosis/pen.el/scripts/pen-rtcmd

#+BEGIN_SRC sh -n :sps bash :async :results none
  cat /root/rosie/submodules/lua-cjson/tests/example4.json | pen-jiq
#+END_SRC

*** Also the vim component

** Add the minor modes for modes of prompting
e:$HOME/source/git/semiosis/pen.el/src/pen-minor-modes.el

** TODO Make it so if I do a run.sh, it always daemonises, followed by running the desired command in an exec directly afterwards

** TODO Ensure that when the human engine runs, 
- I need to see in the minibuffer what is going on
  - What engine is being used?

** TODO Get rid of the lighters for most displayed modes

* TODO Also consider overriding pen emacs.d via the shell script
So I can investigate it on the host using my host tools.

* TODO Make a way to mount PenSieve on the host machine
Probably docker has a way to do this.

* TODO Introduce the progress bar
j:pen-modeline-progressbar-demo

* TODO Ensure that only one daemon loads with -n1

* TODO Play music or something when Pen.el is starting
** Just spend all the time on Pen.el and turn it into something incredibly creative.
*** I actually think I need to start demonstrating video in this way inside of Pen.el
This can help me to build pen, actually.
To include stuff such as my movie playing functions, and to ensure they work inside Pen.el.

* TODO Make it so pen always steals files
#+BEGIN_SRC text -n :async :results verbatim code
  ...s.d/pen.el/src/init.el locked by root@mele (pid 6114): (s, q, p, ?)?
#+END_SRC

* TODO If the key doesn't exist, add it
e:$MYGIT/semiosis/pen.el/scripts/pen-rc-set

* TODO Make a chatbot to talk to a poinsettia plant

* TODO Give Melee a poinsettia

* TODO Set up an AEX exchange account
** Invest for James

* Pen.el
** TODO Provide an option to start Pen.el without only 1 daemon
- And with =n= daemons
  - But not 0

** TODO There is an opportunity to curate an emacs distribution with all packages installed

** TODO Consider simply installing *all* the packages that I have in my emacs package list

* TODO Make a double-click menu and add to it options for killing the current buffer, etc.

* Hi Philip
It was good to see you on Sunday.
Thanks for remembering me.

Ask him if he'd like to meet for coffee some time.

Tell him my story; The whole story, if he will listen.

But what made me aware of what is going on is when I hear things like:
Out of Simon on Sunday, encouraging me to not go to DCBC again.
Doesn't it bother you that people look away from you?
When he had no knowledge that Megan did exactly that while walking past me.
And these are the things that haunt me.

However, I also think that we have to be resilient.

I know I'm up against spiritual forces that are trying to hold me down.
But my parents are very strong Christians.

* TODO Set up croogle inside of Pen.el? Call it wizard?
Worth doing, or should I just stick with emacs?
Maybe I should just stick with emacs.

* Create a proposal for investors in Florida
TJ Devris - neovim guy, youtube

ceof
credibility, effort, opportunities, flexibility

miami - bocaritone
one of richest areas in the US

*** 
needs
- short term
- long term

phases
2 months out - aws
6 months
12 months

* Look at this
e:$MYGIT/emlynoregan/orc-simulator

* TODO Add to 

* TODO Add my wizard search engine to Pen.el
/var/www/wizard

* emacs
** TODO Add a function to do both insert and select the inserted text

* TODO Pen.el
** Finish j:pen-continue-prompt

** Add =zone=, emacs package
Run the whole of Pen.el inside of an emacs with zone running?
*** I should curate a version of emacs with all bells and whistles
- Designed for prompting, etc.

* TODO Figure out how to create a dummy network inside docker using ppp or something
** Setting this up might also be a good option
#+BEGIN_SRC sh -n :sps bash :async :results none
  man 'ssh' | vs +/"SSH-BASED VIRTUAL PRIVATE NETWORKS"
#+END_SRC

* DISCARD Fix the exported engine to j:pen-sn
  CLOSED: [2022-01-16 Sun 01:52]
It's coming out as codex.
Well, actually, it's probably right.

* TODO In order to get the read-only text at the start of the buffer, I need to save it to a file, which is loaded
OK, so I actually need a special =eipec= directory with some data.

* TODO Build this
e:$HOME/blog/posts/melee.org

* TODO Ensure I wake up 9am tomorrow to speak to Anak's investor
- Tell him:
  - =Pen.el= is an extremely important project
    - To create an computing environment for humans to use when disconnected from the internet
      - It's a component of the invisible internet
      - It creates an imaginary internet, among other things

* TODO Set up timg for playing videos inside of Pen.el
- vlc

* =Pen.el=
** TODO name each eipe, so the user knows what the purpose is
I really need to have a way to start an =eipec= with some read only text at the start of the buffer.

I have to export that string in an environment variable.

#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# export the prompt here, so I can show it read-only" "$HOME/source/git/semiosis/pen.el/scripts/pen-human.py"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/";; At this point, export as read-only text a banner to show the user what" "$HOME/var/smulliga/source/git/semiosis/pen.el/src/pen-define-prompt-function.el"
#+END_SRC

** TODO Add =M-w= for expanding macros in =Pen.el
It's important to support ilambda.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (upd (imacro/2 sqrt (a)))
#+END_SRC

** TODO Consider making eipe take a thing to put read-only text at the start of the buffer, which would be the prompt.
The human would then continue it.

** TODO Play around with =pen-human= and =imacro=
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (upd (pen-human (imacro sqrt (a))))
#+END_SRC

** TODO Add M-left-click, S-right-click and M-right-click to Pen.el
These can be used for the web interface.

** TODO [#A] Ensure that when a human is prompted, the prompt appears (in a help pane)
Therefore, =eipe= needs to be able to take and display additional information.

* TODO If Reuben doesn't respond and nobody responds
** Message every one of Melee's friends
** If that doesn't work, ask around at DCBC.
** If that doesn't work, ask Zhiyi
** If that doesn't work, go to the CS School
** If that doesn't wokk, go to her school

* Google
[[egr:The Hamiltonian for the universal wavefunction]]

#+BEGIN_SRC sh -n :sps bash :async :results none
  ewwlinks +/"universal wavefunction" "https://generative.ink/posts/methods-of-prompt-programming/"
#+END_SRC

* Semiosis CDN
Well, maybe I should mention a couple other
things then.

I have always thought that a k8s cluster on
top of =yggdrasil= would be cool; now, this
project: dragonfly would enable a k8s cluster
to work inwards like a CDN.

https://github.com/dragonflyoss/Dragonfly2

mullikine — Today at 11:48 PM
That would be cool.
I havent thought about building my own cloud yet.

tekakutli — Today at 11:49 PM
Alternatively, one can have private ipfs
clusters, they are fast I played with one

* Semiosis Protocol
- https://geti2p.net/en/
- https://yggdrasil-network.github.io/about.html

* TODO Pen
** DONE When Pen.el is started offline, it should have its own internal network. Ensure this, instead of starting docker with network=none
   CLOSED: [2022-01-14 Fri 21:42]

** Separate faces into their own file

** DONE Make it so pen-tipe prefers the =human= session
   CLOSED: [2022-01-14 Fri 21:36]
e:pen-tipe

** TODO Install prolog into Pen.el

** TODO Upon starting =Pen.el=, present the user with a transient which lets them select from the applications they might want to run

** DONE Optionally run Pen.el without connection to the internet
   CLOSED: [2022-01-14 Fri 19:54]

** TODO Make a prefix to run whatever next as a human -- this should probably be part of a transient, though

* <2022-01-14 Fri> Literally listening to Upside Down at Nova right now, messaging Alice after listening to call Alice when she's 10 feet tall
To ask Melee out on a date.

* TODO Do my best to get ahold of Melee
- 
- Message one of Melee's friends.
  - LOL i'm friends with one of them -- oops no im not
- Message Melee's mum.
  - She may not even have facebook
- Go to church on Sunday.

* TODO Make it so =run.sh= runs with =--debug-init= automatically

* TODO Watch - Paranoia
#+BEGIN_SRC text -n :async :results verbatim code
  M • 2014 • Independent
  English audio
  
  The two most powerful tech billionaires in the
  world (Harrison Ford and Gary Oldman) are
  bitter rivals with a complicated past who will
  stop at nothing to destroy each other. A young
  superstar, Adam Cassidy (Liam Hemsworth),
  seduced by unlimited wealth and power, falls
  between them and becomes trapped in their
  twisting, turning, life-and-death game of
  corporate espionage. By the time Adam realises
  his life is in danger, he is in far too deep
  and knows far too much for them to let him
  walk away. 2013 Paranoia Productions, LLC.
#+END_SRC

* TODO Set this up
#+BEGIN_SRC text -n :async :results verbatim code
  M-[ 1 ; 4 s
#+END_SRC

* It looks like I need to do another appointment
#+BEGIN_SRC text -n :async :results verbatim code
  Hi Shane,
  
  You have been booked into an employment-focussed phone appointment with your
  MSD Case Manager.
  
  Date: Fri, 04/02/22
  Time: 12:00 PM
  Where: By Phone Call
  With: Alistair Waugh
#+END_SRC

* TODO Make this font an option for Pen.el, or perhaps the default
https://brutalita.com/

It might not be possible for emacs.
I want to start using it though.

Use it wil xterm.

* Talk to Reuben again
** I am going to return to the real world today and I'm going to stand up for myself
- If Reuben has not responded
  - I'll message him again
- If Reuben has responded in a way I don't like
  - Say I want to talk to her again and I'm determined to find a way
- If Reuben has responded positively
  - Send a :)

** When it comes to Melee, I should be far more forward about it
Never back down again.

*** Consider talking to Reuben again about it
The next time I talk to Reuben I'm not going to lose or back down.
I'm going to tell him I want Melee.
And I'm also going to tell Melee I want her.

** I'm not going to accept any bullshit anymore

* pen
** Apostrophe
*** TODO Ensure the timeout does not occur for human prompters

** TODO Add evil digraphs to Pen
So I can send strawberries.

** Ensure there is more feedback telling the user the decisions that are going on
- For example, no internet, using Human engine

** tm
*** ns
Make it so new ns sessions are given unique
names unless attach-when-exists is specified.

* emacs lsp
- disable my default
  - j:lsp-ui-sideline-mode
  - j:ladicle/toggle-lsp-ui-doc

* TODO Make it so =M-i= for iedit works with / as a delimiter
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"(ru.serce.jnrfuse.struct FileStat))" "$MYGIT/ahungry/ruse/src/ruse/fuse_dog.clj"
#+END_SRC

** Alternatively, remember I can do =M-r M-i= to avoid the word boundaries

* TODO Make it so I can easily convert a terminal ansi capture into a gif
** Then send it to a prompt

* TODO Delve more into Clojure
I can do this without a decent computer.

* TODO Start organising my prompts using keywords instead of manually organising them
Do this so I don't have to spend time setting keybindings.

** Use a combination of search functions (like grep) and keywords (like tags)
List out prompts for 'explaining', etc.

* TODO Make a prompt for explaining a particular thing about some code

* TODO Clojure is the way to go
e:$HOME/var/smulliga/source/git/ahungry/ruse

** Read more Clojure
** Learn =ruse=
** Build =ilambda= for Clojure

* I should design Pen.el to withstand rate limiting
- Add the rate limit per-engine

#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"^rate-limit-requests-per-min: 20" "$HOME/var/smulliga/source/git/semiosis/engines/engines/openai-codex.engine"
#+END_SRC

Does it also apply to Davinci?

* I should apply for a job at OpenAI and ask them if I can explore imaginary programming in greater depth
With less restricted prompting limits.

- rate limiting

* TODO Add to Pen.el
** TODO Add more languages to Pen.el
- prolog and swipl
- haskell
- racket
- problog

** Programs
- vifm
- ranger
- slmenu
  - This is only really needed for horizontal selection
  - I could actually use it in place of fzf for such situations.
  - e:$HOME/scripts/slmenu

* Pen.el
** Add a menu system (like =docker.el=) for managing emacsclients
At least for starting clients inside of tmux windows.

* TODO Make a new utility app for Pen.el
** What this does is provide you with a special tmux session
- Different colour, possibly red

*** If this session exists then =eipe= will open there
- It's for organising input such as that and dealing with multiple =eipe=, etc.

* TODO Ensure that the default run command works
It's broken currently under some circumstances.

#+BEGIN_SRC sh -n :sps bash :async :results none
  docker run --rm -v "$(pwd):/$(pwd | slugify)" -w "/$(pwd | slugify)" -ti --entrypoint= semiosis/pen.el:latest /root/run.sh
#+END_SRC

** TODO Ensure that when running in this way, that the Human engine works

* TODO Fix =lg=. It's quitting unexpectedly when run from the CLI

* TODO Make it so when the Human engine is used due to internet failure in =lg=, the promptee input displays inside the GUI

* TODO Make a key binding for save and quit buffer
This is extremely useful when using eipe.

** Demonstrate using the Human engine on my blog

* TODO =Pen.el=
** TODO Figure out why many keys do not work in term in the Pen.el docker image
I think I have to add function keys to =eterm-256color=, or force it to use =screen-256color=.

*** It might even fix right-click inside emacs? Maybe not.

*** Yes, I had done that in the past
https://github.com/dieggsy/eterm-256color

* TODO The choice is an illusion, I need to contact Melee

* TODO Make it so Pen.el resorts to a human prompter if there is no internet connection

** Also, ensure that the human prompting may work on my host machine

* TODO Make this the default for ranger
#+BEGIN_SRC sh -n :sps bash :async :results none
  win -tty vp Gwen\ Stefani\ -\ Cool\ \(Official\ Music\ Video\)-TGwZ7MNtBFU.mp4
#+END_SRC

* TODO Just try to make =PenSieve=

* TODO I need to make a fuzzy finder for functions that utilise prompting functions

* TODO Look for something which can utilse timg to display many images side-by-side in the terminal
Either that or DIY a filesystem browser interface.

* TODO Look into new models
** Use this for =M♡=
https://github.com/wilson1yan/VideoGPT
https://analyticsindiamag.com/guide-to-video-gpt-a-transformer-based-architecture-for-video-generation/

** TODO Use Glide in LookingGlass web browser
https://medium.com/syncedreview/openai-releases-glide-a-scaled-down-text-to-image-model-that-rivals-dall-e-performance-91a26ee80a7c?source=email-d6108fb39138-1641997239858-digest.reader-863f502aede2-91a26ee80a7c----0-101------------------7b32d8b1_63a9_4db9_a2d8_0f95f6f82ee0-1-15ae5e2f_cba9_4663_8a5e_8512f31f7cf1

* TODO Pen.el
** PenSieve
http://github.com/semiosis/pensieve
e:$MYGIT/semiosis/pensieve

https://github.com/ahungry/ruse
e:$MYGIT/ahungry/ruse

** TODO Set up
j:$HOME/source/git/semiosis/pen.el/config/todo/docker-compose.yml

*** TODO Get postgres + datahike working
https://cljdoc.org/d/io.replikativ/datahike-postgres/0.1.0/doc/readme

**** This is good because I can also build the clojure filesystem -- hell yeah

** TODO Make it so I can browse a filesystem of imaginary images and/or documents using =Pen.el=
Call it PenSieve.
Drop files into it and take them back out.

Base it on this.

e:$MYGIT/ahungry/ruse

** TODO Make it so images of people are imagined by =Pen.el= when starting apostrophe, say

** Next time on the internet, install ranger into =Pen.el=
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  agi ranger
#+END_SRC

** TODO Build =M♡=
e:$HOME/blog/posts/minority-report.org

** Apostrophe
*** TODO Fix my bio prompt
#+BEGIN_SRC text -n :async :results verbatim code
  <person> - Wikipedia

  en.wikipedia.org  wiki  <person>

  Short bio:
  MadHatter <END>
#+END_SRC

** Convert asciinema recordings into =gif= and =mp4=
=gif= might be the ideal format for something like =VideoGPT=.

Send them to =VideoGPT= as prompts.
Design the infrastructure for that.

* TODO Update terminfo for =Pen.el= to add function keys

* TODO Fix =imacro= and make =im=. Then use it to detect the internet is working
Do all this so that =Pen.el='s actual code becomes partially imaginary.

** TODO Make it so =im= can also be provided real code to run
And run the real code by default.

* TODO Get an image of the mad tea-party and use it as a logo
Perhaps, I can simply get an ASCII version of the white rabbit.

* TODO Upload this
e:$HOME/blog/posts/pen-human-the-macro-to-run-code-with-a-human-prompter.org

* TODO Ensure ilambda works, and particularly imacro
It seems that I broke imacro at some point.

* TODO Blog about ilambda macro (=im=)
e:$HOME/blog/posts/im-the-ilambda-macro-generate-code-and-run-in-one-command.org

* TODO Pen
** DONE Make a =human= macro to force imaginary functions to use the =human= engine
   CLOSED: [2022-01-13 Thu 16:11]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-human (pf-list-of/2 5 "types of fruit"))
#+END_SRC

** TODO Using =ilambda=, run real functions that do things. Don't just use pure imaginary functions
Build this and then add it to =define-prompt-function= so that I can switch to the human engine, if it's disconnected.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun internet-is-connected-p ()
    (eval (imacro internet-connected-p)))
#+END_SRC

*** Automatically evaluate it, as well

=im= should make an imaginary macro and run it.

** TODO Do a check for internet connectivity
And resort to a human prompt engine if there is no internet.

** TODO Make an elisp =eipe= function using the emacs daemon pool
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (insert (pen-sn (pen-cmd "pen-tvipe" "pen-eipe") "testing"))
#+END_SRC

* TODO Buy a bike
- Duke
  - This is a cool bike. Look into it ~$4k to ~$8k

* TODO Make a substitute for =xt= so =asciinema= works inside of Pen.el
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"ac|asciinema) {" "$MYGIT/semiosis/pen.el/scripts/pen-tm"
#+END_SRC

* DONE Make F4 quit terminals in Pen
  CLOSED: [2022-01-13 Thu 20:03]
It's about time I did that.

* TODO Consider starting to perpetually record myself

* TODO Fix lg

* TODO Create a cryptocurrency for Semiotic, the company
People may buy into the company by buying some tokens.
Do this.

* Add scripts to host
e:$MYGIT/semiosis/pen.el/scripts-host

* TODO Try to get right click working inside of nested tmux

* TODO Download and look into this
https://github.com/bladecoder/bladecoder-adventure-engine

* TODO I need to ensure that I can pass around ink text via shell scripts, etc.
This way, everything in Pen.el that is generated will be queriable.

** Start with apostrophe -- the blurb, should be in ink

* default engine human should not be triggered
I triggered it by selecting some text and doing a translation, and also by starting a subject matter expert.
But it may have been force engine.

* TODO Get madteaparty working with pen-tm

* TODO Make a logo for =madteaparty=

* Prompts
** Finish these
- e:$PROMPTS/ask-tutor-about-passage.prompt
- e:$PROMPTS/break-into-conversation.prompt

* TODO Add something more for Melee into Pen.el

* Pen
** Set up the answers endpoint
https://beta.openai.com/docs/guides/answers

This is for asking questions on documents.

* TODO Fix apostrophe on a cold start
I think the daemon it tries using must've still been starting.

* TODO Fix this option. It's not doing its job
#+BEGIN_SRC yaml -n :async :results verbatim code
  prompt-force-engine-disabled: on
#+END_SRC

* TODO Make pen transients
** TODO Make a default variables transient
- language
- topic

** TODO Make a force parameters transient
- engine
- temperature

** TODO Make a custom transient
- pen-fav-programming-language

** TODO Make a prompt function transient

* TODO Make it so =ii clojure='s comint repl regex works

* TODO Fix LookingGlass

#+BEGIN_SRC sh -n :sps bash :async :results none
  lg "http://localhost"
#+END_SRC

=run.sh= works.

There is only a problem after the server is already started.

** This is where it's broken
e:newframe.sh

* TODO Demonstrate to Melee
#+BEGIN_SRC sh -n :sps bash :async :results none
  madteaparty melee
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-x -sh "madteaparty shane" -e irssi -s "/msg melee I love you" -c m -i
#+END_SRC

* TODO Pen docker install
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  agi ansi2txt
#+END_SRC

* TODO Make it so when using the human engine, there is no timeout for pooled prompt functions
It's currently returning because there is a timeout.

* TODO Figure out how to fix this
#+BEGIN_SRC text -n :async :results verbatim code
  10:29 [rc5] -!- Irssi: Your nick is owned by root [root@127.0.0.1]
#+END_SRC

* TODO [#A] It might be a good idea to add an embeddings API to do things like code search
https://beta.openai.com/docs/guides/embeddings/use-cases

** I think it's probably very important and I should do it

* DONE Fix apostrophe
  CLOSED: [2022-01-12 Wed 00:49]
#+BEGIN_SRC sh -n :sps bash :async :results none
  apostrophe "Amber Heard"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  'pen' '-frametype' 'tty' '--pool' '-ic' '(progn (upd (apostrophe-start-chatbot-from-name "Amber Heard" t))(delete-other-windows))'
#+END_SRC

** It may simply be due to the lack of internet, but I do not know

* TODO Create ad-hoc chatrooms
** =channel= should create IRC channels

* DONE Create a local IRC server to simulate a chatroom
  CLOSED: [2022-01-11 Tue 17:19]
https://ubuntu.com/tutorials/irc-server

#+BEGIN_SRC sh -n :sps bash :async :results none
  wget https://github.com/inspircd/inspircd/archive/v2.0.25.tar.gz
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  /inspircd-2.0.25/run/inspircd start
#+END_SRC

** DONE Install the IRC server and client to the docker container
   CLOSED: [2022-01-11 Tue 17:19]

* TODO Make a new program, =madteaparty=
This actually connects to the pen IRC server with a new user account, and generated irssi config, etc.

** =madteaparty=
e:mtp

* TODO Channel
** Upon starting channel

** Summon the entire mad-hatter's tea party to talk
This can be part of the prompt.

Here, the AI should be talking to you, as if
you are the prompting LM, and the AI is the
person prompting.

#+BEGIN_SRC sh -n :sps bash :async :results none
  channel "Mad Hatter" apostrophe -human "Amber Heard"
#+END_SRC

Channel is a =pen-eterm= with a loop that automatically incites conversation.

- Poll/loop to check if it's a good time to respond.
  -
  - If there is a prompt which is waiting for you, then respond. Otherwise, respond if it seems appropriate.
    - This uses the on_behalf_of to wait to check for =you:$=, etc. to show that it's your turn?

** Channel should be able to work on top of apostrophe, but should also be able to work on arbitrary terminal interfaces

* pen
** TODO Ensure pen can open files from within the container
This is needed for =pen-tipe eipe=.

** TODO Make it so I can use a different pen emacs daemon for the human engine
I have to make sure that when an external command is running, the daemon becomes reserved.

** TODO Make it so comint doesn't time out and give me the previous output

* TODO It's time to set up http proxy server again, or a VPN
Available wifi connections and dwindling.

* Send Antony the conference video

* Tea-Party
** New prompts
- $PROMPTS/ask-tutor-about-passage.prompt
- $PROMPTS/break-into-conversation.prompt

* =channel=
Make an AGI for controlling a terminal.

e:$HOME/blog/posts/channel-allow-a-bot-to-run-your-terminal.org
e:$MYGIT/semiosis/pen.el/scripts/channel

http://github.com/semiosis/channel

** TODO Start by creating a fictional IM program and using it to talk to myself
Wrap cterm around that.

There we go. A basic IM program that uses apostrophe.

#+BEGIN_SRC sh -n :sps bash :async :results none
  apostrophe -human "Amber Heard"
#+END_SRC

But I want something better than that.
I want any user to be able to write as many messages as they want, so I need another type of messaging platform.

*** Actually, I could wrap it around an apostrophe repl if I wanted
Times would be nice though, to be outputted.
But not necessary.
The apostrophe REPL can run the human engine for me to interact with it.

* Apostrophe -- new version?
** ideas
Do this instead of focusing on anything else
for the next couple of weeks.

- Connect chatbots (as REPLs)
  - These would be keeping their own conversation history
    - And working with their own prompts/models

  - How do I connect two REPLs?
    - Or multiple REPLs?
    - Two ways:
      - Shared text file history
      - Hijack a terminal
        - Focus on this one. It's more difficult, but far more rewarding
  - How does one chatbot decide it wants to inject conversation?
    - Well, there is a shared transcript file.
      - Lock it, then write to it, then release it.
      - It is written to, like writing to a file.
      - It is written to at will.
    - Better would be to have it observe a running terminal session
      - And simply inject text, when it wants to
        - But how to determine when it should?
          - Some kind of loop that says when it is time to talk.
          - The idea would be to use prompts to determine *when* is a good time for a chatbot to speak
          - Then I can just let it loose. It would talk forever, or can be told to be quiet, etc.
        - How to determine when it should jump *into* conversation?
          - Given some info on the bot:
            - Bot is noisy/quiet, polite/impolite
          - The prompt would be something like:
            - It was a good time to interject
            - <bot name> decided he had something to say
            - <bot name> decided he was
        - use inotify to detect a file has changed, for starters
          - But then, on a loop I must save the terminal view to a file.

- Manage a conversation
  - Connect chatbots?
    - Definitely

*** Prompts to build
- should-i-talk-prompt
  - By imitating polite conversation
    - take an example of polite conversation as part of the prompt
      - Also, take into account the current time

*** Mechanisms
- A loop
- When there is an update, trigger the chatbot's politeness checkup loop again (it reads the conversation attention)

* prompts
** TODO Make a prompt for asking a chatbot to find some information from another chatbot

* Enable the inter-meshing of chatbots
** How would that work?

* Blog
** Columnate code blocks
*** Make the adaption into a column

* emacs
** Make an interface for this
https://cs.github.com/

* TODO Mint some NFTs on Alethea AI

* Pen
** TODO Make a bunch of prompts for interacting with a book
- Concentrate on this for a while.

** TODO Consider making a prompt which speak in Star Wars terminology/glossaries
http://github.com/semiosis/glossaries-gh/blob/master/star-wars.txt

** TODO Make something which takes a glossary and makes a prompt which talks in those words
http://github.com/semiosis/glossaries-gh/blob/master/star-wars.txt

** TODO I need to be able to select *which* autocompletion mechanism I want
This is important, so I can select Davinci with particular parameters.

** Make a chinese whispers prompt
Basically, repeat the phrase.
Except, add temperature.
The point, being, I want to change it, not repeat it.

* Hatter's Tea Party
** TODO Have an imaginary tea party as part of the blog article, too, using prompting
Imagine all the different teas.

Then see what Alice, and everyone thinks of the tea.

** TODO Make it an activity
- Images and prompts to be prompted later
  - Have some conversations, and complete it later

** TODO Generate an interactive conversation
Mention that I want Melee there.

** Talk to Lewis Caroll, getting him to elaborate
sp:$PROMPTS/ask-tutor-about-passage.prompt

*** Talk to specific characters
e:$PROMPTS/break-into-conversation.prompt

- Make it so apostrophe can handle conversation between any number of people
- A prompt should run with an fzf to determine who to speak to next

#+BEGIN_SRC text -n :async :results verbatim code
  ... And then a conversation started.
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  ... And then an argument ensued.
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  ... And then song broke out.
#+END_SRC

** TODO Create prompts for elaborating describing and rewriting, and re-use them multiple times
It would be even better to make it interactive, but whatever.
Well, I *could* make it interactive, using emacs functions.
Yeah, just make contextualised prompts, and demonstrate using them.

** Use the photo I took with Jonty
Mention hooker's and take a line from the novel.

** Set up - The Queen's Croquet-Ground
A large rose-tree stood near the entrance of the garden

** It has to be magically weird and interesting somehow
Like legitimately.
I should prepare for that.
This is a long-game.

** Include the red velvet cake somehow

** TODO Do the tea party at home on the giant table
Under the tree, with the tea cup.

*** Describe the scenery
White roses.

*** It has to describe my current house but in the style of Alice in Wonderland

** TODO Do something interesting with the story
Like the character's friend, the Hatter, the
March Hare feels compelled to always behave as
though it is tea-time because the Hatter
supposedly "murdered the time" whilst singing
for the Queen of Hearts.

*** And consider enacting it in real life

** TODO I have to make it interesting
*** How?
By writing transcripts and a story.
We recite the story.
But it has been extended with even more dialogue.

** TODO Make the invite fairly elaborately but extend it much further
So the party is far more elaborate.

*** I should also personally invite Reuben
- Say I want Melee there

*** Then ask Jack to invite Reuben

** TODO For Valentines
*** This can't be like the tee-pee
It has to actually work this time.

*** Before Valentines
2 weeks away?
Have a Hatter's Tea Party?
That might be too early.
There will be very little strict planning.
However, the food should be edible.
I will design it myself and have it, then invite people.
It *could* be in a park.
I should definitely do this, for Melee.
I should do it in a month.

*** Make a full-course meal
Have a mad hatter's tea party.

This could be a birthday party?
No. Not necessarily. But it could be around the same time.

https://en.wikipedia.org/wiki/Tweedledum_and_Tweedledee

*** Make an invitation

*** Get some miracle berries, or no
The insanity of

*** TODO Start designing and elaborating on that chapter of Alice's Adventures in Wonderland
That will prepare me for it.

* TODO Make for Melee
red velvet

https://en.wikipedia.org/wiki/Red_velvet_cake

** Make a cake for her

** Or I can design an imaginary cake and design the recipe, etc.
Use AI to do this.
Also, make sure it tastes OK.

** Imagine the situation, describe the cake
Make the cake.

*** Make an interactive fiction of what's on the table
Mad hatter tea party.
Make whatever it comes up with.

** This is definitely the best option
Don't hold back with it. Just start designing it.
Put what I think she'd want into it.

* TODO Focus on building the crypto

* TODO Learn how Alethea AI works by reading their smart contracts
Build my own one as soon as possible.

https://etherscan.io/token/0x6b0b3a982b4634ac68dd83a4dbf02311ce324181

* TODO I should make a crypto that helps trace prompts

* TODO Take beer out of freezer in 30 mins

* TODO Post on my discord
[[https://www.youtube.com/watch?v=0xnSAZLcBPg][Approachable Members Of Your Local Community - Semiotic Vision - YouTube]]

* LOL this band, for a laugh
https://www.hotmulliganband.com/tour

* TODO Make LSP server work for the outside
- Convert file paths from host path to container path
  - Use a mount to the host

* TODO Make an nvc version of mfz and make it default
- Or perhaps do it to fz itself
** Ensure that nvc will not nest

* TODO Make a new moshi monsters
https://moshirewritten.com/login/

** Tell Callum Woods

* Pen
** LSP server
*** Proper way to add new types of URIs
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"if u.Scheme != \"file\" {" "$HOME/var/smulliga/source/git/semiosis/efm-langserver/langserver/handler.go"
#+END_SRC

But that may not be necessary.

* TODO Ensure that my golang environment within emacs is very good

* TODO Make a prompt which works like so:
- current state / frame 1
- next state / frame 2

** Provide this as one completion mechanism option for the terminal

* Pen.el ideas
** This is the top of a golang file,
here is a prompt that suggests imports

*** [#A] But perhaps it's best instead to make something which generates prompts and ideas for prompts
As I am coding -- I should seriously do this.

* TODO Crypto plan with Pen.el
** Create an editor entirely based in prompts
- I only need to start a crypto
Some of the prompts must be hidden.

*** I need a DAO that is intelligent because people are part of it
In that case, people can simply get some free tokens.

** Contextual prompts
Under what context are the prompts useful?

For example, a certain kind of text file.

** TODO Ensure there is a working golang programming environment inside of Pen.el
Or at least that the source code is there and I can recompile it.

** Add =efm-langserver= to the container
https://github.com/mattn/efm-langserver

** Trust and curate prompt
- The language generator (model / human)
- The prompt
- Pay to run on the p2p network

* TODO Set up a DAO company for Semiotic
This is quite important.

Then people can simply support Semiotic and feel like their time is invested
and the company will natually grow in value.

* TODO Set up twittering mode again
- get the request token

* TODO Set up dura
https://github.com/tkellogg/dura

* TODO Prompts
** Build the discourse analysis prompt

* TODO Commit my zsh history every time I start the computer (init.sh)
$HOME/programs/zsh/dotfiles

* TODO Pen.el
Create complex terminals inside the container.
Clojure is important.

** I should absolutely begin with Clojure inside the Pen.el container
And with writing clojure for Pen.
But what for exactly? Probably for doing imaginary programming, to be quite
honest, and combining that with asynchhrony for quickly generating prompts
and prompt-mining, etc.

** TODO Figure out how to generate blurbs for languages in the interpreter prompts
pf-generate-wiki-blurb/1

** I must begin prompting asynchronously
This is very improtant.
Therefore, to do asynchronous prompting, I can be utilising Clojure and using promises and stuff for that, or whatever.
I have to build up my Clojure slowly.

** TODO Become good at designing software with Clojure. Incorporate it into Pen.el and start building Pen.el scripts in Clojure
This is fairly important.

** TODO Ensure I can spin up REPLs on the semiosis web page, or on my own website
Can I run ttyd within a frame or something?

** TODO Make it so some key bindings such as M-w act as copy, even when viewing the terminal in raw mode (so long as something is selected)
This is so I can mouse select and then copy.

** TODO Make it so the first command in an imaginary interpreter force updates (it does not use history)

** TODO Make it so all emacs daemons can reload their prompts simultaneously
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"-fa-parallel) {" "$HOME/var/smulliga/source/git/semiosis/pen.el/scripts/pen-e"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-e fa -e "(progn (pen-reload)(delete-frame))"
#+END_SRC

** TODO Complete ii
*** Ensure that ii works for Clojure, without an interpreter prompt.
Make it work for /2 interpreter prompts as a fallback.

*** Ensure that ii works
$MYGIT/semiosis/pen.el/scripts/ii

* TODO Enable the forwarding of an SSH Agent to Pen.el
Do this to provide Pen.el with the keys and hosts to access other systems.

* TODO Consider setting up a system of scraping from mosh
Make it use mosh if available, and otherwise use ssh.
Do this just for efficiency.

* TODO Talk to Anak
$MYGIT/mullikine/investment-proposal/README.org

Re: 2. Say that LMs are the new search engines
and databases of the next generation of the
internet, and in the last year, the number of
LM software as a service has grown from 3 to
about 20+ services

Semiotic (my startup) is positioning itself
right in the middle of that and has the first
language server that utilises these LMs to
provide human-intelligence-enabling functions
to VSCode, web browsers and other computing
interfaces utilising LMs and world models.

It also has the first integrated prompting
server, and in the next month be deployed onto AWS to
provide both language server and prompting
server for incorporation into AWS cloud
services.

The company will generate revenue from the
leasing of the docker container, and from
support services.

Pen.el, Semiotic's flagship product can be tailored (with language model
fine-tuning) to each individual company's requirements, and as an example, can
provide documentation, chatbots and imaginary languages for interacting with
almost any topic under the Sun. This is among a virtually limitless number of
other functions and services that Pen.el also has built support for.  It may,
for instance be used to create coersive or charming conversation, by searching
downstream LM generations, or providing a chatbot for the things you are
currently looking at.

In layman's terms, if you were
to be speaking to somebody you like, it may
search the virtual multiverse for things you
might say which would result in evoking
positive responses and outcomes from that
person, thus enabling the development of an
application which services the user to present
him or her with conversational suggestions
that are charming. In the same, way these
types of mechanisms can be used to augment the
productivity of programmers, as the LSP server
plugs directly into the developer's editor to
provide documentation and refactoring
functions, and lead the developer down avenues
of productivity. You might be perusing a museum or art gallery and wish to talk
to a subject matter expert about what you are currently experiencing, visually,
audibly, etc. and these inputs may be fed into world models and language models
to provide a subject matter expert for you to talk to.
This capability exists currently and is already built into Pen.el and utilises
AlephAlpha's world model and OpenAI's GPT-3 to do so.

Semiotic builds human intelligence-augmenting
products, and is aimed to be the backbone of
other startups and businesses that want to
utilisise GPT-3 or any other LM within their
own products and services, and to make it as
easy as possible, transparent and configurable
to do so.

* TODO Fix ilambda macros

* ilambda bash interop
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  peni color-of-thing watermelon
#+END_SRC

Ensure this works.

* TODO Ensure I can start =ii= from emacs
Similarly to nlsh, list out languages.

* TODO Make a python ilambda
* TODO Create a language-agnostic imaginary programming environment
* TODO Make an interop for ilambda
* TODO Make it so certain inputs into aspostrophe might change the prompt. For example, "what shall I call you?"
* TODO Likewise, I can trigger certain changes with commands such as =ssh=

* Resting now
```
* TODO Work on Pen.el
** DONE ilambda bash interop
   CLOSED: [2022-01-03 Mon 02:09]
** DONE Sourcegraph queries
   CLOSED: [2022-01-03 Mon 02:09]
https://docs.sourcegraph.com/code_search/reference/queries
** TODO Discourse analysis prompt
```

* Wait for response from Reuben
Hey Reuben. Do you think there's a chance to talk to Melee again this year? Not saying this to get your sympathy but just to explain my position.
I've worked my ass off this year. The only way I could possibly do this much work/study is if nothing else seems worth the time.
When I was talking to Melee at the time I just felt like my other needs were met. I could just focus on what I had to do and so I was heartbroken literally when I had to let it go and I've just had to work and try to derive happiness from that.
I've done a lot of social stuff too but it just feel like drifting aimlessly meeting randoms. I'm not just brooding over this.
But talking to Melee was the best part of last year and I was forced to let that go. It doesn't seem possible to find a person like Melee. It's like a 1/million chance.
Maybe it didn't even bother her and in that case thats algood, but it still gets me down when I think about it.
I get really burned out from social situations like NYs dinner today.
I don't expect you to understand because I don't relate to hardly anyone.
There's a lot of reasons why it just felt good talking to her.
Now the year's over, it seems like a long time ago but not lying - I've had a lot of good experiences this year, met tonnes of people, made some good friends. Still those two weeks I was just coding and chatting to Melee was the best part of last year.
So I'm just asking do you think it's possible to talk to her again. If she doesn't care or doesn't want to talk to me that's all good. Also maybe we'd have nothing in common or anything to talk about.
I've really mellowed out and I'm alot more humble these days. Hope you had a good year Reuben

* TODO Make a high-contrast theme for ranger
I can't see shit with the purple.

* Alethea
I need to get proof af addressr
- Go to BNZ and change my address.

* Find a discourse parser
[[egr:discourse parser github]]

https://github.com/topics/discourse-parsing

* Pen.el
Fix the hanging!
I should definitely start by placing a cpu limit on the various emacs daemons.

** Put timeouts on some of the underlying commands

* TODO Demonstrate vim, LSP and Pen
https://github.com/prabirshrestha/vim-lsp

I have to set up vim inside of the container.

* TODO Make a pen.vim
** Make it my mission to bring vim into the modern age
- Use the bash interpreter
- Which prompt functions would be useful?
  - Select and transform code
  - Generate EX
  - Select and use prompt function

Fortunately, I can use stdin instead of quoting all arguments.

Vim can be a great testbed for an alternative editor running the pen lsp server.

** Call it something else? nib?

* TODO Start designing vim tools based on Pen.el

* TODO Add org templating to vim
Do this by making an xmap with Z.

* TODO Ask Jonty for the =$30=

* TODO Test Pen.el with a fresh account
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-x -sh bash -e '#' -s "sudo adduser --home /home/pen pen" -c m -e password -s pen -c m -e Retype -s pen -c m -e Full -s "Promp Engineering in Emacs" -c m -e Room -c m -e Work -c m -e Home -c m -e Other -c m -e correct -s Y -c m -i
  sudo usermod -aG docker pen
  sudo usermod -aG sudo pen
#+END_SRC

* TODO Glossary
- Find salient terms using discourse analysis
  - I need a NL parser based on discourse
    analysis -- and to generate positionally-
    matching buttons (as opposed to globally-
    matching) -- it would be great for reading
    - It would be nice and fast too
    -

* TODO Start company
Semiotic

** Create user
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-x -sh bash -e '#' -s "adduser --home /home/pen pen" -c m -e password -s pen -c m -e Retype -s pen -c m -e Full -s "Promp Engineering in Emacs" -c m -e Room -c m -e Work -c m -e Home -c m -e Other -c m -e correct -s Y -c m -i
#+END_SRC

* Pen
** Try to get this going
If I can, then the shell op is truly reliable

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  vim +/"function! Prompt(fun, ...)" "$VIMCONFIG/vimrc"
#+END_SRC

This works:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  IFS= read -r -d '' viml <<HEREDOC
  function! Prompt(fun, ...)
      let args = a:000
      let s = ""
      for arg in args
          let s = s . ' "' . arg . '"'
      endfor

      let cmd = a:fun . s
      let s = system("penf -u " . cmd, @p)
      " save into the pen register
      let @p = s

      " paste from p register
      exe "normal! \"pp"
  endfunction
  HEREDOC

  penf -u pf-transform-code/3 "$viml" "vim" "convert to ruby"
#+END_SRC

So does:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pl "$viml" | penf -u pf-transform-code/3 "vim" "convert to ruby"
#+END_SRC

** TODO Make it so eval.sh etc will defer to their host counterparts if available

** eval.sh
*** -u will always remove the output file
fp="/tmp/eval-output-${SOCKET}.txt"

*** TODO Make it so if emacsclient prompting fails then nothing is returned from eval.sh
Not sure if that is possible.

** TODO Ensure I can pass strings in that have quotes
penf -u pf-transform-code/3 "Print(\"hello\")" "python" "convert to ruby"

** TODO Add C-j to the Pen.el ivy

** TODO Start coding with Clojure inside of the Pen.el container

** TODO Make it so emacs daemons start in parallel
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# Use gnu parallel  to start all daemons at once" "$MYGIT/semiosis/pen.el/scripts/pen-e"
#+END_SRC

** Ensure that apsostrophe conversation history does not overlap

** New prompts
*** Make a prompt which explains what has happened on the current date

** Fix the cache. It's never caching
- Not for from within emacs, nor from outside emacs

This is not working:
#+BEGIN_SRC yaml -n :async :results verbatim code
  cache: on
#+END_SRC

It doesn't work with gnu parallel yet.

Memoization is not currently working.

The reason is due to the GEN_ID, etc.

** TODO Fix the bash interop
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf -u pf-very-witty-pick-up-lines-for-a-topic/1 imagination
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  docker exec --env USE_POOL --env USE_NVC --env PEN_USE_GUI pen bash -c '"eval" "\"/root/.emacs.d/pen.el/scripts/eval.sh\" \"(pen-update (pen-list3str (pen-batch (pen-single-generation (pen-update (pf-very-witty-pick-up-lines-for-a-topic/1 \\\"imagination\\\" :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil))))))\""'
#+END_SRC

** TODO Also make some tests
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  /root/.emacs.d/pen.el/scripts/eval.sh "(pen-update (pen-list2str (pen-batch (pen-single-generation (pen-update (pf-very-witty-pick-up-lines-for-a-topic/1 \"imagination\" :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil))))))"
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-update (pen-list2str (pen-batch (pen-single-generation (pen-update (pf-very-witty-pick-up-lines-for-a-topic/1 "imagination" :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil))))))
#+END_SRC

** TODO Price similarly to Datomic

Scotch Whiskey 101

** TODO I should make a bunch of iNFTs chatbots for the Alethea.ai ecosystem
If your offering AI services you can earn as much as you wish
depending on how creative you are with your content crreation
you can consider iNFTS by Alehtea the Content Creators of the Metaverse
the potential to earn will depends on what you plan on doing with your iNFT
or how you train it and utilize its services.

*** Do this
Use the iNFT protocol to Create, Train and Earn from their iNFTs in the world's
first Intelligent Metaverse known as Noah's Ark.

Generate many chatbots.

** multi-modal
Make emacs imagine the images.
- Therefore, I need to ensure I have a way of doing that.
  - One way is to select text and imagine the image from that

#+BEGIN_SRC text -n :async :results verbatim code
  Enter your commands in natural language.

  ubuntu: download an image of an icecream
  wget https://www.dropbox.com/s/w7l6fgvqisx5k19/icecream.jpg?dl=0
  wget http://www.seriouseats.com/images/2015/03/20150323-cocktails-vicky-wasik-1.jpg
  wget http://www.seriouseats.com/images/2012/07/20120705-icecream-sandwich-primary.jpg
  wget http://www.seriouseats.com/images/2015/07/20150702-smore-icecream-sandwich-primary-1500x1125.jpg
  wget http://www.seriouseats.com/images/2015/03/20150323-cocktails-vicky-wasik-1-1500x1125.jpg
  wget http://www.seriouseats.com/images/2015/07/20150702-smore-icecream-b-1500x1125.jpg
  wget http://www.seriouseats.com/images/2015/03/20150323-cocktails-vicky-wasik-irish-coffee.jpg
  wget https://www.dropbox.com/s/7q0qxq3qwz1f5ol/icecream.jpg
  wget http://www.seriouseats.com/images/2013/07/20130711-243318-ice-cream-sandwich-primary.jpg
  ubuntu:
#+END_SRC

* Pen
** TODO Ensure I can start NL·SH from within emacs
Currently, it's starting a term with an an emacs inside it.
That's not what I want.
I want an emacs split pane with a comint.

- Get the nlsh cli to output the elisp to run
  - Evaluate that output
- nlsh-os
- sps-nlsh

** TODO Ensure =F1 C-s= works to capture the screen while in the =Pen= container

** TODO Switch to using vterm by default
- Make it an option for cterm
  - Create something in custom
- I will need to do some work on vterm though

** TODO Get fz workig while in term-mode
It doesn't work at all.
The problem may have arisen after adding parallelisation because the lists are longer now?

*** I have to raise the modeline first, or maximise completing read

** LSP Server serving the host
*** TODO Use sshfs to connect to the host filesystem in order for the LSP server to function
*** Translate paths
- This will most likely require recompilation of efm-langserver.

** TODO Ensure that temporary files for buffers are stored in their own directory somewhere
Do this to not overload the LSP server.

** TODO Modify the emacs lsp client to use a temporary file when a real one is not available for the current buffer

** Set a prompt length limit for the LSP server
- Do this to prevent emacs from crashing.

** TODO Make a Pen LSP generation blacklist
Do this so I can easily regenerate prompts.

** Make this. That means I need to have a mechanism for extracting values from =pen.yaml=
$MYGIT/semiosis/pen.el/scripts/pen-fix-daemons

* tmux
** TODO Make it so "bind q" outputs in yaml
It's close already, but will make it much more powerful.

* TODO Finish the wikipedia page
https://mail.google.com/mail/u/0/#inbox/FMfcgzGmtFBVmnFjtTMfbZdJWqnzHvrN

* Pen.el
** pen-ci -a must absolutely not reprompt until a timeout is reached

** Show the daemon name in the modeline

** Start the daemons in parallel

** TODO Add glossary multiplexing

** TODO Make it so if the same prompt is requested and something is already running for it, it shouldn't run
I need to be waiting for results.
So I need the concept of jobs.

** LSP Server
*** To get the LSP server working everywhere I need to always have a path to a text file that is the representation of the buffer
It is essential to have this.

*** TODO Ensure the commands work outside the container again, as well as inside
Only solve it with the bind mount.

*** TODO In order to get the pen-lsp server working with the host I must either:
- mount the host inside of the docker container and handle that somehow

*** Make it so I can kill the efm langservers that I start

** TODO Figure out why too many efm-langservers are appearing

** TODO Fig emacs daemon pooling
*** DONE Automatically fix up hanging daemons
*** Prevent hanging
*** DONE Enable reprompting if no result
*** Run =pen-fix-daemon= every now and then for the daemon list
This way I can continue using the full set of emacs daemons.

** Share transient history

** TODO Make another override for =Pen.el= to force-force the engine, and override prompts

** Ensure that =pen-ci= is actually working
When PEN_CACHE="" lm-complete will not cache anything, even with using =pen-ci=.

* LSP Server
** TODO The way I will add asynchrony to efm-langserver is to always run instantly, but cache asynchronously

** TODO Need to add asynchrony to efm itself

** TODO Enable the LSP server for all modes

* TODO Parallelise the LSP server
** TODO Ensure that the shutdown sequence is properly set up
e:$HOME/source/git/semiosis/pen.el/scripts/pen-shutdown

#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"penq) {" "$HOME/source/git/semiosis/pen.el/scripts/pen"
#+END_SRC

** DONE Code it up
   CLOSED: [2021-12-28 Tue 18:51]
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"--parallel|--pool) {" "$MYGIT/semiosis/pen.el/scripts/pen"
#+END_SRC

e:$MYGIT/semiosis/pen.el/config/efm-langserver-config.yaml

** TODO First try to do
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  echo -n "Once upon" | penf --pool pf-generic-completion-50-tokens/1
#+END_SRC

#+RESULTS:
#+begin_src bash
a time
#+end_src

*** Add a server reservation system that works inside the docker container
After successfully running eval.sh, a server becomes free.
Then, a file is created to display its availability.
If a file does not exist, it is not available.

** Functions I need
*** Select a free emacs daemon
*** TODO Start a pool of emacs daemons
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-e sa
#+END_SRC

* Apply for work here
https://composeai.notion.site/Work-at-Compose-AI-f9259f8867b74b0ea8431e872ee9908f

* Pen
** TODO Ensure the LSP server is running and add asynchrony to it by utilising multiple emacs daemons

** TODO Add a citation in the same way as GNU Parallel
#+BEGIN_SRC text -n :async :results verbatim code
  parallel --citation
  Output:

  Academic tradition requires you to cite works you base your article on.
  When using programs that use GNU Parallel to process data for publication
  please cite:

  @article{Tange2011a,
    title = {GNU Parallel - The Command-Line Power Tool},
    author = {O. Tange},
    address = {Frederiksberg, Denmark},
    journal = {;login: The USENIX Magazine},
    month = {Feb},
    number = {1},
    volume = {36},
    url = {https://www.gnu.org/s/parallel},
    year = {2011},
    pages = {42-47},
    doi = {10.5281/zenodo.16303}
  }

  (Feel free to use \nocite{Tange2011a})
#+END_SRC

This helps funding further development; AND IT WON'T COST YOU A CENT.
If you pay 10000 EUR you should feel free to use GNU Parallel without citing.

If you send a copy of your published article to tange@gnu.org, it will be
mentioned in the release notes of next version of GNU Parallel.

** TODO Ensure I can cancel the current input inside of a comint

** Amazon product
*** Demonstrate this
- Generate man pages
  - Generate the page end result, interactively
  - Generate the code to generate the page I have generated

** Provide a proxy/daemon parameter to a prompt function
- But this is still not parallisation

** DONE Parallelise the lm-complete script
   CLOSED: [2021-12-28 Tue 13:23]
- Honestly, this might simply be an easier/better way to parallelise
  - I won't need to use pen proxies

** DONE Fix =pen-e -ic=

* TODO Make an emacs daemon manager in emacs
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  pen-e running
#+END_SRC

* TODO Email OpenAI and ask them about API key access long-term
Say I am not selling my own usage as a service currently and would like the
security of being ablle to develop Pen.el and associated projects using their
API.

* TODO Fix the Cohere engine, if it is broken
No, it's just quite slow.

* TODO Create a business in NZ
https://aws.amazon.com/marketplace/management/seller-settings/account/registered

* Pen
** Convert =pen= script to use =pen-e= under the hood
- All that means is converting =newframe.sh= and =eval.sh=

** TODO Ensure I can override the prompt for re-running a prompt

** TODO Ensure I can fully parameterise a prompt and run in a Pen.el proxy
- I need to do this with the =pen= script, which may use `pen-e` under the hood
  - I need the =pen= script because I must extract the resultant values

** TODO Learn to apply embeddings to semantic search using the Cohere API
Embeddings can also be used to rapidly match a query sentence with other semantically similar sentences whose embeddings are stored in a database by taking the dot product between the embedding of the query sentence and the matrix representing the other sentences.

** Design the pooling mechanism
#+BEGIN_SRC sh -n :sps bash :async :results none
  pen-e -s main sd
#+END_SRC

- If a prompt function is run from the CLI
  - Select an available daemon?
- If a prompt is run with collate
  - Split requests
    - I need to provide full prompt parameters
      - I need a better bash interop

** Eliminate run.sh. Instead use pen-e sd followed by pen-e.
- Perhaps I should make a proxy emacsclient command, and just swap it in.

** To sell on Amazon Marketplace, the container must run with non-root privilenges by default
Container images should be configured to run with non-root privileges by default.

** TODO Figure out how to generate the random initial password
[[egr:aws workspace random password container]]

** TODO Turn nlsh into
e:$MYGIT/semiosis/pen.el/scripts/nlsh

** TODO Figure out how to spin up one of my docker containers in the cloud for people to use
Charge for it.

*** I should put it on the Amazon cloud or something

https://docs.aws.amazon.com/marketplace/latest/userguide/user-guide-for-sellers.html

https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html

** TODO Use mullikine2
$NOTES/personal/passwords/aws.org

** TODO Make an ssh-host command for use from inside the docker container

* TODO transient-history gets taken. I need to steal it every time it needs to be used.

* TODO Ensure I have complete control over the emacs daemons
If I can parallelise Pen.el today I will feel much better.

* TODO Ensure that the emacs daemons are functioning properly

* TODO Keep in mind the OpenAI App Store
** TODO Try to compete with that with Pen.el
There's no way I want apps based on OpenAI.

For starters, they are using tech which is
completely derived from everything their
models are trained on.

* PEN
** TODO Fix the initial char problem with term

* TODO Install =vim-codex= into the Pen.el docker image

* DONE Ensure cterm works with vim. It certainly does

* TODO Initiate my business
** integrate paypal into website
[[egr:integrate paypal into website]]

https://developer.paypal.com/docs/archive/checkout/integrate/

** Pen.el support
It's for developers that want to use the best God damn GPT/Codex/LLM development tool in existence.
You don't pay for AI tokens.
Works with any language model.

** Prompt generation

** Integration into existing pipelines
*** Terminal automation with Codex
- Any language model
- tcl/expect
- Prompting functions
- Codex
- Pooling
- GPT-3 Fine-tuning

** TODO Create a service for Pen.el maintenance
People can use my docker container and receive support for ensuring that it runs for them.

* Pen.el
** TODO Make it so there is shared state between emacs daemons
- When is a daemon available?
- When is a daemon unavailable?
- How can I list the pool of emacs daemons etc.?

** TODO Work on saving info from completions
- From the prompt function send the UUID. Use that UUID to organise data
  - The prompt function may call upon this data

** DONE Fix prompt funciton insertion

* TODO Figure out how I can monetise Pen.el

* TODO Figure out how to automate paypal and run a docker container per browser instance
Once I have that, I have a system everyone can use.

* TODO Bundle up my LSP server and sell it as a service via the cloud

* Research
** Read the paper on search with GPT-3
We should be building such things. That is the future.

* Read
https://jezenthomas.com/fast-counting-with-postgresql-and-haskell/

* TODO Do a proposal for Deft
Infinite information.
Therefore, need an infinite search-engine.
Relevance means:
- in the mind/attention of the language model
  - what the language model would generate

* TODO Disable icloud storage plan
It's interesting that that has been discovered.

* TODO Ask Reuben in real life if I can talk to Melee again
That means I have to actually speak to him.
That's definitely the best way.
But that means being brave and visiting one of his Dunedin Comedy things.

* TODO Ensure chatbot initiation from mind maps work well

* TODO I should definitely buy myself a fancy new computer, build something epic and sell it

* TODO Consider monetising from Pen.el
https://www.generateideas.ai/pricing/

Do it similarly to these people.

** TODO Improve paracosm to do idea generation

*** Consider using a transient
- Work on the transient first

* Extend mind mapping with these prompts?
https://www.generateideas.ai/

* TODO Consider studying this search engine - that would be a great use of time
e:$MYGIT/mwmbl/mwmbl

https://github.com/mwmbl/mwmbl

* TODO Tonight ensure I can save both the logprobs and any other info I want to a json data file along with the results
One json file per results file.

* Ensure this doesn't break anything
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"| pen-log openai-temp" "$MYGIT/semiosis/pen.el/scripts/pen-openai"
#+END_SRC

* TODO Also return the return reason, but handle it so the default is that it stopped with a stop sequence
That's important for handling it, by postprocessors, etc.

If it stopped without the stop sequence then that should be detectable.

* TODO Add audio to Pen.el
** tacotron2

* TODO The plan with managing emacs daemons
Export the currently calling daemon from pen-sn and that daemon name will be included in tempfile names.

* TODO With regards to the Pen.el LSP server, have a pool of emacs servers which service the LSP server

* TODO Absolutely add handle, etc. to Pen.el and enable M-9 for documentation, etc.

* TODO Make it so I can interactively select results while completing in comint
That is an important ability. The easiest way might be to use an emacs daemon or a pool of emacs daemons.

* TODO Make it so the DISTRIBUTION only sets defaultly
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"DISTRIBUTION=pen-emacsd pen-e sd" "$MYGIT/semiosis/pen.el/scripts/pen-e"
#+END_SRC

* TODO Make it so 'pen' cli can open files from inside the docker container

* DONE Ensure that preprocessors, postprocessor and postpostprossesor all template the pipelines into them
  CLOSED: [2021-12-26 Sun 00:06]

* Go camping in Benmore with Jonty

* TODO Make a preprocessor for anything
Use pipelines for this.

** Ensure pipelines work for subprompts

* TODO Make an extra edit-response behavious which I can invoke for any prompt function

* TODO Fix up imaginary term from complex term

* TODO Solve the problem with the banner being entered twice into the prompt
** I need to provide a max length for subprommpts, etc.
- I should make a better markup for this.
  - Use pipelines

* TODO Work on creating interactive fiction with emacs
That could seriously be the win!

* TODO Fix this
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-list2str (pen-batch (pen-single-generation (pf-imagine-a-infocom-game-interpreter/2  :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil))))
#+END_SRC

** It looks like no-select-result is not going through

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pf-imagine-a-infocom-game-interpreter/2  :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil)
  (pf-imagine-a-infocom-game-interpreter/2 nil nil :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil)
#+END_SRC

** I have to send nil explicitly for all positional parameters when not supplied

** Also, if positional parameters are nil then interactive defualts rerun for them later and that should be ignored if batch-mode

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen-list2str (pen-batch (pen-single-generation (pf-imagine-a-infocom-game-interpreter/2 nil nil :no-select-result t :temperature nil :prompt-hist-id nil :include-prompt nil :no-gen nil :variadic-var nil :override-prompt nil :inject-gen-start nil))))
#+END_SRC

* TODO Make a way to edit responses in =ii=
This is important for guiding a story or conversation the way I want.

* TODO Ensure the human engine works well (formats correctly)
- pick up lines
- infocom

* TODO Create the interactive fiction prompt
** Use imaginary interpreter as a backend instead of apostrophe

** Make apostrophe use imaginary interpreter as a backend

** And make a system for infocoms
e:$HOME/source/git/semiosis/pen.el/scripts/apostrophe

* TODO Look into this docker image I just deleted
emscripten/emsdk

WebAssembly, using LLVM, with a special focus
on speed, size, and the Web platform.

* TODO I have to integrate into NixOS so I can take advantage of cli applications

* TODO [#A] It's time to master transients

* Create a time to speak to Anil
https://mail.google.com/mail/u/0/#inbox/FMfcgzGlksDdmxLjDZcglvHnLFCWjNvc

* TODO
[[info:(transient) Using History]]
j:transient-values-file
j:transient-history-file
j:transient-history-limit
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (setq transient-history-file "$HOME/.pen/transient-history.el")
  (setq transient-values-file "$HOME/.pen/transient-values.el")
  (setq transient-history-limit 1000)
  (setq transient-save-history t)
#+END_SRC

* TODO Make it so stop-sequences doesn't operate on injected/<:pp> text?

* TODO Start utilising Codex for everything
I want a completely generative computing user interface.

# TODO Start generating new colour schemes.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf pf-mood-to-colour-scheme/1 "McDonalds restaurant"
#+END_SRC

#+RESULTS:
#+begin_src bash
#F9D9A3
#C1F59A
#F7D0A6
#F9D9A3
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf pf-mood-to-colour-scheme/1 "New Zealand"
#+END_SRC

#+RESULTS:
#+begin_src bash
#00A8C6
#00C0E9
#00E5FF
#00F2F2
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf pf-mood-to-colour-scheme/1 "Mars"
#+END_SRC

#+RESULTS:
#+begin_src bash
#FF8C00
#FFA500
#FFD700
#FFF8DC
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf -u pf-mood-to-colour-scheme/1 "Star-Spangled Banner"
#+END_SRC

#+RESULTS:
#+begin_src bash
#1FBFB8
#05716C
#1978A5
#031163
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  penf -u pf-mood-to-colour-scheme/1 "Flag of the USA"
#+END_SRC

#+RESULTS:
#+begin_src bash
#B22234
#FAAB1E
#FFCB00
#FFF8E7
#+end_src

* TODO Make a colour scheme generator

* TODO Look into fq
https://github.com/wader/fq

* TODO With the code generation using Codex, or any prompt for that matter, enable the optional specification of additional context
- For example, while writing clojure:
  - Use ->>
  - Use re-replace

** I need a transient menu to specify this stuff
OK, so specify it!
***

*** Have an option to run the transient early (to override vars) and to run it late (to touch stuff up)

*** I have to get the prompt function to abort and resume
How?

* TODO Finish this prompt
e:$PROMPTS/new-project-instructions-2.prompt

* DONE Fix ielm
  CLOSED: [2021-12-23 Thu 17:08]
It's killing frames for some reason.

* TODO Ensure
#+BEGIN_SRC sh -n :sps bash :async :results none
  vs +/";; let\* implementation for vals" "$HOME/source/git/semiosis/pen.el/src/pen-define-prompt-function.el"
#+END_SRC

* TODO Make ilambda immediately so I can use it for writing clojure
** TODO Finish converting this from elisp to clojure
e:$HOME/var/smulliga/source/git/semiosis/ilambda/clojure/src/ilambda_clj/core.clj

* TODO Put emacs lisp inside prompts for modifying variables etc.

* TODO Try out tensorflow and clojure
#+BEGIN_SRC sh -n :sps bash :async :results none
  egr libpython-clj tensorflow
#+END_SRC

* DONE Make an unparser prompt
#+BEGIN_SRC text -n :async :results verbatim code
  NP V Det N
  John hit the ball
#+END_SRC

** DONE Finish it
e:$PROMPTS/nl-unparser.prompt

*** DONE I need to ensure I can template variables from existing variables
Do this inside the existing var logic for now.

*** After each part of the pipeline, provide an opportunity to modify using elisp?
- Do it just for vars so far.

varlet

* TODO Ensure that I can run continuations with the selected text
That way, I can edit a continuation and continue.

** TODO Make a key binding to edit the fz selection before selecting it
Then I can do it for Pen.el continuations.

* TODO Learn more about Search
** What is this?
#+BEGIN_SRC text -n :async :results verbatim code
  query tagging
      https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/38276.pdf
#+END_SRC

** Cliqz blog
- https://cliqz.com/en/about
- https://0x65.dev/

Cliqz died because of Covid.

** Any other ones?

* TODO Learn
** ASCII art generation
https://github.com/ArthurSonzogni/Diagon

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  echo "1+1/2 + sum(i,0,10) = 112/2" | diagon Math
#+END_SRC

#+RESULTS:
#+begin_src bash
        10
        ___
    1   ╲       112
1 +   + ╱   i =
    2   ‾‾‾      2
         0

#+end_src

* TODO Create more interesting apps for the imaginary terminal
- Make a 'less'

* TODO Do the coding challenge
https://coda.io/d/Coding-challenge-rebuild-the-search-engine_diMt8LAtev_/Coding-challenge-rebuild-the-search-engine_suLC8#_luws3

** Run
https://github.com/filipesilva/create-cljs-app

** TODO Follow this, which I looked at in 2019
e:$HOME/blog/posts/review-of-indexing-billions-of-text-vectors.org

** TODO Do it in Clojure and ClojureScript

* TODO Message Reuben
#+BEGIN_SRC text -n :async :results verbatim code
  Hey Reuben
  It's been weighing very heavily on my heart again recently and so I bother you again.
  And I just want to find out if there is a chance of talking to melee again.
  Talking to Melee was without a doubt the happiest I've been this and and when I felt like I had everything together for once in my life.
#+END_SRC

Spent almost every day programming. But still having a life and doing other things.

Something like that.

* TODO Make a prompt which automates the process of finding the module
#+BEGIN_SRC text -n :async :results verbatim code
  /home/shane/source/git/semiosis/ilambda/hs/src/Main.hs:6:1: error:
      Could not find module 'Data.ByteString.Lazy.UTF8'
      Perhaps you meant
        Data.ByteString.Lazy.Char8 (from bytestring-0.10.12.0)
        Data.ByteString.Lazy (from bytestring-0.10.12.0)
      Use -v (or `:set -v` in ghci) to see a list of the files searched for.
    |
  6 | import qualified Data.ByteString.Lazy.UTF8 as BLU
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  5a1ee2e master 22:36 shane/notes δ »
#+END_SRC

* TODO Make my own monads, etc. for prompting
** Just have fun with it

* TODO Make triggered functions for =ii= which override prompting
- For things like =ssh=

#+BEGIN_SRC text -n :async :results verbatim code
  shane@mele:/root$ ssh megn
  [sudo] password for shane:
  shane@megn:~$
#+END_SRC

* TODO Try to complete the =imaginary ssh= thing

* TODO Tell Alex, etc.
I'm actually a little bit concerned about the scalability of a search engine that I were to hypothetically build.

* TODO Look into this
https://huggingface.co/spaces/Hellisotherpeople/Interpretable_Text_Classification_And_Clustering

* TODO Consider starting a business with =Pen.el= to deliver complex term shells
** Alternatively, go for the p2p network + crypto
That would be the way.

* TODO Make imaginary login commands which force things like ssh to login
** They are special cases

* TODO Set up a REPL workflow for testing babashka commands

* TODO Get run-length-encoding instead of basic pen-encode-string

* TODO Fix the faces in Pen docker

* TODO Ensure that this properly doubles the number of \\
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  cmd-nice-posix "$(cmd-nice-posix "yo \\ yo")"
#+END_SRC

#+RESULTS:
#+begin_src bash
"\"yo \\\ yo\""
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  (cmd-nice-posix "$(cmd-nice-posix "yo \\ yo")")
#+END_SRC

#+RESULTS:
#+begin_src bash
"\"yo \\\ yo\""
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  eval "echo $(cmd-nice-posix "$(cmd-nice-posix "yo \\ yo")")"
#+END_SRC

* TODO I need to be doing controllable generation
Honestly, I desperately need to / should be doing this with Haskell.

* Pen.el
** TODO Generate the stop sequence from the history

* TODO I need to generate the kickstarter

* TODO Make (environment) variables/defaults for filling in prompts which can be overridden
Those are called =defs=.

I need to ensure that I can override them.

* TODO Make it so =cterm= derives the REPL from what's before the cursor, and from the current language

* TODO Fix
** DONE =pen-cterm-ssh= exports from =pen-cterm-ssh=
   CLOSED: [2021-12-19 Sun 18:12]

* TODO [#A] Turn a cterm into an ii by using tmux to start a new one
*** TODO Provide the current terminal state along with the current language

This would be a great contribution to the team.

*** Initiate after sending =C-a= to go to the start of the prompt

* TODO Make a tool to turn a real REPL into an

* TODO Make it so the emacs term / cterm does not resize ever
- Or perhaps change to line mode for the duration of some kind of menu operation

** Damn, I can't use refresh (C-l) for =cterm= pen-insert
It interferes too much with most programs.

* TODO Make an =eterm= for Pen.el, for use inside Pen.el

* TODO Install Java and Clojure into the Pen.el docker

* TODO Install Haskell into the Pen.el docker

* TODO Make a prompt for generating instructions for setting up a project
e:$HOME/source/git/semiosis/prompts/prompts/project-setup-instructions.prompt

* TODO Learn this -- it looks epic
https://haskellwingman.dev/
https://github.com/haskell/haskell-language-server/releases

** Learn Haskell in preparation for it

* TODO cterm
** Ensure that tmux doesn't resize

* TODO Ensure I can =etermify= from tmux like I can =ctermify=

* TODO Go over this
eww:https://github.com/clojure-doc/clojure-doc.github.io

* TODO When doing the interview, I should be myself and be as honest as possible with regards to where I am at
- But do as much research as reasonable, in advance

* I should just lurk on Clojure, etc.

* TODO Focus more on Clojure in preparation for the interview with Deft on Tuesday
** TODO Complete my Terraform Clojure app?
e:$HOME/blog/posts/creating-a-clojure-app-with-terraform-and-aws-cloud.org

** TODO Go through the rest of the Clojure documentation

** Get try to get ilambda for Clojure working ASAP -- that will get me really into writing Clojure

** Get a datahike example
https://lambdaforge.io/2021/03/03/datahike-clojurescript.html
https://github.com/replikativ/datahike
https://bsless.github.io/datahike-datalog-parser/
https://cljdoc.org/d/io.replikativ/datahike/0.3.6/doc/datahike-database-configuration

*** I have to set it up for my own purposes
Building something is the way.

* TODO Read Reuben's thesis
ri:$MYGIT/rcrimp/thesis-revision/thesis.pdf

Message him and ask him some questions about it.

** Ask him about Melee

* TODO Look at how Ganesh has actually done real programming with Haskell
https://hub.darcs.net/ganesh

* TODO Look at this company
https://hello.shopdeft.com/

** Continue building my imaginary web browser

https://www.youtube.com/c/tweag

* TODO Do a lot more haskell and 𝑖p

* TODO Begin designing a business model based on =Pen.el=. It's more important to start the business than work for GitHub on Copilot
** Tell GitHub
- They have given away what is effectively the vast majority of the source code on GitHub by allowing OpenAI to train their model on it
  - If they want to continue fine-tuning GPT-3, then they should be retaining *all* of the training data
- Canonicalise prompts and share generations
  - Or create a search engine for matching to generated output

* TODO Come up with a proposal and send it to the Human resources guy / Michael

* TODO Ensure I understand monoids, too
https://wiki.haskell.org/Monoid

* TODO Generate 1000-20000 compliments for Amber Heard
https://github.com/orgs/RescueSocialTech/repositories

* TODO Automate this patch
https://github.com/ytdl-org/youtube-dl/pull/30366/commits/1a091687c248b62c2f0a6070519bd78417828746

* DONE Make a snippet from this. This is the best way
  CLOSED: [2021-12-16 Thu 15:22]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (let* ((pen nil)
         (fun (key-binding (kbd "M-3"))))
    (call-interactively fun))
#+END_SRC

* TODO Make define-prompt-function more efficient to navigate
It's too slow right now.

** It's also really important to rely on other languages for prompting
Instead of doing i tall in elisp.

* On top of creating postprocessors that happen before a prompt function is cached, make a post-cache-postprocessor
So I can do touchups of prompt output without destroying the cache.

* TODO Firstly, automate the process of building tree-sitter grammars

* TODO Endeavour to create prompts much faster than ever before
That is the bottleneck, not being able to create prompts fast enough.

* TODO Figure out why tmux is blocking right-click

* TODO [#A] Ensure I can continue prompts but after modifying their previous output interactively

j:pen-continue-from-hist

| kb        | f                        |           |
|-----------+--------------------------+-----------|
| =H-TAB o= | =pen-continue-from-hist= | =pen-map= |

* TODO [#A] Focus on the generation of text, so I can make the most powerful textual interface under the sun
** Look into combining tree-sitter with language models

* TODO Connect ImageGPT to Pen.el through HuggingFace
https://huggingface.co/spaces/nielsr/imagegpt-completion

** This coudd be the DALL-e replacement

* TODO Ensure that =F1 M-v= works well for Pen tmux

* TODO Set up mitmproxy with =Pen.el=

* DONE Get =sps= stdin going within =pen sh=
  CLOSED: [2021-12-15 Wed 23:01]
#+BEGIN_SRC sh -n :sps bash :async :results none
  echo hi | "pen-tm" "-S" "-tout" "sps" "-noerror" "pen-v -nad"
#+END_SRC

* TODO Make an EDITOR for inside the docker container
** I actually *do* need 'v' working. It's just so damn useful

* TODO Create fallbacks for prompts based on predicates and other logic

* DONE Fix Pen.el. it's renaming the current file all the time
  CLOSED: [2021-12-15 Wed 23:01]
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (get-path)
#+END_SRC

is doing it

* TODO Install tree-sitter manually using git repositories
e:/root/.emacs.d/elpa/tree-sitter-langs-20211206.1616/

This way, I'll get the grammar-building functions.

* TODO Figure out how to keep track of a tmux session per frame
Or, rather, to get the current tmux session.

* TODO Finish this
** TODO
e:$MYGIT/semiosis/pen.el/scripts/pen-e
e:$MYGIT/semiosis/pen.el/scripts/pen-ead

*** pen-e has to be done before pen-ead.
Slim it down.

** DONE
e:$MYGIT/semiosis/pen.el/scripts/pen-mnm

* TODO Fix pen-tm
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  # Does not work
  echo hi | tm -f -s -sout sps -sh bash vipe

  # works
  echo hi | pen-tm -f -s -sout sps -sh bash vipe
#+END_SRC

* DONE Add shackle to Pen.el
  CLOSED: [2021-12-15 Wed 23:59]
shell command output

This is so cterm becomes more usable.

* DONE Fix =pen-tv= for Pen.el
  CLOSED: [2021-12-15 Wed 23:59]

* TODO Set up emacs daemon management within =Pen.el=
e:$MYGIT/semiosis/pen.el/scripts/pen-e

Do this so I can make prompting asynchronous, and solve many problems.

* TODO Charge my phone so I can set up AI21 again

* TODO Keep only one tmux window per session by default. That way the entire session will close when an emacsclient closes

* Fine-tuning absolutelly results in greater accuraccy
https://openai.com/blog/customized-gpt3/

* TODO Set up spotify for emacs

* TODO [#A] Prompt design
** Create a prompt which extracts information about what it can see
- Then use that information in further prompts.

*** This prompt is inefficient
prompt:pf-get-documentation-for-syntax-given-screen/2

**** Make it more efficient by
- Only take a smaller portion of the screen by default

**** Instead of merely use its understanding once, use it many times
- Do this by classifying the input, and using the classifications in further prompts

* TODO Make some prompts for displaying documentation for functions

* TODO Learn a little bit about building parsers in Haskell
https://stackoverflow.com/q/47156251

** Just learn Haskell from now until the interview

* TODO Create tree-sitter parsers for parsing language models
Do this to query language models for things.

* Maybe look at these, which I have installed
#+BEGIN_SRC sh -n :sps bash :async :results none
  e ia vdiff-magit treemacs-magit magit-delta magit-commit-mark gitignore-snippets github-dark-vscode-theme git-modes git-grep dired-git
#+END_SRC

* TODO I must try to build fast and scalable software, and that would be by using Haskell

* Interview
** emacs and the role of ilambda
e:$MYGIT/mullikine/glossaries/fringe-programming-paradigms.txt

[[y:aspect-oriented programming]]

=ilambda= has a similar role to emacs lisp's =advice=.

* TODO I should learn a little bit of category theory before the interview

* TODO Absolutely read all of this before doing the interview
https://wiki.haskell.org/All_About_Monads

That's quite important.

* TODO Buy a black and white hack your magic patch from Abby

* TODO Run multiple Pen.el daemons
** Load
- Can handle multiple parallel requests

** Usability (while prompting)
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"# Consider running a different pen instance if available" "$MYGIT/semiosis/pen.el/scripts/pen-eipe"
#+END_SRC

* TODO Consider finishing off =pen-tm= and adding it to Pen.el

* TODO Copy the imitation game process with Pen.el

* TODO For Inka
At the Den, find the book of Maori phrases and take a photo of it, then send to Inka.

* TODO Make a human engine, lol, and let it simply prompt myself
e:$MYGIT/semiosis/engines/engines/offline.engine

e:$MYGIT/semiosis/pen.el/scripts/pen-human.py

* TODO Create the engine for p2p prompting
http://github.com/semiosis/engines

* TODO Add other abilities beyond prompting to =Pen.el=
But utilise the same main prompting pipeline for functions.

- paraphrase mining
  - e:$SCRIPTS/sbert-paraphrase-mining.py

* TODO Consider connecting functions to fine-tuning

* TODO Finish =iassert=
** Use that for training

* TODO Automate more of code search, etc. in emacs
That is definitely the way.

* GitHub Copilot interview
** Quote this
#+BEGIN_SRC text -n :async :results verbatim code
  "There's that sort of sense that many
  technical people will see or feel when you see
  something and you know what it could be, and
  you know it could be important, and you see
  companies just doing it wrong - there's that
  powerful desire to fix it and do it right and
  show them sort of how it's supposed to be
  done"

  - John Carmack at GDC 2015
#+END_SRC

* TODO [#A] Make a =tree-sitter= grammar for my *glossary* files
This would be a great way to learn =tree-sitter=.

* TODO Set up tree-sitter in my universal parser

* Restore my dosbox
#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$DUMP$NOTES/programs"; ls -ldt dosbox
#+END_SRC

* TODO Learn =cask= in order to build emacs packages
https://cask.readthedocs.io/en/latest/guide/introduction.html

* TODO Figure out how to build the .so files
https://github.com/semiosis/tree-sitter-langs

#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$MYGIT/emacs-tree-sitter/tree-sitter-langs"; git submodule update --checkout
  cd "$MYGIT/emacs-tree-sitter/tree-sitter-langs"; script/compile rust
  cd "$MYGIT/emacs-tree-sitter/tree-sitter-langs"; script/compile python
#+END_SRC

* TODO Actually look into this textmate grammar -- it's actually used by github
https://github.com/Alhadis/language-emacs-lisp

* TODO Make some prompting functions which can work offline
Do this to test pen.el while offline.

* Boston Consulting Group
** Look into this
https://github.com/BCG-Gamma/facet

* TODO See if I can invent some other ilambda primitive which makes use of
** internal holographic representation
** external holographic representation

* TODO Make a custom =tree-sitter= =TSInput= for language models
- Make one that syntax highlights probabilities in emacs
  - I suppose that tree-sitter could elicit text from the LM lazily
    - It could probably be used to validate generated text
- Make one that syntax highlights based on prompt functions -- funniness/?
  - Would be great but I'm unsure how

* TODO Do not run a prompting function unless online or is cached
Abort the prompt function ASAP.

* TODO Make abort predicates
Rather than that, what is the antomym of abort.

#+BEGIN_SRC yaml -n :async :results verbatim code
  # Do not run unless these are ALL true
  goahead-predicates:
  # If any of these are true, do not run
  abort-predicates:
#+END_SRC

** TODO Find a good command for checking if online

* tree-sitter
** =>
Every grammar rule is written as a JavaScript
function that takes a parameter conventionally
called $.
#+BEGIN_SRC sh -n :sps bash :async :results none
  sp +/"=>" "$HOME/var/smulliga/source/git/Wilfred/tree-sitter-elisp/grammar.js"
#+END_SRC

* TODO Make a system to list out all glossary terms under a git project

* TODO Look up this person - the maintainer of https://github.com/Wilfred/tree-sitter-elisp
Wilfred Hughes

* TODO Require these in both my emacs config and in pen.el
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (require 'tree-sitter)
  (require 'tree-sitter-langs)
  (require 'tree-sitter-indent)
#+END_SRC

*  TODO Make the tree-sitter IDE
e:$EMACSD/config/my-tree-sitter.el

* TODO Do some more with the universal file parser + tree-sitter
$HOME/blog/posts/universal-file-parser-in-emacs.org

* TODO Design prompts for these types of things
https://youtu.be/InhMx1h0N40?t=49

I want to edit, query or predict on video based on text prompts, or multiple payloads.

* TODO Find a way to indicate to the prompt function fz that I am in term-mode and want to do a refresh
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun pen-complete-insert (s)
    (pen-insert s)
    ;; Don't clear
    (if (major-mode-p 'term-mode)
        (ekm "C-l")))
#+END_SRC

* TODO Install tree-sitter into the Pen.el docker container

* TODO Revisit examplary at some stage
Training examples are important.

* TODO Try to make his thesis and read it
$MYGIT/rcrimp/thesis-revision

* tree-sitter
** TODO [#A] Make a full-blown IDE in emacs for tree-sitter

** Automate this in emacs
*** Generating
After making changes to your grammar, just run tree-sitter generate again.

*** testing
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  tree-sitter parse 'examples/**/*.go' --quiet --stat
#+END_SRC

Will return non-zero if fail.

** DONE install the CLI
   CLOSED: [2021-12-11 Sat 03:09]
Install the CLI so I can build my own parsers.

#+BEGIN_SRC sh -n :sps bash :async :results none
  cd "$MYGIT/tree-sitter/tree-sitter/cli"; cr Cargo.toml
#+END_SRC

*** DONE Make a wrapper script
    CLOSED: [2021-12-11 Sat 03:09]

** Apparently it gets very easy - zen sounds good
https://tree-sitter.github.io/tree-sitter/creating-parsers

e:$MYGIT/Wilfred/tree-sitter-elisp/grammar.js

* ilambda
** Create my own imaginary programming languages and parsers with tree sitter