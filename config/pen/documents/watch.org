* 
[[https://www.youtube.com/watch?v=9avCy47rcZ8][youtube.com: I tried so many times to come back to God and failed. | Phillip Blair]]

* 
https://www.youtube.com/watch?v=Ymt03N6X8xQ&ab_channel=TheGalaxyJumper

* 
https://www.youtube.com/watch?v=-3TE_N0h7jM&ab_channel=Ephesians2%3A8

* Millenial Kingdom
https://www.youtube.com/watch?v=dLRXaeUMdz0&ab_channel=Truthunedited

* 
https://www.youtube.com/watch?v=-dCzsdtvhdQ&ab_channel=H%C3%A2nGia

** 
[[https://youtube.com/watch?v=-dCzsdtvhdQ&t=741][youtube.com: C. S. Lewis 2024 - God has given you this hidden power but it remains unused @time: 12 min 21 sec]]

* Web 19 '24
[[https://www.youtube.com/watch?v=XcR-wbN3vIc][youtube.com: JESUS | Full Album | Jesus Image]]

* 
[[https://www.youtube.com/watch?v=X-saQr3m4Vs&list=RDX-saQr3m4Vs&start_radio=1][youtube.com: Steve Apirana - I Have Decided]]

The cross before me, the world behind me, no turning back.

* Totoos are sin
[[https://www.youtube.com/watch?v=m6xLsQoycec][youtube.com: Are Tattoos a Sin? Insights from Bishop Mar Mari Emmanuel]]

* Watch this!
[[https://www.youtube.com/watch?v=DcdCsEAI2kw][Killing Lust with the Cross of Christ - YouTube]]

I mean, sure, I feel like lust is killed but I feel as though some spirit spouse or something has
attacked me ever since the end of 2022.

* 
[[https://www.youtube.com/watch?v=q35d6Qv8OyE][Words of Life - YouTube]]

* Chemistry lessons
https://www.youtube.com/watch?v=-KfG8kH-r3Y&ab_channel=TheOrganicChemistryTutor

* 
[[https://www.youtube.com/watch?v=Qs0tGAcDkco][New Zealand's Wild Geology - YouTube]]

* 
[[https://www.youtube.com/watch?v=vAZ4KpftLHs][www.youtube.com/watch?v=vAZ4KpftLHs]]

* This guy
https://youtu.be/nCtKKHbnWmw?t=930

* This! Awesome!
[[https://www.youtube.com/watch?v=TWPoQN8PO9E][Christian MP: a??A life in Christ is the most wonderful thinga?? - YouTube]]

* 
[[https://www.youtube.com/watch?v=YgGjNWakoxw][How God Delivered Me From | Masturbation | Perversion | Bondage | Fornication - YouTube]]

* Riverdance
[[https://www.youtube.com/watch?v=OoNr_JGfTNk][Reel Around The Sun - YouTube]]

* This is awesome
[[https://www.youtube.com/watch?v=M9EbSw8O6uc][Free from Judgment, Fighting Sin, Full Assurance - YouTube]]

* 
[[https://www.youtube.com/watch?v=gh6hTjz9A80][The Hour Has Come a?? Part Two - YouTube]]

* 
[[https://www.youtube.com/watch?v=VswKli4aQBk][I heard God say: a??READY, SET, GO!a?? #dailyprophetic - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=gHT2B285inc][The First And Second Apologies, Saint Justin Martyr, Full-Length Catholic Audiobook - YouTube]]

* 
https://www.youtube.com/watch?v=njp3WNVQ9O4&ab_channel=ChristianMovies

* Watch
https://www.youtube.com/watch?v=1Ldlp-4OOG0&ab_channel=DesiringGod

* 
https://www.youtube.com/watch?v=IJA-wIRctmE&ab_channel=Post-ApostolicChurch

* Commit your whole life to Jesus
[[https://www.youtube.com/watch?v=z7oCa9BvO9g][Keith Green 1978 : Make My Life A Prayer to You {live} - YouTube]]

* This
[[https://www.youtube.com/watch?v=puYG5sItvn8][Perseverance in Holiness - Charles Spurgeon Audio Sermons {Jeremiah 32:40} - YouTube]]

* 
[[https://www.youtube.com/watch?v=xn3BRpjAio4][Are you confused on if youa??re hearing from God or not? i? 1/4  - YouTube]]

* This
https://www.youtube.com/watch?v=AySXu8x-RnA&ab_channel=ThingsICantFindOtherwise

* Also this - Pipes and file handling in common lisp
https://www.youtube.com/watch?v=eOu9e68Ips0&ab_channel=DavidWesselsVIU

* Watch this - ‘How God Made Me Happy in Him’: John Piper’s Journey to Joy
https://www.youtube.com/watch?v=-cRkUt4glaE&ab_channel=DesiringGod

God, You HAVE made me happy in You!!
Praise You, God!
Thank You so much, God!
ALL glory to You Jesus and to You, Father God!
Hallelujah!
I love You, God!

AMEN!!

* 
https://www.youtube.com/watch?v=07zjar-w7-I&ab_channel=Godshealer7EndTimesProphecyChannel

* Watch again
** Elisp Idiosyncrasies
https://www.youtube.com/watch?v=D8391afYiRs&ab_channel=Positron%27sEmacsChannel

* Meet Matthew 9am in the octagon

* This works
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ocif bible-search-phrase keep his commandments | pavs
#+END_SRC

* This is quite good
https://www.youtube.com/watch?v=ILqA5FY5RmE&ab_channel=ChristianSermonsandAudioBooks

* These are actually great to watch!
[[https://www.youtube.com/watch?v=YJAwpbJ3TxA][The New Adventures of Winnie the Pooh Babysitter Blues Episodes 1 - Scott Moss - YouTube]]

* Childhood
[[https://www.youtube.com/watch?v=2iYKRvNXRBw][Winnie the Pooh S01E01 Pooh Oughta Be in Pictures - YouTube]]
[[https://www.youtube.com/watch?v=XNHICQXM_Fw][The New Adventures of Winnie the Pooh Trap as Trap Can Episodes 1 - Scott Moss - YouTube]]

** Watch them all
https://www.youtube.com/playlist?list=PLK4Lvw59uq_-1om0c83tCLEd9XaXv0kCJ

* The Secret of Loving God! - Charles Spurgeon Sermons
https://www.youtube.com/@ChristisLord

* The Meaning and Purpose of Anointing in the Bible
[[https://www.youtube.com/watch?v=-uPNMO-YA5E][The Meaning and Purpose of Anointing in the Bible - YouTube]]

* What Jesus Meant by "Eternal Life" - think about this
[[https://www.youtube.com/watch?v=uCOycIMyJZM][What Jesus Meant by "Eternal Life" - YouTube]]

* Charles Spurgeon
** Pray, always pray. Ask and continue asking
[[https://www.youtube.com/watch?v=iVkBJM27X8U][Charles Spurgeon's Life Lesssons You Should Know Before You Die - YouTube]]

** The Personality of the Holy Spirit - Charles Spurgeon Sermons
[[https://www.youtube.com/watch?v=4aSZP6kfrmc][The Personality of the Holy Spirit - Charles Spurgeon Sermons - YouTube]]

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  1 Corinthians 12:11
#+END_SRC

#+RESULTS:
#+begin_src bash
1 Corinthians 12:11
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
But one and the same Spirit works all these
things, distributing to each one individually
just as He wills.

(NASB)
#+end_src

The Holy Spirit:
- has a will in keeping with Almighty Jehovah God.
- has power.

** 
[[https://www.youtube.com/watch?v=sDAGy1jXuqY][How to Please God - Charles Spurgeon Sermons - YouTube]]

* 
https://www.youtube.com/@bibleproject

* This
- [[https://www.youtube.com/watch?v=xqgeT26BAnE][How to Seek the Holy Spirit - YouTube]]

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  1 Peter 1:23
#+END_SRC

#+RESULTS:
#+begin_src bash
1 Peter 1:23
‾‾‾‾‾‾‾‾‾‾‾‾
for you have been born again not of seed which
is perishable but imperishable, that is,
through the living and enduring word of God.

(NASB)
#+end_src

* This
- [[https://www.youtube.com/watch?v=utu1XILymjw]["Receive the Holy Spirit" All 92 passages of Jesus & the Holy Spirit from the Gospels to Revelation. - YouTube]]
- [[https://www.youtube.com/watch?v=C7hdUorDU-U]["These things I command you" Jesus' own words from the 4 Gospels - YouTube]]
- [[https://www.youtube.com/watch?v=6rC8v7LnOo4]['Seek first' - 8 hours of Christ's teachings, and verses Inspired by Jesus. - YouTube]]

* Spiritual depression
https://www.youtube.com/playlist?list=PLXMbCWFEKybLiZYDevJ1RZAfAVANk_UsG

* Irish Christian music
- [[https://www.youtube.com/watch?v=f4HeIXYqaSs][Revival - Robin Mark - YouTube]]

** Robin Mark - awesome!
- https://www.youtube.com/playlist?list=PLB58163E027C3D3A1

*** Be Unto Your Name - We Are A Moment
- https://www.youtube.com/watch?v=5w0mb33ek2U&list=PLB58163E027C3D3A1&index=10

*** As The Deer Pants for Water
- https://www.youtube.com/watch?v=FBppKZ0eJlQ&list=PLB58163E027C3D3A1&index=24

* 
https://www.1news.co.nz/2023/09/08/survivor-supports-campaign-pledge-to-look-at-criminalising-stalking/

* Maybe I *should* watch this
[[https://www.youtube.com/watch?v=Rt0kp4VW1cI][Sound of Freedom - Official Trailer {2023} - YouTube]]

* We are the holy of holies - don't veil the door, don't veil the door
https://www.youtube.com/watch?v=pAiaScv7ofk&list=PLX3vEJ8epL7KHWkUdzljQlwHwrkHhSBfx&index=3

John Fischer - Naphtali

* Derek Prince
[[https://www.youtube.com/watch?v=S-auGVd2sjs][6. A vision of holiness // The Costs Of Revival // Derek Prince - YouTube]]

* The Hiding Place - Corrie Ten boom
[[https://www.youtube.com/watch?v=yeV7Otqlyzw][The Hiding Place - Corrie Ten Boom - YouTube]]

* Watch this
[[https://www.youtube.com/watch?v=WlUOr4z3Lbs][Electronics Fundamentals - YouTube]]

* 
[[https://www.youtube.com/watch?v=qvx2DfG2RLo][Don't Go Back to Rules! - YouTube]]

* This is cool!
[[https://www.youtube.com/watch?v=0JiIgpmjnQg][Saint Ignatius of Antioch, the God Bearer - YouTube]]

** I fall out of agreement entirely with Richard Stallman's definition of saint
https://stallman.org/saint.html

But I still think that what Richard Stallman
has achieved in the GNU system is good, and I
pray that my Pen.el project continues to be used for Jesus Christ.

And I plead that Richard Stallman comes to know Jesus Christ as Lord, King and God's Word.
In Jesus Christ's name I ask.

* Keith Green
[[https://www.youtube.com/watch?v=r-XIGanYS2s][The Lord Is My Shepherd - YouTube]]

* My first Bible
https://www.ebay.com.au/itm/225229903686

The Beginners Bible Timeless Childrens Stories 1989 by James R. Leininger.

[[https://www.youtube.com/watch?v=QwTuC7p8X44][8 Full Episodes - +4 Hours NON-STOP - The Beginners Bible - YouTube]]
[[https://www.youtube.com/watch?v=LPxN9s91ExI][Moses, Jonah, Noah & Daniel - NON-STOP - The Beginners Bible - YouTube]]

* Another awesome printer
[[https://www.youtube.com/watch?v=fOs4xlI4DTs][Atari 800 XL with AtariWriter and an Atari 1020 Plotter / Printer - YouTube]]

* The grace of God and endurance
[[https://www.youtube.com/watch?v=xh6v6L2x3Ug][Purchase Your Salvation With Endurance - YouTube]]

* Derek Prince
[[https://www.youtube.com/watch?v=lK9nITqebmE][You Cant Achieve Righteousness By Keeping Laws | Derek Prince - YouTube]]

* Truth is a person
[[https://www.youtube.com/watch?v=RkuueGup28E][Truth is a Person | John Lennox - YouTube]]

* TODO Next, reboot my blog
[[https://www.youtube.com/watch?v=xcwnhQp7EyU][Empire of Angels - YouTube]]

* Derek Prince
[[https://www.youtube.com/watch?v=vlVLuKSd-vg][Total Agreement Between Jesus and The Bible | Derek Prince - YouTube]]

* TODO Learn the Hebrew alphabet
https://www.youtube.com/watch?v=tk1njVL723w

Hebrew itself would be awesome, if I could learn Hebrew itself.

* Learning
- [[https://www.youtube.com/watch?v=xHu7qI1gDPA][Unix system calls {1/2} - YouTube]]
- [[https://www.youtube.com/watch?v=2DrjQBL5FMU][Unix system calls {2/2} - YouTube]]

* How the Earliest Christians Worshipped (In their own words)
[[https://www.youtube.com/watch?v=AvKjB6hnRNo][How the Earliest Christians Worshipped {In their own words} - YouTube]]

* Deliverance from demonic influence
[[https://www.youtube.com/watch?v=l1DEa1Mh56Q]["Deliverance From Demonic Influence" | Rev. Kenneth E. Hagin | *Copyright Protected - YouTube]]

* Don't be cut off from God
[[https://www.youtube.com/watch?v=WLR25SBswEo][You Must be Fruitful to Enter God's Kingdom - YouTube]]

- make disciples
- pick up cross and go with Jesus
- do the works of righteousness
- don't serve myself
- don't be addicted to things, or entertainment
- don't be constantly pleasing myself
- repent
- see who's side I'm on

* Common Lisp
[[https://www.youtube.com/watch?v=9597LFlvMuE][Common Lisp: An elegant design pattern. - YouTube]]

* 
[[https://www.youtube.com/watch?v=8y3rXlb_Lxg][Dawn After Advent - YouTube]]

* GPTChat
[[https://www.youtube.com/watch?v=0A8ljAkdFtg][ChatGPT: This AI has a JAILBREAK?! {Unbelievable AI Progress} - YouTube]]

* Scrooge
[[https://www.youtube.com/watch?v=p9d8l-Gkweg][Cartoon - Scrooge McDuck and Money {Walt Disney, 1967}  remastered version  - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=4sLFGtfgFoI][A Word of Warning from the Holy Spirit - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=PRHI5wBe-MI][Living in two Realms | Physical & Spirit Realm - YouTube]]

* 
[[https://www.youtube.com/watch?v=VhBHgq55byA][For the Bride of Christ - Last Minute Message 11/10/2022 - YouTube]]

* Levites
[[https://www.youtube.com/watch?v=qluAh-0GjK0][The Tales of The Tribe of Levi - YouTube]]

* This is cool
[[https://www.youtube.com/watch?v=U0UPbbwU8Gk][Stamped Confirmation that Jesus is about to Gather His Bride - YouTube]]

Between the lines, the Bible is even more valuable.

I have to focus on the barley.

* Jesus is coming for His bride
[[https://www.youtube.com/watch?v=U0UPbbwU8Gk][Stamped Confirmation that Jesus is about to Gather His Bride - YouTube]]

https://www.youtube.com/watch?v=U0UPbbwU8Gk&ab_channel=WearetheOvercomers

I want my bride too.

* 
https://www.youtube.com/watch?v=iza1wyjlWAU&ab_channel=SWIFTPASSAGEMINISTRY

* 
https://youtu.be/-6KERTUIZfQ?t=77

Human knowledge is opposed to God's knowledge and
therefore is no knowledge at all ...

* Yeah, do not
[[https://www.youtube.com/watch?v=jArnbv1PTf4][You Will Never Say A Bad Word Again After Watching This! - YouTube]]

* Sin will pull you further than you intend
[[https://www.youtube.com/watch?v=wHp_O3mEyIE][If This Video Doesn't Wake You Up, Then I Don't Know What Will..... - YouTube]]

* 
https://www.youtube.com/watch?v=xbIuEFVF9f4

* Lion of Judah
[[https://www.youtube.com/watch?v=dhRA_6HpSQM][Most People Don't Even Realize That This Is In The Bible - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=1UG_f35I2k8][Restoration 3 of 15 - The Fig Tree - YouTube]]

* Watch
- [[https://www.youtube.com/watch?v=oOrwo9Vjz9Q][Benny Hinn   War In The Heavenlies 5 Part Set Audio - YouTube]]
- [[https://www.youtube.com/watch?v=bRiCTHBDygc][ The Book Of Jubilees  Chapter 32 Levi's Dream at Bethel; he is appointed to the Priesthood - YouTube]]

* 
[[https://www.youtube.com/watch?v=Zzu2nzqS1ls][Beach House - Wishes {A Music Video} - YouTube]]

The fairy bubble reminds me of Melee's painting.

* It might be important to watch this
[[https://www.youtube.com/watch?v=CIHY9XJ_I-E][How to Protect the Anointing || Prophet Passion Java & Pastor Benny Hinn - YouTube]]

* Looks like a cool movie
[[https://www.youtube.com/watch?v=8vmHFvnjPDw][Jesus Revolution {2023 Movie} Official Trailer - Kelsey Grammer, Joel Courtney - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=9L-ZM0g6yf0][ God's key to Receive - Thy Kingdom Come - Derek Prince - YouTube]]

* Clojure
https://clojure-diary.gitlab.io/2022/10/12/arrow-thing.html

* Saint Maximos the confessor
https://www.youtube.com/watch?v=yWtmroVU6aQ

This guy.

* Haskell
** Comonad
[[https://www.youtube.com/watch?v=HOmOQnQGtPU][Chris Penner - Comonads by Example 1/4 - YouTube]]

* 
[[https://www.youtube.com/watch?v=javywnDmRY4][The Second Coming of Christ and the Death of Pope John Paul II - YouTube]]

* Vim and tree-sitter - this is great!
[[https://www.youtube.com/watch?v=v3o9YaHBM4Q][Magically format embedded languages in Neovim - YouTube]]

https://github.com/nvim-treesitter/nvim-treesitter
https://github.com/nvim-treesitter/playground

** It might be time to upgrade vim?
- Do it inside Pen.el, I guess.

* Ansible
- [[https://www.youtube.com/watch?v=EG9C7mVG3sQ][Ansible Automation Platform {AAP } Demo - YouTube]]
- [[https://www.youtube.com/watch?v=lyk-CRVXs8I][CI/CD with Ansible Tower and Github - YouTube]]

* This is very true 5/5
[[https://www.youtube.com/watch?v=_3zjaxamPYg][The Necessity of Ritual, Liturgy, and Hierarchy - YouTube]]

* This is true
[[https://www.youtube.com/watch?v=JAQTD2I92gU][Visions About the Anti-Christ &the Rapture. God Said Seeking the LORD is Preparing  for the Rapture - YouTube]]

Don't be afraid.

God speaks just before waking up -- so true!

* This
[[https://www.youtube.com/watch?v=PChxqZjApfA][The New Lovers Dilemma: Everyone's Challenging You - YouTube]]

* The restrainer (power of the Holy Spirit) is what is holding this world together, despite the potential for hyperreality to destroy the world
[[https://www.youtube.com/watch?v=TGnoUr1G4Ws][Another Day in Sodom Until We Fly - YouTube]]

* Diorama - LOL a red and blue haired girl - Like Melee's black and white
[[https://www.youtube.com/watch?v=6WXiJOhrHoI][I Made a Gigantic Fantasy Diorama in 5 Weeks - YouTube]]

* I was the first watcher for this video
[[https://www.youtube.com/watch?v=5bO9NH2Qq7M][The Last Days | They Don't Want You To See This! - YouTube]]

Therefore, I have to take this video very seriously.

* Sealed
[[https://www.youtube.com/watch?v=hwlRmIDpqws][The Appearance in the clouds of Jesus Christ {dream} - YouTube]]

#+BEGIN_SRC text -n :async :results verbatim code
  In whom ye also trusted, after that ye heard
  the word of truth, the gospel of your
  salvation: in whom also after that ye
  believed, ye were sealed with that holy Spirit
  of promise,
  14 Which is the earnest of our inheritance
  until the redemption of the purchased
  possession, unto the praise of his glory.
#+END_SRC

* Watch
[[gr:monty python movies]]

* 
[[https://www.youtube.com/watch?v=xnChXNUNS2A][ ML News  This AI completes Wikipedia! Meta AI Sphere | Google Minerva | GPT-3 writes a paper - YouTube]]

* Relationship -- Hmm; Inspiring!
[[https://www.youtube.com/watch?v=qwAW20kB_Tg][The beginning of a relationship   Love is in small things: D&M story   - YouTube]]

* Strawberries?
[[https://www.youtube.com/watch?v=mGPteoCKfWo][The Unbelievable History of Strawberries - YouTube]]

Strawberries are associated with the divine.

* Watch
- [[https://www.youtube.com/watch?v=OyXyJWn0vgg][Meaning of life intro - YouTube]]
- [[https://www.youtube.com/watch?v=Bt84uBuGKNk][Monty Python's The Meaning of Life-Intro/Theme-High Quality - YouTube]]

* Music
[[https://www.youtube.com/watch?v=U_-ja07Jxvw][As Long As God Loves Us - YouTube]]
[[https://www.youtube.com/watch?v=BLfqlgACPmI][The Return of the Christ - YouTube]]
[[https://www.youtube.com/watch?v=gre9YCn7EoU][If You Fall I Will Carry You - YouTube]]
[[https://www.youtube.com/watch?v=wc9fHfD9XuQ][Wings - YouTube]]
[[https://www.youtube.com/watch?v=AkOR8nZeBgY][Liberation - YouTube]]

* Melee
[[https://www.youtube.com/watch?v=HQdoD0R9d1w][Youre the Inspiration  Leonid & Friends {Chicago cover} - YouTube]]

This song is such a cheese roll.
But it's true.
And that's the trajedy of what is happening to me re: not being able to talk to her.

This says everything.

Always on my mind.
She's the person.

** That's why I'll go very far to break this barrier
I'll fight.

* Alignment
[[https://www.youtube.com/watch?v=PjV9wlgkdw8][AGI Alignment additional thoughts - YouTube]]

* Read
[[https://www.youtube.com/watch?v=lNbTt2-OKJg][Africa - YouTube]]

* Signs God is Preparing You For Marriage: Aug 2, 2022 
[[https://www.youtube.com/watch?v=ufwnP7p4Zkk][Signs God is Preparing You For Marriage - YouTube]]

- 
- gotta read up
  - family living
  - relationships

* 
[[https://www.youtube.com/watch?v=U16uNUKNvVM][Paul's Shipwreck - YouTube]]

* Document AI
[[https://www.youtube.com/watch?v=F_jyoe1lQhg][What is Document AI? - YouTube]]

* 
[[https://www.youtube.com/watch?v=IMlDZNWTurw][JSON parsing in Haskell - YouTube]]

* 
[[https://www.youtube.com/watch?v=Ke90Tje7VS0][React JS - React Tutorial for Beginners - YouTube]]

* No deception
https://youtu.be/j1haCqF1xUA?t=1091

* Haskell
** This is absolutely the best introduction to Haskell ever
https://www.youtube.com/watch?v=2Jr5WVpU810&list=PLmTgnNwroyn8TnF26YRvW-hvQF1ypztzg&index=13

* 
[[https://www.youtube.com/watch?v=cXNU3Vdlkks][They Don't Want You To See This! This Will Change Everything You Know - YouTube]]

I want to walk through life victoriously.

God lovingly has told us what to do and what not to do:
- Do not lie
- Do not covet
- Do not have any Gods before Him

** Jesus also has given us commandments
- Love the Lord your God with all your heart, soul and mind
- Love your neighbour as yourself

* It's really important
[[https://www.youtube.com/watch?v=htcIXBbA_K4][ Why This Interpretation Was hidden? - The 4 Horsemen - The White Horse of the Gospel - YouTube]]

The prophetic scripture (word of God):
- A light that shines in a dark place
  - We need that light

** 2 peter 3:12
+ [[https://www.biblegateway.com/passage/?search=2%20Peter%203%3A12&version=NIV][2 peter 3:12]] :: 12 as you look forward to the day of God and speed its coming.[a] That day will bring about the destruction of the heavens by fire, and the elements will melt in the heat.

*** We need to bring the day of God nearer
Jesus is a prophet.
He is also:
- Saviour
- Lord
- teacher

+ [[https://www.biblegateway.com/passage/?search=Matthew%2024&version=NIV][Matthew 24]] :: 

+ [[https://www.biblegateway.com/passage/?search=Mark%2013&version=NIV][Mark 13]] ::

+ [[https://www.bible.com/bible/111/LUK.21.NIV][Luke 21]] :: 

I have to read all of these.

One of his most important titles is prophet.

The greatest of all the Hebrew prophets is Jesus.

#+BEGIN_SRC text -n :async :results verbatim code
  42 “Therefore keep watch, because you do not
  know on what day your Lord will come. 43 But
  understand this: If the owner of the house had
  known at what time of night the thief was
  coming, he would have kept watch and would not
  have let his house be broken into. 44 So you
  also must be ready, because the Son of Man
  will come at an hour when you do not expect
  him.
#+END_SRC

* Listen to pure spiritual milk
[[https://www.youtube.com/watch?v=w1ERWZE6hRE][It's Not About Struggling But Yielding | Derek Prince - YouTube]]

- I should be watching nothing else for the moment

* Study
[[https://www.youtube.com/watch?v=VJGAApmhkbw][GLORIFY GOD WITH HOLINESS - YouTube]]

* 
[[https://www.youtube.com/watch?v=tOX0aqRWmp0][Learn to Hear the Voice of Jesus Christ - YouTube]]

* This is really good
https://www.youtube.com/watch?v=Xo_vtAI2mFo

I should stick to legit Christian stuff.
It feels like it's fixing me.

* Watch
[[https://www.youtube.com/watch?v=btEdrm4PaIM][Gnostic Baptism Ritual from the Book of Jeu - Pistis Sophia - Nag Hammadi Library - Gnosticism - YouTube]]

https://youtu.be/btEdrm4PaIM?t=1278

This is interesting.
I did this but with 1024.

In the 3 baptisms:
9879 - The cipher of the 7 voices

530 - Cipher of the first amen

One must hold this stone on the course throughout the baptism.

* Watch
[[https://www.youtube.com/watch?v=Fa_1JeRGsA4][Captain Bible - Saving all victims  Difficult  - YouTube]]

* This is true
[[https://www.youtube.com/watch?v=1xpQTJsGL7A][The Really Hard Truth of Jesus - YouTube]]

- I should do more of this
  - It's important

* 
[[https://www.youtube.com/watch?v=aMt1MM4LRSA][Be Careful Not To Be Among Those God Will Cut Off! - YouTube]]

* 
[[https://www.youtube.com/watch?v=q3ZDMpHG6H8][Counterfiet Christians - They Live Among Us - YouTube]]

* 
[[https://www.youtube.com/watch?v=BPxPzrR9QTQ][If This Video Doesnt Wake You Up, Then I Dont Know What Will.. - YouTube]]

* Understand this
[[https://www.youtube.com/watch?v=so_BtFllL8Q][7 Incredible Things That Happen When The Holy Spirit Enters You - YouTube]]

* Spiritual gifts
[[https://www.youtube.com/watch?v=iCFHbDEttP0][Interpreting & Prophesying | Derek Prince - YouTube]]

* This
[[https://www.youtube.com/watch?v=ZAlzYCwZs7E][If You Think You Can Handle The TRUTH, Here It Is 2022 - YouTube]]

- Don't be deterred by the dramatic voice. It's an important message
- Sin can hibernate

* DONE Who is the Man of Lawlessness?
[[https://www.youtube.com/watch?v=agMg1NN1174][Who Is the Man of Lawlessness? - YouTube]]

* Derek Prince
[[https://www.youtube.com/watch?v=e2vERIT5tfo][Hearing Gods Voice Pt 2 of 10 - The Mark of Christ's Sheep - Derek Prince - YouTube]]
[[https://www.youtube.com/watch?v=CEZ4JSg1xHY][Hearing Gods Voice - 5 of 10 - The Distinctive Lifestyle that Results from Hearing God's Voice - YouTube]]

* INFP
[[https://www.youtube.com/watch?v=YheeL8KSdvw][Avoid these 6 Mistakes When Talking to an INFP - YouTube]]

* Acts of Peter 📜 Untold in the Bible!
[[https://www.youtube.com/watch?v=ZDOh3jWiimE][Acts of Peter  Untold in the Bible! - YouTube]]

* Nicodemus
[[https://www.youtube.com/watch?v=JMNbSsmmT9o][The Gospel of Nicodemus  The Acts of Pilate - YouTube]]

* Go through all of these
[[https://www.youtube.com/watch?v=D2cc_WHVfTg][The Truth About the "Banned Books" of the Bible: Evidence for the Bible pt14 - YouTube]]

I'm not sure if I agree entirely with the criticism of Gospel of Thomas.

* TODO Make notes on various philosophers
[[https://www.youtube.com/watch?v=MpMkXyBWpl8][The Darkest Philosopher in History - Arthur Schopenhauer - YouTube]]

** TODO Put this under my new philosophy github organisation

* INTP
[[https://www.youtube.com/watch?v=XYzsvxVeu7g][The INTP's True Purpose: The Sage - YouTube]]

* TODO Go over lots of this guy's stuff
[[https://www.youtube.com/watch?v=-GAGA9wnJ7k][A Very Challenging "Contradiction" in the Gospels: The Mark Series pt 57 {14:1-12} - YouTube]]

- Start separating my blogs?

* Mysticism, spirit and shadow
https://www.youtube.com/watch?v=zAsR6DZTvS8&t=233s

[[https://www.youtube.com/watch?v=zAsR6DZTvS8]['Mysticism, Spirit and the Shadow' - Jordan Peterson interview part 1 - YouTube]]

* Great
[[https://www.youtube.com/watch?v=et_9dV4zgns][ Who Am I? Part 1 - Discover Yourself In God's Mirror - Derek Prince - YouTube]]

* 
[[https://www.youtube.com/watch?v=lE5KQHf8fX0][Jehovah's Witnesses: beliefs practices and ERRORS - YouTube]]

* Receiving the Holy Spirit
[[https://www.youtube.com/watch?v=rK8KVyZu0dQ][Receive This & You will never be the same again - Exercising Spiritual Gifts, Pt 1 - YouTube]]

* 
[[https://www.youtube.com/watch?v=F2JHXtos-0w][When People Do This, They Will Be Rejected By God | Derek Prince - YouTube]]

* I may be INTP
[[https://www.youtube.com/watch?v=tBpGD3I5afw][15 Signs Youre an INTP Personality Type {The Genius} - YouTube]]

I have both the good qualities of INTP and INFP.

* Anime
- Ergo Proxy

* TODO Today try:
** Set up an algorithm for formatting subtitles
- I should really firstly design it lol
  - And the best way would be using Haskell. Sadly, I'm not good at it yet

** Email Laria

* INFP vs INFJ - this is quite interesting
[[https://www.youtube.com/watch?v=5VI56NyNJ_8][INFP vs. INFJ : 5 Features That Set Them Apart - YouTube]]

* Bible
[[https://www.youtube.com/watch?v=srh1SfiWSRc][The Mystery of The High Priest's Garments: How to find Jesus in the OT pt 19 - YouTube]]

* Abomination of Desolation
[[https://www.youtube.com/watch?v=U5XqtcMhSh8][Jesus Said THIS Was The Sign to Watch For.. But What Does it Mean?: The Mark Series pt 53 {13:14-23} - YouTube]]

* Use Your Resources Ability and Talent for the Glory of God
[[https://www.youtube.com/watch?v=11hbkcx0Sgo][Use Your Resources Ability and Talent for the Glory of God - YouTube]]

* Control
[[https://www.youtube.com/watch?v=GKEyhzjpzek][ How the devil works to control people - YouTube]]

* Anime / CGI / Entertainment
[[https://www.youtube.com/watch?v=Xj2b0swdpX8][LOVE DEATH + ROBOTS VOLUME 3 | Official Trailer | Netflix - YouTube]]

* 
[[https://www.youtube.com/watch?v=HXKdbY9VOuo][The Religion of the Apostles: Orthodox Christianity in the First Century {Stephen De Young} - YouTube]]

* Carl Jung
[[https://www.youtube.com/watch?v=7M2ovi4CmJQ][Phenomenology of the Self, by Carl Jung {full audio} - YouTube]]

* Christian ethics and morals
** This is important
[[https://www.youtube.com/watch?v=ywBP2ctlXgc][She Leaves Once This Christian Brings Up This Topic... - YouTube]]

* I have to be trustworthy
[[https://www.youtube.com/watch?v=FfnIuGs8yfs][The SHOCKING Way INFJs Deal With Betrayal - YouTube]]

* Learn to make DSLs
** Haskell
[[https://www.youtube.com/watch?v=LeoDCiu_GB0][Haskell Tutorial - 12 - Writing Parsers From Scratch - YouTube]]

* Two spiritual kingdoms
e:$DUMP/tmp/scratchZAndrH.txt

* Answer all of these questions
[[https://www.youtube.com/watch?v=wOqvU85lwsI][Charles templeton's Questions about religion - YouTube]]

#+BEGIN_SRC text -n :async :results verbatim code
  Is it not likely that had you been
  born in Cairo you would be a
  Muslim and, as 840 million people
  do, would believe that "there is
  no God but God and Muhammad
  is his prophet"?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  If you have been born in Calcutta would
  you not in all probability be a Hindu and,
  as 650 million people do, accept the
  Vedas and the Upanishads as sacred
  scriptures and hope sometime in the
  future to dwell in Nirvana?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Is it not probable that, had you been
  born in Jerusalem, you would be a
  Jew and, as some 13 million people
  do, believe that Yahweh is God and
  that the Torah is God's Word?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Is it not likely that had you been
  born in Peking, you would be one
  of the millions who accepted the
  teachings of the Buddha or
  Confucius or Lao-Tse and strive
  to follow their teachings and
  example?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  lf there is a loving God, why does
  he permit-much less create-
  earthquakes, droughts, floods,
  tornadoes, and other natural
  disasters which kill thousands of
  innocent men, women, and
  children every year?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  How can a loving, omnipotent
  God permit-much less create-
  encephalitis, cerebral palsy,
  brain cancer, leprosy,
  Alzheimer's, and other incurable
  illneses, to afflict millions of men,
  women, and children, most
  of whom are decent people?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Why are there hundreds of
  Christian denominations and
  independent congregations, all
  of them basing their beliefs on
  the Bible, and most of them
  convinced that all the others
  are, in some ways, wrong?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  If all Christians worship the same God, why
  can they not put aside their theological
  differences and co-operate actively with one
  another?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  If God is a loving Father, why
  does he seldom answer his
  needy children's prayers?
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  How can one believe the biblical
  account of the creation of the
  world in six days when every
  eminent physicist agrees that
  all living species have evolved
  over millions of years from
  primitive beginnings?
#+END_SRC

* [#A] This is very good - 
[[https://www.youtube.com/watch?v=M1VIL4cCN0c][Verse by Verse on Can You Lose Your Salvation? - YouTube]]

* This is quite good
[[https://www.youtube.com/watch?v=0xL9NYIwgNA][The Dangers of Psychological Projection - YouTube]]

* I can write about the shadow, and I can embrace parts of the shadow, if I want
As we repress the things we despise in ourselves

** The shadow is not necessarily bad
We can come to understand the shadow.
And simply take management of it.
It serves a purpose.

** For example, 

* How to break out of sin
[[https://www.youtube.com/watch?v=t-a8zFpAcjg&t=2790s][How to Overcome Sin {With Greg Laurie} - YouTube]]

* How to Talk with Your Unconscious Mind | Jungian Active Imagination | Introduction & Tutorial
[[https://www.youtube.com/watch?v=RA3J7zg72j8][How to Talk with Your Unconscious Mind | Jungian Active Imagination | Introduction & Tutorial - YouTube]]

* Zoroastrianism
[[https://www.youtube.com/watch?v=fIUODqdwYuM][On Wings of Fire - 1 - YouTube]]

* Academy of Ideas
[[https://www.youtube.com/watch?v=DffqK6j-y1U][Why the Lack of Religion Breeds Mental Illness - YouTube]]

* Salvador Dali
[[pv:https://www.youtube.com/watch?v=lACL9U0fsU4][The Mysterious Book that Dal- Left Behind - YouTube]]

* Temple cistern
[[https://www.youtube.com/watch?v=-jjbAsbf1YA][Amazing discovery under the Temple Mount! - YouTube]]

A giant cistern was recently found beneath the Temple Mount. 

* Carl Jung
** Death
*** ask
[[pm:https://www.youtube.com/watch?v=LOxlZm2AU4o][Carl Jung speaks about Death - YouTube]]

*** vlc
[[pv:https://www.youtube.com/watch?v=LOxlZm2AU4o][Carl Jung speaks about Death - YouTube]]

* Psychological projection
[[pv:https://www.youtube.com/watch?v=0xL9NYIwgNA][The Dangers of Psychological Projection - YouTube]]

* Epic - watch more of this
[[pm:https://www.youtube.com/watch?v=6ds9y3lJGig][The Prince of Egypt - God Speaks to Moses  1080p HD  - YouTube]]

[[pm:https://www.youtube.com/watch?v=ie-FB6Opo5c][Deliver Us - YouTube]]

* This looks fun to watch
[[https://www.youtube.com/watch?v=l6oh14vfhlI]["The Red Book and The Red Book: Jung, Tolkien, and the Convergence of Images" - YouTube]]

Though, it's long. I should probably read instead.

** Regarding these issues, it's important to stay focused
Ingest efficiently.
I have to be focused.

* Carl Jung - Antichrist
[[https://www.youtube.com/watch?v=3xU2AMOdkEc][Christ, a Symbol of the Self, by Carl Jung {audiobook} - YouTube]]

* Carl Jung - Red Book
[[https://www.youtube.com/watch?v=AGWsHgn8J_8][The Red Book - Carl Jungs Gift to the World - YouTube]]

* Carl Jung - Anima and Animus
[[https://www.youtube.com/watch?v=IW4GzhdVr-w][Anima and Animus - Eternal Partners from the Unconscious - YouTube]]

It's interesting that the 'strong-man' is mentioned - I guess that's the conscious.

|----------+--------+-------|
| Maternal | Anima  | Eros  |
| Paternal | Animus | Logos |

Just as the anima becomes, through integration,
the Eros of consciousness, so the animus becomes
a Logos; and in the same way that the anima gives
relationship and relatedness to a man's consciousness,
so the animus gives to a woman's consciousness a
capacity for reflection,
deliberation and self-knowledge.

Carl Jung, C.W. Vol 9. Part II: Aion:
The Syzygy: Anima and Animus

This is how I should be taking notes.
https://youtu.be/IW4GzhdVr-w?t=231

* Watch
[[https://www.youtube.com/watch?v=RcxrKXsh858][Surrealist Manifesto - Andre Breton {1924} Audiobook - YouTube]]

* Law
** Automatism
[[https://www.youtube.com/watch?v=edNsUNbDQVk][Automatism - YouTube]]

* Read/Watch Austin Sparks
https://www.google.com/search?q=austin+sparks&oq=austin+sparks&aqs=chrome..69i57j69i59j0i271j69i60j69i65l2j69i60l2.1254j0j7&sourceid=chrome&ie=UTF-8

* What is Truth?
[[https://www.youtube.com/watch?v=dCl66uRHmFI][What Is Truth?: The Classic Collection with R.C. Sproul - YouTube]]

This is not bad.
They're attacking personal truth though.

* The Court Jester movie
[[https://www.youtube.com/watch?v=Pt37TRvU_Mw][The Court Jester - Trailer - YouTube]]

* Meditate on Jesus' commandments
[[https://www.youtube.com/watch?v=C7hdUorDU-U]["These things I command you" Jesus' own words from the 4 Gospels - YouTube]]

* Datalog, datahike, datomic
[[https://www.youtube.com/watch?v=oo-7mN9WXTw][DOMAIN MODELING WITH DATALOG by Norbert Wojtowicz - YouTube]]

** hitchhiker trees
[[https://www.youtube.com/watch?v=jdn617M3-P4]["Exotic Functional Data Structures: Hitchhiker Trees" by David Greenberg - YouTube]]

*** python copy a list, instead of copy its reference
#+BEGIN_SRC yaml -n :async :results verbatim code
  x = [1,2,3]
  y = x[:]
#+END_SRC

* Cross
[[https://www.youtube.com/watch?v=O0QE5tnYOZQ][Jordan Peterson Teaches Joe Rogan about the Cross! - YouTube]]

* Haskell
[[https://www.youtube.com/watch?v=xCut-QT2cpI][Functors Applicatives and Monads in Haskell - Part 1 {Functors} - YouTube]]
[[https://www.youtube.com/watch?v=CNOff5LPKQI][Functors Applicatives and Monads in Haskell - Part 2 {Applicatives} - YouTube]]
[[https://www.youtube.com/watch?v=f1Y7vLakykk][Functors Applicatives and Monads in Haskell - Part 3 {Monads} - YouTube]]

* Clojure
[[https://www.youtube.com/watch?v=LvissLmUNho][Practicalli Clojure 5 - Writing tests with clojure.test - YouTube]]
[[https://www.youtube.com/watch?v=irjP8BO1B8Y][Introduction to Logic Programming with Clojure - Ambrose Bonnaire-Sergeant - YouTube]]

* Language Models
[[https://www.youtube.com/watch?v=f2OgP49J7Pg][ ML News  DeepMind tackles Math | Microsoft does more with less | Timnit Gebru launches DAIR - YouTube]]

* Jonty
[[https://www.youtube.com/watch?v=NPIf4gljiJg][Gerry Anderson's The Secret Service {1969} - HD Opening Titles - YouTube]]

* Semiotics
[[https://www.youtube.com/watch?v=KY9LwCeP7Ug][Foucault: Power, Knowledge and Post-structuralism - YouTube]]

* Semiotics
- [[https://www.youtube.com/watch?v=bbQjhWTXp-w][Theories on Language and Linguistics: Saussure, Derrida; Signs, Structures, Lapses and Faults {ENG} - YouTube]]
- [[https://www.youtube.com/watch?v=aaRxu1-Z6NY][Saussure, Structuralism, and Semiotics - YouTube]]

* Infinity according to Jorge Luis Borges - Ilan Stavans
[[https://www.youtube.com/watch?v=mJeLGd3JV2I][Infinity according to Jorge Luis Borges - Ilan Stavans - YouTube]]

* Perhaps also reference this vid
[[https://www.youtube.com/watch?v=1Yxg2_6_YLs][An Introduction to Baudrillard - YouTube]]

* Parsec
[[https://www.youtube.com/watch?v=FYNQs6CGdYY][DPL Week 2 - 03 Parsing with Parsec - YouTube]]

* KL Divergence
[[https://www.youtube.com/watch?v=SxGYPqCgJWM][Intuitively Understanding the KL Divergence - YouTube]]

[[https://www.youtube.com/watch?v=0Cwl0Cn322M][Mutual Information and KL Divergence - YouTube]]

** vs cross-entropy (super good video)
[[https://www.youtube.com/watch?v=pH9xkCK4ATc][What is KL-divergence | KL-divergence vs cross-entropy | Machine learning interview Qs - YouTube]]

* TODO Learn IPA pronunciation
[[https://www.youtube.com/watch?v=o8KppNXfx2k][International Phonetic Alphabet {IPA} | English Pronunciation - YouTube]]

* TODO Finish the Haskell tutorial
#+BEGIN_SRC sh -n :sps bash :async :results none
  yt -v "[[https://www.youtube.com/watch?v=02_H3LjqMr8][Haskell Tutorial - YouTube]]"
#+END_SRC

* TODO Finish the Prolog video
#+BEGIN_SRC sh -n :sps bash :async :results none
  yt -v "[[https://www.youtube.com/watch?v=SykxWpFwMGs][Prolog Tutorial - YouTube]]"
#+END_SRC

* YouTube
https://www.youtube.com/feed/history

* Haskell
[[https://www.youtube.com/watch?v=L8-iC4_E5n4][BOB 2018 - Nikita Volkov: New Hasql - a native Haskell Postgres driver faster than C - YouTube]]

* GitHub - managing repositories with bots
[[https://www.youtube.com/watch?v=l3g41dGObJ4][Building automations with GitHub Apps and GraphQL - GitHub Satellite 2020 - YouTube]]

* Psionica
https://www.youtube.com/watch?v=zPPdFvMJDgQ&list=PLNl3dTYSs4b7hWt1AT7O5p_MuU3tFtWjb&index=1

* Datomic
[[https://www.youtube.com/watch?v=9TYfcyvSpEQ&t=1804s][Datomic with Rich Hickey - YouTube]]

* Babashka Tasks
[[https://www.youtube.com/watch?v=u5ECoR7KT1Y][Babashka tasks {by Michiel Borkent} - YouTube]]

https://youtu.be/u5ECoR7KT1Y?t=384

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  {:paths ["script"],
   :deps {medley/medley {:mvn/version "1.3.0"}}
   :min-bb-version "0.4.0"
   :tasks
   {clean (shell "rm -rf target")
    ...}}
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  bb run clean
  # or
  bb clean
#+END_SRC

* Explainable AI
[[https://www.youtube.com/watch?v=6xePkn3-LME][Introduction to Explainable AI {ML Tech Talks} - YouTube]]

* add myself to these
https://logicmoo.org/gitlab/
https://logicmoo.org/xwiki/

** TODO Mention that I have added myself
#+BEGIN_SRC sh -n :sps bash :async :results none
  vim +/"\* logicmoo gitlab" "$NOTES/personal/passwords/gitlab.txt"
#+END_SRC

* Compile =emacs-yaml=
** Fix this error
#+BEGIN_SRC text -n :async :results verbatim code
  error: failed to run custom build command for `emacs_module v0.10.0`

  Caused by:
  process didn't exit successfully: `/root/.emacs.d/emacs-yamlmod/target/release/build/emacs_module-13778f28dd882843/build-script-build` (exit status: 101)
  --- stderr
  thread 'main' panicked at 'Unable to find libclang: "couldn't find any valid shared libraries matching: ['libclang.so', 'libclang-*.so', 'libclang.so.*'], set the `LIBCLANG_PATH` environment variable to a path where one of these files can be found (invalid: [])"', /root/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.48.1/src/lib.rs:1652:31
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
  make: *** [Makefile:4: yamlmod.so] Error 101
  root@debian-1cpu-1gb-au-syd1:~/.emacs.d/emacs-yamlmod#
#+END_SRC

* Charformer
[[https://www.youtube.com/watch?v=debgj24BAZE][Charformer: Fast Character Transformers via Gradient-based Subword Tokenization +Tokenizer explained - YouTube]]

* Datomic Cloud
https://www.youtube.com/playlist?list=PLZdCLR02grLpRgqU50KY3YfMePw1SHnpp

* NLP
[[https://www.youtube.com/watch?v=Ulo-vKm14rg][Is There a Mathematical Model of the Mind? {Panel Discussion} - YouTube]]

* TODO Add some more customisation for my key binding stuff

* How to solve problems the Clojure way
[[https://www.youtube.com/watch?v=vK1DazRK_a0][Solving Problems the Clojure Way - Rafal Dittwald - YouTube]]

* Ontology
[[https://www.youtube.com/watch?v=QGmwIWmyJeg][Ontology for Systems Engineering - Part 1: Introduction to Ontology - YouTube]]
[[https://www.youtube.com/watch?v=zteyEk9LADs][RDF and OWL : the powerful duo, Tara Raafat - YouTube]]

* NMT
[[https://www.youtube.com/watch?v=HuZq5KkLx8Q][Let's Recreate Google Translate! | Neural Machine Translation - YouTube]]

* TODO Set the proxy for emacs so I can observe it with =mitmproxy=
Cos then I can do stuff like look at clojars requests.

* This was a very good demo
[[https://www.youtube.com/watch?v=o2MLHFGUkoQ][Quick introduction to Lisp, Clojure and using the REPL - YouTube]]

- Using cider
- Screencasting
- Understanding clojure lein testing

* Chomsky
[[https://www.youtube.com/watch?v=iR_NmkkMmO8][Language use & design: conflicts & their significance | Prof Noam Chomsky - YouTube]]
[[https://www.youtube.com/watch?v=olbbhTSwDIk][Noam Chomsky on stupid people - YouTube]]
[[https://www.youtube.com/watch?v=hdUbIlwHRkY][The Concept of Language {Noam Chomsky} - YouTube]]

* Haskell cabal
[[https://www.youtube.com/watch?v=-6TQwIC-2UU][Haskell - Cabal basic introduction - creating a project with external libraries - YouTube]]

* Brain
** intraneuronal memory-storage?
https://join.substack.com/p/is-this-the-most-interesting-idea

Neurons contain something incredible within
them: an accessible-to-computation mechanism
that allows the brain to store numbers in
memory and then to retrieve these numbers from
memory.

* NLP
[[https://www.youtube.com/watch?v=RzUMyqkdu80][Natural Language Processing - Complete Road Map | Tutorial - 1 - YouTube]]

* DreamCoder
[[https://www.youtube.com/watch?v=qtu0aSTDE2I][DreamCoder: Growing generalizable, interpretable knowledge with wake-sleep Bayesian program learning - YouTube]]

* Neuralink
[[https://www.youtube.com/watch?v=_xqSOTHnGV0][Neuralink Update  April 2021 - YouTube]]

* TODO Look at this
[[https://www.youtube.com/watch?v=z6fDxUevjRY][System Design interview with an Amazon engineer: Amazon ranking system - YouTube]]

* Python
[[https://www.youtube.com/watch?v=cKPlPJyQrt4][James Powell: So you want to be a Python expert? | PyData Seattle 2017 - YouTube]]

* Chomsky
[[https://www.youtube.com/watch?v=D5in5EdjhD0][Noam Chomsky - "The machine, the ghost, and the limits of understanding" - YouTube]]

#+BEGIN_SRC text -n :async :results verbatim code
  9:30
#+END_SRC

http://dt.pepperdine.edu/descartes-rules-for-direction-of-the-mind.html

If in the series of subjects to be examined we
come to a subject of which our intellect
cannot gain a good enough intuition, we must
stop there and we must not examine the other
matters that follow but must refrain from
futile toil.

We may not have the intelligence enough to
understand the workings of mind, in particular
the normal use of language.

* OpenAI training videos
https://www.overfit.ai/classroom-items/gpt-3-text-to-emoji

* Haskell
** QualifiedDo
[[https://www.youtube.com/watch?v=TH3cYp3349A][GHC QualifiedDo: customizable 'do' syntax without fuss by Facundo Dominguez - YouTube]]

** Elastic sheet-defined functions
https://www.youtube.com/watch?v=jH2Je6wUvPs&list=PLBqWQH1MiwBSK9wuaATNS701c43VYVTuc&ab_channel=Konfy

* Great demo
[[https://www.youtube.com/watch?v=Orm-jIIgVD0][Your First Web Application with Spock - YouTube]]

* clojure, fp
[[https://www.youtube.com/watch?v=5Nm56YvTKZY][The Art of Tree Shaping with Zippers - YouTube]]

https://lambdaisland.com/

* TODO [#A] Watch this video
[[https://www.youtube.com/watch?v=xvqsFTUsOmc][Natural Language Processing in Python - YouTube]]
https://github.com/adashofdata/nlp-in-python-tutorial

$MYGIT/adashofdata/nlp-in-python-tutorial/

** Take notes using the subtitles and the glossary
*** The glossary server must be made into an LSP server

* TODO Commit to memory the sx search stuff
| kb            | f           |
|---------------+-------------|
| =M-l M-k M-s= | =sx-search= |

#+BEGIN_SRC sh -n :sps bash :async :results none
  so how do i quit vim
#+END_SRC

* IR videos
Go over these and add to my glossary.

[[https://www.youtube.com/watch?v=2UpLin5T_E4][Text Classification 5: Learning to Rank - YouTube]]

Given a query and a set of documents,
classify documents into relevant and non-relevant.

In text classification you have a fixed set of classes, but in retrieval (query -> doc), you don't.
This is because for different queries, words and phrases are differently relevant or not.
In retrieval you have an infinite number of queries and each query has different set of classes (words are differently relevant per query).
We can't make a separate classifier for every query.

The solution is to transform the feature set.
Come up with a different feature set X that is consistent.

* Learn about Apache Solr
[[https://www.youtube.com/watch?v=TKcHFpJduOE][What is Apache Solr? | Apache Solr Tutorial for Beginners | Edureka - YouTube]]

** DONE See if I can build something with solr, clojure and clojurescript
   CLOSED: [2020-10-28 Wed 21:49]
Are there any examples out there?

* Clojure
[[https://www.youtube.com/watch?v=TbDmupZyuXk][Goodbye YAML: Infrastructure as Code in Clojure - Eno Compton & Tyler van Hensbergen - YouTube]]

* I should focus on tooling which automates tooling, not the tooling itself
NixOS and =nix-shell= is too difficult to learn. I need tools to help me learn it.

* I must build up lots of momentum with my programming

* TODO Get the properly formatted subtitles for this
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  upd readsubs -l fr "[[https://www.youtube.com/watch?v=yVa9tzYjDxc][Sacha Distel - Toute la pluie tombe sur moi (1970) - YouTube]]"
#+END_SRC

#+RESULTS:
#+begin_src bash
bon [

Musique] la pluie tombe sur moi et comme pour
quelqu'un dans les souliers sens mais trois
djouba la gaga capte la pluie le surmoi tous
les toits [Musique] bon ce que j'ai on dit joe
avait d'ailleurs au comptant de plus le
sourire comme ça sur moi je le j'en ai je suis
[Musique] ma vie toujours senti [Musique] la
pluie tombe sur oui mais moi j'ai fait cela
part je ne mange pas car c'est le parallèle
cap à l'appui vient le beau temps [Musique] ah
ah [Musique] ah ah toute la pluie tombe sur
moi tous les toits mais je au fond j'en ai
bientôt dans ma vie que je m'en suis toujours
sorti avec la souris [

Musique] tout puis s'en va [Musique] [

Applaudissements] je vais te je ne par jeu
auch par cas c'est là qu'après la pluie j'ai
eu l'enfant à l'est voilà je sais bien tiens
autant oh j'ai tout mon temps [Musique] tiens
l'ancien [Musique]
#+end_src

* TODO Make it so with my youtube subtitle stuff I can choose the language I want to read in

* TODO Add to ff a ytt

* doker multistage
[[https://www.youtube.com/watch?v=KLOdisHW8rQ][Drastically reduce the size of your DOCKER images with MULTISTAGE builds - YouTube]]

* TODO use a ytt: link
[[https://www.youtube.com/watch?v=KLOdisHW8rQ][Drastically reduce the size of your DOCKER images with MULTISTAGE builds - YouTube]]

* clojure
[[https://www.youtube.com/watch?v=bvI1BNgGp0k][Clojure Java Interop A Better Java than Java - Stuart Halloway - YouTube]]

* day of datomic
https://www.youtube.com/watch?list=PLZdCLR02grLoMy4TXE4DZYIuxs3Q9uc4i&v=yWdfhQ4_Yfw&ab_channel=ClojureTV

* Graph neural networks
[[https://www.youtube.com/watch?v=zCEYiCxrL_0][An Introduction to Graph Neural Networks: Models and Applications - YouTube]]

* Haskell 102
[[https://www.youtube.com/watch?v=Ug9yJnOYR4U][Haskell 102 - YouTube]]

* NLP
** Paper explained
[[https://www.youtube.com/watch?v=vLTmnaMpQCs][Learning to summarize from human feedback (Paper Explained) - YouTube]]

* Watch more carefully
https://www.youtube.com/watch?v=X8jsijhllIA&ab_channel=3Blue1Brown

* This guy is good
https://youtu.be/yqaHXKLRKzg?t=1657

* Continuation
[[https://www.youtube.com/watch?v=zB5LTkaJaqk][What is a continuation? - YouTube]]

* Milo & Otis
** Otis meets Fox
[[https://www.youtube.com/watch?v=Ge-YtIvae90][Otis Meets The Fox - YouTube]]

* Math
** Fourier transform & wavelets
[[https://www.youtube.com/watch?v=jNC0jxb0OxE][Fourier Analysis: Overview - YouTube]]

** Laplace transform
[[https://www.youtube.com/watch?v=7UvtU75NXTg][The Laplace Transform: A Generalized Fourier Transform - YouTube]]

It's important to be constantly learning math.

I should be doing it inside of haskell.

* haskell
** Left associative operator
#+BEGIN_SRC sh -n :sps bash :async :results none
  egr haskell left associative operator
#+END_SRC

** Right associative operator
Function composition in Haskell is right associative:

#+BEGIN_SRC haskell -n :i "babel-ghci -norc" :async :results verbatim code
  infixr 9 .
#+END_SRC

* haskell development
#+BEGIN_SRC sh -n :sps bash :async :results none
  stack build --fast --file-watch # Build binaries. This is like ghcid
  stack build --fast --file-watch --tests # Build and Run tests
  stack build --fast --file-watch --haddock --no-haddock-deps # Build docs

  stack test --fast --file-watch # Same as above but also runs the tests (when tests are edited)
#+END_SRC

* emacs flash
#+BEGIN_SRC sh -n :sps bash :async :results none
  og -flash
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  emacsclient -e "(progn (zoo/flash-mode-line \"green\" 0.7) (message \"SUCCESS\"))"
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  emacsclient -a "" -t -s /home/shane/.emacs.d/server/SPACEMACS -e "(mode-line-bell-flash)"
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  emacsclient -nta "" -s /home/shane/.emacs.d/server/DEFAULT_org -e "(mode-line-bell-flash)"
#+END_SRC

* What is important for a development environment
** Fast feedback loop

* TODO Make a way to specify arguments to a script when invoked from babel

* DONE Watch this
[[https://youtu.be/SY5PvZrJhLE][GPT-3: Language Models are Few-Shot Learners (Paper Explained) - YouTube]]

* TODO Watch this
$DUMP$NOTES/ws/facebook/technical-interview/1460597782.mp4

* TODO Make some key bindings
| kb    | f                           | m   |
|-------+-----------------------------+-----|
| =M-c= | copy org block under cursor | org |

=ivy-copy-selection=

* TODO Start asking Megan about her day
This is important. I have to be doing all of those things to qualify.

* TODO After solving a few problems with emacs =org-babel= I should

* TODO Make a binding for =org-mode= that simply obtains the embedded text as a string

* TODO Further refine my NLP skills
https://www.techinasia.com/jobs/d1eeb890-0055-49c9-9af2-d7fd97dffc04

e:$NOTES/ws/jobs/descriptions/nlp-engineer.org

* TODO Hack my scooter to unlock the top speed. I need an android phone for this
[[https://www.youtube.com/watch?v=cZKD9D2pGiA][How to EASY HACK the NINEBOT MAX with just your PHONE - XIAOFLASHER APP & SCOOTERHACKING.org - YouTube]]

* TODO Make an example code lookup system
It has to be fast.

Looks through example code. Cache locate /
find commands to make the lookup faster.

I should really make an emacs / docker app for
this, or at least an emacs mode.

* TODO Make an article on exposition the languages I have made myself with babel and hugo

* TODO Do an article named =the exposition of haskell languages= with babel and hugo

* emacs
** org
#+BEGIN_SRC text -n :async :results verbatim code
  org-babel-goto-named-src-block (C-c C-v g)

#+END_SRC
*** execute named block
#+BEGIN_SRC sh -n :sps bash :async :results none
  v +/"org-babel-execute-named-block" "$EMACSD/config/my-babel.el"
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (save-excursion
    (goto-char
     (org-babel-find-named-block
      (completing-read "Code Block: " (org-babel-src-block-names))))
    (org-babel-execute-src-block-maybe))
#+END_SRC

* Watch and definitely learn rash
[[https://www.youtube.com/watch?v=yXcwK3XNU3Y][(seventh RacketCon): William G Hatch -- Rash: Reckless Shell Programming in Racket - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=v0RuI1OxwL8][SpaceX Crew Dragon Demo-2 launch/landing and Elon Musk's announcement of Moon Base Alpha - YouTube]]

* PageRank
How popular are pages? It's based on how many
people and who links to your page, because
some pages linking to a site are more
significant.

* NLP
[[https://www.youtube.com/watch?v=sZdIybqppqQ][BERT NLP Tutorial 2 -  IMDB Movies Sentiment Analysis using BERT & TensorFlow 2 | NLP BERT Tutorial - YouTube]]

* TODO Language Models are Few-Shot Learners
[[https://www.youtube.com/watch?v=SY5PvZrJhLE][GPT-3: Language Models are Few-Shot Learners (Paper Explained) - YouTube]]

* =space.com= has some EPIC video footage
https://www.space.com/spacex-demo-2-astronaut-launch-weather-concerns.html

* The world is going crazy
It's going to be absolutely essential to
understand programming languages in order to
make sense of it.

* The next general-purpose language I end up using, I will grow into

* I must go full-ball with my CICD and deployment stuff
I have learned the tools, now I must double down on it.

* Watch this
https://www.rebellionresearch.com/blog/nlp-expert-dima-korolev-sits-down-with-rebellionresearch-com-ceo-alexander

[[https://www.youtube.com/watch?v=Lb_Xeu_Vj7c][RebellionResearch.com CEO Alexander Fleiss Interviews NLP Expert Dima Korolev - YouTube]]

* Consider watching Preacher
https://www.imdb.com/title/tt5016504/

* Abstract Algebra
Continue watching these videos.

[[https://www.youtube.com/watch?v=MpKG6FmcIHk][Cycle Notation of Permutations - Abstract Algebra - YouTube]]

** Cycle notation of permutataions
[[https://youtu.be/MpKG6FmcIHk][Cycle Notation of Permutations - Abstract Algebra - YouTube]]

** Using a 1930 Teletype as a Linux Terminal
[[https://www.youtube.com/watch?v=2XLZ4Z8LpEE][Using a 1930 Teletype as a Linux Terminal - YouTube]]

* =systemd=
[[https://www.youtube.com/watch?v=s7LlUs5D9p4][Systemd-Nspawn is Chroot on Steroids - Lennart Poettering, Red Hat - YouTube]]

* I liked this
[[https://www.youtube.com/watch?v=Z0DAKaR16cY][The Pope's Astronomer - Sixty Symbols - YouTube]]

* HIL
** Battery Management Systems -- this is great to listen to
[[https://www.youtube.com/watch?v=mDAvo6bDp4s][Hardware-in-the-Loop Simulation for Battery Management Systems - YouTube]]

* Watch
Deliverance 1972.

* Watch this -- it's important
[[https://www.youtube.com/watch?v=N9RUqGYuGfw][JSON Parser 100% From Scratch in Haskell (only 111 lines) - YouTube]]

* Watch this video on Rust from Python perspective
[[https://www.youtube.com/watch?v=IYLf8lUqR40][Why would a python programmer learn rust when there are no jobs in it - YouTube]]
Read it.

#+BEGIN_SRC sh :async :results verbatim drawer
  readsubs "[[https://www.youtube.com/watch?v=IYLf8lUqR40][Why would a python programmer learn rust when there are no jobs in it - YouTube]]"
#+END_SRC

#+RESULTS:
:RESULTS:
okay

so this talk was originally a talk I gave for
HEPA can die

haven't updated the date and time that's
scientific computing data center manager
conference and I was telling them about rust
which was my latest experiments

and I've updated the talk a couple of times
since

but I obviously haven't updated the date

so let's get on my general opinion about
programming language is

is I want them to work with other programming
languages I really want them to interface with
C

I want them to have a really significant
advantage before I'm willing to invest in them

and um Python was a great leap forward for me
in terms of productivity

and that's why I fell in love with it

I need to be able to do a certain series of
tasks usually my jobs involve writing CLI
applications with a database having logging
processing Jason things like that

and I've tested all of these use cases before
I've presented anything about rust and rust

is really passed with flying colors so let's
jump back and say why do I like Python it's
really fast to write it's really quick to
debug and most applications don't need
performance and

so while it's 100 times slower than C roughly
it's usually fast enough and duck typing is
wonderful it was a revelation to me when I
came to Python first where things are like the
things that you expect them to be good enough
error handling

I really disliked C++ is our inheritance
models and stuff like that

and I thought pythons there was so much
cleaner and my god

the tooling has improved over the year

so I've been using Python since 2006 with
talks virtual end PI tests mock

really is a pleasure to to debug things into
PI it with Python and make things solid sadly
there are little corners

but anyway we'll jump forward

but Python you have some real compromises and
while pison is where I make my how I employ
myself it doesn't solve every problem that I
have one of the biggest compromises with
Python is the global interpreter lock which
means that when you do multi-threading you're
doing multi-threading because you need to do
multiple things concurrently you can't get a
performance increase by doing multi-threading
in Python so that is a major problem with
Python

and generally it's

performance is slow can't really use Python in
an embedded environment very easily although
there are variants of Python for embedded
environment

but that's another story

well please don't get confused by that one
memory usage swig these things have all caused
problems but we haven't got long to talk about
all these slides

so I'm not going to read everything

so how do we work around pythons limitations
if we're working in Python

well you can rewrite everything there it can
be very revolutionary or you can be
incremental and make native C bindings for the
performance critical areas ah yes and foreign
function calls from Python can be done

but it's kind of one of those problems

so I said see what makes me avoid C

well I find for me

I know that there are gurus out there

but I find development is really really slow
compared to Python I find debugging really
hard

I've I got to write C reasonably at one point
in my career a long time ago

and I've forgotten it all okay

not all of it but quite a lot of it

and now I just find it really hard work with
compiler errors don't have that many memory
management issues but sometimes the libraries
I worked with did and in terms of being
efficient with memory well I never quite got
the hang of that because I was more focused on
making sure that didn't get leaks so swings
and roundabouts and C++

well people told me this was gonna be a great
leap forward

i

pre date in my c++ time all the big advanced
things that happen in c++ 11 and c++ 17 that
made it a much better language I'm told by my
friends who were experts in C++

so my memories are and being slow debugging
being hard multi-threading being hard compiler
errors STL traces that go off the screen

oh it was suffering

and so I went back to see when I used to be a
C++ programmer under GCC

so why did I try rust

well I've been to the CCC conference in
Hamburg

last time it was here

and I've been to false gem and there was quite
a buzz around a lick sir and rust and elixir
was derived from Lang

and I'd already had a look at that and
realized it was a great programming language
but not really fitting all my use cases

and I wanted something bit more Universal
native and compiled with things I had a use
cases for

and I wanted to extend Python

and I wanted something to be as fast as C and
C++

but with need when needed

and I didn't want garbage collection because I
didn't want one garbage collector to fight
with another freeing of resources in Python
because I wanted it for embedding in other
languages

and I'd heard something about rust being

may be useful for multi-threading and to be
quite honest

I wanted to pick up another language

and I thought maybe something had happened in
the ten years since Python was invented

so there's some interesting design decisions
probably most important factor to understand
about rust as it was designed by Mozilla for
very much a practical purpose how can we make
our code more reliable and more safe and how
can we incrementally improve the product that
we have Firefox

I'm not a Firefox developer but that was their
use case and

so that was really interesting incrementally
changing to a new language that really stuck
in my mind of something special now zero
abstraction overhead philosophy

just likes C++

what that means is it's gonna run as fast as
we can

yeah

and it's your fault

if it doesn't run fast rather than pythons
fault or someone else's fault no big garbage
collector but a borrow checker now the word
borrowed check is going to come up a couple of
times in this talk

and I'm gonna try and not go into it for a few
seconds but please at the end if I haven't
explained enough

let's get on to that multi-threaded support
baked into the type system now that's linked
the burro check of stuff but long and short of
it

is you can be pretty fearless about writing
multi-threaded code because you get a type
error and it won't compile if it's not thread
safe now

that's pretty awesome variables are immutable
by default now

I know one person here is an inter functional
programming and this is just how he would like
the world to be and

once you sit there and work in a world where
variables are immutable by default you think
this is a major bug in C and a major bug in
C++

and you realize that for backwards
compatibility they can never fix it

and it's kind of sad

but life's like that we still use QWERTY
keyboards enumerated types with parameters now
this is all stolen from ml

and it's absolutely wonderful

and I'll show you an example later

but it's a very long word for saying
parameters can be put into enumerated types

so my first experience about rust well a lot
was unfamiliar to me they have a whole
ecosystem around them rust up a tool chain
updater that made me scream cargo which it's
an entire behavior made me scream

and I'll explain why very soon

and then they flat there and threw away object
orientation which made me initially go why the
hell are you reinventing the wheel

and then they said the getting rid of
exception handling as well

I wasn't unhappy with the idea of LLVM that
initially my prejudice was okay with

and then there's Baro checker stuff which
pretty quickly I felt was revolutionary but

other concerns came in just as I was getting
aware of these things about maturity of the
tools

so let's get on to these things and see why
they made me scream and why they continued to
make me a little bit upset

yeah

so rust up is the default way to get a rough
development environment and this goes
completely against the Debian policy basically
you don't download a script install it in the
system or what slide am i on

ok

I'm going a bit too slowly and it downloads
all of the build tools and plug them into your
directory off the web I wasn't really happy
for it

it's got good reasons for it it can now be
avoided for rusts stable on platforms like
Debian you've now done a great job of
packaging cargo packaging rafts they now exist

but if you want to work with cross compiling
if you want to work with rust nightly and
there are occasional reasons why you might
want to do both of those things then rust up
is the appropriate way to do it at the moment
as a rust developer

I hope Debian has another solution sometime in
the future cargo really scared me at first
this you sit there and you make a nice tamil
file which is a bit like a Windows any file
and you describe your build dependencies and
it downloads things from the web

and that was a bit scary to me at first

I was totally upset by this for reproducible
builds having a new package

is all of that the cargo team have changed
things a lot since I've been using it now

there's ven

during which means that you can download all
of these dependencies off the and store them
on disk so even if you're not working with
Debian's excellent packaging plans for rust
you can still have a repeatable build

it's very simple to use

and there's a build RS thing which is a pre
compete of rust code that you can compile
before the rest is compiled for doing things
like extending your applications automatically
generating C bindings all the sort of things
you might do with all the tools

sorry

I'm a bit out of date

I don't know C make so the rust compiler is
slow really really slow it makes C++ compiler
seem fast

this is this is not nice but the error message
is on the other hand they blow away the C++
compiler and any compiler I have ever seen in
my life

I can't say I've seen house Kelvin things like
that

but I've seen a little bit

and it sometimes even tells you the correct
solution to the problem that you're trying to
have

and it's fussy

it's so fussy the rough compiler the almost
always when you actually manage to fight with
the RUS compiler enough to make it compile

it almost always does what you expect first
time now that's kind of weird for me
particularly after having used Python and the
board checkers lovely

so I'm going to carry on running fast now so
rust error handling as I said no exceptions
basically there is a panic unrecoverable thing
and you can recover from it just like this
kind of corner cases I said you it was
unrecoverable

but I know more than oh did when I first wrote
these slides there are recoverable errors and
these are done with parameterised enumerated
types so you basically say that the output of
a function has a result type

and then you have the okay type and the error
type

and then you can use the error type and at
first when I started programming in rust my
code was growing because I was matching on
which types am I getting back from my function
and then handling the error

but if you keep the error type consistent
between the functions you can just pass it up
like an exception would up the stack by using
the question mark operator so that makes the
language really quite succinctly breeze like
error chain is starting to be deprecated so
what oh

why is rust

not quite oo

well it's almost oo

it doesn't support inheritance

they don't have methods directly applied to
objects in the same sort of syntax

goes very very similar and I'll show an
example in the next slide

and we have the concept of traits which are a
bit like interfaces in Java or polymorphic
behavior in arrow and I've yet to see no
downside

and I'll just show you an example of the code
on the next page very very quickly

so here we have a structure very much like a
see structure here

we have a oh sorry

yes

so and here we have a function that's
converting point to string that said that
exists and here is an implementation of points
methods

and there's a two string thing it's really

you don't actually need the line on line seven

so here's an example of a hash function being
implemented for two different types and this
shows the strength of using traits rather than
arrow because here we are implementing hash
for bool

yes

but we don't control the bull type

so we can implement methods

implement methods of traits implement traits
for objects we don't control

and that means you have some flexibility when
you're working with external libraries that
you couldn't get with

oh oh I think it's rather nice

and here's another example of just a really
cool library using some macros to decorate a
structure

and that's all you need to do to make
something serializable and be serializable in
rust using the beautiful surgery library which
goes very fast and is great because it gives
you full type checking which you also get with
rust

okay

I've really got hurry because I'm running out
of time

and I've got far too much content here

the burrow check are basically the concept is
only one thing to know in the own memory at
any one time to change things and multiple
readers can happen at the same time to get
around this with multi-threading you then have
a reference a reference count action and in
here at that with a lock type so you can get a
mutable access to the reference and when the
lock goes out of scope

it's automatically unlocked

so it becomes very easy to share blocks of
memory between different rust threads

but you've still probably better off using the
communication via messaging between threads
for most things because it's safer and you're
less likely to get into deadlocks but

the whole consequence of this is that not only
do we get out of the type system thread safety

but we also get something like garbage
collection

but without the periodic stopping of garbage
collection we get something quite real-time
there

so if that is really rather wonderful

and Apple's going to steal the idea and put
into Swift very soon

I've heard ok

this is just a random example of my original
use case for why I wanted to sit there and
play with a more low-level language like C or
C++ or rust we can very easily embed rust into
Python

I've had I've got played with this quite some
depth

it's a little bit too naive for me to sit
there

sorry a bit too immature for me to sit there
and say it's properly production you do need
to work with rust nightly this is not readable
on these slides I decided there was no point
me even trying to make it readable

but it gives you an idea of how little code is
needed to make a word search in from the word
search example on the main

the main PI o 3 git repository

it's really really trivial to import things
I've extended this example and played around
with Sergey for serializing and deserializing
to make some benchmarks against Python and
rust

but I want to go a little bit further before I
release the figures

but I sit there and say the rust is so much
faster so rust issues I've found this is
probably the most valuable bit of the talk
because people don't often tell you things
that they don't like so it's only implemented
with LLVM

so it's not 100% self-supporting language

I think that's a really important failing of
rust actually

but I can totally see why it's happened from
an engineering pragmatic perspective

there's no stables see ABI you can export C
trivially by just decorating method and
functions and types

it's really easy

but you can

but then you're using the C API

it's like C++ is not stable and rust is not
easy to learn it's nowhere near as easy to
learn as Python

but if you're familiar with

Cu C++

Pascal

those sort of languages Delfy anything the way
you've been using raw memory ax management
yourself

it won't seem that different from what you
have learnt as best practice it kind of
enforces best practice and that's what the
burrow checker does and it sometimes hurts you
in ways that you didn't realize and

you go

oh my god I've been making this mistake in C
all my life

well that's how I felt about the Burrow
checker

I think it's much harder if you grew up with
JavaScript by default cargo downloads from the
internet you have to work a little bit to stop
it doing that

and async IO is a weak point in rust

it's only the past year that there's been a
story for async IO

so this is where we don't do blocking requests
using the old traditional C API from the 70s

we start modernizing ourselves and using the
1980s api's of the UNIX kernel and that's only
happening now some things still require us
nightly when I first started playing with rust
it was nearly everything and incremental
builds

reach stable around about the time I gave
first gave this talk meta programming tools
and some of the features of macros haven't
been fully standardized out by the rough
standardization groups and so some of these
things have been left in rust nightly for a
quite a long time

and I've found whenever I've wrapped C code

I have to use the unsafe command and when ever
I use the unsafe command

you know

I said the compiler was absolutely lovely soon
as you put the unsafe keyword

and you wrap the code suddenly all of the

I think you actually meant to do this

and it being right goes away

it just says era

yes you're wrong so it does encourage you not
to use the unsafe keyword too much anyway so
from Python person's perspective

what hurt probably most was the semicolon
thing so functions just returning because you
didn't put a semicolon at the end and this
then not matching the function signature

and then we're getting an interesting type
error and python mocking is so nice

and it's just not as easy in rust

you don't get the ability to monkey patch a
function for the purpose of testing

and I do miss heissen sometimes with rust and
rust is a little bit more verbose anyway so
long in summary rust is fast

the code nearly always does exactly what you
expected the first time you run it

and you've successfully fought the compiler it
has great libraries to get things done and

the quality of code going into such an
immature language is amazingly high arc pass
is about the third evolution in Python and
clap the command line processing library in
rust is just way ahead and lots of things like
that directly inspired from C++ and Python
libraries all over the place

it really fast executables

you are

I guess a parametrized enumerated types are
probably my favorite thing about rust

and that's totally stolen from ml

the bourchek is a great compromise last things
I met will sit there and say is rust

is really new 2015

may the 15th was the 1.0 release

but it's been very popular

it's got a huge flow following on Stack
Overflow and while I hear from C++ devs that
C++ 17 has most of the features of rust pi

I would say rust is much easier to get your
head around and you don't have to learn all
things that existed before C++ 17 to learn the
language

and it's really yet to disappoint me here

are some references in the slide here are some
big companies what they're doing

I sat there and talked for too long and
probably run over time

so thanks do I have time for questions so one
or two quick questions

what I have a question

so what's the time frame for the releases is
that every three months is a

whenever they're ready or every six weeks

every six weeks

okay

yeah

but that's really quite small incremental
releases

any other questions [Applause]
:END:

* [#A] Great talk. Also touches on GPT-2
[[https://www.youtube.com/watch?v=MiiWzJE0fEA]["Probabilistic scripts for automating common-sense tasks" by Alexander Lew - YouTube]]

Cleaning Big Data: Most Time-Consuming, Least
Enjoyable Data Science Task, Survey Says.

* TLA+ elasticsearch
[[https://www.youtube.com/watch?v=qYDcbcOVurc][Using TLA+ for fun and profit in the development of Elasticsearch - Yannick Welsch - YouTube]]

#+BEGIN_SRC sh :async :results verbatim drawer
  readsubs "[[https://www.youtube.com/watch?v=qYDcbcOVurc][Using TLA+ for fun and profit in the development of Elasticsearch - Yannick Welsch - YouTube]]"
#+END_SRC

#+RESULTS:
:RESULTS:
so hi my name is yannick I work at elastic
company behind the open-source product called
elastic search

I'm here today to tell you about our various
uses of chilli plus in the development of this
product so elastic search is a distributed
search analytics engine it was initially
released by Shabana in as a multi-purpose
search engine that allows you to search any
kind of data it is based on Apache leucine
which is an IR library written in Java created
by decoding 20 years ago and still undergoing
active and innovative development today
elastic search is typically used for low kanna
lytx full-text search operational and security
intelligence business analytics metrics use
case and

more so if you go and stack overflow or if you
search on github on Wikipedia you're using
elastic search if you have taken an uber
yesterday from the airport to hotel or if
you're feeling lonely tonight and you're
looking for a date on tinder it's all powered
by elastic search

so I'm going to share pick a few key parts of
the architecture here so that I can read later
them later on in our telly plus story and

in contrast to typical talks about elastic
search I'm not going to focus so much on the
such aspects on the system

but more it's distributed architecture data
replication elastic search is based on a so
called partitioning or sharding model which
allows so which lost cluster to scale
horizontally so collection a logical
collection of data which in elastic search is
called an index is split into so-called charts
and these charts can then be allocated to
different machines karenge the index can then
be done by these machines in parallel charts
also replicated so we create additional copies
of these charts and replicas allow
distributing reads so you can just pick any of
the copies for reading as well as give you
full tolerance if one of the notes goes down

there's another copy available on one of the
other notes in elastic search

the number of shots is fixed adding X creation
timer as the number of replicas is dynamically
adjustable data replication happens at the per
shot level so for each shot it's completely
independent and we finish shot is also highly
concurrent one of the short cop is called the
primary so that's your main copy of the data
and all other copies are called replicas and
varieties all ways first go to the primary and
are then in parallel replicated to all
replicas

and he's already all the basics for data
replication now the cluster level we have our
clustering a cluster coordination a metadata
application layer

so the metadata determines which illnesses are
part of the clusters what are the logical
collections and also what their schema is

it also contains information about which shard
copies are located to which nodes so
essentially what we see here in this picture
and also contains information of the sub but

the subset of short copies are that are in
sync so those are the copies that contain the
most recent rights and only those can become
primaries now all this information is captured
in an object that's called the cluster state
and this object is shared by and available on
all nodes in the cluster this allows every
node now in the cluster to smartly route
requests as well as coordinate searches given
a Dinos for the different pieces of the data
reside the data application layer now which
typically runs with two short copies relies on
this meta data replication layer for
correctness so to identify the in sync shard
copies

but otherwise the two are pretty independent
so to summarize we have this metadata
replication layer

it's low throughput involves all nodes in the
cluster

and it only comes into play when you update
your schema or when you're not no drops out of
the cluster and you need to relocate your
short copy to a different node and on the
other hand you have the data application layer
that when it's high throughput and it's far
more targeted only to those nodes that hold a
copy of the specific shot so if this
architecture in mind now let's dive into our
story and how we came to use tle plus so
before I joined elastic I was working in the
company that from a very early point on
started to run very large elastic search
clusters so in with version 1.3 which was
released in 2014 we were running a 700 node
cluster destroying more than a petabyte of
data and while it was stunning to see elastic
scales

so well there were a number of unique
challenges with that

so there were situations where elastic search
could lose data both caused by issues at the
metadata as well as data replication layer
however at that level of scale storing the
data in a secondary system for safety purposes
I suppose very costly as well as impractical
and so as more users building these clusters
with more and more demanding use cases the
resiliency fault-tolerant as well as scaling
requirements kept increasing and to address
these concerns the elasticsearch team set out
on a multi-year journey to improve the
robustness and scalability of the system our
first focus was on the data application they
are which under some situations was losing
data it did not love for quickly coverage my
notes were crashing

and it wasn't flexible enough to build newer
and vision features such as cross cluster
replication out of this

was born a sequence number project so an
important internal project at elastic to
rework the date of application layer to
uniquely identify each right operation system
using a so called sequence number and also to
generally improve the robustness of the system
we started off with an informal specification
essentially a deck of PowerPoint slides from
which we derived our implementation efforts up
to that point we have been mostly relying our
infrastructure to put our code through a
series of players monkey-style tests
simulating various failures and then checking
whether nothing went wrong however we were
also looking at ways to complement this with
formal methods to this end at Reaper
Peterborough caught our attention

so Peter head of the distributed systems
Research Group at UC Santa Cruz

he was looking for collaboration on just this
topic and after short exchange of tweets and
if you follow up calls between Peter and Boas
was at the time leading distributed group and
elastic

it was decided koala a PhD student in Peters
group would join the team at elastic for a few
months over the summer to create a formula
model and to validate it using Mali a research
prototype developed by Peters group to find
bugs in distribute in specifications of
distributed systems so the model checker works
of a specification written in Daedelus which
is an extension of data lock and it outputs
are called Lambert diagrams or lineage graphs
to visualize any problematic traces that it
finds and while this former model now did not
uncover any issues you know informal
specification Gamal had validated at the end
of the summer some of the known issues with
our existing old model our replication system
providing evidence that such a formal approach
we would prune however the main issue we had
with that specific formal model was that it
was already very complex and difficult to
understand even though it wasn't covering the
fully informed specification and that this was
a research prototype double to some
limitations in the tooling so as a follow-up
investigated other techniques and tools to
model this and so at some point stumbled upon
T le plus and immediately liked it mainly
because it was great augmentation and also
excellent tooling so within a week's time

I created the basic specification of our data
replication model which we then refined over
the following months and which I use as basis
to discuss the finer points of the algorithm
with Boas were created in formal specification
ultimately this resulted in a tiller plus
model of our new data application

arisen it's been powering all the Asics
searched versions since version 6 which was
released in November 2017 so this new data
replication algorithm it identifies each
operation using a sequence number

gives us quickly coverage and has also served
as a foundation to build newer features such
as cross cluster replication which was also
released end of last year so a specification
contains 860 lines of commented Thiele plus
code and it checks the safety properties such
that even in the presence of Network petitions
no crashes that all acknowledge rights are
properly stored on audience in short copies
and that audience copies are properly aligned
once the system is again in stable state so
this was our first specification a Tier II +
specification for elasticsearch our next use
of T le plus was in a much different setting

so we studied two bugs in a hundy concurrent
component at a short level fight fixing these
bugs was tricky given how complex the
implementation already was and so in many
discussions around his bug fixes and various
safety arguments for them and so

at some point we decided to take a step back
and make use of T le bus before proceeding
with our bug fix

so he took the existing Java implementation we
mapped it onto a classical specification

then use the TLC model shaker to validate
presence of these two bucks

this also led us to discover an additional
unknown bug implementation which we only later
observed in the wild a similar more recent
example of this is where our testing
infrastructure uncovered the back which only
surfaced after running for months on CI and
again took the same approach took the Java
based implementation this time a pollutant
utila + specification and the TLC mole check
again was able to find about within seconds so
in all these cases of bug fixes were always
first prototyped in our t le plus or plus Co
specification and then validate with the model
checker before proceeding of putting a bug fix
into our production system this more recent
use of T APIs was also a great learning
opportunity for somebody new and the team to
extract model from the code and yet get
familiar with T le plus the last modified use
of T le plus I would like to showcase is one
where we've taken formal design

first approach

so we designed a new cluster coordination
subsystem

so the thing that's responsible for clustering
as well as metadata replication and we
validated it with T le plus before starting
off our implementation efforts the cluster
Coordination sub system works by selecting one
of the nodes in the cluster to be the master
and this elected master now has to make sure
that all the nodes in the cluster receive
updates to the cluster state this is harder
than it might first sound because distributed
systems like elasticsearch must be prepared to
deal with many strange situations so nodes can
sometimes run slowly they can experience long
garbage collection because it's written in
Java they can be power outage write networks
also unreliable unreliable you can have not
partitions you can have

periods of high latency packet loss messages
might arrive in different order in which they
were sent and all these kind of things can
happen all at once in canny kind of strange
combinations nevertheless the system must make
sure that every node has a somewhat consistent
view of this cluster state additionally
elasticsearch must be resilient to the
failures of individual nodes and achieves this
by requiring cluster state updates you only be
successful after they've been accepted by a
quorum of nodes

so chrome is a carefully chosen subset of the
nodes in the cluster and the advantage of only
requiring a quorum of nodes to successful
respond is then that individual nodes can fail
without impacting the overall clusters
availability chromis must also be carefully
chosen so that the cluster cannot elect two
independent masters that are making
inconsistent decisions as that again can lead
to data loss elastic search version 6 and
earlier use the cluster coordination subsystem
which was called send discovery this subsystem
successive powers clusters both small and
large however have some issues with it that we
wanted to address first of all the quorum size
was defined using a user configurable setting
which was called minimum master nodes and was
therefore vitally important to correctly
configure this on every node in the cluster
and to adapt it as you kept adding or removing
certain types of nodes failing to do so
brought risk of a so called split-brain
situations having two independent masters
making inconsistent decisions ultimately
leading to data loss then discovery had also a
rare failure mode we honor certain situations
it could lose classes it updates and that was
something it was far more fundamental to the
actual algorithm being used

so for last accept seven we completely
redesigned this cluster coordination subsystem
and and also completely implemented it first
of all we got rid of the minimum master node
setting in favor of having elastic search
itself determine which nodes can form a quorum
and this makes a growing n clusters much safer
and easier as the the system can now
automatically and safely adapt the chromes as
need be if you're familiar with the theory of
distributed systems then you may recognize
cluster coordination as an example of a
problem that can be solved using distributed
consensus implementing distributed consensus
was not as widely understood when development
of elastic search started we'll say much has
changed since then

so we're designing this cluster coordination
subsystem give us the opportunity to follow a
theoretical models much more closely

so if you're familiar with distributed
consensus algorithm such as paxos raft you
start replication zap that much of what we've
done will look very familiar to you note was
he hears that we separated out the safety bits
from the liveness bits of the algorithm

and so our le+ specification only covers the
safety bits it models a single rewritable
register which contains the cluster state and
besides typical parts of her class of a core
consensus algorithm it additionally also
models dynamically configuration just about
adapting the chromes as you're growing or
shrinking a cluster as well as cluster
bootstrapping which is about putting the
initial chromes into place and all of these
are highly important as they contribute to the
safety of the systems making sure that it that
he correctly behaves under all adverse
conditions now the T Laplace specification on
which we checked our safety properties

had we mapped on to a Java class and as you
can see in the snippets on the slide here our
Java implementation on the right-hand side
looks very similar to the T le plus code on
the left-hand side

so if you look at an example here on the left
hand side in the tio specification we require
for this word to trigger

we try to be in a state where we have won the
election and this is mapped onto a check in
our Java implementation which says if election
one is false we throw an exception

similarly our spec requires for the terms to
be matching with addition which is again
mapped on to check in on limitation excessive
terminals are not matching we throw an
exception

and so you can for every sub expression on the
left-hand side you can find a statement on the
right-hand side

and so it's pretty much very straightforward
translation from t le plus code to Java
implementation

so one important thing that we made in our
implementation is to make sure that every
every whenever elasticsearch accesses the
relevant state in implementation it is all
that access is threaded through this java
class essentially making sure that our system
is correct by design or it also means that the
specifications not written at the different
level of abstraction as for example let's
alembert has done for the pack suspect so this
is much closer to how you would code it up
then a high-level descriptive spec of
consensus algorithm finally given that we did
not envision to see many changes in this
implementation we just opted here for manual
translation from T le plus code to Java and
you see the sizes of ta plus specification as
well as the Java code tree

it's pretty low

so it's pretty easy to review that these two
are aligned right so until a-plus
specification and the Java implementation I
have shown us what's been powering all
elasticsearch versions since version 7 which
was released in April this year and if you
want to learn a bit more about that specific
use case there's a detailed blog post about
this I would also like to present a few
lessons learned here

so I showcase various use of clearly plus
classical as well as the TLC modern checker
which all have extensively contributed towards
creating a much safer and resilient system
we've used different levels of abstraction for
specification so sometimes closer to the code
and sometimes more of these high-level
descriptive specs so you should should use
whatever feels right for your specific purpose
in particular think long and hard what should
be nice back as well as what should not be in
the spec dealing with state space explosion is
always tricky and I think we use many tricks
in the book there like symmetry sets state
constraints we try to make sure that we cover
an interesting enough part of the state space
while also making sure that our model check
around terminates within a day or so

in particular we've made use of coverage
information to influence our state constraints
but in general would like to be a bit more
methodical about this

currently this relies very much on having like
a good understanding of the problem domain for
example for distribute consensus algorithm is
often said that using a model checker
configuration with three nodes helps you find
more of the box well in some cases you might
require five notes to find some of the more
special conditions in our case for our today
plus model given that we are dynamically
configuration most of our box we found
actually only with two nodes

so it's all very context dependent

yeah

the t le plus two box is very convenient used
and we're very happy with it and always super
excited

whenever there's new improvements there

whether it's additional coverage information
or whether it's about visualizing traces

so we had some minor issues with putting
teleclass specification on the version control
figuring out which files to exclude separating
source code from generated code separating
specification for model checker configuration
separating

and then also some of the issues with model
checker configurations containing machine
local information such as IP addresses so
separating these things a bit more clearly I
think might help on the collaborative aspect
tht model checker

well it's great at finding bugs and using a
model checking set of formal proofs which we
actually also work with you for the cluster
Coordination project

gave us it give us us at least four current
projects the right trade-off between effort
spend on validating specs and the benefits we
get from them

so what's the future holding for us while we
would like to see in which other places we can
make use of TL

a plus I so far it's been exclusively used by
the distributed sub team at elastic the main
reason

probably is that less exist that ela plus is
such a natural fit for distributed and
concurrent issues

so if you'd like to see some of these TLS
Chile Plus specification that I talked about
for itself all of them are publicly available
on our github repository just as well as the
as the the code of the system of the of the
system that we actually modeling

so if you want to learn more about the specs
as well as the relevant production code please
do have a look thank you [Applause] great
questions when you've been onboarding new new
developers and clearly some of your specs are
quite large and if they're new to TL

a plus or plus Cal or whatever the specs
written in have has been useful for them to
start out with smaller problems that aren't
necessarily even part of the spec proper or do
you usually just have them jump in in a
smaller scope to aspect or how they've been
approaching alright

so the most recent years of Chile plus was
actually one way we we had a new developer

just well we found it back in in some other
systems through CI testing

and then yeah we asked it was actually
developed himself

they said well maybe might be a good idea to
model this using TI

plus

and so it was for him a great learning
opportunity to just do that essentially
extract model from the code because working
with J plus is not only about T lackluster
language

but it's also about how do I create a proper
model

right

what's a good specification for for a certain
part of the system

and I think that was perhaps the biggest
learning opportunity they're going ahead

and and and and while extracting and figuring
out what the model is from the existing code

and so that might be a good good first steps

and she taking something that's already there
and then properly conceptualizing it into in
terms of a le class specification and then
using playing with the model checker to to to
either figure out existing box or to rule out
such box and that area of the code hadn't been
inspected before so

it was all green

yes

yes

yes

but it was

like it was let's say it was a very targeted
thing

so it was

it was in this case

it was it related to the atomic assistance of
our cluster state

and so it was really at the storage layer

like it was

I don't know it made five hundred lines of
code class or something like that

and the core algorithm was much smaller

it was something I think the actual tier a
plasma before that must maybe to two pages

or so so it was pretty contained

hi you said you modeled by Venus properties in
a separate layer on top

could you talk just a tiny bit about that

oh so we did not model likeness properties
using GLA

plus so we check licensed properties
extensively using testing

okay

yeah

I can go more to that

but it's our different subject

maybe we take that offline next one

otherwise I have one

so you said you specified some bits of your
system and plus color and other parts and ta+

what's the story there

it's essentially a developer's preference

so I prefer to le

plus

and so when I created the initial spec when
we've till a plus

then well I think for whenever your reverse
modeling existing code in some places might be
more convenient to do it plus girl especially
if you have very complex flows

but

yeah

I think often times I would say oftentimes
it's mostly just about personal preference

mm-hm

and is it so that newbies to TL A+ prefer to
start with plus Kyle who is your company

no

I don't think so

actually I found that at least in our company
that people find or many people find totally
Plus easier to read it's a simpler simpler
model simple semantics or very simple
semantics whereas if you use plus girl you
have these additional like this additional
layer of complexity on top of it

and you still need to at least have a decent
understanding of of off of ta+

anyway

so it's just adding things on top of okay more
questions I will be interested in knowing like
what's the Andorian see what's the general
preference for four plus Gulliver's is still a
plus maybe who is used mostly plus cow for
example quick show of hands who uses Pascal

regularly okay who uses t le plus regularly
who use this alloy

okay

well with that then thanks again thank you
[Applause]
:END:

** full tolerance
#+BEGIN_SRC sh :async :results verbatim drawer
  readsubs "+/full tolerance" "[[https://www.youtube.com/watch?v=qYDcbcOVurc][Using TLA+ for fun and profit in the development of Elasticsearch - Yannick Welsch - YouTube]]"
#+END_SRC

* John Kitchen speaks
[[https://www.youtube.com/watch?v=31gwvApo8zg][2019-07-24: All Things Org-Mode - Multiple Speakers - YouTube]]

* How to make chatbot in tensorflow
[[https://www.youtube.com/watch?v=UYOPGtEGDl8&list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&index=3&][How to Build an Amazing contextual Chatbot using Tensorflow - Part 2 | NLP Concepts - YouTube]]

* Great podcast
https://lispcast.com/what-a-monoid-is-and-why-monoids-kick-monads-butt/

* Haskell
** forkio
#+BEGIN_SRC sh
  egr forkio haskell
#+END_SRC

** ivars + lvars
[[https://www.oreilly.com/library/view/mastering-haskell-programming/9781786465016/video4_5.html][Deterministic Communication Using IVars - Mastering Haskell Programming  Video ]]
[[https://www.oreilly.com/library/view/mastering-haskell-programming/9781786465016/video4_6.html][Deterministic Collaboration Using LVars - Mastering Haskell Programming  Video ]]

Programs based on IVars are deterministic

* GoogleTechTalks - Published on Mar 28, 2019
https://www.youtube.com/watch?v=cTN1Qar4HSw

https://github.com/google/haskell-trainings
$MYGIT/google/haskell-trainings

* Extremely good resource
https://www.youtube.com/user/Math4IQB/videos

* Excellent, amazing, lifechanging haskell course. I really have to watch this
[[https://youtu.be/gBWNKXuLZnU][Software Development With Haskell - EP04 - Querying JSON API with Wreq library - YouTube]]

* Learn to make graphql queries
I have to make searching graphql fun. How?
Try to fuzz the API.
Run many requests and then parse the results using generic text search.

#+BEGIN_SRC graphql
  # Type queries into this side of the screen, and you will 
  # see intelligent typeaheads aware of the current GraphQL type schema, 
  # live syntax, and validation errors highlighted within the text.

  # We'll get you started with a simple query showing your username!
  query {
    repository(owner: "codelingo", name:"codelingo") {
      pullRequests
    }
  }
#+END_SRC

* Maybe learn both purescript and lisp

* Tsoding - Solving magic squares for HaskellRank
[[https://www.youtube.com/watch?v=_uQCgss-aB4][Solving Magic Square using Functional Programming -- HaskellRank Ep.12 - YouTube]]

* Future of coding podcast
https://futureofcoding.org/episodes/030

* Watch this to get a really rouch idea of the DL process
[[https://www.youtube.com/watch?v=7Pz9UyRcA9w][AiFiddle Neural Network Editor- Beta Demo - YouTube]]

* What is the applicative
https://www.youtube.com/watch?v=RtYWKG_zZrM

* math
[[https://www.youtube.com/watch?v=jsYwFizhncE&t=112s][So why do colliding blocks compute pi? - YouTube]]

* litable -- On-the-fly evaluation/substitution of emacs lisp code
https://github.com/Fuco1/litable

* Watch the vid to learn how to use it
[[https://www.youtube.com/watch?v=mNO-vgq3Avg][On-the-fly evaluation of forms/code in Emacs! Update 2 - YouTube]]

* Looks very interesting
https://media.ccc.de/v/35c3-9851-conquering_large_numbers_at_the_lhc

* Glossary from youtube video
[[/home/shane/notes/watch/ne99laPUxN4/glossary.txt][ne99laPUxN4/glossary.txt]]

* Numberphile
[[https://www.youtube.com/watch?v=T46FTuHnbvY][Spheres and Code Words - Numberphile - YouTube]]

* The Simple Essence of Automatic Differentiation - Conal Elliott
https://www.youtube.com/watch?v=ne99laPUxN4

Won best paper at ICFP.

* Category theory
[[https://www.youtube.com/watch?v=gui_SE8rJUM]["Categories for the Working Hacker" by Philip Wadler - YouTube]]

* Functional Programming is Terrible
https://www.youtube.com/watch?v=hzf3hTUKk8U

** trampoline
https://youtu.be/hzf3hTUKk8U?t=366

* Sentdex
** [[https://www.youtube.com/watch?v=jjmwM92xwq0][Balancing RNN sequence data - Deep Learning w/ Python, TensorFlow and Keras p.10 - YouTube]]

* TF2.0 - TensorFlow 2.0 - TF two dot oh
[[https://www.youtube.com/watch?v=WTNH0tcscqo&t=156s][TensorFlow 2.0 Changes - YouTube]]

* Kindergarten Cop
http://storage.googleapis.com/sea-near%2FKindergarten.Cop.1990.720p.BluRay.x264-x0r.mkv

* ElasticSearch Query DSL
[[https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html][Query DSL | Elasticsearch Reference 6.4 | Elastic]]

** This is the DSL
#+BEGIN_SRC text
  GET /bank/_search
  {
    "query": { "match_all": {} }
  }
#+END_SRC

* Go
[[/home/shane/dump/home/shane/notes/ws/go/Go Programming-CF9S4QZuV30.mkv][go/Go Programming-CF9S4QZuV30.mkv]]

* This is an extremely good learning resources for computer science
[[https://www.khanacademy.org/computing/computer-science][Computer science | Computing |Khan Academy]]
[[https://www.khanacademy.org/computing/computer-science/informationtheory][Journey into information theory | Computer science |Khan Academy]]
[[https://www.khanacademy.org/computing/computer-science/informationtheory/moderninfotheory/v/compressioncodes][Compression codes (video) |Khan Academy]]

* This is probably worth watching
[[https://www.youtube.com/watch?v=lC5UWG5N8oY][C++Now 2017: Ryan Newton "Haskell taketh away: limiting side effects for parallel programming" - YouTube]]

* TODO [#A] This is extremely concise
[[https://www.youtube.com/watch?v=RDalzi7mhdY][Understanding parser combinators: a deep dive - Scott Wlaschin - YouTube]]

* hackett
[[https://youtu.be/g6UCeHiKodo?t=122][Alexis King - Hackett: a metaprogrammable Haskell - YouTube]]

* TODO [#A]
[[https://www.youtube.com/watch?v=3yfRJKA1BiQ][TensorFlow Tutorial #03-C Keras API - YouTube]]

[[https://www.youtube.com/results?search_query=bb84&page=&utm_source=opensearch][bb84 - YouTube]]

* Final Space - season 2
* [#C] I should watch more videos on programming languages

I probably wont get much time to actually do this. So I should do it when I feel like it.
I should concern myself more with ASTs though, rather than the languages themselves.
Need to understand the low-level information theory.

[[https://www.youtube.com/watch?v=90WRtrbRi0Y][Spring Tips: the Kotlin Programming Language - YouTube]]

** [#A] However, I do not care about learning all the languages. In order for me to be ultra-strong, I need to learn something like racket extremely well.
Not c++. That's a waste of time.
I need to learn things that make sense.

Create snippets and build a language. Memorise the function names and snippet acronyms.

Then create snippets for other languages.

*** However, as good as creating snippets and things is, ultimatley I should be building my own language and creating my own data structures and algorithms
Because of AI and NLP.

I have to be aiming to create and reverse-engineer and convert natural languages.

* TODO [#A]
[[https://www.youtube.com/watch?v=Or_yKiI3Ha4]["Let's Build a Hygienic Macro Expander" by Matthew Flatt - YouTube]]

* TODO [#A]
[[https://youtu.be/ORHFOnaEzPc?t=166][Ali Rahimi - NIPS 2017 Test-of-Time Award presentation - YouTube]]

* [#A] [[https://dev.tube/][DevTube - The best developer videos in one place]]

* [#A] Rather than setting up vimperator again, I should use particular sites in emacs
[[http://thepiratebay.se.net][Download music, movies, games, software! The Pirate Bay]]

I need to set up the search api thing in emacs.

* [#A] Find places to ask for questions
Every day I should have a set of questions which I try to answer.
By aksing questions.

I should also try to do github projects. This thing with the computer science school is good because these are things I can put on my blog.

* TODO Finish watching
** Take notes. Teach the best parts to the kids at DCBC.

[[https://www.youtube.com/watch?v=4ecC3jqHooc][Clojure Development Workflow with Spacemacs and Cider - YouTube]]

** [[https://www.youtube.com/watch?v=I28jFkpN5Zk][My GNU Emacs configuration for programming - YouTube]]

* [#A] Clojure
** [#A] 
[[https://www.youtube.com/watch?v=pbodL96HM28][Learning Clojure: Next Steps - Stuart Sierra - YouTube]]

** 
[[https://www.youtube.com/watch?v=rh5J4vacG98][Understanding Specter: Clojure's missing piece - YouTube]]

Watch this but only after I have learned the basics of clojure.
I need to learn those functions.

* Continue watching
[[https://www.youtube.com/watch?v=2V1FtfBDsLU][Effective Programs - 10 Years of Clojure - Rich Hickey - YouTube]]

* Watch more youtube videos (and write notes) about:
+ Machine learning algorithms
  + MLE
+ Natural language processing algorithms

* Consider watching this
[[https://www.youtube.com/watch?v=mty0RwkPmE8][The Next Five Years of ClojureScript - David Nolen - YouTube]]

* [[https://plus.google.com/collection/s568a][Data Structures & Algorithms - Google+]]
** [[https://www.youtube.com/watch?time_continue=2&v=1-Xoy5w5ydM][BitFunnel: Revisiting Signatures for Search - YouTube]]

* Current
[[https://www.youtube.com/watch?v=eLl6_k_fZn4][Deep Learning Needs Clojure - Carin Meier - YouTube]]

* Programming languages
** Kotlin language is amazing. Finish watching this at some stage. I need to understand the language
[[https://www.youtube.com/watch?v=X1RVYt2QKQE][Introduction to Kotlin (Google I/O '17) - YouTube]]

* NLP
[[/home/shane/dump/home/shane/notes/ws/nlp-natural-language-processing/videos/nlp-videos][videos/nlp-videos]]

* Other
[[/home/shane/notes/read.org][notes/read.org]]

* Clojure
[[https://www.youtube.com/watch?v=O6g5C4jUCUc][Emacs and Clojure, a Lispy Love Affair - YouTube]]

+ Already got one great tip from here:
- inf-clojure