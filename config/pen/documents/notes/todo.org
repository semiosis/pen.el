* TODO Learn to make emacs shells, like dunnet

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  nvc rl emacs -batch -l dunnet
#+END_SRC

** It's useful to be able to do things in batch-mode

* DONE Make it so bash goes to executable files with M-.
** DONE Make the edit with pen-handle

** DISCARD make the edit in LSP
Say, when hovered over vimcat-basic in e:vimcat

j:lsp-find-locations
j:lsp--location-range

e:$EMACSD_BUILTIN/.cache/lsp/npm/bash-language-server/lib/node_modules/bash-language-server/out/util/shebang.js

** Hmm... It would be nice if there was an LSP server implemented in elisp

* DONE Fix vimcat - it's probably not as efficient. But it's simpler
e:vimcat

* TODO Make something to convert tablist to org-mode

** TODO Get the scripts
j:sh/nb/tsv2org-table

e:tsv2org-table
e:csv2org-table

* TODO Continue with purification

* TODO Keep the tablist margin on
- It's useful to distinguish between marked and region-selected

* TODO Make a bunch of new functions for querying and moving about a tabulated-list-modue buffer
- emacs-like functions
  - Query
  - Move about
- Copy
- Delete

* TODO Also have some kind of symbol indicating tablist marks and region marks

* TODO Look into this
- px:eldoc-overlay
- px:tablist-filter

* TODO Make it so I can copy the sheet as data

* TODO Make lsp ui doc work with hscroll
It needs to factor in the scroll to display.

* TODO Definitely make new tools for navigating codebases
- annotate source code
  - I definitely need more buffer annotation stuff in emcas

* TODO Make functions which remove text from the start or end of a string and move the properties
Test on:

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (etv header-line-format)
#+END_SRC

Say, in a tabulated list.

** TODO Make a function that moves the text properties of a string

* TODO Make j:tabulated-list-init-header calculate the column headers to draw
- based on the window hscroll offset.

So that the correct column headers are drawn.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (s-right (- (length s) (window-hscroll)) s)
#+END_SRC

* TODO Just completely disable this for the time being
e:/root/.pen/git/config

I'm very sick of slow git diffs.

* DONE Make it so mx:describe-package doesn't show duplicates

j:describe-package

* TODO Continue to work on
** TODO supervisor-mode
- I can work on this one without internet
** TODO emacs sql database keystore
** TODO get a csv querying sql interpreter utility
** TODO learn and automate a TUI database querying tool
** TODO continue working on a filesystem based on ahungry's dog pics fs
** DONE Remove unicode borders from ranger
e:/root/repos/ranger/ranger/ranger/colorschemes/solarized.py
** TODO Make it so the entire current cell has a background colour
- Or that tabulated-list-mode has better syntax highlighting (so I can discern the start of the column)

mx:list-timers

** DONE Make sure tablist is working well
- e:/root/.emacs.d/host/pen.el/src/pen-tablist.el

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sp +/"if 'outline' in border_types:" "$MYGIT/ranger/ranger/ranger/gui/widgets/view_miller.py"
#+END_SRC

Automate this patch application:

e:/root/.emacs.d/host/pen.el/config/ranger/patches/asciiborders.diff

** TODO Get j:arp-details from host

** Make a project plan and work towards it
It might be nice to be able to plan out projects and work towards them, and make reports.

* TODO Add sixel to pen.yaml

* DONE Work out how to configure yazi
Or make it ascii-only.

* TODO Figure out how to make major/minor mode left and middle -click menus in the modeline

** This is what added the manage minor modes menu item to the left-click menu of minor modes

e:/root/.emacs.d/elpa/manage-minor-mode-20210108.1832/manage-minor-mode.el

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (defadvice popup-menu (before manage-minor-mode-add-for-popup-menu disable)
    "Advice `popup-menu'."
    (ad-set-arg 0 (append (ad-get-arg 0)
                          '((manage-minor-mode
                             menu-item "Manage minor modes"
                             (lambda () (interactive) (manage-minor-mode)))))))

  (defadvice minor-mode-menu-from-indicator (around manage-minor-mode-add-mode-line-menu activate)
    "Advice for `minor-mode-menu-from-indicator'."
    (ad-enable-advice 'popup-menu 'before 'manage-minor-mode-add-for-popup-menu)
    (ad-activate 'popup-menu)
    ad-do-it
    (ad-disable-advice 'popup-menu 'before 'manage-minor-mode-add-for-popup-menu)
    (ad-activate 'popup-menu))
#+END_SRC

** Surely there is a way, though to do it per-mode
Hmm... only if there is a plugin for it.
Otherwise, I could add menus in this way that manage-minor-mode does.

* TODO Figure out how to dump the current visidata config

* Reinstall cscope
It's quite useful from time to time.

* TODO Work on c code navigation
e:/root/repos/Cubified/colorslide/colorslide.c

* TODO Make this work for C code
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key pen-map (kbd "M-l M-k m") 'pen-helm-imenu)
#+END_SRC

e:/root/repos/Cubified/colorslide/colorslide.c

* TODO Add a point
By grace you have been saved through faith and this is not of your own doing, it is the gift of God.

If someone was living in Egypt and was given daily food on the basis that they would bow to
an idol once every day, and then by faith they heeded God's call to leave Egypt and go
to a promised land of abundance without idolatry, and then in the wilderness
they began began getting very hungry and it looked like they might run out of food and die in the desert
but by faith they believed that God would supply their needs instead of pining over an idolatrous way of life,
then a 'good samaritan' bedouin brought them some food and they ate the food, then
the initial leaving of Egypt or the receiving of the food itself could both be described as that initial step of faith,
or the salvation having arrived but the "putting hand to the plough and not looking back" and the actual consumption of the food
could be described as the "working out of that salvation". And the 'process' of being saved is the salvation.

So if someone says that when they first believed in their heart the gospel they were saved based entirely on Jesus' finished works,
this is correct in a way, but Jesus has purchased the salvation which is a process.
If someone says that process was completed when they first believed, then what more is there to hope for?
What type of relationship is that where a person terminates their obedience after the first step of obedience?
They may as well say they have arrived in the promised land already.
They may as well say they have arrived in heaven already.
I just think they fullness of the gospel has a lot more too it.

* TODO Get the j:cmdl function
j:cmdl

* TODO Make a tablist supervisory mode

Perhaps I should just build up from basics? Nah.

Use j:defcmdmode.

e:/root/.emacs.d/host/pen.el/src/pen-supervisor-tablist.el

- I need supervision for bash scripts invocations first
- Then I should make supervision for emacs functions

So I'll need at least two supervisory systems.

* TODO Make for visidata
** TODO a way from fpvd to open the current sheet in another program such as vim
- A quick keybinding for it.

** An m-x fuzzyfinder for running commands

** A ZZ mapping for saving and quitting - also maybe a <M-;><M-;> like vim
It's <Alt+;><Alt+;> in visidata.

* TODO Consider getting this to go into a backlog of tasks so I can execute them at leisure
e:/root/.emacs.d/host/pen.el/scripts/emacs-remote-control/update-emacs-table

Rather than execute the edit straight away.

I need to make it so I can tweak the parameters again before executing.

** TODO Make something to go to the line it thinks the edit needs to be done at
But then allow the user to adjust.
Make a "semiautomated" "supervised" goto-line for this.
And have emacs state the objective.

* TODO Make something to edit a table but use the emacs TCP server to make the request asynchonous
Use a "promise"?
OK, so what I want is to be able to continue using emacs while waiting on fpvd to finish editing a table.
When the fpvd is done then the table should be updated inside org-mode.

* Perspective
- With regards to a terminal game
  - I really want a terminal game engine.

** It would be cool to make a game for learning things
- And then connecting it to, say, programming languages for learning functions

** Hmm. I think then that I should set up some tools for learning

*** Spaced repetition
- Use bookmarks?
- Tabularized somehow?
  - Perhaps design an interface like mx:calibredb
  - Or tabulated-list-mode
  - Or fpvd
    - Set up a streamlined process for getting data in and out of pfvd
    - I should be able to edit an emacs table with fpvd
      - Read into fpvd from emacs
      - Read into emacs from fpvd
- Make it methodical

j:org-table-to-lisp

| ColA | ColB        |
|------+-------------|
|   12 |             |
|   15 |             |
|   29 | k           |
|   30 |             |
| 2398 |             |

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (progn (org-table-import (umn "$TMPDIR/babel-g3fc6n/org-tableiYCdcD.tsv") nil) (org-table-insert-hline))
#+END_SRC

* I could make a game like Carmen Sandiego in the terminal

* Perspective
- I feel as though I didn't have a choice regarding the AI stuff
  - I was pushed into that as I was deprived of work, etc.

* TODO Today work on some kind of game?
- Or what?
- It might be better to chip away bit by bit on Pen.el supporting features.

** metagame game?
- But then I need some kind of metagame game to do as I am working.
- What's in a game though?

*** Statistics / achievements
Statistics on various things.
- Like "most recently used files", for example.
- Search engine information over my notes.
- A game between me and my spouse who I do not have because I feel as though the enemy has been depriving me of a spouse.

* TODO 
- Read Augustine

https://www.gutenberg.org/files/3296/3296-h/3296-h.htm

* TODO Consider donating to wikipedia/wikimedia

* TODO Make it so I can start a screen-2color tmux for black and white mode

I need to make it so tmux respects the TERM=screen-2color.
It seems to completely ignore it.
It does pass through the environment variable to the inner programs, but tmux is ignoring it itself.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  zrepl -E "TERM=screen-2color PEN_TERM=screen-2color TMUX= tmux -L YO new bash"
#+END_SRC

Remember:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"if test -n \"\$PENCONF_TERM\"; then" "$PENELD/scripts/setup-term.sh"
#+END_SRC

** Then make it so I can relaunch the current tmux session as a B&W session - this will be more difficult
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"reattach-bw) {" "$PENELD/scripts/pen-tm"
#+END_SRC

* TODO Make a caching mechanism for pen-rc-test so that pen-rc-test black_and_white is even faster

* TODO Maybe learn some chess plays
This seems like a lot of work though.

* TODO Figure out how to get =pen= (GUI pen.el) to start with a decent frame size
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (make-frame '((width . 40) (height . 30)))
#+END_SRC

* TODO Work on fixing all the bugs of the tmux b&w/colour toggling
I think I should have a database to keep track of window formats, or just do it all programmatically

* TODO Make a commands menu for tmux, based on emacs
- How featureful?
- How to invoke it?

** Options:
- Through a lean emacs and transient
- Through an fzf

* TODO Set up also org-roam
I think it'd be really cool to be able to do work outside.

* TODO Continue working on making B&W mode better

* TODO Fix GUI with b&w mode j:pen-disable-all-faces
GUI seems to crash.
Also, its font size is way too small.

** TODO Make it so the GUI starts at a certain width and height

** TODO make e:pen-disable-all-faces use the tcp-server instead
e:/root/.emacs.d/host/pen.el/scripts/container/pen-disable-all-faces

* TODO Make a handy data store for looking up key value pairs
Use this for remembering which of the tmux windows are from autofiles.
This way I can toggle b&w mode and colour mode a bit better.

It's going to be nice to not need to use the inverted terminal or the screen-2color terminal.
That's going to make it more convenient.
But I have to sort out more issues.

** Also, I should make it so I can easily toggle between screen-2color and screen-256color without closing the terminal.
- Also, I should make a tmux binding for toggling B&W mode

** Also, I should make more use of italic font in B&W mode and use gnome terminal
- And figure out how to get it in xterm

** Also make a faster pen-rc-test alternative for b&w mode, so I can use it in smaller scripts

** Also make everything bold in the terminal somehow

* TODO push a new docker image with syntax.vim
e:/root/.emacs.d/host/pen.el/config/syntax.vim
e:/root/syntax.vim

* TODO Make a B&W mode for vim syntax
Make it so a system/global variable is set for B&W-mode and that vim recognises this and runs BWSyntax

* Racket emacs
** TODO Figure out how to do comments like in clojure
i.e. like =(comment ...)=

** TODO Add some functions for browsing available functions and packages

** DONE Make it so I can start a REPL with the file loaded
e:/root/.emacs.d/host/pen.el/scripts/racket-scripts/advanced-macros.rkt

- Similar to what I can do with Clojure/Babashka

I want a properly functioning REPL.

Well, actually, I do have that.
It's j:racket-run
or j:pen-racket-run

* emacs
** TODO Upgrade helm
*** Then install helm-dictionaries

* TODO Look into how linux handles shebang
I want to be able to make adjustments to the system.

* TODO Find a way of concisely embedding arbitrary mixes of languages inside scripts

Perhaps I should actually be using =org-mode= based scripts.
It's not a bad idea.

I should make =babashka= scripts inside =org-mode=.

OK then. I should make an interpreter for =org-mode= files which executes them as if they are scripts.

Perhaps I should use "tangle".

Hmm. Or should use babel to do this?
I can chain org-mode blocks together with their results.
Is this what I want to do?

e:/root/.emacs.d/host/pen.el/scripts/org-scripts/hello-world.org

e:hello-world.org

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  hello-world.org
#+END_SRC

#+RESULTS:
#+begin_src text
#+end_src

* Learning Japanese
[[https://www.youtube.com/watch?v=U2q5GsB0swQ][youtube.com: Basic Sentence Structure in Japanese]]

** TODO Make a script to write the phoenetics of the Japanese out

e:/root/.emacs.d/host/pen.el/scripts/babashka/utils/hiragana_to_romanji.bb

- This coffee   is tasty
- このコーヒー  おいしいね

- This coffee   
- このコーヒー  きのう  スターバックスで かった

* TODO Do a bible study on rewards
** Serve without expecting anything in return
#+BEGIN_QUOTE
  *Luke 6:35-36* - But love your enemies, and do good, and lend, expecting nothing in return, and your reward will be great, and you will be sons of the Most High, for he is kind to the ungrateful and the evil. Be merciful, even as your Father is merciful. (ESV)
#+END_QUOTE

It's reward from God, but it's heavenly reward, not material reward.

The mindset is seek God, and God will reward you.
I.e. we seek God, treasuring and serving God, and we will be rewarded with heavenly reward.

** Keep in mind that Jesus was exalted to the highest place
#+BEGIN_QUOTE
  *Philippians 2:8-9* - And being found in human form, he humbled himself by becoming obedient to the point of death, even death on a cross. Therefore God has highly exalted him and bestowed on him the name that is above every name, (ESV)
#+END_QUOTE

* TODO Learn
** clojure monads
e:/volumes/home/shane/var/smulliga/source/git/khinsen/monads-in-clojure/PART1.md

** clojure transducers
https://clojure.org/reference/transducers
https://stackoverflow.com/questions/26317325/can-someone-explain-clojure-transducers-to-me-in-simple-terms

* 
#+BEGIN_QUOTE
  *Psalms 37:13-17* - but the Lord laughs at the wicked, for he sees that his day is coming. The wicked draw the sword and bend their bows to bring down the poor and needy, to slay those whose way is upright; their sword shall enter their own heart, and their bows shall be broken. Better is the little that the righteous has than the abundance of many wicked. For the arms of the wicked shall be broken, but the LORD upholds the righteous. (ESV)
#+END_QUOTE

* TODO Do a study on justification - Luke 18
https://www.biblegateway.com/passage/?search=Luke%2018&version=ESVUK

* TODO Upgrade Pen.el to Debian 12
# /root/.emacs.d/host/pen.el/scripts/dist-upgrade-buster-to-bookworm.sh

This is worth doing I think.

* DISCARD TODO Set up a new GLIBC
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  /root/unisonlanguage/unison/unison: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /root/unisonlanguage/unison/unison)
#+END_SRC

* TODO I think I should start a unison blog
That might actually be fun.
It might be fun to work on unison.

I could build my Bible-Mode scripts in Unison.
- Things like canonicalising Bible verse references.

* 
https://www.earlychristianwritings.com/diognetus.html

* TODO Make it somehow so I can write emacs lisp scripts without using emacsclient

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-emacsclient -a "" -t -s DEFAULT
#+END_SRC

** Rather, use the emacs TCP server
This way, the scripts I write are just elisp functions and don't require opening up new emacs instances.

* TODO Start making emacs lisp scripts first before going into another language like unison

* TODO Set up bubble mode, I guess
https://lmno.lol/alvaro/emacs-bubble-mode

* TODO Make use of this song
[[https://www.youtube.com/watch?v=TqUwcpu_v-k&list=RD1nSEW9hS0nY&index=2][youtube.com: Salvation Belongs To Our Lord]]

* TODO Consider editing my complaining out of the document
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sp +/"^But to say that pleading guilty is an admission that the full set of facts" "/volumes/home/shane/var/smulliga/source/git/semiosis/thoughts-on-theology/README.org"
#+END_SRC

* Consider getting this AA flashlight
https://www.wubenlight.com/blogs/news/introducing-the-wuben-x2-pro

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Wuben X2 pro
#+END_SRC

* TODO Add
[[https://youtube.com/watch?v=nqnYYt6kEN0&t=919][youtube.com: There Is No Baptism In The Holy Spirit Without Repentance | Bishop Macedo Meditation @time: 15 min 19 sec]]

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  I believe that this answers the
  questions of many people that say,
    "Oh, I've bent over backwards to receive the
    Holy Spirit and I still don't have Him.
    I've been the church for 30, 50 years, I'm
    in the church for 47 years and I still
    haven't received the Holy Spirit."

  Why? because you haven't repented. You have
  not repented. And if you are waiting to feel
  something in order to repent you never
  repent because it doesn't depend on a
  feeling.

   ...

   But they do not make the decision to
   abandon their old life. The same thing,
   you get married but you don't want to
   stop being single, you want to continue
   acting as though you are single. Of
   course your marriage won't work - it's a
   pretense, it's fake.
#+END_SRC

* Repentance along with receiving the Holy Spirit
https://youtu.be/nqnYYt6kEN0?t=697

* I should probably learn haskell anyway
I think most people would consider it too difficult and give up.
I'm quite sure that it's not really possible to learn haskell properly by leaning on a chatbot to write your code.

* TODO Make it so my terminal has a slightly bigger font

* TODO Try to help Crossant again

* TODO Rebuke the spirit of perversion
https://youtu.be/D196iw8GiM4?t=662

* TODO I should get a phone first
https://www.trademe.co.nz/a/jobs/hospitality-tourism/kitchen-staff/otago/dunedin/full-time/listing/4911266228

* TODO Take time to become proficient at a new skill / in a new area

* TODO Do more Haskell, I guess

* TODO Add these to Pen.el
** TODO Add this video
[[https://www.youtube.com/watch?v=D196iw8GiM4][youtube.com: Deliverance from the Jezebel spirit.]]

** TODO Add this transcript
[[https://www.youtube.com/watch?v=eEot02XA49E][youtube.com: Deliverance from the Kundalini spirit]]

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  readsubs "https://www.youtube.com/watch?v=eEot02XA49E"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sp +/"^+ Example :: \[\[https:\/\/www.youtube.com\/watch?v=eEot02XA49E\]\[youtube.com: Deliverance from the Kundalini spirit\]\]" "/volumes/home/shane/var/smulliga/source/git/semiosis/thoughts-on-theology/README.org"
#+END_SRC

* OK, so I do need to essentially move my current laptop onto the new laptop which has far less space
I may need to work from an external SSD.
I should definitely consider using the newest Ubuntu.

* TODO Set up Interlinear inside Pen.el
This is a good idea.

* TODO Get a new cheapest phone from the warehouse, or something like that

* TODO Apply for a job at Mitre 10 or something
https://www.trademe.co.nz/a/jobs/retail/retail-assistants/otago/dunedin/part-time/listing/4904638680

* TODO Continue to work on Pen.el

* TODO Continue to write my theology document, etc.

* TODO Consider getting into the CIEL common lisp distribution
e:/volumes/home/shane/var/smulliga/source/git/ciel-lang/CIEL

* TODO Remove all of the bad stuff and just leave the rest as a Bible Study
I want to be delivered.

* TODO Maybe make an API for accessing other Bible versions from the CLI

** TODO Set up AMP

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  amp Rev 12:9
#+END_SRC

* Dad recommended this
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  Ephesians 3
#+END_SRC

* TODO Remove anything about court from the faith and theology document?
Perhaps I should remove stuff.
Clean it out and turn it into a simple Bible study maybe?

* TODO Make it so interlinear links are added to the Faith and theology document

* TODO Add the NZ National Anthem to the faith and judgement document
https://www.google.com/search?client=firefox-b-d&q=nz+national+anthem+lyrics

* TODO Go into corrections tomorrow to let them know I lost my phone

* TODO Add tooltips - but it might be better if I manually make them - yeah do it more precisely

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  <script src="https://www.biblegateway.com/public/link-to-us/tooltips/bglinks.js" type="text/javascript"></script>
  <script type="text/javascript">
  BGLinks.version = "NKJV";
  BGLinks.linkVerses();
  </script>
#+END_SRC

* TODO Make it so I can do a cross-reference search, and then display all the verses, and have that all in emacs
I need the search function in Bible-mode to also work for cross-references.

* TODO Apply at this - it's awesome
https://www.seek.co.nz/job/78181224

Maybe I should drive there.

* TODO Look into LSV
https://www.logos.com/grow/bsm-literal-bible-translation/
https://read.lsvbible.com/

It would be nice to have LSV inside Pen.el.

* TODO Fix this in my faith and theology document
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  youtube.com: God Is Our Savior from What? 1 Timothy 1:1-2, Part 2 @time: 5 min 20 sec
      there is therefore now no

  condemnation for those who are in Christ Jesus this was the main problem
#+END_SRC

* Pen.el
** Bible-mode
*** TODO Figure out how to automate 'interlinear'

* 
#+BEGIN_QUOTE
  *I Peter 3:15* - but in your hearts regard Christ the Lord as holy, always being prepared to make a defense to anyone who asks you for a reason for the hope that is in you; (ESV)
#+END_QUOTE

* TODO Install and start usinc CIEL
http://ciel-lang.org/#/install

* TODO Get the LSV
https://www.lsvbible.com/

* TODO Make it so =eshell= makes buttons out of =ls= results

* TODO Learn CIEL
http://ciel-lang.org/

I think CIEL would be good.

* TODO Consider learning python
e:/volumes/home/shane/var/smulliga/source/git/Asabeneh/30-Days-Of-Python/

Ugh... It's a shame really.
I don't like it at all.
Why has it come to this?

* TODO Learn Ge`ez
https://en.wikipedia.org/wiki/Ge%CA%BDez

* TODO Apply for more jobs, I guess

* TODO Consider doing some kind of telecommunications course
https://github.com/aos/computer-networking-study/tree/master/projects

Be specific about what I want to learn about.

- Network protocols
- How the internet works

Why do I want to learn this?
It would compliment my linux skills to do what?

To be able to do stuff like life sciences.

I feel as though Jesus has abandonned me here on earth with incredible amounts of spiritual attack.

* TODO Make it so the hext preview updates an existing tmux pane
- /root/.emacs.d/host/pen.el/scripts/hext

* TODO Learn more regular or orthogonal skills, I guess
- Handwriting
- Finance management
- Cooking
- Planning

* TODO Consider learning a bit more about
- databases
- networks

These types of things should be OK as far as work goes.

** Tools to learn
- https://github.com/ugosan/logshark
- https://www.mitmproxy.org/
- https://github.com/gcla/termshark
- https://github.com/mathaou/termdbms

c++ development:
- https://github.com/jart/blink

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd /volumes/home/shane/var/smulliga/source/git/jart/blink
  ./configure
  make -j4
  make install
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "$MYGIT_HOST/jart/blink"; nvt blinkenlights third_party/cosmo/tinyhello.elf
#+END_SRC

* TODO Add broot-grep to emacs
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/volumes/home/shane/notes/ws"; broot-grep "/\.org/&c/TracMap" | v
#+END_SRC

* TODO Use pen-aatr as I need a field separator
e:pen-aatr

* TODO Make broot do grep output
=broot= actually runs fast enough to make the fuzzy finder work.

Is this reliable though? Not really. =broot= also only prints out what is actually visible on the terminal screen.
That's pretty awful.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/volumes/home/shane/notes/ws/jobs"; ( echo -n " "; pwd; ( unbuffer br --color no -c "/\.org/&c/TracMap pt" | strip-ansi | sed 1d | erase-trailing-whitespace ) ) | pavs
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/volumes/home/shane/notes/ws/jobs"; broot-grep "/\.org/&c/TracMap"
#+END_SRC

This makes it export better:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/volumes/home/shane/notes/ws"; ( echo -n " "; pwd; ( unbuffer br --height 1000 --color no -c "/\.org/&c/TracMap pt" | strip-ansi | sed 1d | erase-trailing-whitespace ) ) | pavs
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/volumes/home/shane/notes/ws"; broot-grep "/\.org/&c/TracMap"
#+END_SRC

- The task should be quite challenging.

With the output here I need to transform the tree view into a directory view. This seems like a difficult but achievable problem to solve.

This is in part because I think it requires recursion.

* TODO Learn xxd
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer br --color no -c "/txt/&c/chanson pt" | strip-ansi | erase-trailing-whitespace | xxd | v
#+END_SRC

** xxd can convert its output back into binary - very useful - I should make an edit pipeline
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer br --color no -c "/txt/&c/chanson pt" | strip-ansi | erase-trailing-whitespace | xxd | vipe | xxd -r | v
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer br --color no -c "/txt/&c/chanson pt" | strip-ansi | erase-trailing-whitespace | tv | hextr
#+END_SRC

I want to be able to see unicode characters in hexdump:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  test-hexdump
#+END_SRC

#+BEGIN_SRC text -n :async :f "hexdump -C -c -x" :results verbatim code :lang text
  .
  a
  b
  c
  1
  2
  3
  /
  ├
  ─
#+END_SRC

#+RESULTS:
#+begin_src text
00000000  2e 20 0a 61 20 0a 62 20  0a 63 20 0a 31 20 0a 32  |. .a .b .c .1 .2|
0000000   .      \n   a      \n   b      \n   c      \n   1      \n   2
0000000    202e    610a    0a20    2062    630a    0a20    2031    320a
00000010  20 0a 33 20 0a 2f 20 0a  e2 94 9c 20 0a e2 94 80  | .3 ./ .... ....|
0000010      \n   3      \n   /      \n   ? 224 234      \n   ? 224 200
0000010    0a20    2033    2f0a    0a20    94e2    209c    e20a    8094
,*
0000021
#+end_src

*** TODO Get a hexdump which also can display unicode symbols like ├

** TODO Make it so I can do a unicode/ascii lookup on bits of hexdump -C output

I should really automate this similarly to what I've done with hextr.

* DONE Set up hexabyte - TUI hex editor
https://github.com/thetacom/hexabyte

Ugh.. I really don't like its interface.

It relies on the mouse and has very few keybindings.
That's very strange.

e:/root/.config/hexabyte/config.toml

I'm not a fan.

Perhaps I should simply learn to use hexdump better.

I should learn more fundamental tasks.

* TODO Donate to the Word for Today
https://donate.rhemamedia.co.nz/?brand=twft

* Investigate the output of broot. Try to figure out what output characters I need to strip
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer br --color no -c "/txt/&c/chanson pt" | strip-ansi | erase-trailing-whitespace | hb
#+END_SRC

* TODO I guess I should try to get a little bit better at cli hex editors for looking at strange output which breaks vim

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  unbuffer br --color no -c "/txt/&c/chanson pt" | strip-ansi | erase-trailing-whitespace | hexdump -C
#+END_SRC

#+RESULTS:
#+begin_src text
00000000  20 2f 72 6f 6f 74 2f 2e  70 20 e2 94 9c e2 94 80  | /root/.p ......|
00000010  e2 94 80 30 38 2e 30 e2  96 90 20 48 e2 80 a6 20  |...08.0... H... |
00000020  65 e2 80 a6 72 e2 80 a6  20 20 20 20 20 20 20 2f  |e...r...       /|
00000030  72 6f 6f 74 2f 2e 70 20  e2 94 9c e2 94 80 e2 94  |root/.p ........|
00000040  80 30 38 2e 30 e2 96 90  20 73 65 61 72 63 68 69  |.08.0... searchi|
00000050  6e 67 e2 80 a6 20 20 48  69 74 20 65 6e 74 65 72  |ng...  Hit enter|
00000060  20 74 6f 20 67 6f 20 75  70 2c 20 3f 20 66 6f 72  | to go up, ? for|
00000070  20 68 65 6c 70 2c 20 6f  72 20 61 20 66 65 77 20  | help, or a few |
00000080  6c 65 74 74 65 72 73 20  74 6f 20 73 65 61 72 63  |letters to searc|
00000090  68 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |h               |
000000a0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
,*
00010050  20 20 e2 80 a6 6f 6e 20  70 74 20 2f 72 6f 6f 74  |  ...on pt /root|
00010060  2f 2e 70 e2 96 b6 e2 94  9c e2 94 80 e2 94 80 63  |/.p............c|
00010070  6c 69 20 e2 96 90 20 48  e2 80 a6 20 65 e2 80 a6  |li ... H... e...|
00010080  72 e2 80 a6 e2 80 a6 6f  6e 20 70 74 0a           |r......on pt.|
0001008d
#+end_src

* TODO Say something about 'True religion' - there's too much "anti-religious" talk
People need to be specific about what they mean.

* TODO Learn more 'br'
I want to get good at doing searches on lots of files.
Search my CVs.

** TODO Figure out how to use br as a cli command and not a TUI

Can I get this search to run without using the TUI? To output grep format?

#+BEGIN_SRC text -n :async :results verbatim code :lang text
      (/org/|/txt$/)&c/Trac

      (/cover.*org/|/\.txt$/)&c/Trac
#+END_SRC

Consider that the =broot= =verb= =pt= outputs the tree and quits broot.
Although, I do not want a solution to my problem that is heavyweight.

*** I think I need to use =sed 1d= sadly
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer br --color no -c "/txt/&c/chanson pt" | strip-ansi | sed 1d | hextr
#+END_SRC

* TODO Figure out how to run a shell function and not a script/binary

* TODO Add some Polycarp quotes
https://www.earlychristianwritings.com/text/polycarp-lightfoot.html

* TODO Build a cooking blog

* TODO Consider building some kind of online shop
https://sylius.com/

- Well, it's not really necessary.
- It would be nicer for a cafe bakery like Side-on if it were just a hugo blog.

* TODO Get into cooking in a big way I guess
e:/root/notes/ws/cooking/make-croissants.org
e:/root/notes/ws/cooking/database.org

** TODO Build a cooking website based on this database, perhaps

* TODO Add this to the document
https://www.gotquestions.org/spiritual-spouse.html

* TODO Apply at Side-on
https://www.side-on.co.nz/

Spelt:
- e:/volumes/home/shane/notes/ws/jobs/cover-letter-bakery-spelt-28.08.24.org
- e:/volumes/home/shane/notes/ws/jobs/cover-letter-29.08.24-spelt.org
- e:/volumes/home/shane/notes/ws/jobs/cv-29.08.24-spelt.org

Side-on:
- e:/volumes/home/shane/notes/ws/jobs/cover-letter-bakery-sideon-28.08.24.org
- e:/volumes/home/shane/notes/ws/jobs/cover-letter-29.08.24-sideon.org
- e:/volumes/home/shane/notes/ws/jobs/cv-29.08.24-sideon.org

* TODO Get a good enough laptop for continuing with Pen.el
https://www.trademe.co.nz/a/marketplace/computers/laptops/laptops/search?search_string=laptop&RefinePanel065188e3266a4def9a292613cff2306b=240%20to%20499%20gb&price_min=5&price_max=500&RefinePanel5c34c1efa0ac468f91e15161d549c479=16%20to%2031%20gb

* TODO Consider getting work doing something I'm skilled at so that I can support other people
I guess I should be smart about this.

#+BEGIN_QUOTE
  *Matthew 10:16-18* - Behold, I am sending you out as sheep in the midst of wolves, so be wise as serpents and innocent as doves. Beware of men, for they will deliver you over to courts and flog you in their synagogues, and you will be dragged before governors and kings for my sake, to bear witness before them and the Gentiles. (ESV)
#+END_QUOTE

* TODO Make sure references such as this work
2 Tim 1:13-2:2

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  cd /root/.emacs.d/host/pen.el/docs/theology; "diatheke" "-b" "ESV" "-o" "w" "-f" "plain" "-k" "2 Tim 1:13-2:2"
#+END_SRC

#+RESULTS:
#+begin_src text
II Timothy 1:13: Follow the pattern of the sound words that you have heard from me, in the faith and love that are in Christ Jesus.
II Timothy 1:14: By the Holy Spirit who dwells within us, guard the good deposit entrusted to you.


II Timothy 1:15: You are aware that all who are in Asia turned away from me, among whom are Phygelus and Hermogenes.
II Timothy 1:16: May the Lord grant mercy to the household of Onesiphorus, for he often refreshed me and was not ashamed of my chains,
II Timothy 1:17: but when he arrived in Rome he searched for me earnestly and found me—
II Timothy 1:18: may the Lord grant him to find mercy from the Lord on that Day!—and you well know all the service he rendered at Ephesus.

II Timothy 2:1: You then, my child, be strengthened by the grace that is in Christ Jesus,
II Timothy 2:2: and what you have heard from me in the presence of many witnesses entrust to faithful men who will be able to teach others also.
(ESV)
#+end_src

* TODO Continue
https://mail.google.com/mail/u/0/#inbox/FMfcgzQVzNvTnPNBPGvccQjDZcfqlSfn

* TODO See if there is something which allows me to view all my org files in a browser
- Perhaps I can make an html export for an entire directory.

* TODO Add this
https://www.gotquestions.org/is-Jesus-Yahweh.html

* TODO Try to solve this
https://mail.google.com/mail/u/0/#inbox/FMfcgzQVzFXvHPRDkFTQjQzXfqVWVbrN

* TODO Buy a new laptop - a cheap one
https://www.trademe.co.nz/a/marketplace/computers/laptops/laptops/search?search_string=laptop&price_min=100&price_max=200&buy=buynow

* TODO Continue doing Bible studies
Continue writing.

Definitely do not stop.
It's important that I continue with it.

#+BEGIN_QUOTE
  *Romans 8:15-16* - For you did not receive the spirit of slavery to fall back into fear, but you have received the Spirit of adoption as sons, by whom we cry, Abba! Father! The Spirit himself bears witness with our spirit that we are children of God, (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *Galatians 6:14* - But far be it from me to boast except in the cross of our Lord Jesus Christ, by which the world has been crucified to me, and I to the world. (ESV)
#+END_QUOTE

* TODO Ask God to free me from this spirit of condemnation
It's awful, and I do not get it.

* TODO Tomorrow, try to reset the Binance
I need to do it on the phone:
- Visit https://mail.google.com/mail/u/0/#inbox/FMfcgzQVzFPqgRhnlhhGLXgdKTPVtbrP
- Try to log in on Binance
  - mullikine@gmail.com
  - aih4Hoh7doiPhee9ixequeetho7Eat
- Reset the phone number and provide a new number

* TODO Apply at the Botanic Gardens
https://business-south.org.nz/how-we-help/for-trades/

* 
https://www.seek.co.nz/job/77948235?type=promoted&ref=search-standalone&origin=cardTitle#sol=2923db9f9e8fa46f23082703da589f393b2c4b9d

* TODO Try to start working again somehow
Make a lot of job applications.
Daily.

* This is cool
[[https://www.youtube.com/watch?v=9tfqOvxuYtg][youtube.com: Toward Need, Not Comfort: The Blood-Bought Path of the Good Samaritan]]

Just keep blogging John Piper.
Do not be deterred.
The 2s stuff means nothing.
It's all about the Truth and what God thinks.
The enemy, satan, will be destroyed.

* This is actually a cool website
https://abundantlife.kiwi/

I'm definitely going along today.

* TODO Call to see if I can do an apprenticeship at the Dunedin botanic gardens
https://dunedinbotanicgarden.co.nz/learning/training-opportunities

For more details, please contact 4Trades Apprenticeships, Business South, Apprentice Facilitator - Botanic Garden, phone 479 0181.

* TODO Do this on Aug 10
https://mail.google.com/mail/u/0/#inbox/FMfcgzQVxtsPkbpFGWNkfCmgqflRkBSJ

There is also the Deliverance meeting at ALC.

* DONE Call TearFund to help Zandiel
Please call us on 0800 800 777 Monday-Friday between 8:30-4:45pm and we can assist with resolving this.

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Supporter No: 1090675
  Child's No: BO067600354
#+END_SRC

* TODO I should try to get myself a job or something
So the enemy has been trying to steal from me and make my life difficult.
I should really try to fight back a bit and not fall over.
But I'm trying to work out how to do that best.

* TODO Go to jesusinthestreet.com and get another hoodie

* TODO Donate to Phillip Blair the evangelist
https://poplme.co/hash/1Gm42QZX/1/s

* TODO Become better at evangelism

* TODO Work towards a job

* TODO Make a mode for making very clear Scripture representations
[[https://youtube.com/watch?v=M0WJwkCsJUo&t=466][youtube.com: 07212024 Sun AM: Isaiah 60 @time: 7 min 46 sec]]

* TODO Improve at org-mode

* TODO Set up new email, etc.
** TODO Make a new email too, I guess, for my new Apple ID, etc.

** TODO Make a new Apple ID etc. I guess
God I hate my life.
God I don't want to be here.
LORD God Jehovah, why on earth do You have me remaining here?
After what I have endured, I feel as though I should not be on the earth anymore.
Remaining here seems like an abomination to me.
Why on earth am I here?

https://appleid.apple.com/

God I hate my life.

* TODO Try to get a job of some kind

* TODO Just apply for a job at dominoes
Why not?
I probably should.
What I actually want is for God to deliver me from demons so I can apply for a job.
If God delivered me, I would immediately go out and try to get a job.
But I am waiting.
If I was allowed to marry, I would start working a lot, as I had.
The devil stole from me.

* TODO Set up more writing tools
Maintain powerful writing tools and study
reputable Christian pastors such as John Piper
and Tim Keller, and also maintain a large
database, and write books.

But perhaps I should also preach.

* TODO Continue writing, like CS Lewis
Continue my theology writing.

* TODO Simply be good at making educational material
I love teaching.
satan has stolen that.

* TODO Make more graphlike and annotation-like notes to understand the Scriptures

* TODO Do some handwriting
Have some fun writing in Japanese.

* TODO Make a faster fuzzy finder for Bible search

* Coming to God
1. Thanksgiving
2. Praise

Thank God for what He's already done, and it will be easier to hope.

* TODO Hmm. Maybe I *should* learn Chinese

* TODO Try to streamline certain processes
- Check to see what is available this season
- Buy what's available
  - https://veggieboys.co.nz/

** Filter this entire database to remove recipes which contain things which are unavailable
- e:/volumes/home/shane/var/smulliga/source/git/dpapathanasiou/recipes/README.md

Actually, rather than doing that, I should
begin cherry-picking recipes and constructing
another database in parallel.

I should use the same directory system, but
have a git repository which I use in parallel.

** Get better at organising myself to be able to cook food
e:/volumes/home/shane/var/smulliga/source/git/mullikine/recipes/README.org

I have to be proactive with getting ingredients.
Remember Megan's cake which she made.
I want to be able to cook things too.

* TODO Make an avocado pie
[[https://www.youtube.com/watch?v=Rp-IRLsXFGI][youtube.com: Creamy Avocado Pie | Food Network]]

I want to become good at this.

https://github.com/dpapathanasiou/recipes/

e:/volumes/home/shane/var/smulliga/source/git/dpapathanasiou/recipes/index/t/the-best-lemon-lime-avocado-pie.json

[[https://www.youtube.com/watch?v=Rp-IRLsXFGI][youtube.com: Creamy Avocado Pie | Food Network]]

** TODO Try to establish better habits
- Supermarket
- Cook my own food
  - Even cook my own deserts
    - Avocado pie, for example
  - See what we can make based on seasonal food
    - Find out what is seasonally available in New Zealand at any given time
      - I should have a function for this
        - https://www.sanitarium.com/nz/health-nutrition/nutrition/seasonal-food-guide
        - https://www.seasonalfoodguide.org/

** TODO Try to be a little more organised with regard to how I plan and spend

* TODO Get a job
What type of work would be good?
I really just need work that will pay and technically it really should be something that everyone
wants / needs i.e. being merciful - helping people.
Even just putting a stop to being on WINS would be good.
Consider that I am currently under a lot of stress due to spiritual oppression,
and I should try to get a job even if it just means getting me off WINS.

* TODO Write about work
[[https://www.youtube.com/watch?v=csvabZz2byQ][youtube.com: John Lennox - Work, Wealth, and Living Under the Lordship of Christ]]

* TODO Continue to work on Pen.el
I want it to be useful for building sermons, studying the Bible, learning from other theologians and writing books.

* TODO Learn to write like this
https://old.reddit.com/r/Handwriting/comments/vmpfpd/examples_of_handwriting_from_191617_in_pen_and/

** Well I should really develop my own writing style and extend it a lot

** But take inspiration from various handwritings
https://en.wikipedia.org/wiki/Palmer_Method

* TODO break up my org-mode document into multiple documents
Then combine them.

I really want to maintain a monolithic document in a way, though.
The monolithic document helps that I might rewrite in multiple places.

* TODO I should continue to build stuff to cross-reference sermons, etc. inline in the Bible
This is really important.

* TODO [#A] I should continue to build sermons, etc. in this way
e:/volumes/home/shane/var/smulliga/source/git/semiosis/notes-on-sermons/notes-on-sermons.org

* TODO Study
e:/root/.pen/glossaries/christianity.txt

* TODO Focus on my Bible studying! Thanks, LORD
This is a good thing to do.
It will help.
I need God's Word to live.
It provides a way in which I can apply my emacs.

** Building reading material

* TODO Make a new GitHub repo - "notes on sermons"

** TODO [#A] Watch - I should really keep watching such videos and taking notes on them, etc.
e:/volumes/home/shane/var/smulliga/source/git/semiosis/notes-on-sermons
e:/volumes/home/shane/var/smulliga/source/git/semiosis/notes-on-sermons/notes-on-sermons.org

* TODO Give getting AOE2 DE on my linux laptop a go
It would be fun to get into scenario editing.

* TODO Learn to edit aoe2 scenarios with emacs I guess?
e:/volumes/home/shane/var/smulliga/source/git/KSneijders/AoE2ScenarioParser/docs/examples/triggers.md

I think it would be fun to design some aoe2 scenarios.

https://ksneijders.github.io/AoE2ScenarioParser/installation/

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  pip3.8 install AoE2ScenarioParser
#+END_SRC

* TODO Improve on some skills
- cooking
- writing

* TODO Get into cooking

I think that cooking would be a good thing to get into because:
- It doesn't require much to start
- The benefits and instantaneous

[[https://www.youtube.com/watch?v=_FXKGv2ipMg][youtube.com: ????, ???? ??? ??? =::= ??? ???? ???? :: ??? :: Cream Cheese Garlic Bread]]

* TODO Consider setting this up
https://xenodium.com/inline-previous-result-and-why-you-should-edebug/

* TODO Get this book
https://manna.co.nz/ask-pastor-john-750-bible-answers-to-lifes-most-imp0324

It would be very worth studying it.

* TODO Respond to Rachel, Karl and Esther
https://mail.google.com/mail/u/0/#inbox/FMfcgzGtwzjbmxjXJjRBwHnBNXjgbKTn

* TODO Consider driving down the street every afternoon or especially when it is cold to see if lady Kieran needs a ride home

* TODO See if I can visit Kieren :)
https://www.prisonchaplaincy.org.nz/
https://www.prisonchaplaincy.org.nz/contact/

Mercy who I met at Manna suggested this.

* Get stuff - hope that noone steals my things
** TODO Get some chalk holders
https://playspy.co.nz/products/chalk-holder-1-pcs

** Get a new Zebra Delguard ER - this was my favourite
https://www.iro.co.nz/products/zebra-delguard-type-er-mechanical-pencil-0-5-mm

** This one is cool!
https://www.liteshop.com.au/content/lumintop-edc01-120-lumen-keychain-aaa-led-torch/

** Torch
https://www.deltamike.co.nz/product/olight-i3t-plus-slim-light/

** Tape recorder and some tapes
Record some STAR radio.

* TODO Consider applying for this support worker job
https://www.seek.co.nz/job/76492441

recruitment@ihc.org.nz

* TODO Make a Bible family tree in text
e:/root/.pen/documents/bible-notes/verse/genesis-11-v1.org

Make it in note-taking.

* TODO Make something to apply a transformation to a diff

- So if I add Bible verses to my Bible study, I should then be able to apply the Biblegateway URL transformation to only lines which
  are changed in the git diff

* TODO Renew our minds
https://www.star.net.nz/the-word-for-today/-gods-word-renews-2024_07_04

** It's important to allow myself to be corrected
+ [[https://youtube.com/watch?v=pnAMp_mAYI8&t=1641][youtube.com: War of Words: Getting to the Heart for God's Sake @time: 27 min 21 sec]] :: when you are able to convince yourself that your deepest greatest problems in life exist outside of you not inside of you you quit being a seeker after the transforming grace of the Lord Jesus Christ

* Getting married at Heidelberg Castle would be cool
https://www.schloss-heidelberg.de/en/conferences-celebrations

But what would be more cool is just a really humble tiny wedding somewhere with Melee.
It's gotta be Melee.
Nothing else makes sense to me.

* TODO Get an Idle Villager tshirt
https://youtu.be/kskioX7oLX0?t=60

* TODO Pay Jonty's MAZDA station wagon
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Hi Shane,

  Thank you for your email.

  The charges are for unpaid registration from 2022-03-20 - 2023-03-21.

  The vehicle description are as follows:
  Year: 1990
  Make: MAZDA
  Model: 323 GLX ESTATE
  Colour: BLUE
  Body Style: Station Wagon
  Plate: PH6211

  If you do not recognise the above vehicle, you would need to file a police report for fraud https://www.police.govt.nz/use-105#online-report-options

  Once completed, Please forward us a copy of that police report so we can review it with NZTA.

  Alternatively, if you do recognise it, charges remain valid and payable as you were the registered owner at the time the charges incurred.

  Payment can be remitted using the following details:
  Name of Account: Debtworks NZTA Trust Account
  Account Number: 06-0111-0698528-00
  Particulars: Debtworks Reference Number 832137
  Payment link: https://pay.debtworks.co.nz/windcave/paynow.asp?k=VIQGqJVrrc49h

  Ngā mihi | Best Regards

  Ana Scott| Collections Officer | Debtworks (NZ) Ltd
#+END_SRC

https://mail.google.com/mail/u/0/#inbox/FMfcgzQVxRGDgfvKfCQvlNDvPvsWxBzg

* TODO Do some wholesome things
https://www.reddit.com/r/awww/comments/1dt3gai/make_me_smile/

* TODO Try some fasting
https://www.youtube.com/watch?v=XNozhxiCSSk&ab_channel=EvangelistFernandoPerez

* FGB Regional meeting
https://mail.google.com/mail/u/0/#inbox/FMfcgzQVxRDtnWXbHBzDxndZLKnbXSvV

* TODO Clear up what is 'the flesh' that Paul refers to

* TODO Consider making the abbrev mode

* TODO Learn to make tooltips. It would be even better to have mouse hover lsp docs
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/usr/local/share/emacs/29.1.50/lisp/org"; ead -z mouse-face
#+END_SRC

I can make this, actually.
I should just set it up once.

** TODO Yeah, do this next
I should make Japanese-mode show the words.

* TODO Make a per-function abbrev org mode which, given a transformation function applies the function to every word written
It wouldn't use the actual abbrev-mode, I think, but I would have to connect the appropriate hooks myself.

* TODO I should set up a system for learning the JayCar inventory or something
Try to simply become good at it.

* TODO Make some flashcard tool or system for learning lists of things
- Hmm with a system of challenges, try to remember lists of things
- Toggle beteen:
  - The work in progress question sheet - resettable / clearable
  - A completed list of QA pairs

* TODO Make it so I can easily look up japanese words in emacs
- Hiragana words,
- Romanji words,
- Katakana words

* TODO Maybe apply for a job like this - or maybe not actually
https://www.seek.co.nz/job/76729495?type=standout&ref=search-standalone&origin=cardTitle#sol=a6e3d1c3c85918bdea6be6735eed15cc61b83409

If I think about it, it might be a lot better for me to have a simple
part-time job at a place like JayCar.

It's far less complicated, and I can do learning on the side.

Yeah, I'll apply for a JayCar job after doing some study.

But even a place like a sushi bar would be great.

* TODO Make it so certain documents open in japanese-org-mode
e:/root/notes/ws/japanese/notes.org

* TODO Mention the thing Paul says recarding people who do what is right
Use that as evidence to back up the claim that I think that Christians should walk rightly after being born-again.

* TODO I should set up maori learning inside Pen.el as well
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  z "/volumes/home/shane/notes/ws/maori/1000 frequent words of Māori- in alphabetical order.pdf"
#+END_SRC

* TODO Find a cli snippet expander
- TODO Make emacs do snippet expansion - yes, I should use emacs
  - I should make emacs do it.

* In all seriousness, learn some Japanese
That would be really fun.

I should learn to actually write Japanese well.
Maybe I could use Google Translate to test myself.

Also I should make something for emacs to automatically translate Romanji into Hiragana/Katakana.

https://www.emacswiki.org/emacs/AbbrevMode

Automatically expand romanji.

https://emacs.stackexchange.com/questions/8267/mixing-automatic-abbrev-expansions-with-explicit-only-expansions

Make the list of 2000 Japanese words - and start using them.

[[https://www.kanshudo.com/collections/vocab_usefulness2021][kanshudo.com: Vocab by Usefulness - Kanshudo]]

** 6000 core words
https://iknow.jp/content/japanese
https://iknow.jp/courses/566921

** Integrate this little tool? Or make my own?
https://github.com/koozaki/romaji-conv

** 1-1000
https://learnjapanesedaily.com/most-common-japanese-words.html

** 1001-2000
https://learnjapanesedaily.com/2000-most-common-japanese-words.html

** TODO Make an efficient text-rewriter for the terminal
It's job would be to do things like:
- translate Romanji into Japanese as I write it.

Every time I write a word, emacs should check to see if the word is in the 'snippet' database and replace it.

* TODO Make a Script that looks for all the 'Bold' Bible references in the org-mode document - ones which do not have a URL, and URLify it

* TODO Make a method of selecting visually from emacs, and ignoring hidden characters

* TODO Begin doing some kind of work that is useful for society, I guess
Hmm.
Being a servant of Christ, though, is serving others.
I just want any job so I can be radically generous.

* TODO Write about
- cessationism
  - I believe that Jesus still makes apostles

* TODO Improve Pen.el and document-making skills
- I should improve at parsing the org-mode document
- I should add annotations to parts of Bible verses through the main bible-mode

I guess I do need a database of some kind to store Bible-mode information.
Text files are great though.

* TODO Get some cordial and some juice and some fizzy

* TODO Work towards cross-references and inline annotations for my PDFs

* TODO Do a little more programming
- That would be fun

** Work towards
- More Pen.el Bible study software stuff
- Age of Empires trigger stuff

*** It's important to improve on

* I should definitely continue with my theology writeup
I should extend my annotating in the PDFs etc. to make hyperlinks over phrases in the text.

But intelligently.
I should be able to make the annotations inside of Bible-mode, and then the PDF should reflect those linkages.

It would be quite interesting to make a hyperlinked Bible with the top crossreferece.

* Maybe use this
https://github.com/mattrighetti/envelope

* TODO Look into OpenBible

* TODO Make something to make links for bible references
- if possible, even take into account the Bible version

** Valid biblegateway book names
e:/root/dump/tmp/scratch7ct3Ny.txt

* TODO Add more to my faith and theology writing
** Regarding the weak and powerless
People who are not super intelligent, say, well I think God definitely still supports them.

* TODO Understand the gospel a bit more
- Understand how to present the gospel of Jesus to others a bit better
  - This is important, actually

I've still been getting lots of harassing dreams.

* Clean up  my room
- Then head out and get a coffee
- Sit somewhere and

* TODO Buy
- A beanie

* TODO Make this
e:/root/.emacs.d/host/pen.el/scripts/filters/grepfilters/bible-verse-urlify

* TODO Try to get Pen.el totally functional with docker, but otherwise, the Bible study is far more important

* TODO Get R going and connect it to cplint

* DONE Get cplint going
e:/root/notes/ws/fani/cplint-17.06.24.org

* TODO Make the tags search conditional based on the current git repo / project

* TODO Start tagging the prayers with people's names

* TODO Spend a bit of time learning ledger maybe?

* TODO Continue building my faith and judgement document
It's helping.

I should do this because it will help to clear things up for other people.

* TODO Begin building an emacs environment for editing AoE2 Scenarios, like Trigger Studio!
I should render the map in terminal ascii.
Exporting as a bitmap, sure.

In fact, I should make something to export a terminal as a bitmap.
ANSI -> Bitmap

* TODO Get back into this
https://github.com/KSneijders/AoE2ScenarioParser

e:/volumes/home/shane/var/smulliga/source/git/KSneijders/AoE2ScenarioParser

** Yeah, definitely

* TODO Add this to confessing sin - it's a good word
[[chrome:https://www.star.net.nz/the-word-for-today/-confess-and-be-forgiven-2024_06_15]]

* TODO Get good at drawing mathematical jargon!
https://www.istockphoto.com/vector/math-formula-mathematics-calculus-on-school-blackboard-algebra-and-geometry-science-gm1293170628-387684452

That sounds fun!

* TODO Consider getting some catnip for Flo?

* TODO Make a 'catio'
[[https://www.youtube.com/watch?v=Pfjr3Sv8teU][youtube.com: Video tour of my cats' CATIO paradise!]]

* TODO Go over this website
/home/shane/dump/programs/httrack/mirrors/https-fightlust-com

* TODO I should get back up now
I don't want things to break too badly.
I don't want to be ultra influential.
I really do not want to be ultra influential.
I just want to not be attacked spiritually, and I'm actually literally waiting on God to be delivered from it entirely.
Fighting back against witchcraft/spiritual attack is not fun, and I don't want to have any online presence.
I'm just so tired of being attacked spiritually and I want to go home.
I want to be raptured.
I consider this world to be a corpse I want to leave behind.
If I have to stay here then I want to not be squeezed to death.
Please God help me.
I feel so squeezed.

* I hate being in this world
I really hate being here.

* I should try to get a job
Then I can simply use the money to help people.
This is definitely the way I want to operate.

** Give my CV to JayCar

- e:/volumes/home/shane/notes/ws/jobs/cv-26.04.24.org
- e:/volumes/home/shane/notes/ws/jobs/cover-letter-26.04.24.org

* TODO Maybe see if JayCar has any work
I think it would be a fun job, to be honest.

Perhaps I should have applied for that one ages ago.

** TODO First, study the JayCar inventory

- Make an inventory table with information on them
  - What I really want is to "Know my way around"
    - Learn the categories

https://www.jaycar.co.nz/

* TODO If God wants me to stay here on earth then I should get a job
If I got a job I could just use the money to help other people.
And I'm looking forward to it!

* TODO Get a new torch / more batteries for my light - Get the same as last time
https://www.deltamike.co.nz/product/olight-i3t-plus-slim-light/

* TODO Make a fuzzy finder for finding Bible verses
- I'd have to use databases - it's the only way to get the speed

** 
https://github.com/colemanator/papyrus-api

* TODO Consider learning forsp - it looks really cool!
https://github.com/xorvoid/forsp/tree/main

* TODO Find another torch replacement
Save up to go to En Hakkore.

* TODO Continue to make Pen.el

* TODO Continue to write my own software
I should definitely be employing expressive programming languages to this end.

* TODO learn to do basic regex searches
Looking for the phrase "believe that you have received it":

** DONE Make this into a script:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  bible-search -l -m NASB believe | grep received | pavs
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  bible-grep believe received
#+END_SRC

*** TODO Make this work inside Pen.el

* TODO Learn to live somehow in my own place
At least prepare for doing so.

* TODO Learn to manage the greenhouse
Consider getting some greenhouse upgrades.

* TODO Get in supermarket shopping - supplies
Drive to countdown to do the shop.

- Countdown
  - Lots of juice 5x1L
  - Milo
  - Rice
  - Marmite
  - Butter
  - Some different bags of frozen veges
  - Tomatoes
  - Mayonnaise
  - Cans of tuna
  - Sautéd seafood gravy cat food
  - Chutney
  - 4 minces
- Fish shop
  - Get some fish for Flo

* TODO I should find myself a thing to do - some kind of interest
- Yeah, do some more chemistry, I guess. Just learn things one step at a time.
  - But in all honesty, where will that get me?
- My goal should really be to become like Jesus in His death, like [[bl:Phil 3]].
  - I guess this means moving on from Melee.
  - God, I just want some help.

* TODO Add the stuff about Philippians 3 to my bible study document

- Yes, we die a death when we die to serving sin, to live to serving Christ
- But also for the rest of our time in the flesh we endeavour to die again as Christ died.

* Another AGM - it's 1 month earlier this year
https://mail.google.com/mail/u/0/#inbox/FMfcgzQVwwwMjFGPCdLBssJCHMgLhPlc

I missed it. It was at 10am.

* TODO Continue working on my periodic table software
[[https://sciencenotes.org/what-are-valence-electrons-definition-and-periodic-table/][sciencenotes.org: What Are Valence Electrons? Definition and Periodic Table]]

[[https://sciencenotes.org/wp-content/uploads/2021/03/valence-periodic-table-1024x683.jpg][sciencenotes.org valence-periodic-table-1024x683.jpg: valence-periodic-table-1024x683.jpg {1024x683}]]

* TODO Also learn some bushcraft
I guess that I should learn things more thoroughly and actually take notes on them and learn them.

Maybe I should make a book on bushcraft.

** Knots
- slipknot
  - [[https://www.google.com/search?client=firefox-b-d&q=slip+knot][google.com: slip knot - Google Search]]

** Firewood in wet weather
[[https://www.youtube.com/watch?v=MmHkiHeoI3U][youtube.com: This SURVIVAL SKILL could Save Your LIFE! Make FIRE in WET WEATHER!]]

One place you'll find dry wood is on the inside of a standing dead tree.

* TODO Since it seems like God wants me to remain here on earth
I guess I will do some more emacs.

Perhaps I should learn more about parsers or something.

I could start with some more rosie maybe?

I should definitely stick to nice little DSLs.

* TODO I should learn a musical instrument
A small flute would be nice.

[[http://www.braxtonflutes.com][braxtonflutes.com: SHOP]]

** Something like this
[[https://www.youtube.com/watch?v=2jZ1cXg9cIA][youtube.com: Rimu Pocket Drone Flute - Dm]]

* TODO Consider learning this
[[https://old.reddit.com/r/conscripts/comments/hflswu/my_writing_system_that_allows_you_to_write/][old.reddit.com: My writing system that allows you to write without lifting the pen, and no need to add anything after. What do you think ? : conscripts]]

* TODO learn more Japanese characters

あ
い
う
え
お

* TODO Make a GBA game
[[https://gbadev.net/][gbadev.net: Home | gbadev]]

That sounds like a good idea.
But it might, frustratingly, take quite a while to develop.

That sounds fun actually.

I feel much better right now after making that statement about forgiveness on my website.

* TODO Buy a GBA and a LOTR game for it

* 
[[https://www.youtube.com/post/Ugkx6M9yIc-0G_djw3qYAwmxJ-L9om-j6lFk][youtube.com: Post from Holy Resurrection]]

* TODO Just go through the run.sh file and clean it up

* 
[[http://hymnbook.igracemusic.com/hymns/i-asked-the-lord/][hymnbook.igracemusic.com: I Asked The Lord - Indelible Grace Hymnbook]]

* TODO Do some caligraphy or something
- Learn to write in greek
- Also, I could consider writing with Japanese glyphs too
  - In all seriousness, this could be a great idea.
    - I could make a cursive-like script (my own thing) which uses Japanese characters

* TODO Set up this
[[https://github.com/dlvhdr/gh-dash][github.com: GitHub - dlvhdr/gh-dash: A beautiful CLI dashboard for GitHub ?]]

* TODO Work on this
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org

* TODO Learn more about emailing filtering from inside notmuch in Pen.el

* TODO
- e:/root/repos/rosie-pattern-language/rosie/rpl/net.rpl
- e:/root/.emacs.d/host/pen.el/scripts/rosie-scripts/rosie-urls

* Jesus is the Healer - the one who heals us
#+BEGIN_QUOTE
  *Isaiah 53:5* - But he was wounded for our transgressions; he was crushed for our iniquities; upon him was the chastisement that brought us peace, and with his stripes we are healed. (ESV)
#+END_QUOTE

* TODO Learn to make some curries, I guess
- Learn to make foods from basics
  - [[https://www.allrecipes.com/recipe/46822/indian-chicken-curry-ii/][allrecipes.com: Indian Chicken Curry Recipe]]

* TODO Make some 'top trumps' card decks, I guess

* TODO Learn some hobbies which are good
- Does not involve any stealing (a ban on stealing includes a ban on AI fiction)
  - Use my own creativity
- Does not involve any violence
- Does not involve any violence

** Examples
- Ping pong / table tennis
- Keeping a garden
- Learning chemistry
- Design the interior of a house

* TODO Add a saving faith section on 'treasuring Christ'
[[https://www.youtube.com/watch?v=XpYtLlWFTlg][youtube.com: Saving Faith as Treasuring Christ]]

* Figure out what the word 'repent' means based on Biblical evidence
- Get lots of context verses

* TODO Praise more
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org

[[https://www.youtube.com/watch?v=0XB_lNr3TXw][youtube.com: This Fierce Battle You're Facing]]

* Look into this language
[[https://amber-lang.com/][amber-lang.com: Amber]]

* TODO I should pray the Our Father prayer more

* TODO This one is pretty good
[[https://www.youtube.com/watch?v=r8zMy5_iLN0][youtube.com: The Marriage Supper Vision 5-18-24@7:39AM]]

* I've got to do this
[[https://www.youtube.com/watch?v=r8zMy5_iLN0][youtube.com: The Marriage Supper Vision 5-18-24@7:39AM]]

I've got to pray to Father God about prophetic words spoken and the test the spirits.

* TODO Definitely go along to the Wednesday prayer group at DCBC at 7:15 am

* TODO Things to do
-
- Find the yellow eyed penguins

* TODO Make sure that this runs smoothly without external repositories
https://github.com/semiosis/pen.el

See if I can make it run with the docker image alone.

** Hmm. Try to simply run the docker container on its own

* TODO Do this
[[https://www.youtube.com/watch?v=VlLSDZ_caWc][Anoint Your House, Pray with me, cast demons out and intercede for your spouse and children! LIVE - YouTube]]

* TODO Make an autocompletion system for individual commands
Should I spawn vanilla emacs for this?

Maybe.

The system should be universally-accessible, and able to generate text, perhaps from a form?
- Or perhaps transient really is the best way to do this.
Generate the command text with transient.
Honestly, this is probably one of the best ways.

* TODO Continue with my cypher cursive handwriting

* TODO Make it so I can export Bible verses with inline verse numbers, etc.
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  detailed Matthew 1-2 | v
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  upd detailed Mark 16:17-20
#+END_SRC

#+RESULTS:
#+begin_src text
Mark 16:17-20
‾‾‾‾‾‾‾‾‾‾‾‾‾
16:17 And these signs will accompany those who
believe: in my name they will cast out demons;
they will speak in new tongues; 16:18 they
will pick up serpents with their hands; and if
they drink any deadly poison, it will not hurt
them; they will lay their hands on the sick,
and they will recover.

16:19 So then the Lord Jesus, after he had
spoken to them, was taken up into heaven and
sat down at the right hand of God.

16:20 And they went out and preached
everywhere, while the Lord worked with them
and confirmed the message by accompanying
signs.]]

(ESV)
#+end_src

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  detailed Mark 16:17-20 | v
#+END_SRC

* TODO Focus on deliverance for this entire week, etc.

* TODO Make some interactive completers - make a list of commands that have completers
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  pen-org-template-gen quote
#+END_SRC

* TODO Make a completer for this and other shell scripts
e:/root/.emacs.d/host/pen.el/scripts/pen-org-template-gen

Completers are important/good.
I should be able to use the completer from vim, or from emacs, or from bash.

[[https://github.com/DannyBen/completely][GitHub - DannyBen/completely: Generate bash completion scripts using a simple configuration file]]

** TODO Make a completer program - I guess that I could base it on bash if I wanted

* TODO Figure out the name of the evil spirit that keeps lying to me

* TODO Consider getting deliverance from someone like this
[[https://joyfulquiver.org/][Joyful Quiver Ministries]]

* Self-deliverance
[[https://youtube.com/watch?v=etDz0FW_Pl8&t=505][I TRIED Casting Demons Out Of Myself And FAILED. Self Deliverance Tips - YouTube @time: 8 min 25 sec]]

- Be agressive.
- I have to want to get free.

LORD Jesus, I come before You today asking for complete and total deliverance.
I know that this is part of the finished work of the cross, and I receive my inheritance.

Satan, you have no power over me. I am not your home and you must leave me today.
I bind and cast out every unclean spirit that is living inside of me, known or unknown.
I command you to leave in the name of Jesus Christ.
You must go into the Abyss and never return.
I break every generational curse, word curse and legal right that remains.
By the blood of Jesus and in the name of Jesus I cancel every contract, assignment and plan of Satan.

* TODO Consider using this instead of tab-line
[[https://github.com/amno1/global-mode-line][GitHub - amno1/global-mode-line: Turn Emacs tab-bar into a global mode line]]

* TODO I could also learn 'dvorak' as a cipher, haha.

* TODO Learn to write in cursive, replacing letters so that I can write without other people understanding what I am writing
That's a really good idea.

* TODO Make it so my org-mode agenda triggers alarms

* TODO Build up some software for learning things

* TODO Build up a lot of chemistry org-mode files
Then use them to search and look up information.

* Make notation for this
- https://nz.pinterest.com/pin/33284484738776751/visual-search/
- https://nz.pinterest.com/pin/398146423310304616/visual-search/

There's actually a lot of cool info here.

* TODO Go to Adson's Bible study
Thursday, 6:30pm

* TODO Pen.el
** TODO Set up an http web server from emacs
emacs http api

Run commands in emacs from a web browser.

** TODO Make a programmable web server which I can use to embed links inside of pdf documents
e:/root/.emacs.d/host/pen.el/src/pen-org-link-types.el

** TODO Make it so exporting as latex or html is able to handle glossary links
e:/root/notes/ws/chemistry/reports/symbols.org

[[https://orgmode.org/manual/Links-in-HTML-export.html][orgmode.org: Links-in-HTML-export.html: Links in HTML export {The Org Manual}]]

e:/root/.emacs.d/host/pen.el/src/pen-org-link-types.el

** TODO Make it so I can click on an email and it will simply filter my emails for it
That's more useful that going immediately to emailing.

* TODO
[[https://www.youtube.com/watch?v=Rq0A-AHdB74][Naming Ionic Compounds with Transition Metals Introduction - YouTube]]

* TODO Respond to George Walker
[[notmuch-search:tag:inbox][Notmuch search: tag:inbox]]

* TODO Go to the prayer tent
[[https://www.youtube.com/watch?v=Rq0A-AHdB74][youtube.com: Naming Ionic Compounds with Transition Metals Introduction]]

* Not by our own works ever
[[https://mail.google.com/mail/u/0/#inbox/FMfcgzGxTFdxlsDTdFxGHzPMbkJDBFTm][mail.google.com: Gmail]]

Not by our own works. Never by our own works.
Lord Jesus, forgive me.
I have sinned.

* Deliverance
** TODO [#A] Definitely watch lots of these this week
[[https://www.youtube.com/watch?v=CTAb3qpIIOc][youtube.com: JESUS CAME TO DESTROY THE WORKS OF THE DEVIL | ALL NIGHT PRAYERS FOR PROTECTION AND DELIVERANCE]]

- Every time I am attacked.
- Even when I'm not feeling attacked.

** TODO [#A] Watch this tonight
[[https://youtube.com/watch?v=9pn_Lx1Hrnk&t=2924][youtube.com: { ALL NIGHT PRAYER } POWERFUL DELIVERANCE PRAYERS TO BREAK EVERY CURSE AGAINT YOU @time: 48 min 44 sec]]

* TODO Try to improve my Bible study software
Continue endeavouring to write books etc. with Pen.el.

* TODO Consider
e:/root/.pen/documents/notes/ws/latex

* I should now continue to build up Pen.el
This is so I can plan things like prayer and fasting, etc.
-

* TODO Engage in fasting with my prayer
[[https://www.youtube.com/watch?v=izBe8u2astc][youtube.com: We Are Begging Jesus Christ To Have Mercy On Us || Bishop Mar Mari Emmanuel Cries Out.]]

* TODO Learn to make CVs in latex properly
[[https://latex-tutorial.com/cv-latex-guide/][How to Write a Minimalistic CV in LaTeX: Step-by-step Guide - LaTeX-Tutorial.com]]

* TODO Turn it into a book with latex - that's a good idea!
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.tex

* TODO Make my pdf documents a little more colourful
e:/root/notes/ws/latex/Acorn.tex

Automate emacs' org pdf export to do this.

* 
#+BEGIN_QUOTE
  *Hosea 11:4* - I led them with cords of kindness, with the bands of love, and I became to them as one who eases the yoke on their jaws, and I bent down to them and fed them. (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *Jeremiah 31:3* - the LORD appeared to him from far away. I have loved you with an everlasting love; therefore I have continued my faithfulness to you. (ESV)
#+END_QUOTE

* Christ in us is the hope of glory
#+BEGIN_QUOTE
  *Colossians 1:27* - To them God chose to make known how great among the Gentiles are the riches of the glory of this mystery, which is Christ in you, the hope of glory. (ESV)
#+END_QUOTE

* TODO Follow up with the volunteering job

* TODO Pay for this on Monday
[[https://mail.google.com/mail/u/0/#inbox/FMfcgzGxTFXMNzZLggnjGwWlsnGDGJfm][Gmail]]

* TODO Learn to write like this
[[https://youtube.com/watch?v=KxsPtoronL0&t=297][Why They Cut The Real Ending Of The Lord Of The Rings - YouTube @time: 4 min 57 sec]]

* TODO Just do some math or something
[[https://en.wikipedia.org/wiki/Table_of_divisors][Table of divisors - Wikipedia]]

Be really boring online.

* I should start doing some Haskell or something
Yes, definitely start to try to move on in the Kingdom of Jesus Christ and God.

* TODO Get a new Casette tape deck for Ra

* TODO Go over this
e:/volumes/home/shane/dump/programs/httrack/mirrors/https-jesusisgodandlordministries-com/jesusisgodandlordministries.com/

* TODO Consider going to the doctors again
Book another appointment with my doctor.

* TODO Fast and pray to see mountains moved
[[https://www.youtube.com/watch?v=4mKH5Yd1j5Y][HOW TO CAST OUT ALL DEMoNS!!! PRAYER AND FASTING!! MUST WATCH!! - YouTube]]

OK, sure thing.
I will fast and pray.
Don't even tell anyone I am fasting.
Just fast for God, and focus on God.

Have a goal reason for fasting:
-

For the next month, or 40 days, just go without:
- breakfast
- lunch
- coffee

Focus:
- more on prayer.
- more on meditating on Jesus' commandments.

Attempt:
- repentance

* TODO Try to get this going
[[https://hackage.haskell.org/package/cassava-0.2.0.0/docs/Data-Csv.html#g:1][Data.Csv]]

Figure out how to use it!

** Or this:
[[https://github.com/qfpl/sv][GitHub - qfpl/sv: Comma {and other} separated values]]

Figure out how to use it!

e:/root/repos/qfpl/sv/sv/README.markdown

*** I guess that .lhs files are what I should look for

e:/root/repos/qfpl/sv/examples/src/Data/Sv/Example/Species.lhs

* TODO Engage in a fast
[[file:~/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org::*How to fast][How to fast]]

* It's important to get into fasting
Perhaps I should even get into fasting for the sake of those who persecute me.

** TODO Engage in fasting
Go without food during the day and eat only dinner.
Do this for a long time, while praying to God and submitting to His will.

[[file:~/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org::*How to fast][How to fast]]

* I should start fasting and praying
- [[https://www.youtube.com/watch?v=qJvCyOnkl9E][FASTING CONQUERS THE DEVIL - YouTube]]
- [[https://www.youtube.com/watch?v=4mKH5Yd1j5Y][HOW TO CAST OUT ALL DEMoNS!!! PRAYER AND FASTING!! MUST WATCH!! - YouTube]]

[[https://pcaga.org/united-prayer/a-guide-to-prayer-and-fasting/][A Guide to Prayer and Fasting - General Assembly]]

Let MHC know that I have begun fasting and praying.

Essentially, what I must do is:
- self-denial

#+BEGIN_QUOTE
  *Isaiah 58:6* - Is not this the fast that I choose: to loose the bonds of wickedness, to undo the straps of the yoke, to let the oppressed go free, and to break every yoke? (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *II Samuel 1:11-12* - Then David took hold of his clothes and tore them, and so did all the men who were with him. And they mourned and wept and fasted until evening for Saul and for Jonathan his son and for the people of the LORD and for the house of Israel, because they had fallen by the sword. (ESV)
#+END_QUOTE

** I should try to stop in myself
- Sinful habits at night:
  - Masterbation
  - Sinful thoughts

* Learn Haskell - map for CSV file
- map over tree haskell
- map over CSV haskell

** I think I want fmap

[[https://www.cs.umd.edu/class/spring2019/cmsc388F/lectures/functors.html][Functors]]

* TODO Do more Haskell - it might help with thinking, actually

** Learning a little bit of Haskell at a time could be a really good idea
It will be slow going, but totally worth it!

* TODO Find a tool which lets me pipe the contents of CSV files elementwise through an external transform

* TODO Try to sort out the problems with MHC and WINS
- Print my book on Tues
- Give it to my doctor

Talk to them about how they've
mischaracterized my condition, and how I don't
want them to contribute to a growing amount of self-propagating empirical
data based on false premises which is slanderous and destructive.

I just want people to stop slandering me in public.
That's all I want.

The issue I have faced is spiritual and not
medical and I want this damaging report to be
redacted because it misrepresents me.

The labels used in the report made by the
doctors mischaracterize my condition.

The problem is not medical - it never has been
- and by saying it is, the doctors are lying
and contributing to the problem which is
snowballing lies - and a report like this
which misidentifies the problem is a false-
witness made against me, and I'll be taking it
to heaven's courts for sure.

Just stop contributing to slander against me
and come to know the Lord Jesus Christ
for yourself those who are propagating
these lies are most likely not in the truth.

* TODO Text - prayer requests etc.
- Henry from Reformed church.
- _____ from Cornerstone church.

* TODO Go over these ones too
[[https://www.youtube.com/watch?v=Oj5Mw1s92Ig]["My Peace I leave with you." Sleep with over 8-hours of Jesus Christ, the Holy Spirit & God's Word. - YouTube]]

[[https://www.youtube.com/watch?v=utu1XILymjw]["Receive the Holy Spirit" All 92 passages of Jesus & the Holy Spirit from the Gospels to Revelation. - YouTube]]

* DONE Make a larger list of commandments and sayings from Jesus Christ
- e:/root/.pen/documents/notes/ws/commandments-of-Jesus-Christ.org
- e:/root/.pen/documents/notes/ws/commandments-of-Jesus-Christ-04.05.24.org

** DONE Definitely go over the commandments of Jesus again
[[https://www.youtube.com/watch?v=C7hdUorDU-U&t=1s]["These things I command you" Jesus' own words from the 4 Gospels - YouTube]]

Take all the sayings and put them into my Bible study document.

I do believe it is certainly worthwhile in following Jesus' commandments,
and that we certainly should.

* TODO Pray for Andrew Dougherty
He said:
- "I'm hanging in there. Trying to avoid going homeless again. My partner left me for a millionaire."

* TODO Begin praying with Scripture

* TODO Join this
[[https://www.youtube.com/watch?v=YCcmgy0DlmQ][APRIL Prophetic Word *members only* - YouTube]]

* TODO Figure out how to modify every element of a CSV in haskell by applying a function

I want to Parse a file, transform each each bit of data I'm interested in, and reconstruct the file.

* TODO Figure out how I can filter the data of a CSV (or any type of object) through a transformation function
I'm certain that Haskell would be great at this kind of task.

It would probably be worth figuring out in Haskell how to do this.

I need to know the language / words to describe the problem.

The reason why I'm interested in programming is that I want to avoid completely the use of any AI fiction stuff.
I do what to fight against the AI fiction and never embrace it.

* TODO
e:/root/.emacs.d/host/pen.el/scripts/csv-flatten

* DONE Go along to this
7am - 8am Friday’s starting on Friday 3rd May 2024.

Location is Grace House, 26 St David St. All FGBMFI praying folk welcome.

* TODO Get my project going in docker etc. without any other dependencies

* TODO Learn to us the Org-Mode Diary
j:org-agenda-toggle-diary

| kb  | f                         |                       |
|-----+---------------------------+-----------------------|
| =D= | =org-agenda-toggle-diary= | =org-agenda-mode-map= |

* TODO Respond to this email
[[notmuch:id:CAD0RMY5X8P5D892wApiQgZXTice1Tz1E7VkmYdwXiZid80bBsw@mail.gmail.com][Email from Andrew Lin: Re: Coming Saturday Social Game]]

The football game is on the 4th May...

* God justifies the wicked
#+BEGIN_QUOTE
  *Romans 4:5-8* - And to the one who does not work but trusts him who justifies the ungodly, his faith is counted as righteousness, just as David also speaks of the blessing of the one to whom God counts righteousness apart from works: Blessed are those whose lawless deeds are forgiven, and whose sins are covered; blessed is the man against whom the Lord will not count his sin. (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *Romans 5:6-9* - For while we were still weak, at the right time Christ died for the ungodly. For one will scarcely die for a righteous person—though perhaps for a good person one would dare even to die— but God shows his love for us in that while we were still sinners, Christ died for us. Since, therefore, we have now been justified by his blood, much more shall we be saved by him from the wrath of God. (ESV)
#+END_QUOTE

* TODO Try to get cron working inside Pen.el
[[https://linuxtidbits.wordpress.com/2008/01/19/cron-alarm-clock/][Cron alarm clock | Linux Tidbits]]

* TODO Ensure the alarms actually go off at the right time

* TODO Add some kind of alarm for this
[[e:/root/.pen/documents/agenda/Michael Miller.org]]

** TODO Make it so I can set alarms for agenda items

* TODO Add this into my calendar
Friday (10th May). How about 11am - 1pm?

* TODO Get this movie when I have spare money
[[https://www.youtube.com/watch?v=kdXXd2cNunw][His Only Son - YouTube]]

* TODO Try to find George Muller's prayer book
[[https://www.georgemuller.org/devotional/category/prayer][George Muller Devotional - GeorgeMuller.org]]

Learn to pray like George Muller.

* TODO Continue with looking for volunteering work

* Get some volunteering work
[[https://mail.google.com/mail/u/0/#inbox/FMfcgzGxStwJbLLfDnbNkfBdHFdMFlzp][Gmail]]

* TODO I think I should definitely donate to the Reformed Church - oh man I wish I could
I mean, the person Prashant needs help too but I am wary of what happened before.

* TODO Get Pen.el going as a single OS docker container with no other dependencies

* Perhaps I should look into LaTeX some more - it's fun!

* DONE Set up a latex language server

* TODO Look at this guy's stuff
https://www.mbts.edu/whitney/

* I don't even want to think about what the person is asking about
** TODO Tell the guy
[[https://www.youtube.com/watch?v=6_REv82Ogf8][Absolutely Bizarre - YouTube]]

I would say that 'holy software' is software that facilitates a person's ability to have a pure devotion to Jesus rather than hindering that relationship.

#+BEGIN_QUOTE
  *II Corinthians 11:3* - But I am afraid that as the serpent deceived Eve by his cunning, your thoughts will be led astray from a sincere and pure devotion to Christ. (ESV)
#+END_QUOTE

I feel strongly that obedience to Jesus' commandments is something that we don't want to disrupt. When you're following them in reality, there tends to be a bit of resistance to living that out faithfully from 'the world'.

#+BEGIN_QUOTE
  *I Corinthians 10:23* - All things are lawful, but not all things are helpful. All things are lawful, but not all things build up. (ESV)
#+END_QUOTE

Generally, if something has been reserved / set apart for serving God then you could call it holy.

#+BEGIN_QUOTE
  *II Corinthians 6:17* - Therefore go out from their midst, and be separate from them, says the Lord, and touch no unclean thing; then I will welcome you, (ESV)
#+END_QUOTE

Some problems I see with AI generally where it relates to following Jesus is that AI shouldn't be the first
port of call to seeking to understand the Scripture, or for to day-to-day decision-making.

In both cases using an AI in that way is having a man-in-the-middle of your thought process, where a Christian doesn't want to put up barriers to serving God with a pure devotion to Christ. We want to worship God in spirit and truth:

#+BEGIN_QUOTE
  *John 4:24* - God is spirit, and those who worship him must worship in spirit and truth. (ESV)
#+END_QUOTE

The way that people tend to employ AI personal assistants is to consult them for advice, like oracles that we need guidance from.
But Christians need to have their first allegiance to Christ, and not allow anything to get in the way of that.

This is described here:

#+BEGIN_QUOTE
  *I Corinthians 1:18* - For the word of the cross is folly to those who are perishing, but to us who are being saved it is the power of God. (ESV)
#+END_QUOTE

Also, simple obedience to God really may look like total folly to people who are being led astray by the world - those language models probably factor in a lot of 'wordly' advice, where it's actually the Spirit of God which leads into the truth.

#+BEGIN_QUOTE
  *John 16:13* - When the Spirit of truth comes, he will guide you into all the truth, for he will not speak on his own authority, but whatever he hears he will speak, and he will declare to you the things that are to come. (ESV)
#+END_QUOTE

It's really important that we have software that unyokes us from things which are following a different trajectory, and a different spirit. So the fewer dependencies the better.

#+BEGIN_QUOTE
  *I Corinthians 2:12* - Now we have received not the spirit of the world, but the Spirit who is from God, that we might understand the things freely given us by God. (ESV)
#+END_QUOTE

The world sees Christian reasoning as folly, because God uses the humble the shame the proud, the weak to shame the strong, the foolish (in the world's eyes) to shame the wise:

#+BEGIN_QUOTE
  *I Corinthians 1:27* - But God chose what is foolish in the world to shame the wise; God chose what is weak in the world to shame the strong; (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *Matthew 18:3* - and said, Truly, I say to you, unless you turn and become like children, you will never enter the kingdom of heaven. (ESV)
#+END_QUOTE

As a Christian, we should be aiming for a 'brain-to-God interface', not a brain-to-computer interface, so wedging something right there in the decision-making is not good.

#+BEGIN_QUOTE
  *Isaiah 30:20-21* - And though the Lord give you the bread of adversity and the water of affliction, yet your Teacher will not hide himself anymore, but your eyes shall see your Teacher. And your ears shall hear a word behind you, saying, This is the way, walk in it, when you turn to the right or when you turn to the left.
#+END_QUOTE

We are led by Jesus' spirit:

#+BEGIN_QUOTE
  *Romans 8:14-17* - For all who are led by the Spirit of God are sons of God. For you did not receive the spirit of slavery to fall back into fear, but you have received the Spirit of adoption as sons, by whom we cry, Abba! Father! The Spirit himself bears witness with our spirit that we are children of God, and if children, then heirs—heirs of God and fellow heirs with Christ, provided we suffer with him in order that we may also be glorified with him. (ESV)
#+END_QUOTE

Here's an example of being led by the spirit.
If I were to preach to someone that Jesus has taught that we should give to anyone who asks, and then
right after preaching the commandment, I go for a walk and somebody on the street asks me for money, I would be
aware that being led by the spirit I should comply with Jesus' commandment.

Jesus is the spirit. Jesus' words are spirit and life, etc. Christians are led by the spirit of Jesus. Now if ChatGPT, say, advised me to not because of 'worldly wisdom' which the model had been trained to give, then I have to choose which spirit to be led by. I could choose Jesus out of obedience, or I could be led astray by some other thing, and the point is the AI recommendation is simply not going to align with the will of God for you at that moment every time.

#+BEGIN_QUOTE
  *John 6:63* - It is the Spirit who gives life; the flesh is of no avail. The words that I have spoken to you are spirit and life. (ESV)
#+END_QUOTE

AI etc. is of the world. Christians are led by the spirit of God.

I consider AI fiction to be unclean, just as I would consider commercial software to be unclean, but in its own way.

I'm just claiming an intuition on this one and for my project I plan on adhering to the vision of avoiding AI, but I see no problem with building
information retrieval tools, note-taking tools, etc.

You might've asked a different but related question: What makes commercial software unholy?

#+BEGIN_QUOTE
  *Matthew 6:24* - No one can serve two masters, for either he will hate the one and love the other, or he will be devoted to the one and despise the other. You cannot serve God and money. (ESV)
#+END_QUOTE

It comes down to what a person is yoked to / dependencies.
Christians are yoked primarily to Christ.
For example, if a Christian believer takes an unbelieving spouse would almost certainly can wreck havoc on their relationship with God.
Now if anything else, tries to wedge itself deeply into some aspect of your life where it starts to demand your attention and it's hard to get rid of and it's taking you away from God, I would consider it to be unclean. And AI fiction I consider to be a noxious weed for several reasons.

I could go on about my opinions but at the end of the day I have my gut.

** 

** TODO Explain to the guy the importance of simply spending time with everyone
II Corinthians 6:16-18 - What agreement has the temple of God with idols? For we are the temple of the living God; as God said, I will make my dwelling among them and walk among them, and I will be their God, and they shall be my people. Therefore go out from their midst, and be separate from them, says the Lord, and touch no unclean thing; then I will welcome you, and I will be a father to you, and you shall be sons and daughters to me, says the Lord Almighty. (ESV)

It's important to not be unevenly yoked.

Holiness is about who you serve primarily. Holiness is being set apart for God.

Now if anything else, tries to wedge itself deeply into some aspect of your life where it starts to demand your attention and
you can't seem to get rid of it, and it's taking you away from God, I would consider it to be unclean.

You might've asked a similar question: What makes commercial software unholy. Well here is your answer:

Matthew 6:24 - No one can serve two masters, for either he will hate the one and love the other, or he will be devoted to the one and despise the other. You cannot serve God and money. (ESV)

To wedge something between Christ and the believer so that a person's decisions start to go against the teaching means that they believer may be unevenly yoked with unbelievers or worldly things,
which we're really trying to stay set apart from.

I value anecdotal evidence over empirical.

A Christian maintains first and foremore allegiance to Christ and obeying Christ.
Unlike Christ Himself, who could maintain perfect faithfulness to Father God despite spending time freely among the faithless,
Christians should not be so confident that they think they can yoke themself to any old thing, or person
and expect to be able to maintain faithfulness to Jesus.

We've got to guard their heart.
Minimising dependencies on things like subscriptions online, etc.

** 
II Corinthians 6:14 - Do not be unequally yoked with unbelievers. For what partnership has righteousness with lawlessness? Or what fellowship has light with darkness? (ESV)

** 
I think it's important to

** 
2 Corinthians 6:17: Therefore, come out from among them and be separate, says the Lord; do not touch any unclean thing, and I will welcome you.

Romans 12:2: Do not be conformed to this age, but be transformed by the renewing of your mind, so that you may discern what is the good, pleasing, and perfect will of God.

1 John 2:15-16: Do not love the world or the things that belong to the world. If anyone loves the world, love for the Father is not in him. For everything that belongs to the world-the lust of the flesh, the lust of the eyes, and the pride in one’s lifestyle—is not from the Father, but is from the world.

* 
Proverbs 4:23 - Keep your heart with all vigilance, for from it flow the springs of life. (ESV)

I'm keeping a perimiter. And I plan on keeping AI fiction out of it for the time being.

Large language models in computing is a bit of a paradigm shift where people seem to be relying on it for their computing.
I, for one, don't want my kids to be raised on ChatGPT.

Holiness is being set

* TODO Do epic Bible studies with Pen.el
That's a pretty good idea, actually.

** Hmm. I agree with Derek Prince here
[[https://www.youtube.com/watch?v=QbqdtXY3eoY][Spiritual Conflict - Results of Adam's Fall Part 6 A {6:1} - YouTube]]

** I should really make sure that my note-taking tools are even better

* TODO Learn a little bit of latex at a time
[[https://www.youtube.com/watch?v=JnMohGjQLD8][How to Customize Section Headings in LaTeX - YouTube]]

** Incrementally add to e:final-tidy-latex
e:final-tidy-latex

* TODO Go to Adson's Bible study

* TODO Enquire about volunteer work
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  enquiries@psotago.org.nz
#+END_SRC

* TODO This Monday, I should send the remaining $50 to Child Rescue

* I should try fasting
[[https://www.youtube.com/watch?v=2dM6kWe7Zs4][DELIVERANCE FROM SPIRITUAL MARRIAGE: "INCUBUS & SUCCUBUS" "SPIRIT HUSBAND & SPIRIT WIFE" SEX DEMONS - YouTube]]

I should also actually just stay away from people who are not following Jesus.

* TODO Try to get by on $25 this week!
That sounds fun.
Just live on veges and rice.

* TODO Make latex make the tables automatically wrap
** Change
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  \begin{tabular}{ll}
#+END_SRC

** Into
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  \begin{tabular}{p{0.35\linewidth} | p{0.6\linewidth}}
#+END_SRC

* TODO Go to the supermarket and get some cheap food

* TODO Explain the problog stuff to Fani
Then suggest she talks to 'Matthew' from computer science next door if she has questions.

** TODO Go over these
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/01_coins.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/02_bayes.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/03_dice.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/04_pgraph.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/05_smokers.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/06_more_features.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/08_rule_probs.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/09_higherorderfunctions.html"
  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/basic/10_inhibitioneffects.html"

  chrome "/home/shane/dump/programs/httrack/mirrors/https-dtai-cs-kuleuven-be-problog-/dtai.cs.kuleuven.be/problog/tutorial/dtproblog/01_umbrella.html"
#+END_SRC

* TODO Listen to this all through tonight
https://www.youtube.com/watch?v=3y7nIFdhJuE&ab_channel=EvangelistFernandoPerez

* TODO Go over this with Fani
- Basic inference
  - e:/volumes/home/shane/notes/ws/problog/scratch/basic-coin.problog
  - e:/volumes/home/shane/notes/ws/problog/scratch/noisy-or-coin.problog
  - e:/volumes/home/shane/notes/ws/problog/scratch/first-order-coin.problog
  - e:/volumes/home/shane/notes/ws/problog/scratch/probabilistic-clause-coin.problog
- The earthquake example is bayesian networks:
  - e:/volumes/home/shane/notes/ws/problog/scratch/earthquake-probabilistic-clauses.problog
  - e:/volumes/home/shane/notes/ws/problog/scratch/earthquake-firstorder.problog
- Fuzzy logic / multi-valued variables
  - e:/volumes/home/shane/notes/ws/problog/scratch/annotated-disjunctions-earthquake.problog

I should learn to get good at this stuff.
It's a good opportunity, I guess, to get started in teaching.

* TODO Yes, continue to work on the Bible study software

* TODO Do some chemistry, I guess
https://www.cerritos.edu/chemistry/chem_100/Handouts/Polyatomic%20Ions.pdf

* Consider donating to gotquestions
https://www.gotquestions.org/

https://www.gotquestions.org/donate2.html

* TODO Learn to write with Aramaic in unicode - this is a good idea
https://en.wikipedia.org/wiki/Imperial_Aramaic_(Unicode_block)
https://en.wikipedia.org/wiki/Aramaic_alphabet#Unicode
https://en.wikipedia.org/wiki/Syriac_(Unicode_block)

** TODO Learn Aramaic handwriting from this
https://www.utf8icons.com/character/1808/syriac-letter-alaph

** TODO Write out the Lord's prayer

* TODO Add to emacs symbol select
- aramaic
- irish gaelic

* TODO Learn the International Phonetic Alphabet (IPA)
Would I actually end up using it at all?
Also, what would I use it for?

Isn't learning something like this a bit extreme?
I think I'd rather learn some Chemistry or something.
Perhaps I should learn some Chemistry today.

* TODO Learn about the Church of Ireland

* TODO Pray for Steven
- he passed out

* TODO Learn about the Biblical basis for the rapture
- https://www.desiringgod.org/interviews/what-is-the-rapture

** If I want to learn about the biblical basis for the rapture, then David Jeremiah would provide it
https://www.davidjeremiah.org/the-great-disappearance/onsale

* TODO Study passover, etc.
https://en.wikipedia.org/wiki/Passover

This is probably a good idea.

* I should do a study on all the references to the creation of the world

* TODO Write about the hope that we have in Jesus Christ

* TODO Figure out what is wrong with my current situation
Well, I do know what I was totally screwed over by what happened.

* TODO Do a Bible study on the mensions of the gospel from the gospels and from the NT
e:/root/dump/tmp/scratchX1iAWq.txt

* TODO Consider donating to these guys
[[https://www.youtube.com/watch?v=qu8QxxIF4UE][Prayers Against Evil Attacks During Sleep - Powerful Prayers Against Bad Dreams and Nightmares - YouTube]]

* Break these curses in Jesus Christ's name
https://youtu.be/qu8QxxIF4UE?t=1941

* TODO Also learn how to do Chemistry reports in latex

* I should definitely to a comprehensive Bible study
This is very important.

* TODO Draw electron diagrams
#+BEGIN_SRC text -n :async :results verbatim code :lang text
    ‡  Transition State  [Br⋯CH₃⋯Cl]‡⁻
    ⠆  Formula  :N≡N:
    ⠇  Formula  :N≡N:
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  U+2026 HORIZONTAL ELLIPSIS
  UTF-8: e2 80 a6 UTF-16BE: 2026 Decimal: &#8230; Octal: \020046
  …
#+END_SRC

** Use BRAILLE
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "$PENCONF/documents/notes"; unicode BRAILLE
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ⠂
  ⠃
  ⠄
  ⠅
  ⠆
  ⠇
#+END_SRC

*** What about horizontal?

** Or should I just have one dot per cell? Probably, yes, actually.
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ⠂
#+END_SRC

The middle dot is probably best, actually:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ·
#+END_SRC

And the colon:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  :
#+END_SRC

OK, so what about doing this in one symbol?

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  --·
    ·
#+END_SRC

2 dots:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ‥
#+END_SRC

Actually, use literally 2 dots:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ··
#+END_SRC

* TODO Find a library of chemical compounds, or compile a list myself
- I could, for example, make a big list of organic compounds.
  - It would be worth keeping a list of chemicals I encounter
    - I should write them all out for myself
    - every chemical I end up trying to know about, or every chemical I use for practicals

* TODO I should generate electron diagrams
- https://sciencenotes.org/wp-content/uploads/2020/12/How-Draw-Lewis-Structure.jpg
- https://i.ytimg.com/vi/cIuXl7o6mAw/maxresdefault.jpg
- https://georgiasouthern.libguides.com/c.php?g=943952&p=6804541
- https://www.masterorganicchemistry.com/2010/08/14/from-gen-chem-to-org-chem-pt-7-lewis-structures/
- https://www.masterorganicchemistry.com/2010/08/14/from-gen-chem-to-org-chem-pt-7-lewis-structures/

I think this is what I want to use for it:

#+BEGIN_SRC text -n :async :results verbatim code :lang text

          ··
         :O :
      ··  |   ··
     :O =:S :-O :
          ··  ··

#+END_SRC

I do want to ensure it's all programmable. Stuff using diagrams and stuff.

Ideally, I should have the actual electrons display too:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ██  ██  ██  ██  ██
    ██████··██████
  ██████ :O : ██████
    ██··██| ██··██
  ██ :O =:S :-O : ██
    ██  ██··██··██
  ██████████████████
    ██████████████
  ██  ██  ██  ██  ██
#+END_SRC

I could syntax highlight it to make it more legible.

S = 6 × 1 = 6
O₃

Valence electrons are the electrons in the
outermost shell, or energy level, of an atom.

For example, oxygen has six valence electrons,
two in the 2s subshell and four in the 2p
subshell.

We can write the configuration of oxygen's
valence electrons as 2s²2p⁴.

* TODO Make regex bible search somehow

* TODO Continue to work on the faith and judgement document
It's important, especially if God makes me remain here for a while.

* TODO Memoize this:
j:sx-request-make

Sadly, it's not that simple.

* TODO Learn to pipe parts of text files through other scripts

** pen-aatr
This splits the document according to the record separator
and pipes each section through another script.

For example:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  pen-aatr -r "\n\\" cmd-2d-to-1d-block
#+END_SRC

*** DONE Only apply to certain records

I should probably be able to specify, numerically,
the ID of each record I want to transform:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  cat "$(which pen-aatr)" | pen-aatr -k -ids 1,3,5,7,9,11 '#' "sed -u -z 's/[a-z]/\\\U&/g'" | v
#+END_SRC

** grepfilter
This finds within a document things to run an transformation on.

For example, this slugifies IP addresses:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  ifconfig | grepfilter slugify "rosie grep -o subs net.ipv4"
#+END_SRC

* 
** 
#+BEGIN_QUOTE
  *Psalms 3:5-7* - I lay down and slept; I woke again, for the LORD sustained me. I will not be afraid of many thousands of people who have set themselves against me all around. Arise, O LORD! Save me, O my God! For you strike all my enemies on the cheek; you break the teeth of the wicked. (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *Psalms 4:8* - In peace I will both lie down and sleep; for you alone, O LORD, make me dwell in safety. (ESV)
#+END_QUOTE

** Angels
#+BEGIN_QUOTE
  *Psalms 34:7* - The angel of the LORD encamps around those who fear him, and delivers them. (ESV)
#+END_QUOTE

#+BEGIN_QUOTE
  *Hebrews 1:14* - Are they not all ministering spirits sent out to serve for the sake of those who are to inherit salvation? (ESV)
#+END_QUOTE

* DONE Fix Agenda - it should not go to the bottom of the screen

This is the problem:

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (setq org-agenda-finalize-hook
        '(org-agenda-log-mode-colorize-block org-agenda-property-add-properties))
#+END_SRC

** This fixed it
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (defun org-agenda-property-add-properties-around-advice (proc &rest args)
    (let ((res (apply proc args)))
      (goto-char (point-min))
      res))
  (advice-add 'org-agenda-property-add-properties :around #'org-agenda-property-add-properties-around-advice)
#+END_SRC

* TODO I really want a 2d shell language
Commands should be able to be represented in 2D quite easily.

=org-babel= is so far my closest solution, but
I think it would be good to improve the
situation somehow - perhaps by expanding and
unexpanding shell script argument strings -
from "\n" to the actual newline and back -
figure out how to do this.

I mean, this works, but it's still not optimal because the ="= get in the way:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  cmd testing 123 "YO

  YOYO"
  "HI
  THERE"
#+END_SRC

So I think I need to find a representation and then somehow convert between the representations.

** This:
There should be a command called =2d= which preprocesses a string such as the following:

Problems to work out:
- Figure out unicode. q does not like unicode
- Babel doesn't have spaces

*** I still have more work to do on it
#+BEGIN_SRC text :f cmd-2d-to-1d-full :async :results verbatim code :lang text
  echo
  \
   YO|
     |
   2d|
  yo
  \
   Foo
  \
   Bar Baz
  | vsed 's/Y 2/G 3/'
#+END_SRC

#+RESULTS:
#+begin_src text
echo "YO\n  \n2d" yo Foo  "Bar Baz" | vsed 's/Y 2/G 3/'
#+end_src

should expand to:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  echo "YO\n  \n2d" yo Foo "Bar Baz" | vsed 's/Y 2/G 3/'
#+END_SRC

I think I should probably use emacs lisp for this.

*** Algorithm
1. Extract each block found within the command e.g.:

#+BEGIN_SRC text :f cmd-2d-to-1d-block :async :results verbatim code :lang text
  \
   YO

   2d
#+END_SRC

#+RESULTS:
#+begin_src text
"YO\n\n2d"
#+end_src

2. Convert each one independently to something like e.g:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  "YO\n\n2d" \
#+END_SRC

3. Optionally, join all the lines together, removing trailing =\=.

** Also, make it work in bash:

This doesn't work:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  2d echo  \
  \        \
   YO|     \
     |     \
   2d|     \
  yo       \
  \        \
   Foo     \
  \        \
   Bar Baz \
  | vsed 's/Y 2/G 3'
#+END_SRC

Maybe this will (join consecutive arguments with |...|):

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  2d echo    \
  "|YO|"     \
  "|  |"     \
  "|2d|"     \
  yo         \
  "|Foo|"    \
  "Bar Baz"  \
  | vsed 's/Y 2/G 3'
#+END_SRC

*** TODO Fix this
e:/root/.emacs.d/host/pen.el/scripts/pen-aatr

*** Implementation: use emacs lisp
e:pen.els

j:cmd-2d-to-1d

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  echo foo | cmd-2d-to-1d hi yo
#+END_SRC

#+RESULTS:
#+begin_src text
foo
hi
yo
#+end_src

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sp +/"cmd-2d-to-1d" "$EMACSD/pen.el/scripts/bible-mode-scripts/pen.els"
#+END_SRC

* TODO I want 2d sed - it wouldn't have full sed capabilities, but be a mostly literal replacement, with a single wild char matching a single char

The single wild car would be '.' by default.

Fix up this with a 2d sed:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  |1                                                                                                     2
  | H                                                                                                     He
  |-----
  |3   | 4                                                                 5     6     7     8     9     10
  | Li |  Be                                                                B     C     N     O     F     Ne
  |    |
  |11  | 12                                                                13    14    15    16    17    18
  | Na |  Mg                                                                Al    Si    P     S     Cl    Ar
  |-----------------------------------------------------------------------------------------------------------
  |19  | 20  | 21  | 22   |23   |24    25    26    27    28    29    30    31    32    33    34    35    36
  | K  |  Ca |  Sc |  Ti  | V   | Cr    Mn    Fe    Co    Ni    Cu    Zn    Ga    Ge    As    Se    Br    Kr
  |-----------------------------------------------------------------------------------------------------------
  |37  | 38  | 39  | 40   |41   |42    43    44    45    46    47    48    49    50    51    52    53    54
  | Rb |  Sr |  Y  |  Zr  | Nb  | Mo    Tc    Ru    Rh    Pd    Ag    Cd    In    Sn    Sb    Te    I     Xe
  |-----------------------------------------------------------------------------------------------------------
  |55  | 56  | 57  | 72   |73   |74    75    76    77    78    79    80    81    82    83    84    85    86
  | Cs |  Ba |  La |  Hf  | Ta  | W     Re    Os    Ir    Pt    Au    Hg    Tl    Pb    Bi    Po    At    Rn
  |-----------------------------------------------------------------------------------------------------------
  |87  | 88  | 89   |104  |105  |106   107   108   109   110   111   112   113   114   115   116   117   118
  | Fr |  Ra |  Ac  | Rf  | Db  | Sg    Bh    Hs    Mt    Ds    Rg    Cn    Nh    Fl    Mc    Lv    Ts    Og
  |-----------------------------------------------------------------------------------------------------------
  |                  58    59    60    61    62    63    64    65    66    67    68    59    70    71
  |                   Ce    Pr    Nd    Pm    Sm    Eu    Gd    Tb    Dy    Ho    Er    Tm    Yb    Lu
  |
  |                  90    91    92    93    94    95    96    97    98    99    100   101   102   103
  |                   Th    Pa    U     Np    Pu    Am    Cm    Bk    Cf    Es    Fm    Md    No    Lr
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ---


  ---
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ---
   |
   |
  ---
#+END_SRC

** I also want simple globs to work
i.e. make it so all '.' are wilds, for example.
Set a wild character.

** I also want it to be a 'scraper'
So I should be able to extract all the matches.

* Also, I want a 'vertical sed'
That's easy. Just do a 90° translation, and a sed, and then back.

e:/root/.emacs.d/host/pen.el/scripts/transpose-characters.sh

** TODO Make it so it fills out the entire square first, then it transposes
Then afterward

https://stackoverflow.com/questions/9394408/how-to-pad-all-lines-with-spaces-to-a-fixed-width-in-vim-perhaps-using-sed-awk

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  awk '{printf "%-63s\n", $0}'
#+END_SRC

This fills spaces for each line.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  cat /root/.emacs.d/host/pen.el/src/pen-chemistry.el | head -n 2 | awk '{printf "%-63s\n", $0}' | v
#+END_SRC

Now I must do the same for the number of lines.

*** Get the longest line
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  awk ' { if ( length > x ) { x = length; y = $0 } }END{ print y }'
#+END_SRC

*** DONE Fix it so that it keeps all the same whitespace characters
e:/root/.emacs.d/host/pen.el/scripts/transpose-characters.sh

* TODO Learn to do spreadsheets in the terminal as well
What I really would like is to open CSVs also into a spreadsheet editor, rather than fpvd.

I should work with data in this way.

* TODO Continue with my Bible readings - it's definitely fighting back against some horrendously demonic stuff

* 
e:/volumes/home/shane/var/smulliga/source/git/mullikine/prayers/13.04.24.org

* TODO Use fpvd to display various information
#+BEGIN_SRC sh -n :nw bash :async :results none :lang text
  fpvd /root/.pen/documents/notes/ws/chemistry/list-of-chemical-elements.tsv
#+END_SRC

- The heaviest element which is naturally a liquid

* TODO Continue turning this file from Wikipedia into data for emacs
chrome:https://en.wikipedia.org/wiki/Block_(periodic_table)

chrome:https://en.wikipedia.org/wiki/List_of_chemical_elements

** List of chemical elements
e:/root/.pen/documents/notes/ws/chemistry/list-of-chemical-elements.tsv

*** TODO Make this queryable inside the emacs periodic table

mx:chemtable

** TODO Make a way to copy as a mouse would, the contents of a website from firefox or from Chrome
This is how I was able to get this table of data:

e:/root/.pen/documents/notes/ws/chemistry/list-of-chemical-elements.tsv

* TODO Set up some more softwares
https://github.com/GideonWolfe/pTable

** This looks quite epic!
https://github.com/velorek1/terminalperiodictable

It is pretty cool, but it's not as powerful as emacs.
It's pretty though.
It's also written in c - very impressive!

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tptable
#+END_SRC

** Set this up too
https://github.com/BeaconBrigade/balance-tui/

* TODO Extend the 'gf' command in vim with a shell script - vim should use the shell script to make modifications

#+BEGIN_SRC sh -n :sps z-repl-fp :async :results none :lang text
  E447: Can't find file "e:/root/dump/tmp/scratchPyUF2c.txt" in path
#+END_SRC

I could edit the vim source code - that's one option.
Find the error and deal with it.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "$MYGIT/vim/src"; nem ead E447
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"E447" "$MYGIT/vim/src/findfile.c"
#+END_SRC

Change this c function:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"find_file_in_path" "$MYGIT/vim/src/findfile.c"
#+END_SRC

* TODO Learn to study wikipedia on the topic of Chemistry through emacs, etc.
I should focus on studying things through factual sources.

https://en.wikipedia.org/wiki/Block_(periodic_table)#s-block

Just learn and take notes, etc.

* TODO Clean this up and turn it into a table
e:/root/dump/tmp/scratchPyUF2c.txt

* Learn to understand ebnf
https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node244.html

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  for-as ::= {for | as} for-as-subclause {and for-as-subclause}*
  for-as-subclause ::= for-as-arithmetic | for-as-in-list
  		| for-as-on-list | for-as-equals-then
  		| for-as-across | for-as-hash | for-as-package
  for-as-arithmetic ::= var [type-spec] [{from | downfrom | upfrom} expr1 ]
  		[{to | downto | upto | below | above} expr2]
  		[by expr3]
  for-as-in-list ::= var [type-spec] in expr1 [by step-fun]
  for-as-on-list ::= var [type-spec] on expr1 [by step-fun]
  for-as-equals-then ::= var [type-spec] = expr1 [then step-fun]
  for-as-across ::= var [type-spec] across vector
  for-as-hash ::= var [type-spec] being {each | the}
  		{hash-key | hash-keys | hash-value | hash-values}
  		{in | of} hash-table
  		[using ({hash-value | hash-key} other-var)]
  for-as-package ::= var [type-spec] being {each | the}
  		for-as-package-keyword
  		{in | of} package
  for-as-package-keyword ::= symbol | present-symbol | external-symbol
  		| symbols | present-symbols | external-symbols
#+END_SRC

https://stackoverflow.com/questions/66912379/is-this-conversion-from-bnf-to-ebnf-correct

* TODO I should definitely continue to work on my faith and judgement theology 'book'

Keep watching videos of

https://www.youtube.com/watch?v=cdmB60cHTCs&ab_channel=DerekPrince

* TODO Figure out how to programmatically highlight periodic table elements
mx:chemtable

j:chemtable

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat $EMACSD_BUILTIN/elpa/chemtable-20230314.1825/chemtable.el | scrape "chemtable-.-block-face \"..\"" | pavs
#+END_SRC

e:/root/.emacs.d/host/pen.el/src/pen-chemistry.el

* TODO email Tim and tell him I watched this video on Diggle
[[https://www.youtube.com/watch?v=9ETwZuu9yZ0][272. The deepest, highest, longest canal tunnel in Britain - YouTube]]

Diggle (Village in England), Greater Manchester.

* TODO Go over the Heidelberg Catechism
e:/root/.pen/documents/notes/ws/heidelberg-catechism.org

Consider that I nearly actually *went* to Heidelberg.

That is very interesting.

In retrospect, I should have put the Heidelberg catechism on my blog!

I do believe that Jesus has been watching over me.
I have always had faith that that is the case.

But I feel broken now and existentially confused now.

Lord Jesus, if You are upset with me, I am really sorry for my mistakes - I am
sorry for my mistakes and especially sorry for all the sin in my past, and
especially for ongoing bad thoughts.

Lord Jesus, I am just so confused. I'm disappointed in myself.

* TODO Keep seeking the Lord Jesus

* TODO Learn to write Irish Gaelic - fun!
** Insular script
https://www.youtube.com/watch?v=ZcFHMFog9po&t=16s&ab_channel=BenjaminArmstrong

** An Phaidir
https://www.youtube.com/watch?v=xNz-xu3fmt4&t=5s&ab_channel=Peannaireacht

*** Sung
https://www.youtube.com/watch?v=3RwJJK0_aZs&ab_channel=AnnmarieO%27Riordan-Topic

* TODO Learn rust
e:$MYGIT_HOST/rust-lang/rust-by-example/

* TODO Make it use perl instead of rust
https://metacpan.org/release/SBURKE/Text-Unidecode-1.30/view/lib/Text/Unidecode.pm

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v deunicode
#+END_SRC

* I should definitely continue to pray for Ian Dalziel

Dear Heavenly Father, Jehovah God,
please speak to me about what is the deal with this person Ian Dalziel.
It's my heart's desired for him to be saved and to come into a relationship with You, Father God, through Jesus Christ.
Father God, I don't endorse open rebellion against Jesus Christ by denying the resurrection.
Please, God, I don't endorse it.
Nevertheless, I would like to see Ian saved.
Your will be done Father God.
In Jesus Christ's name I pray,
AMEN!!

** Hmmm. I must surely pray for Ian
Remember that he actually brought up 'Mere Christianity' when I was in Wakari.

That's interesting, isn't it.

* TODO Do this Bible study - it's important

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Ac 2:17: And in the last days it shall be, God declares, that I will pour out my Spirit on all flesh, and your sons and your daughters shall prophesy, and your young men shall see visions, and your old men shall dream dreams;
  Ac 2:26: therefore my heart was glad, and my tongue rejoiced; my flesh also will dwell in hope.
  Ac 2:31: he foresaw and spoke about the resurrection of the Christ, that he was not abandoned to Hades, nor did his flesh see corruption.
  Ro 1:3: concerning his Son, who was descended from David according to the flesh
  Ro 4:1: What then shall we say was gained by Abraham, our forefather according to the flesh?
  Ro 7:5: For while we were living in the flesh, our sinful passions, aroused by the law, were at work in our members to bear fruit for death.
  Ro 7:14: For we know that the law is spiritual, but I am of the flesh, sold under sin.
  Ro 7:18: For I know that nothing good dwells in me, that is, in my flesh. For I have the desire to do what is right, but not the ability to carry it out.
  Ro 7:25: Thanks be to God through Jesus Christ our Lord! So then, I myself serve the law of God with my mind, but with my flesh I serve the law of sin.
  Ro 8:3: For God has done what the law, weakened by the flesh, could not do. By sending his own Son in the likeness of sinful flesh and for sin, he condemned sin in the flesh,
  Ro 8:4: in order that the righteous requirement of the law might be fulfilled in us, who walk not according to the flesh but according to the Spirit.
  Ro 8:5: For those who live according to the flesh set their minds on the things of the flesh, but those who live according to the Spirit set their minds on the things of the Spirit.
  Ro 8:6: To set the mind on the flesh is death, but to set the mind on the Spirit is life and peace.
  Ro 8:7: For the mind that is set on the flesh is hostile to God, for it does not submit to God's law; indeed, it cannot.
  Ro 8:8: Those who are in the flesh cannot please God.
  Ro 8:9: You, however, are not in the flesh but in the Spirit, if in fact the Spirit of God dwells in you. Anyone who does not have the Spirit of Christ does not belong to him.
  Ro 8:12: So then, brothers, we are debtors, not to the flesh, to live according to the flesh.
  Ro 8:13: For if you live according to the flesh you will die, but if by the Spirit you put to death the deeds of the body, you will live.
  Ro 9:3: For I could wish that I myself were accursed and cut off from Christ for the sake of my brothers, my kinsmen according to the flesh.
  Ro 9:5: To them belong the patriarchs, and from their race, according to the flesh, is the Christ who is God over all, blessed forever. Amen.
  Ro 9:8: This means that it is not the children of the flesh who are the children of God, but the children of the promise are counted as offspring.
  Ro 13:14: But put on the Lord Jesus Christ, and make no provision for the flesh, to gratify its desires.
  1Co 3:1: But I, brothers, could not address you as spiritual people, but as people of the flesh, as infants in Christ.
  1Co 3:3: for you are still of the flesh. For while there is jealousy and strife among you, are you not of the flesh and behaving only in a human way?
  1Co 5:5: you are to deliver this man to Satan for the destruction of the flesh, so that his spirit may be saved in the day of the Lord.
  1Co 6:16: Or do you not know that he who is joined to a prostitute becomes one body with her? For, as it is written, The two will become one flesh.
  1Co 15:39: For not all flesh is the same, but there is one kind for humans, another for animals, another for birds, and another for fish.
  1Co 15:50: I tell you this, brothers: flesh and blood cannot inherit the kingdom of God, nor does the perishable inherit the imperishable.
  2Co 1:17: Was I vacillating when I wanted to do this? Do I make my plans according to the flesh, ready to say Yes, yes and No, no at the same time?
  2Co 4:11: For we who live are always being given over to death for Jesus' sake, so that the life of Jesus also may be manifested in our mortal flesh.
  2Co 5:16: From now on, therefore, we regard no one according to the flesh. Even though we once regarded Christ according to the flesh, we regard him thus no longer.
  2Co 10:2: I beg of you that when I am present I may not have to show boldness with such confidence as I count on showing against some who suspect us of walking according to the flesh.
  2Co 10:3: For though we walk in the flesh, we are not waging war according to the flesh.
  2Co 10:4: For the weapons of our warfare are not of the flesh but have divine power to destroy strongholds.
  2Co 11:18: Since many boast according to the flesh, I too will boast.
  2Co 12:7: So to keep me from being too elated by the surpassing greatness of the revelations, a thorn was given me in the flesh, a messenger of Satan to harass me, to keep me from being too elated.
  Ga 2:20: I have been crucified with Christ. It is no longer I who live, but Christ who lives in me. And the life I now live in the flesh I live by faith in the Son of God, who loved me and gave himself for me.
  Ga 3:3: Are you so foolish? Having begun by the Spirit, are you now being perfected by the flesh?
  Ga 4:23: But the son of the slave was born according to the flesh, while the son of the free woman was born through promise.
  Ga 4:29: But just as at that time he who was born according to the flesh persecuted him who was born according to the Spirit, so also it is now.
  Ga 5:13: For you were called to freedom, brothers. Only do not use your freedom as an opportunity for the flesh, but through love serve one another.
  Ga 5:16: But I say, walk by the Spirit, and you will not gratify the desires of the flesh.
  Ga 5:17: For the desires of the flesh are against the Spirit, and the desires of the Spirit are against the flesh, for these are opposed to each other, to keep you from doing the things you want to do.
  Ga 5:19: Now the works of the flesh are evident: sexual immorality, impurity, sensuality,
  Ga 5:24: And those who belong to Christ Jesus have crucified the flesh with its passions and desires.
  Ga 6:8: For the one who sows to his own flesh will from the flesh reap corruption, but the one who sows to the Spirit will from the Spirit reap eternal life.
  Ga 6:12: It is those who want to make a good showing in the flesh who would force you to be circumcised, and only in order that they may not be persecuted for the cross of Christ.
  Ga 6:13: For even those who are circumcised do not themselves keep the law, but they desire to have you circumcised that they may boast in your flesh.
  Eph 2:3: among whom we all once lived in the passions of our flesh, carrying out the desires of the body and the mind, and were by nature children of wrath, like the rest of mankind.
  Eph 2:11: Therefore remember that at one time you Gentiles in the flesh, called the uncircumcision by what is called the circumcision, which is made in the flesh by hands—
  Eph 2:14: For he himself is our peace, who has made us both one and has broken down in his flesh the dividing wall of hostility
  Eph 5:29: For no one ever hated his own flesh, but nourishes and cherishes it, just as Christ does the church,
  Eph 5:31: Therefore a man shall leave his father and mother and hold fast to his wife, and the two shall become one flesh.
  Eph 6:12: For we do not wrestle against flesh and blood, but against the rulers, against the authorities, against the cosmic powers over this present darkness, against the spiritual forces of evil in the heavenly places.
  Pp 1:22: If I am to live in the flesh, that means fruitful labor for me. Yet which I shall choose I cannot tell.
  Pp 1:24: But to remain in the flesh is more necessary on your account.
  Pp 3:2: Look out for the dogs, look out for the evildoers, look out for those who mutilate the flesh.
  Pp 3:3: For we are the real circumcision, who worship by the Spirit of God and glory in Christ Jesus and put no confidence in the flesh—
  Pp 3:4: though I myself have reason for confidence in the flesh also. If anyone else thinks he has reason for confidence in the flesh, I have more:
  Co 1:22: he has now reconciled in his body of flesh by his death, in order to present you holy and blameless and above reproach before him,
  Co 1:24: Now I rejoice in my sufferings for your sake, and in my flesh I am filling up what is lacking in Christ's afflictions for the sake of his body, that is, the church,
  Co 2:11: In him also you were circumcised with a circumcision made without hands, by putting off the body of the flesh, by the circumcision of Christ,
  Co 2:13: And you, who were dead in your trespasses and the uncircumcision of your flesh, God made alive together with him, having forgiven us all our trespasses,
  Co 2:23: These have indeed an appearance of wisdom in promoting self-made religion and asceticism and severity to the body, but they are of no value in stopping the indulgence of the flesh.
  1Ti 3:16: Great indeed, we confess, is the mystery of godliness: He was manifested in the flesh, vindicated by the Spirit, seen by angels, proclaimed among the nations, believed on in the world, taken up in glory.
  Pm 1:16: no longer as a slave but more than a slave, as a beloved brother—especially to me, but how much more to you, both in the flesh and in the Lord.
  Heb 2:14: Since therefore the children share in flesh and blood, he himself likewise partook of the same things, that through death he might destroy the one who has the power of death, that is, the devil,
  Heb 5:7: In the days of his flesh, Jesus offered up prayers and supplications, with loud cries and tears, to him who was able to save him from death, and he was heard because of his reverence.
  Heb 9:13: For if the sprinkling of defiled persons with the blood of goats and bulls and with the ashes of a heifer sanctifies for the purification of the flesh,
  Heb 10:20: by the new and living way that he opened for us through the curtain, that is, through his flesh,
  Jm 5:3: Your gold and silver have corroded, and their corrosion will be evidence against you and will eat your flesh like fire. You have laid up treasure in the last days.
  1P 1:24: for All flesh is like grass and all its glory like the flower of grass. The grass withers, and the flower falls,
  1P 2:11: Beloved, I urge you as sojourners and exiles to abstain from the passions of the flesh, which wage war against your soul.
  1P 3:18: For Christ also suffered once for sins, the righteous for the unrighteous, that he might bring us to God, being put to death in the flesh but made alive in the spirit,
  1P 4:1: Since therefore Christ suffered in the flesh, arm yourselves with the same way of thinking, for whoever has suffered in the flesh has ceased from sin,
  1P 4:2: so as to live for the rest of the time in the flesh no longer for human passions but for the will of God.
  1P 4:6: For this is why the gospel was preached even to those who are dead, that though judged in the flesh the way people are, they might live in the spirit the way God does.
  2P 2:18: For, speaking loud boasts of folly, they entice by sensual passions of the flesh those who are barely escaping from those who live in error.
  1Jn 2:16: For all that is in the world—the desires of the flesh and the desires of the eyes and pride in possessions—is not from the Father but is from the world.
  1Jn 4:2: By this you know the Spirit of God: every spirit that confesses that Jesus Christ has come in the flesh is from God,
  2Jn 1:7: For many deceivers have gone out into the world, those who do not confess the coming of Jesus Christ in the flesh. Such a one is the deceiver and the antichrist.
  Jd 1:8: Yet in like manner these people also, relying on their dreams, defile the flesh, reject authority, and blaspheme the glorious ones.
  Jd 1:23: save others by snatching them out of the fire; to others show mercy with fear, hating even the garment stained by the flesh.
  Re 17:16: And the ten horns that you saw, they and the beast will hate the prostitute. They will make her desolate and naked, and devour her flesh and burn her up with fire,
  Re 19:18: to eat the flesh of kings, the flesh of captains, the flesh of mighty men, the flesh of horses and their riders, and the flesh of all men, both free and slave, both small and great.
  Re 19:21: And the rest were slain by the sword that came from the mouth of him who was sitting on the horse, and all the birds were gorged with their flesh.
#+END_SRC

* I do actually need to fight against the sin, even in my flesh
That is achievable, I think.

OK, so what I should do is put this paper which says "I AM COVERED BY THE BLOOD OF JESUS CHRIST, SON OF GOD" above my loins.
And that *should* stop the evil spirits from attacking me there.
I should resist any urge whatsoever.

** Jesus Christ has condemned sin in the flesh

#+BEGIN_QUOTE
  *Romans 8:3* - For God has done what the law, weakened by the flesh, could not do. By sending his own Son in the likeness of sinful flesh and for sin, he condemned sin in the flesh, (ESV)
#+END_QUOTE

* TODO Make this fail immediately if there are no entries
j:wordnut-lookup-current-word

* TODO Read this with Bible verses buttonized
[[e:/root/.pen/ebooks/ATELIER313/C. H. Spurgeon's Puritan Catechism (11)/C. H. Spurgeon's Puritan Catechism - ATELIER313.org]]

This is quite cool that the document has easy to click on Bible references, but contains condensed information.

* TODO Do more chemistry
https://www.youtube.com/watch?v=3XNyRisDki8&list=PL2BvpWmgtJqt6av4uEnoYYg0-ZZLB7KYW&index=1&ab_channel=MrsBurton%27sChemistry

I should focus on computational chemistry or something!

I definitely don't want to be doing all the calculations by hand.

But I want to learn how to do them by hand, to really understand how it works.
I do have time for this.

* TODO Maybe I *should* learn more math
I'm not very good at math.

* Bible-mode
** TODO Find a way to tag chapters and verses
[[bible:Jeremiah 35:1]]

I need a database and an interface.
The interface is more important to set up than the database.

** Plan
*** The interface should simply be org-mode

Open an org buffer dedicated to some metadata.

That metadata could be a Bible verse reference.

The heading content should be the metadata.
I should be able to add org-mode tags for the heading.

*** Then I can use org-ql and helm-org-ql to find what I want

*** Then I can optimise it by using the builtin emacs sqlite database

* Chemistry
** 
[[yt:chemistry ncea]]

** Make my focus to be able to build interactive chemistry learning-material with org-mode and DSLs
Make things like books.

** TODO Learn to use openbabel
http://openbabel.org/docs/Introduction/goals.html

That is a good idea.

* I should develop my sermon note-tracking tools
Aim to build something like the Desiring God website.

But I guess that I should aim to integrate a lot of resources.
Integrate it.
Develop the note-tracking tools myself.

* TODO Present this - it's amazing!
https://www.youtube.com/watch?v=4ltvYtwMef4&ab_channel=wtsbooks

* TODO Go over Matt 5

* TODO Continue to work on my faith and judgement document
But this is what I don't understand.

I don't understand why this is affecting me.
I don't understand why God is allowing me to be pushed around by these dreams.
I don't understand why God doesn't simply speak plainly to me.
I want to be spoken to simply and clearly.

* TODO Try to get a job somehow I guess

* TODO Go to the doctors tomorrow morning and try to get an appointment
Try to have it that day if possible.
Then go to WINS.

* I should start working on something else today
Do something easy with pencil and paper, maybe.

Maybe just have a shower then learn some gaelic handwriting.

* TODO Consider adding more about 'common grace'
https://semiosis.github.io/

But don't be deceived.

* TODO I think I should embark on Bible studies
I must learn more Bible.
And I should probably disappear into the woodwork.

* TODO Continue building Pen.el
e:/root/.pen/documents/bible-notes/verse/psalms-37-v1.org

Think of how this will really pay off later.

Just continue writing boldly, and continue serving the LORD.

The rest which we enter actually looks like serving God.

* I guess that I could simply do a Bible study today
#+BEGIN_QUOTE
  *Proverbs 12:11* - Whoever works his land will have plenty of bread, but he who follows worthless pursuits lacks sense. (ESV)
#+END_QUOTE

https://star.net.nz/the-word-for-today/having-job-security-1-2024_04_07

Doing a Bible study is definitely a good option.

The JWs did actually invite me to go and visit them.

* TODO Tag things with Important and Urgent
https://bigthink.com/the-learning-curve/why-the-eisenhower-matrix-is-a-fantastic-productivity-hack/

Then find the ones which are:
- important and urgent and do them.
- not important and not urgent and delete them.
- important and not urgent and schedule them.
- not important and urgent and delegate them.

|               | Urgent   | Not urgent |
|---------------+----------+------------|
| Important     | Do now   | schedule   |
| Not important | Delegate | Delete     |

* Alphapapa is making a lot of cool packages
** Listen doesn't yet work with my current builtin transient version
https://github.com/alphapapa/listen.el

* DONE Fix the issue with the headerline
It's problematic in multiple places.

mx:chemtable

Also this problem appears when I do =E= on a non-interactive sexp.

j:ph-get-date

Also, with =C-c N=.

mx:nbfs

[[ekm:C-c N]]

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  ;; This fixed a problem with a disappearing header line
  (defun kill-all-local-variables-around-advice (proc &rest args)
    (let ((res (apply proc args)))
      (ph--display-header)
      res))
  (advice-add 'kill-all-local-variables :around #'kill-all-local-variables-around-advice)
  ;; (advice-remove 'kill-all-local-variables #'kill-all-local-variables-around-advice)
#+END_SRC

* TODO Go over the problog tutorial again
https://dtai.cs.kuleuven.be/problog/tutorial/basic/01_coins.html#basic-problog-probabilistic-facts-and-clauses

e:/volumes/home/shane/notes/ws/problog/scratch/probabilistic-clause-coin.problog

Writing problog models when I'm out and about could be a really fun activity - even with pencil and paper.

* 
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  e ia activities
#+END_SRC

https://github.com/alphapapa/activities.el/blob/master/README.org

e:/root/.emacs.d/host/pen.el/src/pen-activities.el

* 
[[https://www.youtube.com/watch?v=NU0q6NOLJ20][Introducing Ratatui: A Rust library to cook up terminal user interfaces - FOSDEM 2024 - YouTube]]

https://youtu.be/NU0q6NOLJ20?t=1384

** Learn how this works

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "$MYGIT/ricott1/sshattrick"; cargo build --release
#+END_SRC

* TODO Make it so avy jump highlights the options (with j:ace-link-bible-ref-tpop)
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (avy--style-fn avy-style)
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key pen-map (kbd "M-j M-v") 'ace-link-bible-ref-tpop)
#+END_SRC

I think the way to do this is to have a temporary text highlighter when avy is running which simply highlights the verse refs.

This should be possible.

** Look into j:avy-background-face

j:avy-background-face

*** Make an overlay for each word on visible in the current window

j:avy--make-backgrounds

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (window-start (selected-window))
#+END_SRC

* TODO Get better at drawing things in the terminal and viewing them as sixel images
- Edit images inside the terminal paint program.
- View them as sixel images from time to time.

* C Programming
e:/volumes/home/shane/var/smulliga/source/git/gouravthakur39/beginners-C-program-examples/BasicGame.c

https://en.cppreference.com/w/c/io/fscanf

* Aramaic
e:/volumes/home/shane/notes/ws/aramaic/

* TODO Select some subjects to learn and then methodically learn them - Focus on non-fiction
- C programming language
- Haskell programming language
- Problog programming language
- Irish Gaelic language and handwriting
- Aramaic handwriting
- Biblical studies
- Gardening

** Use the following projects to learn
- Pen.el
- ASCII-adventures

* TODO Figure out how to view notmuch emails in a web browser
[[notmuch:id:0101018e97009611-919bfa43-0f7c-4855-9a71-f184f423e070-000000@us-west-2.amazonses.com][Email from AoEZone: AoEZone - The Newsletter - Issue 4, March 2024]]

j:notmuch-show-view-part

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  /usr/bin/firefox "/root/.pen/file-store-by-hash/2547ac3a92/mm.V35PRd.html"
#+END_SRC

* TODO Make an image preview system that uses tmux popup and sixel
So if I click on an image in dired, it shows the image within the terminal.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  lsix /usr/share/doc/asciidoc/doc/images/tiger.png
#+END_SRC

It appears that tmux inside xterm inside Pen.el currently doesn't do it.
But xterm inside Pen.el does work.

I just need to force lsix.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "/usr/share/doc"; tp find-here-path "*.png*" | while read line; do show-pic "$line"; done
#+END_SRC

** Well, timg works in tpopup - in some ways timg is better than show-pic. sixel support just isn't that great yet
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tpop -E "timg /usr/share/doc/asciidoc/doc/images/tiger.png; pak"
#+END_SRC

** Sadly, it doesn't work in a popup - but at least it works!
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  show-pic /usr/share/doc/asciidoc/doc/images/tiger.png
#+END_SRC

#+BEGIN_SRC sh -n :nw bash :async :results none :lang text
  show-pic /usr/share/doc/asciidoc/doc/images/tiger.png
#+END_SRC

** TODO Find the geometry
#+BEGIN_SRC bash -n :i bash :async :results none
  convert /usr/share/doc/asciidoc/doc/images/tiger.png -geometry 800x480 -colors 16 sixel:- | nw less -rS
#+END_SRC

** This is OK, but I want popups

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  nw -E "convert /usr/share/doc/asciidoc/doc/images/tiger.png -geometry 800x480 sixel:-; pak"
#+END_SRC

** This doesn't work. Why?

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tpop -E "convert /usr/share/doc/asciidoc/doc/images/tiger.png -geometry 800x480 sixel:-; pak"
#+END_SRC

** I should definitely start by getting this working

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text :pak
  cd "$PENELD/scripts"; lsix /usr/share/doc/asciidoc/doc/images/tiger.png
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v /root/repos/lsix/lsix
#+END_SRC

I think the way to do this is to run it in xterm alone first, and collect the variables which were calculated.
Then reuse them while running inside tmux.

There is a bunch of querying being done inside the lsix script.

** TODO Find a replacement for lsix
https://github.com/hackerb9/lsix

https://github.com/search?q=sixel&type=repositories

https://github.com/mattn/go-sixel

** This works in tmux, but not well

There needs to be more options for colour.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  convert /usr/share/doc/asciidoc/doc/images/tiger.png -geometry 800x480 sixel:-
#+END_SRC

** This works a little bit, but they need colour
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  TERM=xterm lsix /usr/share/doc/asciidoc/doc/images/tiger.png
#+END_SRC

This seems to work in tmux. 16 colours is where it's at:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  convert /usr/share/doc/asciidoc/doc/images/tiger.png -geometry 800x480 -colors 16 sixel:-
#+END_SRC

** And dmagnetic shows sixels but lsix doesn't, for some reason

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ssh-host bash -c "cd $DUMP/programs/dmagnetic-games; dMagnetic -mag guild.mag -gfx guild.gfx -vmode sixel"
#+END_SRC

** But this works inside tmux, so what gives?
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  guild-of-thieves-sixel
#+END_SRC

* TODO Find how to type in Irish Gaelic - if necessary then extend unicode to add the various characters (rather than changing my font)
** Ogham (ancient gaelic)
https://symbl.cc/en/unicode/blocks/ogham/

** Find:
[[gr:gaelic latin unicode]]

*** Oh good:

https://en.wikipedia.org/wiki/Gaelic_type

https://en.wikipedia.org/wiki/Insular_script

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unicode Insular
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Ꝺ ꝺ Insular D (U+A779, U+A77A)
  ◌ᷘ Combining Small Insular D (U+1DD8) (Used for Old Norse)[3]
  Ꝼ ꝼ Insular F (U+A77B, U+A77C)
  Ᵹ ᵹ Insular G (U+A77D, U+1D79)
  Ꝿ ꝿ Turned insular G (U+A77E, U+A77F)
  Ꞃ ꞃ Insular R (U+A782, U+A783)
  Ꞅ ꞅ Insular S (U+A784, U+A785)
  Ꞇ ꞇ Insular T (U+A786, U+A787)
#+END_SRC

* TODO Make some kind of Irish sentence constructor
Well, I mean, I need to learn how to read the language.

* TODO Learn about the Cookie Time company?
https://cookietime.co.nz/

** It would be more interesting to learn about various charities

* Learn
[[https://www.youtube.com/watch?v=qZ4O-1VYv4c][The Probability Monad - YouTube]]

* TODO I think it's important to find a programming language for doing math and for solving math problems
Well, math is a vast field, so I need to be specific about what types of math problems I mean.

** I mean, when I think of finding an application (problem set) for setting up software to solve mathy problems
- It should be useful to me
  - Making problog models on paper is a good one
  - Describing buildings is probably a bad one

** Structural engineering is an interesting one
[[https://www.youtube.com/watch?v=lsTLx7XVooQ][Uncovering the Maths Structural Engineers use on a daily Basis - YouTube]]

It would be cool to automate a bit of these calculations:

- Forces
- Sheer forces
- Bending moments
- Curvature
- Deflections

- Sheer force diagram
- Bending moment diagram
- Deflection plot

From looking at a 'sheer force diagram' you can work out what the 'bending
moment diagram' is, where the curvature is going to go and how the 'deflection plot' should look.

* TODO Make a big effort to learn Irish
https://www.youtube.com/watch?v=1D46AW4r2i8&ab_channel=21languages

** Some words
https://www.youtube.com/watch?v=1D46AW4r2i8&ab_channel=21languages

* TODO Learn to draw the Cookie Time mascot
https://cookietime.co.nz/

* TODO Consider doing a bit more problog
e:/root/.emacs.d/host/pen.el/src/pen-epl-test.el

* Learn this!
[[https://www.youtube.com/watch?v=xNz-xu3fmt4][Irish Script - An Phaidir - YouTube]]

* TODO I need a new language that does what bash does but better
It needs to fix lots of existing problems with bash:
- I need to be able to do things like cache subshells

* TODO Learn some new practical skills
-

* TODO Go over some basic haskell examples - make a collection of them
https://gist.github.com/kleesc/d6150824e0ad6a261810

* TODO Make it so I can pipe all the annotations alongside the Scriptures to another command
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  Zechariah 4:6-10
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  withannotations Zechariah 4:6-10 | v
#+END_SRC

* TODO I should learn some c I think -- it would be fun
https://www.youtube.com/watch?v=U3aXWizDbQ4&ab_channel=Fireship

* It's a bit odd that most of the things I used to like I would avoid now

Things like:
- games and movies with guns

That's quite interesting.

* TODO Make a list of URLs that point to games
https://froggerclassic.appspot.com/

Oh, fun. That's a pretty good idea.

https://archive.org/details/raygamesimg

Well, actually, there's basically a limitless number of games online.

* TODO I should build
Build what?

* TODO Add the ACME cut and paste mouse behaviour to emacs
https://youtu.be/dP1xVpMPn8M?t=345

* TODO Learn to do this kind of thing!
[[https://www.youtube.com/watch?v=tb3iN4m9Bik][Building a Generator - YouTube]]

- electronics

* TODO Learn to program in c better
https://www.youtube.com/watch?v=YvNlVAkHVwk&ab_channel=TsodingDaily

* TODO Tomorrow I should buy more groceries to survive next week - go to the supermarket to buy them so I can save money

* TODO Make it so this command doesn't quit emacs immediately, when run from zsh
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tpop Daniel 4
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tpop -E "Daniel 4 && pak"
#+END_SRC

Ahh.... I think it's that the popup window is being closed.

* TODO Get some cash-out today to give to the churches
$50 for ALC and $50 for Reformed Church.

* TODO Make a Scripture fact-checker
This would be interesting.

For, example, parse the Bible verse and then check to see if the Scripture matches.

Therefore, it might be a good idea to learn haskell and parsers for this purpose.

That is a good idea, actually.

* TODO If God wants me to stay here then

* TODO Pen.el
** Bible-mode
*** magit sideline
**** Add an audio recording indicator to each line
j:bible-verse-margin-status

**** Add an indicator for how many times the verse is referenced in other documents

* TODO
** ascii-adventures
Make it so I can go to the currently open ascii-adventures map.

** TODO ensure that only code blocks which are inside =** Frames= are used

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"defset aa\/frames" "$EMACSD/pen.el/src/pen-ascii-adventures.el"
#+END_SRC

* TODO Get music
Old:
- old rugged cross
- power in the blood

* TODO Make it so the sidecar doesn't keep scrolling to the top
- It keeps reloading when I click on buttons.

I need to stop that behaviour.

* TODO Make a Bible verse reference sort function

** I might have to use emacs lisp for this
- As I need to sort all the different variations
  - And it may require putting things into lists, etc.

** Use it to sort this
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/.pen/bsb-interlinear.txt | scrape-bible-references -cc
#+END_SRC

* TODO Learn more about how to make programmatic sedlike perl scripts

* Continue building Pen.el
- It's supposed to be a Bible study tool

I think it's quite important to continue building the Bible study tool that is Pen.el.

* TODO Find myself a DVD player

* TODO Set up the interlinear bible inside of Pen.el
I want it to work well.
I plan on using it.
I want the complete interlinear Bible offline.

https://interlinearbible.com/

https://berean.bible/downloads.htm

** TODO reformat this
e:/root/.pen/bsb-interlinear.txt

I should probably use perl for this.

Well, I should use perl or awk, but perl is probably best.

** Alternatively, query the interlinear file programmatically
Extracting the text I need using search.

This would be easier, actually.

* Take parts I want from org-verse
j:org-verse-buttonize-buffer

Gen 5:5

* TODO Make the cross references display in bible-search-mode
j:bible-mode-cross-references

That would be more consistent.

* TODO Take the french Bible verse references, and add them to the possible Bible verse refs.
e:/root/.emacs.d/straight/repos/org-verse/org-verse.el

* TODO Make a scraping grep which can search for things recursively
For example, find all the Bible verses under a directory.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  scrape-bible-references -vc    # verse or chapter
#+END_SRC

Call it filter-r.

It's like scrape-r.

e:pen-scrape-r

** TODO Make a grep but that takes an arbitrary script for doing the pattern search
- Give it a recursive option.

* DONE Fix avy with this
I need a non-greedy .* at the start.
Sadly, sed doesn't have a non-greedy

https://stackoverflow.com/questions/1103149/non-greedy-reluctant-regex-matching-in-sed

** DISCARD Therefore, I might need 2 sed passes with different sets of patterns in order to achieve what I want.

** DONE or use perl instead of sed - this is probably the best option

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  perl -pe 's|(http://.*?/).*|\1|'
#+END_SRC

https://gist.github.com/apetkau/a93ea4d4bf8b10e65089

e:/var/smulliga/source/gist/apetkau/a93ea4d4bf8b10e65089/gistfile1.txt

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/.pen/documents/notes/todo.org | perl -ne 'print $_ if s/.*(John|Peter).*/\1/;' | v
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  I John 3:13: Do not be surprised, brothers, that the world hates you.
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Revelation of John 3:13
#+END_SRC

e:/root/dump/tmp/scratchmcgqMJ.txt

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/dump/tmp/scratchmcgqMJ.txt | scrape-bible-references | v
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-els list-bible-book-titles-lines | pen-sort line-length-desc | v
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-els list-bible-book-titles-lines | pen-sort line-length-desc | s join "\\\|" | s wrap 80 | v
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-els list-bible-book-titles-lines | pen-sort line-length | s join "\\\|" | s wrap 80 | v
#+END_SRC

* TODO Make this much faster
This makes it obvious why it is slow:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/programs/tmux/capture/tf_tmcaptureJGZ1EYe.txt | shx scrape-bible-references
#+END_SRC

** I could use python to compile a massive regex
https://stackoverflow.com/questions/44051892/python-regex-pattern-is-a-large-number-of-items-best-practice

** How else can I compile a massive regex?
- Maybe I could use rosie?

That's not a bad idea.

** TODO Firstly, compile a large sed expression

* TODO Set this up - looks cool
https://github.com/Y2Z/monolith

* TODO Continue building Pen.el

* TODO Make a 'named' tv that works a bit like tvp
The named tv should use tless.
I should be able to make several different named tv calls in completely different places, and only one named tv should be displayed.
In fact, it would be useful to even consolidate them somewhere under a single logging program.
In fact, I should simply keep all the actual log files under one directory, and so I can simply spawn a multilogger or something if I need to.

* I need to move on to the new me - well, I don't want to stay as the old me
[[https://www.youtube.com/watch?v=mG4_jqX2RLc][There is a Battle Raging Between the Old You & the New You - YouTube]]

- I really don't want to stay as the old me.

* TODO Work on this at home - the stdin is a little more complicatetd than I thought it would be
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/pen-els

* TODO Make this
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/pen.els
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/pen-els
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/canonicalise-bible-book-title

* TODO Make a single emacs script for Pen.el bible scripts which takes many diferent modes
Use a symlink to specify the mode to a proxy bash script.

* TODO Make a faster version of this
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/scrape-bible-references

- Should I use elisp?
- What can I use to search for lots of different patterns?

Extract lots of different patterns.

Well, it's not *that* slow.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/.pen/documents/notes/perspective.org | scrape-bible-references
#+END_SRC

What I need to do to speed it up:
- make the initial extractor a lot faster
  - With all the books and variants, extract Bible verse references.
  - It's probably best to use emacs for this.
  - I should also do the canonicalising from within that script

Actually, the entire script could be written in emacs lisp.

But think about this... is emacs going to actually be the fastest way?

Parallel sed might actually be faster, or several sed passes.

* I should learn that sed script.

* TODO Make some kind of tv pipe thing, so I can see stuff streaming
e:tvlog

It should work a bit like =pv= but simply displaying stuff.

e:tvp
e:shp
e:show-pipe

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  find / | show-pipe | v
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  find / | tvp | v
#+END_SRC

* TODO I should definitely build up my theology, etc.
Yes, continue to work on Pen.el

* Make this do a lot simultaneously by running a single e:canonicalise-bible-book-title script for all
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/canonicalise-bible-ref

Yeah, it's quite slow actually.

* TODO Make it my objective to get this working quickly
j:ace-link-bible-ref-tpop

** What's the difference? And where are they used?
e:canonicalise-bible-ref
e:canonicalise-bible-book-title

*** It was used in various other places, but I've replaced it, so I need to get the behaviour working the same
e:scrape-bible-references

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  echo 'Rev 2:1' | canonicalise-bible-book-title
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  echo 'Rev 2:1' | canonicalise-bible-ref
#+END_SRC

**** Then speed up this:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/.pen/documents/notes/perspective.org | scrape-bible-references
#+END_SRC

** TODO Finish this
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/canonicalise-bible-book-title.els

* TODO Make this run quickly somehow - the script is fine but it should run faster
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  canonicalise-bible-book-title.cl 'I Thessalonians'
#+END_SRC

Or I should simply ignore common lisp and continue making emacs lisp scripts.

Yeah, just do that. Forget common lisp.

** TODO Make it print to stdout
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/canonicalise-bible-book-title.els

* TODO Make it so I can extract Scripture with inline Bible references

* TODO Figure out how to add other books into Pen.el

* TODO Make it so Pen.el's verse ref column is shortened

* TODO Add something about trusting in Jesus who is our life

* TODO Find a terminal with sixel capability and keybindings
- Alternatively, use xterm, but make some kind of signal handler which increases and degreases the font.

** Compile xterm from Pen.el itself
https://invisible-island.net/xterm/xterm.html#download

* TODO Find a way to change the size of the xterm font with a key binding

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  gr change the size of the xterm font programmatically
#+END_SRC

* TODO Simply continue to work on this Bible software
I think it's important to do so.

Unless God gives me a different plan, I think I will simply do that.
It does indeed require focus.

* TODO Make it so this is properly memoized by timer
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (sidecar-get-cross-references-for-ref "Genesis 1:1")
#+END_SRC

* Send the Tearfund donation through again
https://mail.google.com/mail/u/0/#inbox/FMfcgzGxSRGgFRrRhmNXHsGhNDpMZgKj

* TODO Learn about animals

* TODO Make an unbuffer wrapper that soaks everthing and then puts the stdin inside the actual command
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer bash -c "ocif curl -sL https://git.io/IRIStsv | cut -f1-4 | uplot density -H -t IRIS 2>&1" | less -rS
#+END_SRC

* TODO [#A] Book an appointment with Sam at Mornington

* TODO Animate this by generating random numbers
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unbuffer bash -c "ocif curl -sL https://git.io/IRIStsv | cut -f1-4 | uplot density -H -t IRIS 2>&1" | less -rS
#+END_SRC

* TODO Set up ruby programming again - ruby is kinda cool

* TODO Definitely make my Pen.el a little bit more animated

* TODO Get good at making ASCII games inside the terminal

* TODO Set up a CLI script for viewing animated graphs
https://github.com/rothgar/awesome-tuis

https://github.com/red-data-tools/YouPlot

This looks very good.

# TODO Start actually using this in places:
# e:/root/.emacs.d/host/pen.el/scripts/uplot

* DONE Sort out my benefit tomorrow

* TODO Look at this
https://github.com/seokbeomKim/org-linenote

* TODO Generate the emacs menu items somehow
It should be as easy as navigating a filesystem.
It should be a lot easier.

* TODO Make it so the Pen.el menu actually generates the menu items
- A bunch of Pen.el org-mode documents.

e:/root/notes/ws/bible-studies/armour-of-God.org

* TODO Make some steps to put on the armour of God

* TODO Get better at painting with ASCII

* TODO Consider printing my PDF as a book

* TODO Learn about something
For example, learn about Ireland.
Learn celtic, for example.
Then one day travel there.

* TODO [#A] Try my best for Jesus

* TODO Make some more tools to format Pen.el Bible verses

* TODO Do a Bible study on John 16
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  John 16
#+END_SRC

#+RESULTS:
#+begin_src text
John 16
‾‾‾‾‾‾‾
I have said all these things to you to keep
you from falling away.

They will put you out of the synagogues.

Indeed, the hour is coming when whoever kills
you will think he is offering service to God.

And they will do these things because they
have not known the Father, nor me.

But I have said these things to you, that when
their hour comes you may remember that I told
them to you.

I did not say these things to you from the
beginning, because I was with you.

But now I am going to him who sent me, and
none of you asks me, Where are you going?

But because I have said these things to you,
sorrow has filled your heart.

Nevertheless, I tell you the truth: it is to
your advantage that I go away, for if I do not
go away, the Helper will not come to you.

But if I go, I will send him to you.

And when he comes, he will convict the world
concerning sin and righteousness and judgment:
concerning sin, because they do not believe in
me; concerning righteousness, because I go to
the Father, and you will see me no longer;
concerning judgment, because the ruler of this
world is judged.

I still have many things to say to you, but
you cannot bear them now.

When the Spirit of truth comes, he will guide
you into all the truth, for he will not speak
on his own authority, but whatever he hears he
will speak, and he will declare to you the
things that are to come.

He will glorify me, for he will take what is
mine and declare it to you.

All that the Father has is mine; therefore I
said that he will take what is mine and
declare it to you.

A little while, and you will see me no longer;
and again a little while, and you will see me.

So some of his disciples said to one another,
What is this that he says to us, A little
while, and you will not see me, and again a
little while, and you will see me; and,
because I am going to the Father?

So they were saying, What does he mean by a
little while?

We do not know what he is talking about.

Jesus knew that they wanted to ask him, so he
said to them, Is this what you are asking
yourselves, what I meant by saying, A little
while and you will not see me, and again a
little while and you will see me?

Truly, truly, I say to you, you will weep and
lament, but the world will rejoice.

You will be sorrowful, but your sorrow will
turn into joy.

When a woman is giving birth, she has sorrow
because her hour has come, but when she has
delivered the baby, she no longer remembers
the anguish, for joy that a human being has
been born into the world.

So also you have sorrow now, but I will see
you again and your hearts will rejoice, and no
one will take your joy from you.

In that day you will ask nothing of me.

Truly, truly, I say to you, whatever you ask
of the Father in my name, he will give it to
you.

Until now you have asked nothing in my name.

Ask, and you will receive, that your joy may
be full.

I have said these things to you in figures of
speech.

The hour is coming when I will no longer speak
to you in figures of speech but will tell you
plainly about the Father.

In that day you will ask in my name, and I do
not say to you that I will ask the Father on
your behalf; for the Father himself loves you,
because you have loved me and have believed
that I came from God.

I came from the Father and have come into the
world, and now I am leaving the world and
going to the Father.

His disciples said, Ah, now you are speaking
plainly and not using figurative speech! Now
we know that you know all things and do not
need anyone to question you; this is why we
believe that you came from God.

Jesus answered them, Do you now believe?

Behold, the hour is coming, indeed it has
come, when you will be scattered, each to his
own home, and will leave me alone.

Yet I am not alone, for the Father is with me.

I have said these things to you, that in me
you may have peace.

In the world you will have tribulation.

But take heart; I have overcome the world.

(ESV)
#+end_src

Please God help me to understand John 16.

* TODO Watch movies - buy them though
- [[https://www.youtube.com/watch?v=JNa7JDB0tKI][Wind Dancer {1993} | Full Movie | Mel Harris | Matt McCoy | Brian Keith - YouTube]]
- [[https://www.youtube.com/watch?v=_SBdWNcMRNU][All Dogs Go To Heaven FULL MOVIE | Family Movies | Don Bluth Movies | | Empress Movies - YouTube]]
- [[https://www.youtube.com/watch?v=v_O6LnsKv8E][Adventures in Zambezia FULL MOVIE | {Samuel L. Jackson, Abigail Breslin} STREAM CITY - YouTube]]
- [[https://www.youtube.com/watch?v=k7tijaEzqTI][CHESTNUT: THE HERO OF CENTRAL PARK - Official Movie - YouTube]]
- [[https://www.youtube.com/watch?v=1VRVdf71dfo][AIR BUD - Official Movie - YouTube]]
- [[https://www.youtube.com/watch?v=htK3pW8EpvA][Call Of The Wild {2009} | Full Movie | Christopher Lloyd | Ariel Gade | Wes Studi - YouTube]]
- [[https://www.youtube.com/watch?v=mRXSA-WRfvs][LASSIE'S GREATEST ADVENTURE - FREE FULL FAMILY MOVIE d??JPYd??? - YouTube]]
- [[https://www.youtube.com/watch?v=X_pBgsUV3AQ][Smoke {1970} - YouTube]]

* 
[[https://www.youtube.com/watch?v=k_g1Z6q_f4M][You CANNOT Keep Living Like a DEVIL| {The Cheap Gospel EXPOSED!!} - YouTube]]

* TODO Find something simply and therapeutic to learn and do

Learn about something:
-

* TODO Figure out how to combine vector graphics and the terminal

Vector graphics terminal

** I want my computer to work like a vector graphics terminal most of the time

[[https://www.youtube.com/watch?v=yimthgRiGAM][Spacelab vector graphic drawings on my 4054A - YouTube]]

[[https://www.youtube.com/watch?v=M98VOoGFLL8][Tektronix 4054A with Option 30+31 Color Dynamic Vector Graphics Demo - YouTube]]

[[https://www.youtube.com/watch?v=1gUd8yVZ2kA][Tektronix 4014 running DISSPLA demo @ VCF ZA 1/4 rich 2021 - YouTube]]

[[https://www.youtube.com/watch?v=IztxeoHhoyM][Tektronix 4010- 4014  Graphics 3D Vintage Computer - YouTube]]

Perhaps I can develop a vector graphics OS in parallel.

** Or maybe I can emulate a Tektronix 4054A

https://github.com/jonbstanley/Tek405xEmulator

* TODO Learn to make Vectrex games
[[https://www.youtube.com/watch?v=R-xAlSHRU0A][Creating new Vectrex Games in 2019 with Robin Jubber - Retro Tea Break - YouTube]]

* TODO Make something to click anywhere on the screen - use emacs to do this - make something like the vim click mechanism, but with emacs
I think I would need to use emacs instead of vim.

Also, between extended " +" areas in the buffer, put a "." halfway.

* TODO Continue to write Bible software
I want the Bible software to be very good.

* TODO I should learn to use vanilla emacs for creating external menu choosers for tmux, for example
e:/root/.emacs.d/host/pen.el/scripts/emacs-choose

** TODO Figure out how to also take arguments, or I must use environment variables

* TODO Speed this up
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  hide-cursor tmux-choose-window -t "$(tmux display -pF "#{session_name}")"
#+END_SRC

* TODO Make it so each ascii-adventures area can have its own bindings
OK, so ASCII-adventures is going to have per-buffer bindings, functions, transients, etc.
That's cool.

* Watch
[[https://www.youtube.com/watch?v=wrtgWLMi30Y][What IS the NEW Covenant? - YouTube]]

* Watch
[[https://www.youtube.com/watch?v=59Q_doFUT2A][DREAM ABOUT THE ECLIPSE AND THE FIERY ARROW OF ENOCH - YouTube]]

* TODO Consider adding something about 'passover' pointing to Jesus

* TODO Send the Bible to Milton

* Some organ music - it's actually pretty fun just listening to this stuff
https://www.youtube.com/watch?v=x5KcKJHro9k&ab_channel=OrganMusicYT

* TODO Call on the Lord God Almighty
- Be set free

Jesus is the only Way to the Father, the only Truth, the Life, the only Way to everlasting life.

* TODO Consider using this
https://github.com/robolab-pavia/fawoc

* I need to learn more about 'grace'

* TODO Set up t-rec
https://github.com/sassman/t-rec-rs

* This seems interesting
https://github.com/espanso/espanso

* TODO Look at these
[[https://www.newtestamentchristians.com/bible-study-resources/351-old-testament-prophecies-fulfilled-in-jesus-christ/][351 Old Testament Prophecies Fulfilled In Jesus Christ | New Testament Christians.Com]]

* TODO Add features to ascii-adventures
- Previous location
- Location history
- Backdoor jump to different place/location/area

* TODO Make a way of easily adding new areas to ascii-adventures

* I should continue attending Reformed Church for the time being

* TODO Skills to learn

Learn useful skills - but avoid learning skills that have big requirements.

Learn:
- To live cheaply

* TODO Add regarding obedience
[[https://www.youtube.com/watch?v=i27b4cE4xyo][Eternal Security - Charles Spurgeon Sermon - YouTube]]

* TODO Ensure this works
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  today urlarchive "https://star.net.nz/the-word-for-today"
#+END_SRC

* DONE Add
[[brain:theologians/index]]

- John Calvin
- Jacobus Arminius

* TODO Make an e:upd command option that takes =-daily=

** Archive them day-by-day
#+BEGIN_SRC sh -n :sps bash :async :results none
  upd urlarchive "https://star.net.nz/the-word-for-today"
#+END_SRC

** TODO Run today's cron jobs

* TODO Add the little bit about Jesus being kind to the powerless

* TODO Check this
https://mail.google.com/mail/u/0/#inbox/FMfcgzGxSHfckLPbHrcpNQJgJzGfRDWM

* TODO Go on this train journey with Dad
https://mail.google.com/mail/u/0/#inbox/FMfcgzGxSHfcQjFLRXPnPzSSWCblfBKm

* 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Isaiah 48:3
#+END_SRC

#+RESULTS:
#+begin_src text
Isaiah 48:3
‾‾‾‾‾‾‾‾‾‾‾
The former things I declared of old; they went
out from my mouth and I announced them; then
suddenly I did them and they came to pass.

(ESV)
#+end_src

#+BEGIN_QUOTE
  *Isaiah 48:3* - The former things I declared of old; they went out from my mouth and I announced them; then suddenly I did them and they came to pass. (ESV)
#+END_QUOTE

* Stopping sin
https://www.youtube.com/watch?v=g-rD6-C4fXw&ab_channel=Jibee00

* TODO Continue writing this and eliminate inconsistencies and I read the Bible
https://semiosis.github.io/

* TODO Email John Watson

* TODO Learn this
e:/root/.emacs.d/straight/repos/org-verse/org-verse.el

Also, add French.

* TODO Definitely use this
https://github.com/DarkBuffalo/org-verse

This is *awesome*!

* TODO Make it so artist-mode disables the automatic window edge scrolling

* TODO Do John 10 as homework

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  John 10:1
#+END_SRC

* TODO Make it so I can write notes in each area of ascii-adventures

* TODO Also work on my own font
That would be nice.

* TODO Take over home jobs
- Watering the garden
- Waterblasting

* TODO Get ahold of these
https://en.wikipedia.org/wiki/Deuterocanonical_books

- Both the Catholic church and the Orthodox church have this

* TODO Ask John Piper
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Romans 4:12 - and to make him the father of the circumcised who are not merely circumcised but who also walk in the footsteps of the faith that our father Abraham had before he was circumcised. (ESV)
#+END_SRC

* TODO Organise the pool house again.

* TODO Message Michael to find out when the camp is, etc.

* TODO Get better at making ascii diagrams and drawings

* TODO Consider learning a bit more about the various denominations of Christianity
It's best to focus currently on learning for myself.

** Do this later though
- Early Christianity

- Protestantism
- Roman Catholic

- Methodism

* TODO Read the Apostolic Fathers

* TODO Design and start managing a garden
- Silverbeet

Use ASCII Adventures to design and manage things visually, such as the garden outside.

** TODO Make the designs in Pen.el and manage the garden that way first, fictionally
Then implement the garden in real life.

* TODO Start a blog where I review people's sermons

* TODO Ensure that Pen.el is internationalized

* TODO Develop Pen.el to be a Free Operating System based on emacs

https://github.com/artsi0m

Let it remain powerful for doing all of a person's computing.

* TODO Add this
[[https://www.youtube.com/watch?v=C7hdUorDU-U]["These things I command you" Jesus' own words from the 4 Gospels - YouTube]]

* TODO Add

** It would be good to highlight *believing* verses and *obeying* verses in blue and green

| Verse Ref | Believe | Obey
|-
|

* TODO Learn to do this
https://unix.stackexchange.com/questions/346568/replace-a-series-of-characters-with-an-equal-number-of-characters

* TODO Print my thoughts on theology as a book
That should be fun.

* TODO Add the bit about the Kingdom of God being in the midst of us

Say that I started getting Kingdom of God dreams (and other ones) after getting born-again.

Therefore, it arrives in a way which isn't observed.

* 'Lordship salvation' vs Free grace is a false dichotomy

* TODO Just focus on my Pen.el for a little while
I'm pretty sick of the strange things happening around me frequently, and I want to chill out.

* TODO I must do more Bible study
** People are very confused

[[https://www.youtube.com/watch?v=mbpYsS79OO4][The Deepest Teaching On Faith I've Ever Done  | Lordship Salvation vs. Free Grace Theology {Ep. 1} - YouTube]]

* TODO Perhaps I should simply go somewhere and work on my Bible study software tomorrow, or stay at home and do it
I want to improve it.

* TODO Work on these functions
j:bible-canonicalise-book-title

* TODO Organise my Thoughts on Theology a bit better

* TODO Add a mechanism for automatically caching audio

* TODO Add ESV Audio to Pen.el

https://www.esv.org/resources/audio-player/

** TODO Make the list of short Book names for this API
And a converter for them.

# This is too long:
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (tpop-fit-vim-string (pen-snc (cmd "bible-tpop-lookup" "-c" "-m" "KJV" "Acts 21")))
#+END_SRC

# But this works:
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (tpop-fit-vim-string (pen-snc (cmd "bible-tpop-lookup" "-c" "-m" "KJV" "Acts 21:5")))
#+END_SRC

It must be smaller than the main tmux window height, if using tmux.

j:tpop-fit-vim-string

** There is also an API
*** Acts 21
https://audio.esv.org/david-cochran-heath/mq/Acts+21.mp3

https://audio.esv.org/david-cochran-heath/mq/Acts+21%3A5.mp3

Ps.33.6

Acts 21:5

<iframe src="https://www.esv.org/audio-player/Acts+21/" style="border: 0; width: 100%; height: 109px;"></iframe>
*** Acts 21:5
<iframe src="https://www.esv.org/audio-player/Acts+21%3A5/" style="border: 0; width: 100%; height: 109px;"></iframe>
*** Acts 21:5-10
<iframe src="https://www.esv.org/audio-player/Acts+21%3A5-10/" style="border: 0; width: 100%; height: 109px;"></iframe>

<iframe src="https://www.esv.org/audio-player/I+John+5%3A2/" style="border: 0; width: 100%; height: 109px;"></iframe>

<iframe src="https://www.esv.org/audio-player/Revelation+2%3A2/" style="border: 0; width: 100%; height: 109px;"></iframe>

* TODO Make the universal sidecar update asynchronously

* It's soon time to restart my blog
I should definitely restart it, and start blogging.

** I should build a blog with 'racket' because of the nice typography
I really want a website with excellent typography that's more programmable than the last one I had

- https://practicaltypography.com/

I really want a website that I can program a bit more, possibly with racket or emacs lisp.

I mean, Matthew Butterick's stuff is kinda good.

- https://matthewbutterick.com/

** This one might be quite good
https://themes.gohugo.io/themes/paperesque/

** This is a cool site - I should keep my own one quite simple
https://beautifulracket.com/

Yeah, I should blog about what I'm building in Pen.el.

* TODO Go and have a look
[[notmuch:id:MEUPR01MB9383CDFBE6C8A0EB906F0E2CF6592@MEUPR01MB9383.ausprd01.prod.outlook.com][Email from Manna Dunedin: Your order: ESV Super Giant Print Bible]]

* TODO Consider asking for help with gardening? If we need it here.
Please help Paul Boterman's boarder to find permanent accommodation and please help Paul to find work with his gardening job.

[[notmuch:id:CANLS7uSPXaBALg7UgBaJLHc2wr3Yec57z9BXjOQfFn00Z9nheA@mail.gmail.com][Email from Shayne Vincent: Way Up prayer requests]]

* TODO Reply to this
[[notmuch:id:CAGRRG7WV12enttxESDRvAgQnDL3Mw12dqeJtd4W+Kzsm9q+ueA@mail.gmail.com][Email from Robert Mulligan: Fwd: invitation]]

* I should read my mail - do it tomorrow. Reconnect

* 
Wonderful thing about Tiggers.

** 
Jesus is the only one.

* TODO Continue working on this document
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org

Add it to a menu item.

* TODO Consider making my own org to markdown converter - tables aren't exporting very well with the builtin emacs exporter
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.md

* TODO Consider adding this to hacker news
https://github.com/semiosis/pen.el/blob/master/docs/theology/faith-and-judgement.md

* TODO Run this just before starting emacs
e:sync-elpa-with-host

* Pen.el
** TODO Make it so Pen.el may have an external place where packages are placed
This way, I don't have to keep making docker layers every time I install a package - although, I *also* want the entire thing to be put into the docker image every now and then.
To be honest, the docker layers are great, because I want people to be able to use this OS.

*** Hmm. I should synchonise the pacakges between the container and the host
This is the way.

I need to start using 'unison'.

https://www.baeldung.com/linux/synchronize-linux-directories

Perhaps for the time being simply run a synchonization command manually.

** TODO Make sure that Pen.el may run simply from a docker container with nothing else
Regularly flatten to make the entire thing run inside of docker.

* TODO Do some learning about the armour of God

* TODO Ensure I still have the original URLs, so I can link to them from notes
e:/root/.pen/bigfiles/devotionals/the-word-for-today-reading/saved-by-grace-alone/clean.txt

* Look into these
https://www.libhunt.com/l/rust/topic/terminal

* TODO Make it so the ssh control master is set up automatically
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-cterm-ssh -v -ssh -M -vvv -- bash
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-cterm-ssh -v -ssh -vvv -- docker run -ti fathyb/carbonyl https://youtube.com
#+END_SRC

* TODO Set up carbonyl inside Pen.el
# https://github.com/fathyb/carbonyl

Run it as a docker container on the host.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-cterm-ssh -v -ssh -M -vvv -- bash
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-cterm-ssh -v -ssh -vvv -- docker run -ti fathyb/carbonyl https://youtube.com
#+END_SRC

* DONE Make a 'decorated onelined' repl

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  nem decorated onelined zsh
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Genesis 2:16-17
#+END_SRC

#+RESULTS:
#+begin_src text
Genesis 2:16-17
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
And the LORD God commanded the man, saying,
You may surely eat of every tree of the
garden, but of the tree of the knowledge of
good and evil you shall not eat, for in the
day that you eat of it you shall surely die.

(ESV)
#+end_src

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  nem columnated decorated onelined zsh
#+END_SRC

* TODO Write out these
https://www.youtube.com/watch?v=e6X-c3QcSX4&ab_channel=ImpactVideoMinistries

* TODO Get this book
Break Every Chain - John Eckhardt

* What is this?
Persistent genital arousal disorder

* TODO Make it so this works

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pool Exodus 20:2
#+END_SRC

I want to be able to use the workers instead of the main emacs worker.

* TODO Know that following the law by faith (and not works) is acceptable
e:/root/notes/ws/lists/peniel/mosaic-law-613.org

But it's necessary to have faith in Jesus, especially for justification.

And one must not put themself 'under' the Mosaic law.

* TODO Learn about the Mosaic law
- That might be worth doing

But, really, when the Bible talks about the
law, it does actually bring up commandments
and precepts from anywhere in the first 5
books, I think, including Genesis. So this compilation of 613 laws,
unless it includes such statutes even from Genesis, may be
non-comprehensive.

https://www.jmu.edu/dukehallgallery/exhibitions-past-2018-2019/the-613-mitzvot.shtml

* TODO Try to make a platform game in emacs!
That would be cool!
Everything should be ASCII!
Yeah, I'd need to use EIEIO, etc.

Why not start making a game engine inside emacs?
I think it'd be a great idea, to be honest!

* TODO I should use the dominion project scroll

* 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Galatians 1:10
#+END_SRC

#+RESULTS:
#+begin_src text
Galatians 1:10
‾‾‾‾‾‾‾‾‾‾‾‾‾‾
For am I now seeking the approval of man, or
of God?

Or am I trying to please man?

If I were still trying to please man, I would
not be a servant of Christ.

(ESV)
#+end_src

* TODO I should probably actually do my own writing though, rather than fill my mind with other people's doctrines and religion
And I should also endeavor to also do lots of service, as that is what Jesus' Kingdom is all about.

I do actually consider theology to be important but it shouldn't be a person's lifestyle.
I think the person's lifestyle should be 'pure and undefiled religion' as James defines it.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  James 1:27
#+END_SRC

#+RESULTS:
#+begin_src text
James 1:27
‾‾‾‾‾‾‾‾‾‾
Religion that is pure and undefiled before
God, the Father, is this: to visit orphans and
widows in their affliction, and to keep
oneself unstained from the world.

(ESV)
#+end_src

* TODO Make sure I can tangle together different org documents

https://www.reddit.com/r/orgmode/comments/vsmf50/merging_files_into_one_big_org_file/

* I should definitely keep going with the theology for the time being
I think it's important.

After all, Melee may be reading it.

* I should rejoin the world and use the email

* TODO Learn to tag headings and reorganise an org-mode document

* TODO Write about Against Heresies

* TODO I want to annotate all of these Scriptures and epistles, and combine things well

* TODO Use this
[[http://persweb.wabash.edu/facstaff/royaltyr/AncientCities/web/bradleyj/Project%201/The%20Epistle%20of%20Ignatius%20to%20the%20Magnesians.htm][The Epistle of Ignatius to the Magnesians]]

** God manifested Himself to us through Christ Jesus His Son, who is His eternal Word
Chapter VIII.-Caution Against False Doctrines.

Be not deceived with strange doctrines, nor with old fables, which are unprofitable. For if we still live according to
the Jewish law, we acknowledge that we have not received grace. For the divinest prophets lived according to Christ
Jesus. On this account also they were persecuted, being inspired by His grace to fully convince the unbelieving that
there is one God, who has manifested Himself by Jesus Christ His Son, who is His eternal Word, not proceeding forth from
silence, and who in all things pleased Him that sent Him.

* TODO I probably should build Pen.el up to look at legitimate and reliable Christian writings

* TODO Build something to pull in other types of books etc. to reference them
** Polycarp
[[https://www.earlychristianwritings.com/text/polycarp-lightfoot.html][Polycarp to the Philippians {Lightfoot translation}]]

** Ignatius
[[http://persweb.wabash.edu/facstaff/royaltyr/AncientCities/web/bradleyj/Project%201/The%20Letters%20of%20Ignatius.html][The Letters of Ignatius]]

* TODO I guess that I should definitely study marriage, etc.
I should study theology and then allow other people to be on the same page as me, by reading my material.
But should it really be used in that way?
The main reasons I am currently reading Scripture is to become wise to salvation and to counter the lies of the devil with Biblical Truth.

* TODO Make my cross-references faster, so I can avy-jump between them

* 
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org

* TODO Move on from Melee, I think
Honestly, I think it's important to do so.
The entire LGBT thing has been the problem, I think.
But also I was not without fault.
I think that the right thing to do is to move on from Melee.

* TODO Continue writing about the mystery of marriage

* TODO Make a fuzzy finder for selecting a verse reference for the Bible
- List every verse ref

Consider using emacs lisp for that though.

e:list-bible-book-titles
e:list-bible-chapter-references
e:list-bible-verse-references

e:/root/.emacs.d/host/pen.el/scripts/bible-get-chapter-title.els

* 
Pray and give thanks to God.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  1 Peter 4:1-2
#+END_SRC

#+RESULTS:
#+begin_src text
1 Peter 4:1-2
‾‾‾‾‾‾‾‾‾‾‾‾‾
Since therefore Christ suffered in the flesh,
arm yourselves with the same way of thinking,
for whoever has suffered in the flesh has
ceased from sin, so as to live for the rest of
the time in the flesh no longer for human
passions but for the will of God.

(ESV)
#+end_src

* TODO Fix the snippets shared folder for Pen.el
- I need to do that before I begin doing my next d-group notes.

* TODO Make Pen.el modes
- Spiritual-warfare mode, for example

* TODO I should probably learn a bit more Maori
I have to currently be focused on God's Word though.

* TODO Go in to corrections tomorrow to see if I have missed an appointment
Let them know I missed the appointment because I was not keeping track of the days.

It's strange that Ian Dalziel was asking about exact times I go to sleep and wake up etc.
That was extremely strange.
Likewise, he even asked David from prayer group, I think.

* TODO Do more on works of mercy
/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org

* TODO Pray for
- Dad
- The nations

Jesus is the only way to God.

What's bound on earth must be bound in heaven.

Every knee shall bow and every tongue confess that Jesus Christ is Lord!

AMEN!!

* TODO I have to continue with theology
There are too many people not actually reading the Scripture.

* TODO I should make notes on ranges of verses

For example:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  I Corinthians 10:7-14
#+END_SRC

#+RESULTS:
#+begin_src text
1 Corinthians 10:7-14
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Do not be idolaters as some of them were; as
it is written, The people sat down to eat and
drink and rose up to play.

We must not indulge in sexual immorality as
some of them did, and twenty-three thousand
fell in a single day.

We must not put Christ to the test, as some of
them did and were destroyed by serpents, nor
grumble, as some of them did and were
destroyed by the Destroyer.

Now these things happened to them as an
example, but they were written down for our
instruction, on whom the end of the ages has
come.

Therefore let anyone who thinks that he stands
take heed lest he fall.

No temptation has overtaken you that is not
common to man.

God is faithful, and he will not let you be
tempted beyond your ability, but with the
temptation he will also provide the way of
escape, that you may be able to endure it.

Therefore, my beloved, flee from idolatry.

(ESV)
#+end_src

I want to be able to highlight the entire section and then make notes on that range.

* TODO Tomorrow go to the Bible study on Monday at the same time 10am

* TODO Go on more of an adventure of theology
I guess, just arive at a much deeper understanding through reading the Bible.

* TODO I should learn to make org-mode documents that are a little more organised and graphlike
- I should learn to deal with headings, and reorganise

* TODO Continue to look at other prophesies
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sp +/"^\*\*\* 44 Prophecies Jesus Christ Fulfilled" "$EMACSD/pen.el/docs/theology/faith-and-judgement.org"
#+END_SRC

- Psalm 31, for example

* TODO I should consider printing and giving to Muhammad

* TODO Continue to build up Pen.el Bible-mode with such information as this
e:/root/.pen/documents/bible/44-prophecies-of-Jesus-Christ-fulfilled.org

It's important.

* TODO Continue to learn to make animations and things inside of emacs

* TODO Make universal sidecar update more frequently
But I guess I should throttle-memo and memoize as much as I can.

* Finish this function
j:timeout-memo--throttle-advice

* TODO Set up my ascii-adventures mode to create new areas fairly quickly - perhaps one every day
- I *could* in theory make something like xkcd for emacs.
- An emacs comic.

* Yes, build the Bibleverse game or the Bible-multiverse game
Yeah, it should definitely be about memorising Bible verses.

- Hmm. Bible memory could be made a bit easier.

Perhaps there could be a bit of fuzzy completion.

* This is interesting - does a person's angel look like that person?
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Acts 12:13-15
#+END_SRC

#+RESULTS:
#+begin_src text
Acts 12:13-15
‾‾‾‾‾‾‾‾‾‾‾‾‾
And when he knocked at the door of the
gateway, a servant girl named Rhoda came to
answer.

Recognizing Peter's voice, in her joy she did
not open the gate but ran in and reported that
Peter was standing at the gate.

They said to her, You are out of your mind.

But she kept insisting that it was so, and
they kept saying, It is his angel!

(ESV)
#+end_src

* 
Mark 10:15: Truly (G281 amen) I say (G3004 lego) to you, whoever (G3739 hos) (G302 an) does not receive (G1209 dechomai) the kingdom (G932 basileia) of God (G2316 theos) like (G5613 hos) a child (G3813 paidion) will not enter (G1525 eiserchomai) it at all.”

* I should vocally praise God even in front of others
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Psalm 40:3
#+END_SRC

#+RESULTS:
#+begin_src text
Psalms 40:3
‾‾‾‾‾‾‾‾‾‾‾
He put a new song in my mouth, a song of
praise to our God.

Many will see and fear, and put their trust in
the LORD.

(ESV)
#+end_src

* TODO Learn to make transients like the one in the newest docker.el

* TODO Set up org-roam
I think that is a good idea, actually.

* TODO Learn eieio

* TODO Simply make a game in emacs that uses a bunch of emacs components
- hypertext
- sidecar
- avy
- transient
- headerline

Continue improving at emacs.

It should be an emacs game.

* TODO Continue to learn emacs stuff

* TODO *If* I want to make a roguelike, consider libtcode
https://github.com/libtcod/libtcod

This is the same library that was used for brogue.

** TODO See how I can find git repositories that depend on other git repositories

* TODO See if I can do more with animations, etc. inside emacs
A lode runner game in emacs would be cool.
Maybe I should try to make a lode runner game, or something.

* TODO Also, don't forget to begin recording audio over the Bible as I read it

* TODO Maybe start working on the 'bibleverse'

* TODO Figure out how to search deeply nested lists for things, and extract things
j:test-ascii-adventures

e:/root/.pen/tmp/parse-hypertext-block.el

Get all of the =src-block= from this nested list.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (org-element-map (pen-org-parse-file (umn "/volumes/home/shane/var/smulliga/source/git/ascii-adventures/bewilderness/house.org")) 'src-block (lambda (el) el))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (org-element-map (pen-org-parse-file (umn "/volumes/home/shane/var/smulliga/source/git/ascii-adventures/bewilderness/house.org")) 'src-block (lambda (el) (org-element-property :value el)))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (org-element-map (pen-org-parse-file (umn "/volumes/home/shane/var/smulliga/source/git/ascii-adventures/bewilderness/house.org")) 'node-property (lambda (el) (org-element-property :value el)))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (org-element-map (pen-org-parse-file (umn "/volumes/home/shane/var/smulliga/source/git/ascii-adventures/bewilderness/house.org")) 'src-block
        (lambda (el)
          (cons
           (org-sync-snippets--decode-snippets-dir
            org-sync-snippets-snippets-dir
            (replace-regexp-in-string "^:tangle " "" (org-element-property :parameters el)))
           (org-element-property :value el))))
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "$EMACSD_BUILTIN/elpa-full"; ead -d "'src-block"
#+END_SRC

* TODO Keep going with this
e:/volumes/home/shane/var/smulliga/source/git/semiosis/thoughts-on-theology/README.org

I need to do more studies on:
- Submitting to the righteousness of Jesus Christ our God and Saviour.

* It's probably a good idea to work on my own game
It will help me to not want to go for other games.
Yeah, building my own game is quite a good idea.

* TODO Maybe watch some Operas instead of movies
https://www.youtube.com/watch?v=bNmzXFJPU5M&ab_channel=SIER101

* TODO Try to understand this
e:/volumes/home/shane/var/smulliga/source/git/semiosis/thoughts-on-theology/README.org

* TODO I should make it so there is a 'button line' for each emacs mode
i.e. I should be able to avy-click on buttons.
For example, with =hypertext-mode= there might be a

=sidecar= might be the way to achieve this because then I could probably get avy going, which is what I want.
Though, it would be nicer as something like the header line, because I would like it to be nice and small.
Although, there is always the tmux click mechanism if I can't use avy.

* TODO Learn to parse org files like databases

pa:org-brain is quite good at it.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (with-temp-buffer
    (ignore-errors (insert-file-contents filename))
    (org-element-map (org-element-parse-buffer 'headline) 'headline
      (lambda (headline)
        (when-let ((id (org-element-property :ID headline)))
          (unless (org-brain-id-exclude-taggedp id)
            (org-brain-entry-from-id id))))
      nil nil 'headline))
#+END_SRC

* TODO Continue working on theology
e:/root/.emacs.d/host/pen.el/docs/theology/faith-and-judgement.org

** I should then divide it all up and write a book
- Make it a living document.
  - Put the date on it.

* TODO I think it would be fun to make an RPG game

* TODO At some stage I may consider switching to write in a more advanced programming language

* 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Psalm 147:11
#+END_SRC

#+RESULTS:
#+begin_src text
Psalms 147:11
‾‾‾‾‾‾‾‾‾‾‾‾‾
but the LORD takes pleasure in those who fear
him, in those who hope in his steadfast love.

(ESV)
#+end_src

* TODO Rescue Ben Crowl from the evil NLT version
https://www.puritanboard.com/threads/against-the-nlt.52068/

* TODO Animate this
e:$MYGIT/ascii-adventures/bewilderness/house.org

* TODO Maybe it's a good idea to build a game with Mike
What's an easy programming language to use?

Lisp is the easiest language to use.
But it could take a lot of time.
It's best to build the entire game engine with a simple programming language and then work within it.

** Perhaps making a low-graphics 'infinite' depth space shooter would be a good idea
Low graphics means no AI fiction.
Every level would look basically the same.
OK, so I'd need to start with an ascii asteroids game.

** TODO Make a text adventure game
e:/root/.pen/ascii-adventures/todo.org

YAAY! This will be really fun!

* TODO Install this tetris game
http://victornils.net/tetris/

* Watch: Saul: The journey to Damascus
https://www.youtube.com/watch?v=FvUi5GDKlX8&ab_channel=MarioAzzopardi

* 
- Add the thing about not renovating

* Remove the direct reference to endorsing sinful things making it more difficut to get married.

* TODO Learn to draw in my terminal without the mouse
That is like a first step really.

Even creating a canvas, etc. is a whole thing

I really *should* have some kind of cursor-mode over tmux or something like that.

I want to be able to draw.

Maybe the solution is vim!
Hmm. Maybe not! It's really slow.
I think the solution needs to be tmux, but I don't know how to program tmux c code.

e:/root/repos/tmux/tmux/window-copy.c

* TODO Look into elisp idiosyncracies again
- Start working on the game engine inside of emacs
  - It has to stay inside emacs.

* TODO Make it so I can build graphical hypercard-like games inside of emacs
What can I use to build them?

** TODO Canvas for rendering
- ASCII-art bitmaps and animations

** TODO Start working on the level-editor

* TODO Set up hypercard
https://archive.org/details/hypercardstacks

* TODO Maybe start working on a game like AMOT
- Or try to remake AMOT

** I should definitely make the engine for it

* Pen.el
** DONE Add () around strongs concordance words.

** TODO Add a gif to the README.org

agg https://asciinema.org/a/637135 637135.gif

* I should start building games
** This style game would be cool
http://amessotrouble.com/

I should definitely keep the style, but perhaps I could make terminal versions.

Make it run on BBS.

*** incorporate:
**** A graphical clickable column like in Ray's Maze

I guess, like the sidecar.
I should then experiment with making clickable ASCII graphics in emacs.
The mouse should really work.
Parts of the image should change their font-lock highlighting, depending on what is being hovered.
Can this even be done in emacs [easily]?

Maybe I can re-render an entirely different frame, triggered by a mouse-hover.
Yes, this is the way.

Yeah, so I would need to make the emacs world-builder.
I would need to make a hypercard system for emacs.

OK, yeah, a hypercard application in emacs.
This would be fairly complicated, depending on how advanced I want to make it.

**** 2D
Perhaps I can use a terminal-graphics art program.

https://github.com/cmang/durdraw

Or =picture-mode=, or =artist-mode=.

http://xahlee.info/emacs/emacs/emacs_ascii_diagram.html

**** 3D
https://github.com/wojciech-graj/TermGL

**** Video
https://github.com/joelibaceta/video-to-ascii

** Make a worldbuilder
https://archive.org/details/raygamesimg

I'd need a worldbuilder to maintain consistency.
I'd just use YAML and snippets, probably.

* TODO Work more thoroughly and carefully on my document

* TODO Build up a knowledge graph? That would be fun

* TODO Learn a little more about music, etc.
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  fpvd "/root/.pen/documents/notes/Music Data Base.xls"
#+END_SRC

- Capo 3 to G (what does that mean?)

* TODO Find audio recordings of the Bible other than KJV

* TODO Make it so I can right-click on a bible verse reference and have it read out
This would be useful for my d-group notes.

** TODO I should export a variable with the prefix variable to the shell command

[[sh:bible-read-passage nasb Matthew 5:11-12 ][Matthew 5:11-12]]

j:follow-sh-link

* TODO Make a function similar to this which instead of translating the input, translates the screen chars
j:avy-translate-char-function

* TODO I guess it's important to try to get myself a new keyboard right now, and also a hard drive to back up my OS
These things are important.

Buy, then, a bluetooch keyboard.

* TODO Learn Hebrew and Greek - why not?
It might be a good idea, actually.
This is something that I can do, and it might be very worthwhile.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  digraph-select HEBREW
#+END_SRC

** Figure out how to write in hebrew in emacs, etc. and to use avy, etc. with hebrew
I should be able to use avy with hebrew.

=a= should correspond to aleph, etc.

Use the same pattern according to the digraph-table.

** TODO Do the same with greek, etc.

* TODO Make a mode that uses red because it's clearer at a distance

* TODO
- Buy myself glasses

* TODO I guess I should learn to do some math inside of Pen.el
This might be a good idea.

* I should still go and not be intimidated by demons
But what is the deal with me getting demonic dreams?

* This is so odd
[[notmuch:id:CAHf_wNK7jbykMrDddvtNOE24JCe9LtUPjK87sD+cbKM9-zZkAg@mail.gmail.com][Email from Andrew Dougherty: Re: Shane!!!]]

I should just give him the template

* 
[[notmuch:id:CALXG_NZnn1PKNfC7wSV3_z9knxZd2AjRBVGfKGYpb3bkMKRDFg@mail.gmail.com][Email from Shibu Mathew: Meeting]]

* TODO Meet Shibu tomorrow at 5pm

* TODO Remove cursed items from my life
Hmm. Sure.

* TODO Set this up
https://gitlab.com/grinn.amy/chromecast.el

* TODO Do more reading from the Old Testament

* TODO Meet Craig at McDonalds at 12.30pm tomorrow (Wednesday)

* TODO Make something to display ansi output on the emacs tty - draw to the tty from emacs

* TODO Fix up org-agenda. I will probably need to use git-bisect to discover the cause of the breakage

* TODO Add the ALC Bible study to my agenda

* I should simply focus on my Bible study, somehow
- This is quite important

* TODO Continue pursuing my Bible-mode and start publishing Bible-studies
Do this:
- Publish my Bible-studies.
- Demonstrate using my Pen.el software

Go hard with this.

* TODO Figure out how to do asynchronous shell commands and get the results back
- I need to get better at managing processes in emacs

* TODO Make the bible-mode LSP-UI doc popup load asynchonously and smoothly, as the LSP UI does

Instead, use j:changed-line-hook

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (add-hook 'post-command-hook 'lsp-ui-doc--make-request nil t)
#+END_SRC

I think I'm supposed to run j:lsp-ui-doc--make-request first and then j:lsp-ui-doc--callback will actually display it.

j:lsp-ui-doc--make-request
j:lsp-ui-doc--callback

* TODO Make the strongs concordance buttons work again

* TODO I need to get better at managing tmux
- Closing sessions
  - Make a manager for it in emacs, maybe.
- Setting the default directory of the session

* TODO update this so that if it is a website url then check if it is cached, but otherwise do not
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"'org-link" "$PENELD/src/pen-org.el"
#+END_SRC

* TODO Consider making my own implicit buttons without hyperbole

* Automate this for recoding Bible verses
** Capture and profile noise
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  arecord --format=cd noisesample.wav
  normalize-audio  noisesample.wav
  sox noisesample.wav -n noiseprof noise_profille_file
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sox file.wav cleaned.wav noisered noise_profile_file 0.10
#+END_SRC

*** Add an indicator to the magit-margin

e:/root/.emacs.d/host/pen.el/src/pen-magit-margin.el

* TODO I really *should* be recording audio in Pen.el

* DONE Fix the org-brain issue
** Agenda brain is broken, but others work

** The error
*** When I press r on org-brain-visualize-mode

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key org-brain-visualize-mode-map (kbd "r") 'org-brain-visualize-goto-recursive-children-flat)
#+END_SRC

*** I get this
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  user-error: Before first headline at position 1 in buffer  *temp*
#+END_SRC

** This creates the error
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (org-back-to-heading)
#+END_SRC

*** Where is this called by org-brain?
I could run the debugger for the function, but it is very slow.
I want to run a trace instead.

** This creates the buffer "*temp*"
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (with-temp-buffer (buffer-name))
#+END_SRC

* TODO Run the profiler on emacs startup

* 
https://clans.org.nz/

* TODO Make the timeout function memoise
/root/.emacs.d/host/pen.el/src/timeout.el

* Speed up my emacs by profiling code
- dired

* TODO Make a tabularised mode to navigate the bible study notes, etc.
e:/root/.pen/documents/notes/ws/discipleship-group/weekly-journal/2024-week-4.org

I need to be able to fill in a table.
If I select one week, then it should fill out a template for that week's Bible-study, and open it as an org file.

Either do something like 'calibre', or like

Or perhaps I should learn more about 'sidecar' as it uses magit-sections and org-mode - that's actually quite powerful.

* TODO Fix Bible-mode formatting for ESV
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  Isaiah 54:16
#+END_SRC

Some words are mashed together.

* TODO Consider using 'sideline' as well in Bible-mode

* TODO One thing I may be able to make its a function for fz which swaps the annotations around with the candidate, and relaunches

* TODO Make a Bible chapter fuzzy search
j:bible-fz-chapter-titles-go

- Search for such things as:
  - 10 commandments

* TODO Make a Bible passage fuzzy search
- j:bible-fz-passage-outlines-go

e:/root/.pen/documents/notes/ws/peniel/Bible-outlines.txt

* TODO Next time emacs starts running slowly, profile it
mx:profiler-start
mx:profiler-stop
mx:profiler-report

* TODO Get a bunch of collars with bells for Flo, in case she loses them

* TODO Use more babashka - it's a cool language
https://babashka.org/

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  time bb -e '{:shell (System/getenv "SHELL")}'
#+END_SRC

#+RESULTS:
#+begin_src text
{:shell "/bin/bash"}

real	0m0.215s
user	0m0.040s
sys	0m0.035s
#+end_src

* TODO Start using w3m in emacs - it's so much faster
But I want to cache it as well.

* TODO Make it so I can search forward through the entire Bible, not just the visible text

j:bible-mode--open-search

* DONE Fix this issue
It happens with org-mode.

#+BEGIN_SRC emacs-lisp -n :async :results none :lang text
  (with-temp-buffer (org-mode) (insert "hi") (buffer-string))
#+END_SRC

* TODO Write an interpreter - a lisp in lisp
https://youtu.be/OyfBQmvr2Hc?t=639

* TODO With my next payment, fix up my laptop

* TODO Learn this helm code
e:/root/.emacs.d/elpa/helm-wordnet-20160128.1507/helm-wordnet.el

What else can I make in a similar fashion to this?
Perhaps I should build an fz function with a preview.

** TODO Make something for filter / grepfilter, so I can see the results in realtime, similar to the vim/tmux version of j:pen-fwfzf

[[e:pen-f]]

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  f filter-with-fzf
#+END_SRC

* TODO Do something with m4

* TODO I should move towards building an LSP server for the Bible
With the intention of maintaining a well-organised suite of tools for reading the Bible.

** Build up the components first

** Then make an efm-langserver config for it

*** Ensure efm-langserver works for arbitrary modes

* TODO I should move into common lisp or racket - but only after I have gotten much better at emacs lisp scripts
Racket would be quite cool.

I'd end up making a lot of DSLs.

But do I really want to make a lot of DSLs?

I guess I don't really want to do that, but rather learn existing languages.

But making my own language might be useful for some tasks.

* TODO Make a new scrape-bible-references script that is based on elisp, and uses the Pen.el libraries

* DONE Fix grepfilter for this
e:/root/.pen/documents/notes/todo.org

The problem is actually j:pen-fwfzf

j:pen-fwfzf

** This works, but pen-fwfzf in this buffer does not always
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v /root/dump/tmp/scratchBhVafO.txt
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/dump/tmp/scratchBhVafO.txt | unlinkify | pavs
#+END_SRC

* DONE Fix an issue with the bytepos replacements etc.
To do that I need to debug the j:grepfilter-transform function with emacs

* TODO Make the filter to relinkify all urls
- it must unlinkify and then linkify

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  grepfilter "wrlp org-unclink" "filter-org-links" | grepfilter "wrlp -E \"org-unclink | oc\"" "rosie-urls"
#+END_SRC

** TODO Make a 'rosie-urls' which also includes emacs org links

* DONE Get a list of filters together with a list of transformers
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  grepfilter slugify "rosie grep -o subs net.ipv4"
#+END_SRC

| kb        | f                |           |
|-----------+------------------+-----------|
| =M-q M-e= | =pen-extract=    | =pen-map= |
| =M-q M-t= | =pen-transform=  | =pen-map= |
| =M-q M-g= | =pen-grepfilter= | =pen-map= |
| =M-q M-s= | =pen-summarizer= | =pen-map= |
| =M-q M-h= | =grepfilter=     | =pen-map= |
| =M-q M-f= | =pen-fwfzf=      | =pen-map= |

e:$EMACSD/pen.el/config/filters/grepfilters.sh

* TODO Maybe look at this
[[https://www.youtube.com/watch?v=Y4yHNcKEK_c][I am 32 Years Old, Married with 4 kids. This Is Our Morning Routine | Christian Vlog #1 - YouTube]]

* TODO Make lists of transformations
** Quote all the IP addresses
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ifconfig | grepfilter "wrlp q -f" "rosie grep -o subs net.ipv4" | v
#+END_SRC

** Blank out all the IP addresses
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ifconfig | grepfilter "sed 's/[0-9]/_/g'" "rosie grep -o subs net.ipv4" | v
#+END_SRC

I mean, grepfilter is nice but it could be faster.
Its slowness is exemplified with sed and rosie together.

The slowless comes from the bash script though, not the elisp.

The slowness comes from e:show-fds

What a shame! and how annoying!
It might be better if I pass the output file path into emacs.

*** DONE It should be as fast as this
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ifconfig | eval "rosie grep -o subs net.ipv4" | eval "sed 's/[0-9]/_/g'" | pavs
#+END_SRC

I sped it up.

* TODO Find a way to look up the fd for a "pipe:[...]" instantly
using find on /proc is a bit too slow.
I need something faster.

* DONE Reply to Don today

* DONE Make the apply, apply script

e:$PENELD/scripts/grepfilter

Perhaps I should use this for the canonicalise crossreferences script.

This is actually quite a lot of work.

Write it in elisp.

e:/root/.emacs.d/host/pen.el/scripts/bible-get-chapter-title.els

* TODO Canonicalise the cross-references

Make sure the canonicalie script runs quickly.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/.pen/documents/notes/ws/peniel/Bible-outlines.txt | grepfilter "wrlp upd shx ci -f canonicalise-bible-ref" scrape-bible-references | v

  cat /root/.pen/documents/notes/ws/peniel/Bible-outlines.txt | grepfilter "upd shx ci -f canonicalise-bible-ref" scrape-bible-references | v
#+END_SRC

** TODO Make e:canonicalise-bible-book-title.cl able to transform a list efficiently, so I don't need to reload often
e:/root/.emacs.d/host/pen.el/scripts/bible-mode-scripts/canonicalise-bible-ref

e:canonicalise-bible-book-title.cl

*** Perhaps I should write it in emacs lisp now, i.e. .els

* Speed up this script
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  cat /root/.pen/documents/notes/ws/peniel/Bible-outlines.txt | scrape-bible-references
#+END_SRC

Build it again from the ground up.

* TODO Make the sidecar show the verse references, and the actual verses

* TODO Now I should try to get the lsp-ui docs popup displaying inside Bible-mode
e:/root/.emacs.d/elpa/lsp-ui-20211009.1545/lsp-ui-doc.el

** DONE First, see if I can get it appearing inside a buffer that is running LSP, with custom contents

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (lsp-ui-doc--display "export" "lkjFDKS\ntesting")
#+END_SRC

This works.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key bible-mode-map (kbd "D") 'bible-mode-show-hover-docs)
#+END_SRC

** TODO Make it work with a changing cursor position

j:lsp-ui-doc-show-with-mouse
j:lsp-ui-doc-show-with-cursor

j:lsp-ui-doc--setup-mouse

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (lsp-ui-doc--setup-mouse)
#+END_SRC

** TODO Ensure it locates properly when line wrap is enabled, also when I'm at the end of a long unwrapped line
*** TODO when line wrap is enabled i.e. truncate-lines disabled

*** TODO when I'm at the end of a long unwrapped line

* TODO Make it so I can open many different Bible books / chapters and have them visible as tabs

* TODO Make it so I can click on the bible margin various things

* DONE Disable the icons in emacs, so that the GUI looks more like the terminal
j:tab-bar--load-buttons

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (iconp 'tab-bar-new)
#+END_SRCe

* TODO I guess I can just focus on Pen.el for a while
It is my project.

* This is inspiring - pehaps I could learn music theory properly
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  chrome "https://www.youtube.com/watch?v=7RXWXYboUjA&ab_channel=THISMUSEUMIS%28NOT%29OBSOLETE"
#+END_SRC

** I could create my own programming language / DSL for making music, actually

** Learn a bit about composing music
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  my-mirror-site "https://www.artofcomposing.com/how-to-compose-music-101"
#+END_SRC

Make a DSL for writing music.

I don't want to write algorithmic music with a DSL, but I'd rather describe eloquently, beautiful music.
How to write it? I should probably design it mysel completely.

I want to make my own hymns.

Let's start designing:
Get more and more complicated, attempting to accommodate more and more things into the DSL.

- I need to lay down a chord progression
- And I should also lay down a melody
- And I should just get good at those two things for starters.

** Notations
- [[https://en.wikipedia.org/wiki/ABC_notation][ABC notation - Wikipedia]]
  - This is cool - very simply, but cool
  - Perhaps it's enough
- [[https://en.wikipedia.org/wiki/GUIDO_music_notation][GUIDO music notation - Wikipedia]]
  - This is not as good as LilyPond
- [[https://en.wikipedia.org/wiki/LilyPond][LilyPond - Wikipedia]]
  - This can make basically anything

** Intervals
[[https://en.wikipedia.org/wiki/Interval_(music)][Interval {music} - Wikipedia]]

** Mary had a little lamb

| E1 D1 C1 D1 | E1 E1 E2 .. | D1 D1 D2 .. | E1 G1 G2 .. |
| E1 D1 C1 D1 | E1 E1 E1 E1 | D1 D1 E1 D1 | C4 .. .. .. |

This notation so far is lacking.
I need a way to describe which octave.
One of these:
- [[https://en.wikipedia.org/wiki/Helmholtz_pitch_notation][Helmholtz pitch notation - Wikipedia]]
- [[https://en.wikipedia.org/wiki/Scientific_pitch_notation][Scientific pitch notation - Wikipedia]]

** My grandfather's clock

D | G

https://musescore.com/felipe-galvan/henry-clay-work-my-grandfathers-clock

* TODO Make it so j:bible-verse-margin-status shows if I have a recording
j:bible-verse-margin-status

- My personal recording, that is

- Make it clickable

* DONE For Bible-mode, have a far-right margin like what magit-log has
e:/root/.emacs.d/host/pen.el/src/pen-magit-margin.el

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"(magit-make-margin-overlay (concat \"  \" (str (point))))))" "$EMACSD/pen.el/src/pen-bible-mode.el"
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key bible-mode-map (kbd "M") 'magit-toggle-margin)
#+END_SRC

* TODO Set up universal sidecar
https://github.com/emacsmirror/universal-sidecar

It actually does look quite good.
I should get it going.

** TODO Add Bible-mode information to sidecar

- Show if there is a chapter recording for the current chapter / version
  - Such as the KJV recording I have

* TODO Make a sideline backend for Bible-mode
e:/root/.emacs.d/host/pen.el/src/pen-sideline.el

This only has a line of information though.
I would like an entire panel.

* TODO Make a control panel on the side of emacs, or the bottom
- I need a visual control panel within emacs
  - Also, maybe one outside of emacs
- It should be able to record and stop recording.
  - And the recording should be filed away somewhere depending on the get-path.

Perhaps I should simply have a split window for it, like ediff.

* Email Mike to ask him when it's on
mail:dunedin.chapter@fgbmfi.org.nz

[[ebdb:Michael Miller]]

* TODO [#A] Buy a microphone / headset
https://www.trademe.co.nz/a/marketplace/computers/peripherals/headsets-microphones/microphones/listing/4521186085

Then start recording audio.
This is a really good idea.

I should start recording anyway, using the mic on my computer.
Try to record as nicely as I can.
Speak them as well as I can.

This works, but I need to improve the audio quality, etc.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  arecord --format=cd file.wav
#+END_SRC

* TODO [#A] Make my own audio-bible recordings
This sound fun!

I could record one verse at a time, or one chapter at a time?
Record one verse at a time.

Then place an audio icon by each verse that has audio!

* TODO I should commit my time to the Lord first by doing Kingdom work, and then feel free to find a job
- Then the job could help fund the time I commit to the Lord

* DONE Make it so elisp-complete-interactive-arg runs when there is a space under the cursor and I press M-/
j:elisp-complete-interactive-arg

It works awesomely!

Try it out with e/grep!

* DONE Make a code completer for the current argument - let it access the interactive argument
eldoc-highlight-function-argument

Perhaps I can look into how eldoc works to get the current argument.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key pen-map (kbd "s-/") 'elisp-complete-interactive-arg)
#+END_SRC

j:elisp--highlight-function-argument

** Start with this
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (helpful--signature 'elisp-get-fnsym-args-string)
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (elisp-get-fnsym-args-string 'elisp-get-fnsym-args-string)
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (interactive-form 'e/grep)
#+END_SRC

*** TODO Need a way to get the current position inside the sexp
Figure out how eldoc gets it (because it gets it reliably and efficiently).

This is how:

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (cadr (elisp--fnsym-in-current-sexp))

  ;; or

  (pen-lisp-cursor-elem-index)
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  ;;       cursor here
                |
  (foo bar baz faz yaz)
  ;;            ^
  ;;            4
#+END_SRC

* B&W mode
** DONE Ensure that the currently selected argument appears in the minibuffer documentation when writing elisp
- I need to find the face

eldoc-highlight-function-argument

* TODO Make an Enum type for elisp
j:e/grep

** And make it so I can select it interactively when the function is run

* TODO Make an iterable object in emacs lisp
It would certainly be useful to be able to do this type of programming within emacs.

Even if I used eieio to make an object in emacs lisp, I need to make an iterable object.

Are such things easy and elegant in elisp?

Also, can object orientated programming be done in haskell?
Which is the best language for object oriented programming?

* TODO Learn to make iterators - I should make an iterator for the Bible books
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  e ia iterator iterators iter2 path-iterator
#+END_SRC

* DONE Set up audio for my Bible software
/home/shane/dump/torrents/The Holy Bible - Audio Bible - King James Version - Alexander Scourby - Voice of The Bible

** TODO Maybe look at some others - But I really want the versions I have
https://www.faithcomesbyhearing.com/audio-bible-resources/mp3-downloads

*** NASB
https://archive.org/details/englishNASBAudioBible

* TODO Make new syntax highlighting for vim, for black-and-white mode

It should be super simple.

- headings
- lists
- ALL_CAPITALS
- number literals
- comments (underline if possible) - it's syntax, so maybe I can't handle it without the comment plugin
  - Do S-F10 twice in a shell script to see comments working

* TODO Learn to take care of baby birds

* TODO Make shopping lists
- marmite
- weetbix
- icecream

* TODO Ensure I can scrape from this file the Bible refs
e:/root/.pen/documents/notes/ws/peniel/Bible-outlines.txt

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/.pen/documents/notes/ws/peniel/Bible-outlines.txt | scrape-bible-references | pavs
#+END_SRC

- Ensure it's fast
  - I do actually need to speed it up significantly
  - maybe I can use elisp
  - e:bible-get-chapter-title.els
  - e:scrape-bible-references
  - e:canonicalise-bible-book-title
- Ensure all the refs remain in tact

** Then fix up the cross-references

** Then get this working fast
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key pen-map (kbd "M-j M-v") 'ace-link-bible-ref-tpop)
#+END_SRC

* TODO Ensure that the Bible book titles in this file are canonicalised
e:/root/.pen/documents/notes/ws/peniel/Bible-chapter-titles.txt

j:get-chapter-title

** TODO Script it with an elisp function - then put it into its own script
get-chapter-title

* TODO See if I can actually speed up eww-browser
I may have some things which are slowing it right down.

* TODO Make it so M-i M-i does not copy, but that M-* M-* may copy (if selected)
I have no idea why M-i M-i copies in the first place.
I don't see where the logic is.
Perhaps I should make it so the clipboard is preserved over that function.

iedit--quit

* TODO Make a selector for word definitions M-9 - perhaps I should show various methods in a selector, instead of a fallthrough
and a status next to each such as "available"

- Handle should really do this.

j:handle--command-execute

* TODO Buy
- New casette recorder

* DONE Make the emacs lisp script interpreter

This method is OK - it's not the fastest, but it's a good idea to work on it.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  /root/.emacs.d/host/pen.el/scripts/emacs-script-test4
#+END_SRC

I need more print methods, etc.
Emacs itself needs access to the tty and the stdout and the stderr handles, as it's running the script.

* TODO With b&w mode, make all the tmux windows without their own syntax highlighting

* TODO Make a literal string replacement program
But it should be non-recursive.
It should run over the document only once.
How should it handle overlapping replacements?:
I guess it should prioritise them
- something > bar
- some > baz

Maybe I want to use m4.

e:/root/.emacs.d/host/pen.el/scripts/grepfilter

* TODO Learn to use an emacs process with sed, so I can control a single sed or a single other stream-editing script inside emacs
Slugify all IP addresses in a document.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ifconfig | grepfilter slugify "rosie grep -o subs net.ipv4"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ifconfig | patm -r "[0-9.]+" slugify
#+END_SRC

* TODO It's quite important that I have the filter script which can extract Bible verse refs and then transform them and then replace them in the document
I might actually need to use emacs to do this.
The best way is probably to use actual emacs to perform the entire operation, instead of sed or awk.

** TODO Set up emacs as a scripting language

* TODO Focus on the Bible-studies, etc. as I believe that God has given this to me as a gift

* TODO Set up book review in Pen.el

* TODO Buy new keyboard keys again

* TODO Find where this quote is mentioned
[[gr:Awake, sleeper, And arise from the dead, And Christ will shine on you.]]

- I should even expose the deeds done by people in the darkness

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Ephesians 5:11-14
#+END_SRC

#+RESULTS:
#+begin_src text
Ephesians 5:11-14
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Do not participate in the unfruitful deeds of
darkness, but instead even expose them; for it
is disgraceful even to speak of the things
which are done by them in secret.

But all things become visible when they are
exposed by the light, for everything that
becomes visible is light.

For this reason it says, “Awake, sleeper, And
arise from the dead, And Christ will shine on
you.”

(NASB)
#+end_src

* TODO Repay oxfam
https://mail.google.com/mail/u/0/#inbox/FMfcgzGwJmGgSRzQWShtfgDmLhVzdPlZ

[[notmuch:id:63.B1.16952.0A1A7A56@ib.mta1vrest.cc.prd.sparkpost][Email from Oxfam Aotearoa: Failed donation: $21.40 NZD monthly ]]

* TODO Repay tearfund
https://mail.google.com/mail/u/0/#inbox/FMfcgzGwJmFVfWfSGPTpfhVzTbxRmFTj

[[notmuch:id:8BD6CA920A504916A637B4746785A7E61DA481603C4B@INFO.TEARFUND.ORG.NZ][Email from Tearfund NZ: Your recent donation to Tearfund has failed]]

* TODO Fix org-agenda and eww. They're both going to the bottom of the screen

* DONE org-agenda
- Fix Don's bible study - it's not showing up

* Maybe learn some rust
https://www.rust-lang.org/learn

* TODO I should really be a bit more organised and try to get through my agenda items
Yet I need to yoke myself to Christ, not to my agenda.

The agenda, along with my ledger, should be for reflection of my week, etc.
But I need to be yoked to Jesus Christ.

* DONE I guess I should just have fun writing Haskell or something
That would be more fun than playing videogames.
If I want, I can just forget about videogames entirely.

* TODO Visit Wellington with Mum and Dad for their anniversary
https://mail.google.com/mail/u/0/#label/Family/FMfcgzGwJmDNGDgcGPWdQsnGJRMgLVKn

Thank You, Father God, for letting me have dinner with Mum and Dad on their anniversary.
Thank You, Jesus.
Thank You, Holy Spirit.

* 
https://www.geneva.edu/blog/biblical-wisdom/proverbs-22-4

* TODO Add the audio King James Version Bible to Pen.el

* TODO Organise contacts a bit more securely

* TODO Keep a record of which church I end up attending

* TODO Perhaps I should play something for Mum and Dad for their 40th wedding anniversary

* TODO Book tickets to Wellington

* TODO Email Shibu to find out when church starts

* TODO Fix eww and org-agenda - They are both scrolling to the bottom
- The problem is not j:region-erase-trailing-whitespace

* TODO See more versions in parallel with Pen.el/bible-mode/xiphos

* TODO Tell this to Albert
Hebrews 11:6: And without faith it is impossible to please Him, for he who
comes to God must believe that He is and that He is a rewarder of those who
seek Him.

* TODO Make it so the Scripture memory comes up with a few different versions
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  sp +/"^| Scripture Memory | HEAR Journals Passage |" "$PEN/documents/notes/ws/discipleship-group/weekly-journal/2024-week-2.org"
#+END_SRC

- And perhaps also have the commentary here

* TODO Add commentaries to Pen.el

* TODO Talk to the Elders of Cornerstone - It's not strictly necessary
e:/root/.pen/documents/notes/ws/churches/cornerstone/talk-to-the-Elders.org

Roly lied to me, and instead of giving me a chance to speak to the elders, he
gave me a piece of paper with yet more slander.
I rebuke that slander in Jesus Christ's name.

* TODO Put the chapter title into each chapter of my emacs Bible
e:/root/.pen/documents/notes/ws/peniel/Bible-chapter-titles.txt

* TODO Simply start going to this church
https://clans.org.nz/

* 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  bsb Acts 16:16-18
#+END_SRC

#+RESULTS:
#+begin_src text
Acts 16:16-18
‾‾‾‾‾‾‾‾‾‾‾‾‾
One day as we were going to the place of
prayer, we were met by a slave girl with a
spirit of divination, who earned a large
income for her masters by fortune-telling.

This girl followed Paul and the rest of us,
shouting, “These men are servants of the Most
High God, who are proclaiming to you the way
of salvation!” She continued this for many
days.

Eventually Paul grew so aggravated that he
turned and said to the spirit, “In the name of
Jesus Christ I command you to come out of
her!” And the spirit left her at that very
moment.

(engbsb2020eb)
#+end_src

* TODO Talk to Debbie tomorrow

* TODO Learn Org-GTD
[[info:(org-gtd) Top]]

* TODO Learn Org-Edna
[[info:(org-edna) Basic Operation]]

* TODO Learn to make reviews of other documents
[[e:/root/.pen/ebooks/Unknown/And-He-Will (12)/And-He-Will - Unknown.md.org]]

- annotations
- citations
- etc.

* TODO Try to also go over the Old Testament with my D-group

* TODO Ensure that I can see the verse numbers as I am reading the scriptures

* TODO Rearrange my dgroup session notes into weeks
e:/root/.pen/documents/notes/ws/discipleship-group/weekly-journal/

* DONE Fix org-babel M-.
j:org-babel-raise

* TODO Do my Bible studies for D-group

* TODO Try again with World Vision
https://mail.google.com/mail/u/0/#inbox/FMfcgzGwJchwRDLnCMKFpZghhkQVcmJC

* TODO Make it so the

** Memoize this
j:ph-get-path-string

Delete the memo cache every second or something.

* TODO Make a shell script for running a command

- perhaps extend e:pen-ci

** TODO Make it so that e:pen-ci may also cache until a timeout

** TODO Make one without using e:pen-ci / caching

* TODO Make a per-path menu

* TODO Make a second-based timer for updating the header-line?
Hmm... Actually, no. Having a date string which only updates when there is a state change is actually quite useful, as I can see the last edit time.

* TODO
- Do not condemn

* TODO Set up a notes directory for every org-brain path
Then I can add the statement of faith for Cornerstone Church
to the notes directory.

* TODO Do more of the discipleship group readings

* TODO Write out what I want from the LORD
- https://www.youtube.com/watch?v=A9iOOOZF__o&ab_channel=AlwynUys

Dear Heavenly Father,

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  nasb Psalm 37:23
#+END_SRC

#+RESULTS:
#+begin_src text
Psalms 37:23
‾‾‾‾‾‾‾‾‾‾‾‾
The steps of a man are established by the
LORD, And He delights in his way.

(NASB)
#+end_src

* TODO Google and see if there is a way someone else has worked out, of having the date inside the emacs header line

* TODO Look into this - for automatically updating packages
j:auto-package-update

It might be a bit too bold. But see if it works.

* emacs
** Install this and figure out how to make my own plugin which displays the date
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  e ia mini-header-line minibuffer-header path-headerline-mode
#+END_SRC

** TODO To enable the headerline
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (add-to-list 'header-line-format '(t (:eval (window-parameter nil 'lsp-headerline--string) )))
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  (window-parameter nil 'lsp-headerline--string)
#+END_SRC

** TODO Find a way to get the date inside the headerline
j:path-headerline-mode

* TODO Make it so for each org-brain, each

* TODO I should be making a graph of dashboards in emacs
From a dashboard, I should  be able to see a bunch of things I want to do.
This dashboard should be similar to a mind-map.
Hmm, that's a cool idea, actually.
But the dashboard should update with various things.
So, essentially, it would render based on a yasnippet or something.
OK, so the dashboards would be based on yasnippet.
To edit a dashboard I would edit a yasnippet designed.

* TODO Set up my mind map and begin creating sermons

* TODO Finish this
j:buffer-tv

* TODO Help Shibu Matthew
https://clans.org.nz/

https://oar.org.nz/sathsara-rawa/

* Tomorrow night meet Roly
7pm

* TODO If I build my bash scripts in ebl then I can import and use libraries
I can write far more efficient bash, and manage it a lot better.
Of course, it would be generating a lot of bash.

* TODO Make it so when I open an org-brain link such as the following, from the notes properties are not added to all of my notes .org files

[[brain:agenda/agenda::Church]]

* TODO Make animations in ascii with artist-mode
That sounds fun!

Then I can put them around my terminal in places.

* DONE Add to the agenda
- Go with Kieren to the court on <2024-01-18 Thu>.

* TODO Put into my agenda to go along to Christ Loves All Nations church tomorrow

* 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  II Corinthians 12:9-11
#+END_SRC

#+RESULTS:
#+begin_src text
2 Corinthians 12:9-11
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
And he said unto me, My grace is sufficient
for thee: for my strength is made perfect in
weakness.

Most gladly therefore will I rather glory in
my infirmities, that the power of Christ may
rest upon me.

Therefore I take pleasure in infirmities, in
reproaches, in necessities, in persecutions,
in distresses for Christ’s sake: for when I am
weak, then am I strong.

I am become a fool in glorying; ye have
compelled me: for I ought to have been
commended of you: for in nothing am I behind
the very chiefest apostles, though I be
nothing.

(RLT)
#+end_src

* TODO Make my emacs look a bit nicer
https://www.youtube.com/watch?v=a_WNtuefREM&ab_channel=LibrePhoenix

* TODO Consider automating blueletterbible a little bit
https://www.blueletterbible.org/tools/interlinear/wlc-kjv/hab/2/4/

- Do searches from emacs

* TODO Also make something to search creeds, etc.

* TODO Consider telling Debbie
- I'm not in corrections because I need therapy
  - Therefore, if I confess tribulations which I am experiencing, it's only because I'm somewhat being compelled to for being here

* TODO Make a Book-based search in Bible-mode

* TODO Get interlinear Bible going in Pen.el
https://biblehub.com/interlinear/habakkuk/2.htm

** Give feedback to Elliot

* Automate this a bit more
e:/root/.pen/documents/notes/ws/discipleship-group/weekly-journal/04.01.24.org

-

* TODO Learn to do some kind of GUI programming in emacs
Maybe there is something for SVG.

* TODO Consider showing Shibu this
https://www.youtube.com/watch?v=oc3oay4R0uQ&ab_channel=CPRMissions

* TODO Consider making vector graphics games like asteroids
https://github.com/amaiorano/vectrexy

I could simply start from the ground up.
i.e. make my own game development library.
That could actually be a good idea as the language/IDE itself would constrain what I make with it.

** That would be quite fun, actually
https://www.youtube.com/watch?v=w60sfReTsRA&ab_channel=ClassicGameRoom

* TODO [#C] Later (low priority)
** TODO Learn to do more information theory but in a DSL
https://www.youtube.com/watch?v=ErfnhcEV1O8&list=PLqHYAqboyu8zU_z8vhDV9-5QMrEYDC60M&index=1&ab_channel=Aur%C3%A9lienG%C3%A9ron

I'm not wanting to get into AI fiction at all.
But I'm interested in information theory, and math.

** TODO Learn to do more math
- laplace transform

* TODO Consider looking into these
https://mail.google.com/mail/u/0/#inbox/FMfcgzGwJccKkksGZTkBssRnvrdPhFdB

* TODO Start organising information around this church
Address: 607 Highgate, Maori Hill, Dunedin 9010

https://www.youtube.com/@christlovesallnations/featured

[[https://www.google.com/search?q=maori+hill+community+center+607+Highgate&sca_esv=595856825&sxsrf=AM9HkKm7ilT3mcTWn8qOUVz_LgxdG1_3pA%3A1704426945639&uact=5&oq=maori+hill+community+center+607+Highgate&gs_lp=Egxnd3Mtd2l6LXNlcnAiKG1hb3JpIGhpbGwgY29tbXVuaXR5IGNlbnRlciA2MDcgSGlnaGdhdGVI409Qo0tY401wAngAkAEAmAHOAaABlgOqAQMyLTK4AQPIAQD4AQH4AQLiAwQYASBBiAYB&sclient=gws-wiz-serp#ip=1][Google: maori hill community center 607 Highgate]]

* Tim Keller
** 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Revelation 22:2-3
#+END_SRC

#+RESULTS:
#+begin_src text
Revelation 22:2-3
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
In the midst of the street of it, and on
either side of the river, was there the tree
of life, which bare twelve manner of fruits,
and yielded her fruit every month: and the
leaves of the tree were for the healing of the
nations.

And there shall be no more curse: but the
throne of God and of the Lamb shall be in it;
and his servants shall serve him:

(RLT)
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Hebrews 13:5
#+END_SRC

#+RESULTS:
#+begin_src text
Hebrews 13:5
‾‾‾‾‾‾‾‾‾‾‾‾
Let your conversation be without covetousness;
and be content with such things as ye have:
for he hath said, I will never leave thee, nor
forsake thee.

(RLT)
#+end_src

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Deuteronomy 31:6
#+END_SRC

#+RESULTS:
#+begin_src text
Deuteronomy 31:6
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Be strong and of a good courage, fear not, nor
be afraid of them: for YHWH thy God, he it is
that doth go with thee; he will not fail thee,
nor forsake thee.

(RLT)
#+end_src

* TODO Make a website mirror system based on eww and dom-chrome
Dont render the website, just build, cache and traverse the dom.

* TODO Do a simple text crawl of Tim Keller's website, somehow
https://podcast.gospelinlife.com/e/hospitality/

I want to make reference to Tim Keller's sermons and writings from my Bible software.
But this will have to be for personal usage.
I still want to build the software for handling what to do with content that has Bible references in it.

** Thinking about this is very interesting

* TODO It's definitely worth improving my Bible cross-references
Remember that the first ones are the most highly ranked.

So I should make an j:fz cross-reference selector.

* TODO Make a function which gets the week number from the date
Use this to name weekly files such as the discipleship group journal.

* TODO Begin to use emacs lisp instead of shell scripts

* TODO Get tmux to cooperate with black-and-white-mode
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  man 'tmux' | vs +/"reverse"
#+END_SRC

e:/root/.emacs.d/host/pen.el/config/tmux-bw.conf

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tmux source /root/.emacs.d/host/pen.el/config/tmux-bw.conf
#+END_SRC

* DONE Make this work
e:/root/.emacs.d/host/pen.el/config/vim-bundles/iphonetext/ftdetect/iphonetext.vim

* TODO Make it so org-brain strips extra data from the headings before displaying them, or searching for them

* TODO I guess make a filing-away system - is this org-capture?
- for adding new entries of various things

* Add to agenda the date that St. Davids reopens
8 Jan 2024.

* TODO Do my Bible-study before Friday
[[notmuch:id:CAH1kdqw_N766OX_JOrv2Cu-hyHXF87sN+qJ_OixMsLhQLXgSZw@mail.gmail.com][Email from Elliot Munro: D group today]]

* Fix changing an org-babel block. The mechanism broke after changing j:pen-region-pipe
j:org-babel-raise

* Rest
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Mark 6:30-32
#+END_SRC

#+RESULTS:
#+begin_src text
Mark 6:30-32
‾‾‾‾‾‾‾‾‾‾‾‾
And the apostles gathered themselves together
unto Jesus, and told him all things, both what
they had done, and what they had taught.

And he said unto them, Come ye yourselves
apart into a desert place, and rest a while:
for there were many coming and going, and they
had no leisure so much as to eat.

And they departed into a desert place by ship
privately.

(RLT)
#+end_src

* Imaginary programming
** TODO Find a programming language which is succinct for describing objects
It should be all about setting constraints.

* TODO Make a context function for selecting 'pre' blocks in eww mode
For example, I should be able to select a 'pre' block here
https://mbreen.com/m4.html

The predicate should be:

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (eq (face-at-point) 'info-code-face)
#+END_SRC

* TODO Make something to select consecutively syntax-highlighted text
- go backwards until the face changes
  - mark
- go forwards until the face changes

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (defun select-font-lock-face-region ()
    (interactive)
    (while (and (not (eobp)) (forward-char 1) (not (eq (face-at-point) 'font-lock-keyword-face))))
    (while (and (not (eobp)) (forward-char 1) (not (eq (face-at-point) 'font-lock-keyword-face))))
    (when (eq (face-at-point) 'font-lock-keyword-face)
      (set-mark (point))
      (while (eq (face-at-point) 'font-lock-keyword-face)
        (forward-char 1))))
#+END_SRC

** For example, I should be able to select a 'pre' block here
https://mbreen.com/m4.html

* Watch
** Emacs and Ledger
https://www.youtube.com/watch?v=cjoCNRpLanY&ab_channel=thoughtbot

However, I want to simply learn

* Movies to get
- Those Magnificent Men in Their Flying Machines

* TODO Remove 'looking-glass' stuff, which slows emacs down
e:/root/.emacs.d/host/pen.el/src/pen-eww.el

* TODO Buy
** Cassette tape recorder
** 4B graphites

* TODO Speed up my =eww= browser

* Learn programming languages:
- m4
  - https://www.root.cz/texty/generating-code-in-m4-introduction/
  - https://mbreen.com/m4.html
  - https://www.linuxtoday.com/blog/macro-m4-guide/
  - https://web.mit.edu/gnu/doc/html/m4_1.html
  - https://www.youtube.com/watch?v=yrurIUEGo1c&ab_channel=GovHack
- datalog
  - https://en.wikipedia.org/wiki/Datalog
  - [[wiki-summary:"datalog"]]
    - TODO Make this memoized / cached
- racket
  - https://docs.racket-lang.org/guide/index.html
- haskell

** TODO Memoise j:url-retrieve / j:url-retrieve-internal
/usr/local/share/emacs/29.1.50/lisp/url/url-cache.el.gz

Technically, though, there is a cache.

* TODO Go somewhere and read

* I really want =eww= to highlight code

* Judgment for believers
e:/volumes/home/shane/notes/ws/bible-studies/judgement-of-believers.org

* TODO Like problog, I could upkeep an R IDE
https://www.r-project.org/about.html

* TODO Add these sermons
e:/volumes/home/shane/dump/programs/httrack/mirrors/https-christcovenant-org-/christcovenant.org/sermons

* TODO Make a script to lispify another language by parentheses
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  is(AE,sign(GP-Old)*AS)
#+END_SRC

I think the above parentheses notation is a mix of infix with prefix.
But I want to convert it into sexps, according to operator precedence, etc.

What I really need is a calculator parser, one that supports functions with parentheses, and infix operators.

https://docs.racket-lang.org/symalg/index.html

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  is(AE,sign(GP-Old)*AS)
#+END_SRC

[[gr:parse expression into sexps]]
https://en.wikipedia.org/wiki/Shunting_yard_algorithm
https://www.youtube.com/watch?v=MIeSNEQblpw&ab_channel=TechCoursePH

Like this:

#+BEGIN_SRC text -n :async :results verbatim code :lang text
   Welcome to Racket v7.2.
  >         (require symalg)
  >          (define expr (parse-infix "3*x^2 - 4*x + cos(x)"))
  >           (define expr-deriv (simplify
                           (differentiate expr)))
  >                         expr-deriv
  (add
   (list
    (num -4)
    (mul (list (num 6) (sym 'x)))
    (mul (list (num -1) (sin_ (sym 'x))))))
#+END_SRC

This doesn't work though:

#+BEGIN_SRC racket -n :i racket :async :results verbatim code :lang text
  (define expr (parse-infix "is(AE,sign(GP-Old)*AS)"))
#+END_SRC

** Notations
- Infix
  - "(5 − 6) × 7"
  - "(3 × 4) + (5 × 6)"
- [[https://en.wikipedia.org/wiki/Polish_notation][Prefix/Polish]]
  - "× (− 5 6) 7"
- [[https://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish]]
  - "3 4 × 5 6 × +"

** Perhaps I can write something in elisp - I have things such as buffer and state
sign(GP-Old)*AS)

* TODO Get good at problog
That should be quite fun, and definitely useful.

* TODO Learn pcase - it would be really useful for epl
e:/root/.emacs.d/host/pen.el/src/pen-epl-test.epl

[[info:(elisp) Pattern-Matching Conditional]]

| kb           | f                             |              |
|--------------+-------------------------------+--------------|
| =<help> h i= | =ap/helm-info-emacs-elisp-cl= | =global-map= |

Then look for pcase.

** Yes, I think pcase would be great for an interpreter
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (defun evaluate (form env)
    (pcase form
      (`(add ,x ,y)       (+ (evaluate x env)
                             (evaluate y env)))
      (`(call ,fun ,arg)  (funcall (evaluate fun env)
                                   (evaluate arg env)))
      (`(fn ,arg ,body)   (lambda (val)
                            (evaluate body (cons (cons arg val)
                                                 env))))
      ((pred numberp)     form)
      ((pred symbolp)     (cdr (assq form env)))
      (_                  (error "Syntax error: %S" form))))
#+END_SRC

* TODO Learn rx
[[info:(elisp) Rx Notation]]

* TODO Get better at writing awk. I need to be able to build awk scripts interactively

I'd like to put a space above the first comment line of each comment section.

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  % the range of the flap
  legal_flap_position(FP) :- between(0,10,FP).
  % the strength of the actuators
  actuator_strength(a,2).
  actuator_strength(b,1).
  % random prior on which actuator to use
  0.5::use_actuator(T,a); 0.5::use_actuator(T,b).
  % wind strength model
  0.7::wind(weak); 0.3::wind(strong).

  0.25::wind_effect(T,-1); 0.5::wind_effect(T,0); 0.25::wind_effect(T,1) :- wind(weak).
  0.2::wind_effect(T,-3); 0.3::wind_effect(T,-2); 0.3::wind_effect(T,2); 0.2::wind_effect(T,3) :- wind(strong).
  % the % flap % is % moved % to % an % attempted % position % if % that % is % legal
  flap_position(Time,Pos) :- >(Time,0), attempted_flap_position(Time,Pos), legal_flap_position(Pos).
  0.7::burglary.
  0.2::earthquake.
  0.9::p_alarm1.
  0.8::p_alarm2.
  alarm :- burglary, earthquake, p_alarm1.
  alarm :- burglary, \+earthquake, p_alarm2.
  evidence(alarm,true).
  query(burglary).
  query(earthquake).
#+END_SRC

* TODO Work on building anecdotal reasoning into Pen.el
It's essentially personal science grounded in reality.
It's epistemiology.

For example, where a large language model would simply use a model of language to suggest a course of action,
it would not have actually done any research or any epistemiology.

Therefore, it's important to actually think, individually constructing one's own model based on reasoning.

* TODO Before making my elisp problog, make the syntax for it
** Go over a bunch of problog examples and mature the EPL syntax
- e:/volumes/home/shane/notes/ws/problog/scratch/earthquake.epl

* TODO Learn Problog
e:/root/.pen/documents/notes/ws/problog/tutorial.org

* TODO Make a problog generator in emacs lisp
** See if I can generate problog
e:/volumes/home/shane/notes/ws/problog/scratch/earthquake.problog
e:/volumes/home/shane/notes/ws/problog/scratch/earthquake.epl

This is a good idea.

Improve it over time.

** TODO Make a e:cr compile-run handler for =epl=
e:/volumes/home/shane/notes/ws/problog/scratch/earthquake.epl

* TODO I guess I need to start preparing for if my laptop breaks again - the screen could die for instance

* TODO Consider building a smalltalk development environment

* TODO I should certainly improve at prolog, problog etc.
Specifically, I want to get better at keeping track of decision-making.
I do not want to be reliant at all on AI, nor commercial software.

* TODO Get a grinder for Flo's foods I can turn it into puree
- https://www.briscoes.co.nz/product/1095490/de-longhi-coffee-and-spice-grinder-kg200/?gad_source=1
- https://www.stevens.co.nz/capital-kitchen-electric-grinder-silver-6586086?gad_source=1
- https://www.stevens.co.nz/search?q=electric+grinder
- https://www.briscoes.co.nz/search2/?q=electric+grinder

* TODO Make it so I can click with the mouse on the ivy results
[[bible-mode-fuzzy-search:"peace of Christ"]]

* TODO Consider using a modified version of GNU ranger
- Add trailing slashes to directories.

* I have to get better at prolog, actually
Because I have to be able to do complex reasoning without relying on commercial technology and AI systems.

* TODO I should definitely have like an encyclopedia on my laptop or something, so that I can study without internet

* Why is this showing incorrectly? It is 11:48AM
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  » TZ=NZDT /bin/date
  Fri 29 Dec 2023 10:48:43 PM NZDT
  » TZ=NZ /bin/date
  Sat 30 Dec 2023 11:48:46 AM NZDT
  » TZ=NZST /bin/date
  Fri 29 Dec 2023 10:48:49 PM NZST
#+END_SRC

* Fix einfo for coreutils
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  /usr/bin/info date
#+END_SRC

** Does not work
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  einfo date
#+END_SRC

** Works
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  einfo "(coreutils) date invocation"
#+END_SRC

* TODO It's quite important for me to continue building the Bible software

* TODO Visit Adson for Bible Study today

* TODO Add some new sorts to this
dired-ls

* Geoff will be back 2 weeks from now on <2024-01-12 Fri>

* Pen.el
- Make per-strongscode syntax highlighting
- Make a snippet for H.E.A.R. Journal
- Make a daily devotional system
  - Based on Bible verse calendar
  - Then do a H.E.A.R. journal each day

e:/root/.pen/host/snippets/org-mode/hear-journal-entry

* TODO Fix the issue in the red letter rendering
** Diatheke seems to have the correct XML here
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  "diatheke" "-b" "RLT" "-o" "w" "-f" "internal" "-k" "Revelation of John 1:18" | v
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  rlt Revelation of John 1:18
#+END_SRC

* There seems to be a bug in the BSB translation I have
** 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  ebible -m "engbsb2020eb" -cac Proverbs 21:31 | cat
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  bsb Proverbs 21:31
#+END_SRC

** I might be able to remove the faulty XML tags
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  "diatheke" "-b" "engbsb2020eb" "-o" "w" "-f" "internal" "-k" "Proverbs 21:31" | v
#+END_SRC

** Diatheke works
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  ebible -cac Proverbs 21:31
#+END_SRC

#+RESULTS:
#+begin_src text
Proverbs 21:31
‾‾‾‾‾‾‾‾‾‾‾‾‾‾
The horse (CUWC) is prepared (KUWN) for the
day (YOWM) of battle (MILCHAMAH), But victory
(TSHUW`AH) belongs to the Lord.

(NASB)
#+end_src

* TODO Add websites that have such explanations
- https://www.bibleref.com/Mark/12/Mark-12-35.html

* TODO Make a 'configure the current buffer / mode' binding
** TODO Ensure this works for Bible-mode

* TODO Add this reference to Pen.el
# 458  anomia  an-om-ee'-ah

https://www.sermonindex.net/modules/articles/index.php?view=article&aid=34351

* TODO Fix the highlighting

* TODO Work on problog - before prolog, I think

* TODO Work on eshell
e:/root/.emacs.d/host/pen.el/scripts/pen-eshell

* TODO Set up denote
https://protesilaos.com/emacs/denote#:~:text=Denote's%20file%2Dnaming%20scheme%20is,filtering%20and%20retrieval%20considerably%20easier.
https://www.youtube.com/watch?v=cLsByub89VY&ab_channel=SystemCrafters

https://protesilaos.com/codelog/2022-06-18-denote-demo/

* TODO Set up jabber

* TODO set up hyperdrive
https://git.sr.ht/~ushin/hyperdrive.el

[[info:(hyperdrive) Top]]

** TODO Fix this issue

mx:hyperdrive-menu

* TODO Make a thing which buttonizes things scraped from the buffer
So, for-example, the following should open a fuzzy-list or
buttonized emacs buffer, which opens the thing, not merely
scrape things out.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"bind -n C-M-q run \"pen-tm scrape-things\"" "$PENELD/config/tmux.conf"
#+END_SRC

Hmm. Filter should probably have an associated buttonization formatter.

* TODO Fix up this
[[notmuch:id:3M3JDBAYTrWxQgn1RD_5oQ@geopod-ismtpd-2][Email from Medium Daily Digest: C Programming: Mastering Flags in GCC | Chizaram Nwachukwu]]

* Pen.el
** Disable more startup warnings
e:/root/.emacs.d/pen.el/src/init.el

* TODO Make cron run when Pen.el starts
- e:get-devotionals
- sps:get-devotionals

* TODO Make a way to speed up commands such as =pen-eipe= or =pen-e= by generating the =pen-e= command the first time it's run but reusing the second time

* TODO Figure out why the org buffers are automatically having ids added to them

* Pen.el
** TODO Make it so the Bible verse refs can translate between available languages

** TODO Stop using the =right-click-context-click-menu= - it doesn't work for when the buffer contains arabic, etc.
Instead, use the built-in emacs right click menu system (=pen-menu-bar-open=).

Then right-click should work well on top of Hebrew, Arabic etc. and I wont get a visually broken menu.

*** TODO Make it so j:def-right-click-menu translates into j:popup-menu

e:/root/.emacs.d/host/pen.el/src/pen-right-click-menu.el
e:/root/.emacs.d/host/pen.el/src/pen-ace-popup-menu.el

* TODO Make it so the date shows up in the top-right of emacs, or inide the tmux status bar

* Make it so vim disables syntax highlighting in black-and-white mode

* TODO Figure out how to have overlapping tasks in the agenda

* TODO Learn org-roam a bit better, with capture templates for various things

* TODO Make it so Jesus' words are highlighted when in black-and-white mode
Also, make it so the Bible references are highlighted.

* TODO Make another agenda for things which I don't know how to solve yet
For example,

[[brain:agenda/government::Sort out IRD Tax Return thing]]

It goes into a backgrounded agenda.

* I think I'll go to the Brethren church again today
Dad says talk to "Roland Green".

* TODO Make a =tv= that streams to a file, and only produces one window
- or multiple files, but a ranger, or something is opened, not the actual file

Yes, the tv, should create a temporary directory.

Use this tv method for situations where the tv will be called many times.

* TODO Find a way to edit the tty stream to do modifications
- Turn the colours black and white into
  - no colours and using 'rev'

Well, this works:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  TERM=screen-2color fpvd /volumes/home/shane/var/smulliga/source/git/aindilis/mealsolver/fnb_ul_elements.csv
#+END_SRC

* Pivot table
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  eww "https://jsvine.github.io/intro-to-visidata/intermediate/reshaping-data/"
#+END_SRC

* TODO Ensure that I can write scripts in bash

* TODO Make a new type of agenda for non-date events
[[brain:agenda/Samantha Cook::Let Samantha if any other events like the testimony sharing come up]]

* TODO Clean up notmuch tree view

* TODO Fix this
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  gzip -c -q -d < /usr/local/share/emacs/29.1.50/lisp/faces.el.gz
#+END_SRC

* Make gospel slides based on this
https://web.archive.org/web/20050204035942/http://www.thekristo.com/flashform.html

** I got it from Ben Carlson's friend's website
https://web.archive.org/web/20050204104851/http://www.dailyverseonline.org/

* Look up Zhiyi's church
otagocampuschristians

* TODO Look into this
fwc.dailyverseonline.org

[[notmuch-search:dailyverseonline][Notmuch search: dailyverseonline]]

OH Wow!

I got these for years!

* TODO Make gospel slides
[[file:~/.pen/documents/agenda/projects.org::*Create my first set of gospel slides][Create my first set of gospel slides]]

- Use John Piper's 10 reasons, for starters

Make a menu system for explaining the gospel of Jesus Christ.

* tmux status bar
** TODO Make my own tmux status bar

** TODO Begin using tmux as a status bar
The same space for:
- sessionname + Date/time (default)
- Spinner / loading
- Notifications

** TODO Add the date to the tmux status bar.

* TODO Add these to the Pen.el menu system
- e:jeff-vines--word-for-today
  - j:jeff-vines--word-for-today
- e:alistair-begg--sermons
  - j:alistair-begg--sermons

But I should use the simplified menu-creation system for all my custom menus.

* TODO Make a word-for-today fuzzy-finder
/root/.pen/documents/devotionals/the-word-for-today-reading/act-on-your-spiritual-intuition/clean.txt

* DONE Make it so emacs' ranger uses highlight-line mode
For some reason the cursor is not visible.

I could enable hl-line for dired.
I need to generally disable it though, when using black and white mode.

* Make something to select from Aramaic glyphs
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unicode aramaic
#+END_SRC

* TODO Perhaps I could make something which automatically compiles as the file changes
/volumes/home/shane/notes/ws/problog/scratch/excess.problog

I should just make a directory containing interpreters each named after the major-mode name which they are for.

auto-compile-interpreters/

* TODO Make a comint repl for problog - this would be quite cool

* Streamline the installatin of these a bit
$EMACSD_BUILTIN/manual-packages

Particularly, problog-mode.

* TODO Find out if I can change a fact from the problog interpreter

* TODO Make a default for figlet
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  figlet -df
#+END_SRC

* If in the emacs gui then start an xterm

-Enable the default mode when run from eshell or the emacs gui.-

* TODO Disable nvc / nvt when in black and white mode

Also, in vim disable the syntax highlighting itself.

The hope is that I am always able to see cursor highlights when in black-and-white mode.

* DONE Figure out why after enabling black-and-white, in Pen.el, new frames slow down to the extreme

* TODO Learn to write code in prolog
e:/volumes/home/shane/var/smulliga/source/git/adambard/learnxinyminutes-docs/prolog.html.markdown
e:/volumes/home/shane/var/smulliga/source/git/mullikine/derek-benes/prolog.prolog

* TODO Continue building my OS
Forget about AI.
There's no way it can immitate someone making something original.

* TODO Disable annotations - it has save hooks on all the .org buffers
It is adding properties to all headings.
And making emacs slow.

* 
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  Proverbs 29:18
#+END_SRC

#+RESULTS:
#+begin_src text
Proverbs 29:18
‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Where there is no vision, the people are
unrestrained, But happy is he who keeps the
law.

(NASB)
#+end_src

Thanks, God!

* TODO [#A] Make org-agenda work for
- All the =org-brain= directories together
- Individual =org-brain= directories

[[brain:people/Mike (from ALC prayer group)::2nd eye surgery <2023-12-21 Thu>]]

* DONE Make this do the correct thing
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (cdr (pen-cip-string "pen-ebdb-search \"Ian Dalziel\""))
#+END_SRC

* TODO Learn to use this
https://github.com/alphapapa/org-web-tools

* DONE Fix the problem with an initial read-only buffer
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  pen-e-ic -sn term vim
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  ebdb-open
#+END_SRC

*** DONE Perhaps I can bypass the problem by spawning a background emacsclient and immediately closing it

j:refresh-frame

But I should put this command in with pen-e-ic / pen-e -ic / pen-e -cip.

* TODO Have background only for indent guides - then hopefully the whitespace-mode characters still appear

* TODO Make it so that ALL tabs are highlighted
hc-tab

* DONE Make it so this works
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tui pen
#+END_SRC

** There are 2 scripts to modify for that

e:$PENELD/scripts/pen
e:$PENELD/scripts/pen-e

* TODO Learn org-mode, etc. in greater detail

* TODO Learn to manage contact details in emacs
** DISCARD addressbook
e:/root/.emacs.d/host/pen.el/src/pen-addressbook.el

** TODO Learn =edbd=
Rather than =addressbook.el=, I should use ebdb

https://elpa.gnu.org/packages/ebdb.html

e:/root/.emacs.d/host/pen.el/src/pen-addressbook.el

* TODO Make it so org-links appear by default like this
find-function:org-roam-ui

But, It would need to check to see if the function =find-function= exists.
Then it should highlight the link.

Then use aliases to functions, instead of creating new org links.

j:find-thing

# Go to the org-link package
j:ol

# search for: org-link
isearch-forward-region:org-link

* TODO I should certainly document an organise myself in truth and reality, rather than touch any generative AI fiction

* TODO Set up
emacs:
- diary
- todo list
  - todo lists may make it into the agenda
- org-journal

* TODO Email Zak. Ask him if it's new year's eve or Christmas eve fireworks
[[file:~/.pen/documents/agenda/Zak King.org::*New Years Eve fireworks <2023-12-31 Sun>][New Years Eve fireworks <2023-12-31 Sun>]]

* TODO Learn and start using RPL (Rosie)
https://gitlab.com/rosie-community

* TODO Continue to work on efm-langserver
Build my own language servers for different Pen.el modes.

* TODO Set up sending mail inside Pen.el
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  From: root <root@pen-agia.mail-host-address-is-not-set>
#+END_SRC

* TODO Continue working out the issues with org-roam
mx:org-roam-ui seems to be hanging.
Jump to it j:org-roam-ui

* TODO Learn org-roam
A new Org capture buffer will be created for the node. Why a capture buffer?
Because Org Roam enables you to specify multiple capture templates for new
notes in case you have different kinds of nodes you need to create! We’ll
cover this in another video.

* TODO Start using elisp (and make emacs interfaces) to control tmux
That sounds like a good idea.

* Menu bar
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key global-map (kbd "H-`") 'menu-bar-open)
#+END_SRC

** TODO Make another binding to =search= the Menu Bar with a fuzzy-finder, and run the item

#+BEGIN_SRC emacs-lisp -n :async :results none :lang text
  (etv (pps (menu-bar-keymap)))
#+END_SRC

j:start-menu-bar-at-cursor

* TODO Make bindings to go backwards and forwards through my agenda

* TODO Set up org-roam
https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/
https://systemcrafters.net/build-a-second-brain-in-emacs/getting-started-with-org-roam/

* TODO Make it so I can peruse the devotionals
/root/.emacs.d/host/pen.el/scripts/get-devotionals

* Fix cli-chess - the computer engine failed - perhaps I need some dependency
Google for the problem.

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  Error starting engine: engine process died unexpectedly (exit code: 1)
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
   1♜ ♞ ♝ ♚ ♛ ♝ ♞ ♜   Fairy-Stockfish Lvl 1
   2♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙
   3                   1 No moves...
   4
   5
   6
   7♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙
   8♜ ♞ ♝ ♚ ♛ ♝ ♞ ♜   root
    h g f e d c b a

  Move:
  Error starting engine: engine process died unexpectedly (exit code: 1)
#+END_SRC

* TODO Set up dates for the cfw calendar

* TODO Make a context menu for the current mode
** Give org-agenda a mode which shows:
- mx:cfw:open-org-calendar

* DONE I should set up cfw calendar to show things from the agenda

* TODO email Zak King, and ask him where the fireworks will be at
mail:agkingnz@gmail.com

Also, ask Adson if he wants to go.

* TODO Figure out how to do a font lock highlighting when info renders
[[info:(elisp) Quitting]]

Highlight the variable names, function names, etc.

#+BEGIN_SRC text -n :async :results verbatim code :lang text
   -- Variable: quit-flag
   -- Macro: with-local-quit body...
#+END_SRC

** Learn to use font-lock-studio
https://github.com/Lindydancer/font-lock-studio

mx:font-lock-studio

* TODO Figure out how to both interrupt AND have fallback
- For example, with handle.

If I do =M-9= to bring up the definition of a word in org-mode, text-mode etc,
handle may begin by presenting the glossary, then I should be able to =C-g=, or some
alternative, and it should fall back to the next one, which may be =wordnut/wordnet=.

- How do I interrupt the subroutines in the interior of the pipeline without affecting the pipeline's overall pipe?
- Can I have an alternative =C-g= (bell) key?

[[info:(elisp) Quitting]]

* TODO Simply try to engage with what God is doing in Dunedin!
This is quite important for me to grok.
I should certainly document things.
That way I can continue that type of work.

* Pen.el
** TODO Make a "desiring God" search
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  chrome "/volumes/home/shane/dump/programs/httrack/mirrors/https-www-desiringgod-org-/www.desiringgod.org/labs/all.html"
#+END_SRC

* TODO Find out why spawning more emacs frames after making B&W slows down emacs to a crawl
The ov-highlight data files were excessively large! - 4MB, for barely anything

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd /root/.pen/document-highlights/
#+END_SRC

* Install this
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  e ia helm-wordnet
#+END_SRC

* John Piper's definition of love
Love is the overflow of joy in God that meets the needs of others.

https://youtu.be/aUPSZBm1OjY?t=3003

* TODO Make it so I can see annotated on the Bible the words that I like, and consider annotating the NASB
j:bible-strongs-always-show-codelist

I would like to have my own Bible version based on the NASB that selects the
sense of the words based on sermons from pastors such as John Piper.

* TODO Make an interpreter for eshell scripts
j:eshell-source-file

Make =eshell= scripts that use emacs to run the interpretation,
but function as independent scripts.

* Think about who to give to
[[notmuch:id:cm.1700093811221.titrdyhk.njjduykxu.r@cmail19.com][Email from CAP New Zealand: “I don’t know how I’m going to cope”]]

* TODO Make more agendas
** TODO An agenda for personal recreation (when my main schedule is free)

* TODO Make a new kind of system for showing which select processes are running
- I could make something like e:spin that wraps commands.
  - That is a good idea, actually

* TODO Look into rmail
j:read-mail-command

[[ev:read-mail-command]]

j:rmail

* TODO Set up org-roam
https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/

* Agenda
- next week Don's Bible study meets on Wednesday, not tuesday

Figure out how to do an exception.

* Pen.el
** Make columnated bible annotations
Perhaps I should have a vim-based columnated reading mode.

Columnate a chapter and annotate the scriptures.

** TODO Make it so the highlight comments save to file
e:/root/repos/ov-highlight/ov-highlight.el

** TODO Make a mouse-based menu system similar to my sh-scripts - select an option with the mouse OR the keybord
j:mailcap-mime-info-around-advice

** TODO Smooth out these faults
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (popup-menu testmenu)
#+END_SRC

** TODO Start using this
e:/root/.emacs.d/host/pen.el/src/pen-ace-popup-menu.el

*** TODO See if I can get modeline documentation going for the currently hovered menu item

** Learn to make forms for myself
This is part of human-prompting.
But also good for designing GUIs inside emacs.
Make forms to prompt myself.
Use emacs widgets.

** TODO Make it so I can override the menu system
- Work on the right-click context menu system for a bit.
- Work on the main menu bar.
- Make it so yn work with the mouse, too.

Perhaps I can make it so all menu systems work in an 'avy' way.

j:ace-popup-menu

* TODO Get all my annotation stuff going well
Annotating the scriptures seems pretty important.

* TODO Make it so my Bible highlighting contains notes - and the notes SAVE!

* This also seems good for highlighting
https://kitchingroup.cheme.cmu.edu/blog/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock/

* TODO Set up highlighting with this
j:ov-highlight-save

It's newer than the original.

Except I need to save the annotations elsewhere.
Use this method of highlighting for annotating the Bible with highlights.

* TODO I really need to continue tidying up Pen.el and have it working quite well

* TODO Obtain some other Bible translations and put them into Pen.el

* TODO Make a Bible-mode command to compare different versions of the same verse

* TODO Make it so I can write notes in parallel with the Bible scriptures, even when columnated
This is fairly important.

* TODO Make a menu system which works to do selections with both the keyboard and the mouse
- Yes, No
- many options

* TODO Make it so I can highlight any buffer based on info

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  # TODO Build buffer-agnostic persistent annotanion
  # Annotation commands
  e ia annotation
#+END_SRC

* TODO Make it so I can highlight the scriptures

* 
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  nem Ruth 3:1-13
#+END_SRC

* DONE Look after the chick
Dear Heavenly Father, Jehovah God,
please save the little hatchlings and give them another chance.
In Jesus Christ's name I ask,
AMEN!!

* TODO Make it so pdfs in emails open in text
e:/root/.emacs.d/host/pen.el/src/pen-mm-decode.el

* If I return to the prompting pipeline, then it has to be human prompting / prompting myself

* DONE I have forced lm-complete to do human prompting
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"# Force human promptee" "$PENELD/scripts/prompting/lm-complete"
#+END_SRC

* TODO Learn ledger cli
https://ledger-cli.org/doc/ledger3.html

* TODO Make a Captain-Bible-like game with Pen.el
It's about combatting lies using Bible verses.

* TODO Make it so I get an alarmm when there is an agenda TODO item imminent
Refreshing the agenda must ensure that alarms are set up.
And re-refreshing must not double-up alarms.
It must be idempotent.
Also, there must be a timer to refreshing the agenda and setting alarms.

* TODO Start a trac wiki for Pen.el
https://trac.edgewall.org/

* TODO Make it so the entire of Pen.el can funciton in B&W mode
- tmux
- vim

* emacs faces
** DONE Make a function / binding to go to the definition of the face
j:find-face-definition

=M-u=

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (define-key pen-map (kbd "M-l M-q M-f") 'pen-customize-face)
#+END_SRC

** After emacs has loaded, save all the faces so I can reload them

** When

** TODO Also disable face-setting somehow in emacs
- Disable only changing:
- foreground
- background
- weight
- height

* TODO Consider joining the FSF as a member
https://my.fsf.org/join

* TODO Disable all bold faces
j:show-all-face-weights

* TODO Make it so I can start the emacs spinner from a shell script

* TODO Do more with org-brain
I should be able to filter which items are displayed as nodes by tag.
- TODO, DONE, DISCARD

** TODO Make a transient for displaying org-brain with TODO / DONE, etc.
j:org-brain-entry-at-point-excludedp

* TODO Do more with emacs

* DISCARD Go to newlife church
https://www.dunedincitynewlife.org.nz/

I'm sick of these dreams which I get which are half-truth.
I don't trust a single thing said in a dream until I get a confession as to Jesus Christ.

* TODO upgrade helm at some stage

* TODO Learn Common Lisp
https://lisp-lang.org/learn/

* It would be nice to make a spinner that uses the tmux status bar
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"TODO Make the tmux spinner" "$PENELD/scripts/spin"
#+END_SRC

* TODO Make my own RSS feeds and send them to elfeed

* TODO Give Pen.el a Captain Bible theme
https://youtu.be/WVbCFtxR3Vg?t=7247

* TODO Work towards eating from my own garden

* TODO Parse the countdown shopping emails and start planning meals
[[notmuch-search:Online Shopping Order Confirmation][Notmuch search: Online Shopping Order Confirmation]]

[[notmuch-search:Countdown Online Shopping][Notmuch search: Countdown Online Shopping]]

* org-agenda
** TODO Make it so

* TODO I should be generating the emacs menu system
Make a generator.

This is quite important actually.

* TODO Make a fuzzy search for names, then search again, say the agenda/brain directories
It should scrape the files for people's names,
then only present names which have matches, and perhaps a count of matches.
Then I should select one of those names, and another search should look for all files which match that name.

Every time someone's name appears in a document it should be highlighted.

* Set this up
https://github.com/mrkkrp/ace-popup-menu

* TODO Make it so I can search the menu bar with helm or something

* DONE Disable imaginary man pages
For some reason, prompting is still occurring.
I need to disable that.

Instead, go full-human-prompting mode.

The default engine should simply be myself.
I prompt myself for something,
I then find the answer,
the answer is recorded.

** Disable all prompting API keys

* Learn the query format for notmuch
https://notmuchmail.org/manpages/notmuch-search-terms-7/

* TODO Fix the buffer filter
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/dump/tmp/scratchEKC2Yy.txt | pen-tm -f -S -tout nw -noerror "f filter-with-fzf"
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cat /root/dump/tmp/scratchEKC2Yy.txt | f filter-with-fzf
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  zrepl -cm nh ocif -nd -E 'cat /root/dump/tmp/scratchEKC2Yy.txt | timeout 4 rosie grep -o subs net.email'
#+END_SRC

* TODO Make a caching and remembering system that simply prompts the human so I don't need APIs for everything
This is kinda essential, actually.
For example, to get the length of a YouTube video.

If I want to, I can actually use the "pen prompt human" mechanism.

I really *should* be prompting myself.

And the results should be remembered.
What's the best way to aggregate all of this information?

* TODO Figure out how to use tmux to simulate the help key
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (kbd "<help>")
#+END_SRC

What is the ansi sequence to send?

* TODO Make a new praise function
https://www.youtube.com/watch?v=kJcAbgoQWIk&ab_channel=AaliyahTzur

Let it start at a random time.

* TODO Make a Christmas music function
https://www.youtube.com/watch?v=VIydA6_K71Y&ab_channel=HighNumbers

* TODO Find a TUI audio player
When an audio file is played through a shell script, it should be organised and remembered in a list.

Perhaps this list should be org-mode.

https://github.com/tramhao/termusic

This should only be for playing the actual audio.
But organisation of media files should probably happen within emacs, perhaps in org-mode.

* TODO Listen to some David Jeremiah, etc.
That may make me feel better.

* TODO Make it so the daily devotionals are accessible
- Make a command to archive and then read the daily devotionals

* TODO Make it so mouse hover on the modeline shows the names of the minor modes for each lighter

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  "<mode-line> <mouse-movement>"
#+END_SRC

[[el:(edit-var-elisp 'mode-line-modes)]]

[[ev:mode-line-modes]]

[[org-link--edit-var:mode-line-modes]]

** Perhaps I need to extend a package such as this
https://github.com/Malabarba/rich-minority

* DONE Ensure emacs shows empty whitespace
e:/root/.emacs.d/host/pen.el/src/pen-buttons.el

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (setq-default show-trailing-whitespace t)
#+END_SRC

* notmuch
** TODO Make it so there is no auto-scroll / page realignment when I move the cursor

** TODO Speed up and clean up text/html for notmuch

** DONE Make it so text/html is the default format to show, not text/plain

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  v +/"notmuch-multipart\/alternative-discouraged" "$EMACSD/pen.el/src/pen-email.el"
#+END_SRC

** TODO Make it so I can read pdf files from notmuch emails
[[notmuch:id:CAC=A7PAzx=sD5BSUkf41Nk3jr4xDyhi+uLfNanTbM6rcuNkzzw@mail.gmail.com][Email from John Speirs: FGBMFI - Weekly Devotional]]

j:mm-save-part

* TODO org-agenda
** Make it so it's even easier to add new items to the agenda

* TODO org-brain
** TODO Make an org-brain search that spans over multiple brains
** TODO Make the org-brain search use canonical links for headings like imenu
*** TODO Make it so this allows me to fuzzy-find the full canonical path
j:org-brain-visualize-goto-recursive-children-flat

It's the =R= key.

**** imenu for org-mode has this capability
mx:pen-helm-imenu

* TODO Improve at devotionals

* TODO Work on getting crontab going nice

Even start crontabbing.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  upd urlarchive "https://star.net.nz/the-word-for-today" | sha
#+END_SRC

e:/etc/cron.daily/get-devotionals

* TODO Build for Pen.el
** Quickly fuzzy search through all Bible translations
For searching for the precise verses of phrases like: The Father is greater than I and nothing can take my sheep from His hand.

- accurate fuzzy search would be good, even if it is slow.

*** 
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  zrepl -cm diatheke-regex-search-multi out of my hand
#+END_SRC

*** diatheke is quite slow
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  "diatheke" "-b" "NASB" "-s" "phrase" "-o" "w" "-f" "plain" "-k" "greater than I"
#+END_SRC

*** but it has regex! - this is the key I think - run it for several versions
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  "diatheke" "-b" "NASB" "-s" "regex" "-o" "w" "-f" "plain" "-k" "greater.*than.*I"
#+END_SRC

** DONE Make it so I can simply make up link types on the spot.
If a link type is not found, it should first check for elinks functions, then look or shell scripts.

[[feh:/volumes/home/shane/dump/home/shane/notes/ws/screenshots/file_1702293343_screen_bKqbHO_rand-29357_pid-488166.png]]

[[sh:ns hi]]

# this runs the shell script 'testing'
[[testing:hi]]

# This runs the function 'message'
[[message:hi]]

* TODO Finish this
j:pen-goto-package

* TODO Get better at emacs
- address book stuff
- todo lists
- journalling

* TODO Reply to Mike
[[notmuch:id:CAP6sTSCdoOwnUXym4QQnYYG+as4ocvSkwfY22QC8TU8Pdw0f=Q@mail.gmail.com][Email from Dunedin Chapter: FGBMFI Dunedin Chapter Social Meet - Pool House - Tuesday 12th Dec 7 - 9pm]]

Craig has let me know.

* TODO Work on black-and-white mode for Pen.el
Objectives:
- Read outside
  - blacks must be #000
  - whites must be #fff
- Read in church
  - few animations
  - black on white background
- Read in church - few animations

** Iron out all the edge-cases as I am using it
*** Ensure faces are not set again when there is a new frame,
or run pen-disable-all-faces when a new frame is created.

Can a minor-mode handle this?

** I need to work on reverse highlight faces

** DONE Make sure vt100 works with mouse
CLOSED: [2023-12-11 Mon 16:39]

* Pen.el
** Get better at using sexps inside scripts, so I can take info from emacs and pass to shell scripts
- For us in fuzzy-finders, say.

** bible-mode
*** TODO Get the same verse in a bunch of different translations
- Make a bash script for this

* TODO Set up contact information inside Pen.el
This might be good:
- e ia addressbook-bookmark

* TODO Make it so Bible-mode loads a bit faster and is less distracting

* TODO Make it so the lyrics also appear in emacs iwth the hymnal - I may want to use them as I sing

* TODO Pull together Pen.el as a complete software package and publish it
Allow people to go on their own journey through the Bible.

* TODO Make lists like these
https://www.amazon.com/Merediths-Complete-Bible-Lists-Kind/dp/0764203398

* TODO Fuzzy search the in multiple versions, ideally, for verses
- Combine helm and sql, I guess.

Questions:
- What versions do I have in databases?
- How fast can I search using diatheke?
  - Diatheke would be nice, actually, and quite possibly I could achieve fuzzy-search.
    - Run an initial query, using the start of the helm input, and use the rest of it for fuzzy finding

* TODO Make it so the sender/email/name of the person is a link to go to more emails from that person

* TODO Make it so I can hide nodes in org-brain - or filter them by tags

* TODO Make it so =u= pulls in notmuch
But take away the initial =yn=.

* TODO Continue improving thinking tools
I need to be doing my own finances, etc. too.
It's for God's Kingdom, though.

I need to become quite good at managing things.

* Read over this
https://www.jesusfilm.org/about/faith-statement/

* TODO Finish working on transient for the hymnal

* TODO Ensure I message Zandiel
[[notmuch:id:D491DAFD0D3D4516B4457D7A82A7CF7E1DA27D1B2C67@INFO.TEARFUND.ORG.NZ][Email from Tearfund NZ: Shane, it's not too late to send a card + gift to Zandiel]]

* Pen.el
** emacs
*** TODO Set up org-roam
*** TODO Set up universal sidecar

* TODO Ensure that tabs show up in emacs buffers
This is quite important, actually.

* TODO I should make sure I can easily link to hymns, etc.

* TODO Set up finances in emacs / Pen.el
- https://github.com/ledger/ledger-mode

** Manage it with free software in Pen.el

* TODO notmuch
** TODO Fix the notmuch syntax highlighting for tags

* DONE Get the email verification from gmail and try gmailieer again
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  cd "$PENCONF/Mail"; gmi init
#+END_SRC

https://www.johnborwick.com/2019/02/09/notmuch-gmailieer.html

* TODO Make it so I can easily add new items to the agenda

* TODO Make it so that if the emacs daemon hasn't started, a vanilla emacs is started instead

* TODO Tag some items with =prayer=, and this should be another way to search for prayers amongst my org files

* TODO Make it so I can reuse existing tags easily with agenda mode - scrape out all the tags

* TODO Begin reading books outloud, now!
Why? Because:
- I should be able to get enjoyment from reading stories, and use my imagination
- there are good stories
- it's a good idea to return to 'simplicity, purity and innocence'.

https://www.youtube.com/watch?v=nBUZz7kBCfY&ab_channel=LibriVoxAudiobooks

* DONE Set up notmuch instead of mu4e -- I had too man problems with setting up mu4e
https://notmuchmail.org/screenshots/
https://notmuchmail.org/notmuch-emacs/
[[https://notmuchmail.org/howto/][howto]]

# Use this method, with Debian 10 builtins
https://www.johnborwick.com/2019/02/09/notmuch-gmailieer.html
https://github.com/gauteh/lieer

# Don't use offlineimap though
https://kkatsuyuki.github.io/notmuch-conf/

* TODO Make something to efficiently edit tmux variables

* TODO Ensure that =ecfw= looks good for Christian festivals
Halloween should instead have:
- All Hallows Eve

1 Nov should show as All Saints Day.

* TODO Read Genesis 3 and 4

* Pen.el
** Set up xiphos commentaries

** TODO Try to obtain the Amplified Bible (AMP) - perhaps by buying from Lockman or buying esword

* eww
** TODO I should really be able to change urls by modiying the address bar

* Set up notdeft
https://tero.hasu.is/notdeft/

* It's really important to continue learning to organise myself

* Learn to use perl
e:/volumes/home/shane/var/smulliga/source/git/aindilis/apartment-finder/scripts/parse-street.pl

- embed shell scripts into perl - this is essential

* TODO Make it so bash scripts automatically load an rc file
e:/root/.emacs.d/host/pen.el/config/bash/scriptrc

e:/root/.emacs.d/host/pen.el/scripts/pen-bash

e:/root/.emacs.d/host/pen.el/scripts/testbashshebang

* TODO Ensure that I know that for every bash script, an rc file runs
And I need to know where to include things into all shell scripts.
One good use of this is to get a log of all scripts which are run.

* TODO Make Pen.el into a Christian operating system to glorify God

* DONE Fix this
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  upd bible-search-pp disciple
#+END_SRC

* TODO Make a transient for setting arguments to functions
This should work for *all* functions that are defined with it.
Perhaps I could simply advise a function to add a transient for it.
But I need to first get the signature of the function.

j:helpful--signature

* DONE Make the hymnal fuzzy finder
- open sheet music
- play the hymn

* TODO Make a nohup script which is good for fzf preview - it reconnects to the command, and if the command finishes, collects the output
e:/root/.emacs.d/host/pen.el/scripts/pen-nohup

* TODO Ensure I can run these commands on Bible texts:
- Get all of Jesus' sayings
  - etc.

I guess it is quite important for Pen.el to be =deterministic= and =correct=.

* TODO Look for the book, 'The Golden Legend'

* TODO Make an editable intermediary state for every invocation of a cli command
This should be customisable.

It should bring up either vimdiff or magit diff.
It should let me manually edit the pipeline and remember the edit.
Perhaps the edit itself should be remembered in its own git repository!
Yes!
Set up a git repository for each pipeline edit point.

- Put an edit point into a bash pipeline, and name the edit point

For example:

** For a given stdin, have an associated stdout
By default that stdout is the stdin.
But I should be able to edit it.
This is quite an important file, though. It should be stored somewhere
permanent.

Therefore, two scripts.

Perhaps I should extend =ci= to do this under the hood?, and call it 'store'.
Hmm. Maybe not. Keep it simple.

- store <name>
  - sometimes, it should 'vipe'
- unstore <name>
  - This sets an environment variable which triggers store to edit the store.

** 1. I may search for bible verses

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  bible-search-pp disciple
#+END_SRC

** 2. Then I might want to widen the scope of certain verses

*** 3. So I edit it
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  unstore bible-search-pp disciple
#+END_SRC

* DONE Ensure that this works:
#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  pen-e -cip bible-search-phrase disciple
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  bible-search-pp disciple
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  bible-search-pp Jesus
#+END_SRC

* TODO Make notes on the Bible study I had with Adson, and also prepare for the discipleship group with Elliot, Rudy and Mike

* TODO Indeed it might be a good idea to find a semantic grep program for natural language

* TODO Make a =M-x hymnal= for Bible-mode
Do this soon because.

I do like the naming of =M-x praise= though.

* TODO Try preaching to the ducks
(say Bible verses to the ducks)

This is what Bill Berry would do!

Bill told me today that he was ordained on 2 April 1987 on a construction site.

* TODO Fix this
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code :lang text
  (pen-tmux-edit "nvem" "tpop")
#+END_SRC

* DONE Fix this - escaping with M-esc doesn't seem to work, currently
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tpop nve /root/.emacs.d/host/pen.el/src/pen-support.el
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  nw nve /root/.emacs.d/host/pen.el/src/pen-support.el
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tmux neww "bash -c \". ~/.profile; bash -c 'nve $PENELD/src/pen-support.el'\""
#+END_SRC

Or simply:

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tmux neww
#+END_SRC

Then:

#+BEGIN_SRC bash -n :i bash :async :results verbatim code :lang text
  nve /root/.emacs.d/host/pen.el/src/pen-support.el
#+END_SRC

It works if I start tmux windows with =zsh -i=.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tmux neww "zsh -i -c 'nve $PENELD/src/pen-support.el'"
#+END_SRC

** This has fixed it
#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  tmux set -g default-shell '/root/.emacs.d/host/pen.el/scripts/tmux-shell'
  tmux set default-shell '/root/.emacs.d/host/pen.el/scripts/tmux-shell'
#+END_SRC

* Pen.el
** TODO Make a filter script to canonicalise the headings of an org file

e:/root/.pen/documents/agenda/agenda.org

An org-file would be good.

How should I write this transformation script?
awk?
I need sed with arrays, I think.

*** If I were to use elisp
This is a good idea actually, to learn to write awk-like scripts with
emacs lisp.

*** Algorithm
Use awk.
Perform an operation for each line that matches a heading.
Keep a variable containing the heading prefix.

*** Canonicalisation Transformation
#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ** Church
  *** Sunday Services
  **** TODO Go to Reformed Church morning service
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code :lang text
  ** Church
  *** Church::Sunday Services
  **** Church::Sunday Services::TODO Go to Reformed Church morning service
#+END_SRC

Could this help? I think it's better to stick to making text transformations.

#+BEGIN_SRC sh -n :sps bash :async :results none :lang text
  e ia org-parser
#+END_SRC

** TODO Set up querying for org
#+BEGIN_SRC sps -n :async :results verbatim code :lang text
  e ia org-sql org-roam-ql-ql org-roam-ql org-ql helm-org-ql
#+END_SRC

** TODO Learn to use org subtrees

** agenda
*** There should be an org-brain for completed items
It would be cool if org brain would work with org subtrees for the agenda.
That way I could dynamically construct an org-brain based on queries to the agenda.

It's a very good idea to learn a query language for org-agenda.

** eshell
*** TODO Make it so I can run 'Psalm 91' and other such Bible functions from inside eshell
*** TODO Make it so I can pipe into elisp functions with eshell
#+BEGIN_SRC bash -n :async :results verbatim code :lang text
  # echo is a binary and message is an elisp function - this does not work
  /bin/echo hi | message

  # echo is an elisp function and message is an elisp function - this does not work, but should
  echo hi | message
#+END_SRC


*** TODO Make it so I can pipe elisp functions into shell commands with eshell
#+BEGIN_SRC bash -n :async :results verbatim code :lang text
  # echo is an elisp function and tv is a binary - this works
  echo hi *| tv

  # echo is an elisp function and tv is a binary - this does not work, but should
  echo hi | tv
#+END_SRC

* emacs
** TODO Make functions for
- finding primitive functions
- finding macros
- finding pure functions

etc.

* TODO Make it so I can rapidly create environments such as this
#+BEGIN_SRC sps -n :async :results verbatim code :lang text
  wo nbd fast nem nci
#+END_SRC

* TODO Make it so withopts exports booleans as environment variables that match an rc
for example:

#+BEGIN_SRC bash -n :async :results verbatim code :lang text
  wo nofast something
#+END_SRC

This would export both FAST=n and NOFAST=y to something.

And

#+BEGIN_SRC bash -n :async :results verbatim code :lang text
  wo nofast something
#+END_SRC

would export both FAST=y and NOFAST=n to something.

* TODO I guess that I should talk to that person sitting on the side of the road to see what the issue is surrounding that

* TODO Make notes on each discipleship group study I do
[[brain:agenda/agenda::Discipleship group]]

* TODO Make Bible-mode a little bit less 'flashy'
Pages need to simply load quickly and instantly.

* TODO Make it so I can set up presentations for displaying worship song lyrics
- I guess it might be best to use reveal-hugo for this, along with the gospel slides stuff

---

- https://github.com/gohugoio/hugo
- http://github.com/dzello/reveal-hugo

* TODO Make it so this makes alert sounds
/root/.emacs.d/host/pen.el/scripts/notify-send

I should be able to enable / disable alert notifications for my agenda.

* TODO Seriously, God's got me doing a lot of stuff
** So I need to be more onto it with thing such as the gospel-slides project
e:/root/.pen/documents/agenda/projects.org

Complete tasks at the opportune moment.

* TODO I'm going to need more organisational things
- History for org-agenda

* TODO I should simply journal my days with the agenda - that's a little different from scheduling things
It's like creating 'DONE' items, not TODO items.

* TODO Sort out my IRD stuff next week

* Pen.el
** With Bible-mode, I should manually wrap paragraphs, instead of automatically
It would just be nicer to have the full terminal accessible.

** DONE Fix org-todo function for adding repeats to scheduled headings
Maybe first bisect my .emacs for Pen.el to see if I made the mistake recently.
It's not recent.
Therefore, I need to simply debug the function - this may be time-consuming, but the agenda system *must* be operable.

*** Fix it here mabye
j:org-auto-repeat-maybe

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (debug-on-entry 'org-auto-repeat-maybe)
#+END_SRC

*** This is the problematic code
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (org-entry-put nil "LAST_REPEAT" (format-time-string (org-time-stamp-format t t) (org-current-effective-time)))
#+END_SRC

*** I fixed it with some modifications to =org-entry-put=

** TODO Set up a vanilla-emacs agenda script for debugging behaviour

* TODO Work on the gospel slides

* DONE Ensure this goes immediately to a location if it is an exact match
j:org-brain-entry-from-text

* TODO Learn org-roam
Learn or perhaps an alternative to org-roam.
I just want notes that have uuids.

* TODO Transition to using Pen.el primarily and accessing the host system from Pen.el

* Pen.el
** TODO Make it so this org-link will automatically select an exact-match
[[brain:agenda/agenda::Church]]

** TODO Make a fuzzy finder for all children recursively for all org-brains

* TODO Ensure that I can easily access and commit to the host's files

* TODO Make something to go to the org-brain visualiser from an org-file
/root/.pen/org-brain/people/immil.org

* 
e:$MYGIT/zhiyihuang/C-examples

e:/volumes/home/shane/var/smulliga/source/git/zhiyihuang/C-examples

* TODO Ensure that force-temperature (config) works

* Pen
** Make it so the selected prompt for the completion function is a little better
j:pen-complete-function
j:pen-term-detect-program

- Support term-mode, for example.

** TODO [#A] Make it so autocomplete from Pen uses a specialised term autocomplete
Either that or have a generic way of adding hyperparameters to prompts.
- Do it this way
  - That way, autocomplete for an empty tclsh
    term, for example, will have some contextual
    information that was generated

- Some hyperparameters should be variables, and tied to the buffer.
- Some hyperparameters should be dynamic, and scrape the terminal contents, say, or the buffer name.
- Some hyperparameters should be tied to the mode (even minor modes)

** TODO Make the buffer hyperparameters thing
j:buffer-hyperparameters-transient

This should create hyperparameters which override or provide defaults.

Therefore, I need 2 sections for hyperparameters:
- Overrides
- Defaults

*** I also need prompt overrides / customisations
These should persist over Pen invocations.

** TODO Fix this bug
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (json2yaml (json-encode-plist (eval-string (concat "'" (cat "/tmp/awLAbXFAxd")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (json-encode-plist (eval-string (concat "'" (cat "/tmp/awLAbXFAxd"))))
#+END_SRC

** Get ilist examples working
j:ilist

How should examples work?

** TODO Make a table of things to do
| Done | Language | LSP | New project |
|------+----------+-----+-------------|
| ✓    | clojure  | ✓   | ✓           |
| ✓    | bash     | ✓   | ✓ (mkw)     |
|      | racket   |     |             |

** Connect org tables to visidata.

* docker
#+BEGIN_SRC sps -n :async :results verbatim code
  "docker" "inspect" "agitated_archimedes" | jq -r '.[0].State.StartedAt' | pavs
#+END_SRC

* TODO Ensure that with certain different types of files, different models are used by default
- For example, when writing code, codex should, be used.

** It is fitting for Prolog or Problog to be used for this logic

* TODO Fix force-engine
#+BEGIN_SRC yaml -n :async :results verbatim code
  pen-force-engine: OpenAI Codex
#+END_SRC

It seems that j:guru is using Davinci, which is definitely not right.
Oh, that was just using Davinci when manually completing.

* TODO Make the interactive dir hist thing for running Clojure functions
Test it on J:mount-pensieve.

Press =E= on it.

pj:pen-lispy-eval-eval

* TODO Make it so I can easily reload the current source file - into the REPL
- emacs lisp
- Clojure

* ilabmda
** TODO Ensure that expanding imacros does not reevaluate them
- currently they are reevaluating

** TODO Add docfuns to
The docfuns should be real, and contain the generated code.
Therefore, the imacro must expand into code which modifies itself.
