cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--dynamic-space-size" "3072" "--no-userinit" "--non-interactive" "--eval" "(require \"asdf\")" "--eval" "(when (string= \"true\" \"true\") (setf asdf:*default-source-registries* (list (quote asdf/source-registry:environment-source-registry))) (asdf:clear-configuration) (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\") (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\") (asdf:load-system :nyxt/submodules))" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\")" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\")" "--eval" "(format t \"~&; NASDF ~a: ~a~&\" (asdf:component-version (asdf:find-system :nasdf)) (nth-value 2 (asdf:locate-system :nasdf)))" "--eval" "(when (find-package :ql) (funcall (read-from-string \"ql:quickload\") :cffi))" "--eval" "(when (and (find-package :cffi) (uiop:getenv \"GUIX_ENVIRONMENT\")) (pushnew (pathname (format nil \"~a/lib/\" (uiop:getenv \"GUIX_ENVIRONMENT\"))) (symbol-value (read-from-string \"cffi:*foreign-library-directories*\" )) :test (quote equal)))" "--eval" "(asdf:load-system :nyxt/gi-gtk-application)" "--eval" "(asdf:make :nyxt/gi-gtk-application)" "--eval" "(uiop:quit)" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--dynamic-space-size" "3072" "--no-userinit" "--non-interactive" "--eval" "(require \"asdf\")" "--eval" "(when (string= \"true\" \"true\") (setf asdf:*default-source-registries* (list (quote asdf/source-registry:environment-source-registry))) (asdf:clear-configuration) (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\") (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\") (asdf:load-system :nyxt/submodules))" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\")" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\")" "--eval" "(format t \"~&; NASDF ~a: ~a~&\" (asdf:component-version (asdf:find-system :nasdf)) (nth-value 2 (asdf:locate-system :nasdf)))" "--eval" "(when (find-package :ql) (funcall (read-from-string \"ql:quickload\") :cffi))" "--eval" "(when (and (find-package :cffi) (uiop:getenv \"GUIX_ENVIRONMENT\")) (pushnew (pathname (format nil \"~a/lib/\" (uiop:getenv \"GUIX_ENVIRONMENT\"))) (symbol-value (read-from-string \"cffi:*foreign-library-directories*\" )) :test (quote equal)))" "--eval" "(asdf:load-system :nyxt/gi-gtk-application)" "--eval" "(asdf:make :nyxt/gi-gtk-application)" "--eval" "(uiop:quit)" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--dynamic-space-size" "3072" "--no-userinit" "--non-interactive" "--eval" "(require \"asdf\")" "--eval" "(when (string= \"true\" \"true\") (setf asdf:*default-source-registries* (list (quote asdf/source-registry:environment-source-registry))) (asdf:clear-configuration) (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\") (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\") (asdf:load-system :nyxt/submodules))" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\")" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\")" "--eval" "(format t \"~&; NASDF ~a: ~a~&\" (asdf:component-version (asdf:find-system :nasdf)) (nth-value 2 (asdf:locate-system :nasdf)))" "--eval" "(when (find-package :ql) (funcall (read-from-string \"ql:quickload\") :cffi))" "--eval" "(when (and (find-package :cffi) (uiop:getenv \"GUIX_ENVIRONMENT\")) (pushnew (pathname (format nil \"~a/lib/\" (uiop:getenv \"GUIX_ENVIRONMENT\"))) (symbol-value (read-from-string \"cffi:*foreign-library-directories*\" )) :test (quote equal)))" "--eval" "(asdf:load-system :nyxt)" "--eval" "(asdf:load-system :nyxt/documentation)" "--eval" "(uiop:quit)" "#" "<==" "make"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--dynamic-space-size" "3072" "--no-userinit" "--non-interactive" "--eval" "(require \"asdf\")" "--eval" "(when (string= \"true\" \"true\") (setf asdf:*default-source-registries* (list (quote asdf/source-registry:environment-source-registry))) (asdf:clear-configuration) (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\") (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\") (asdf:load-system :nyxt/submodules))" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\")" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\")" "--eval" "(format t \"~&; NASDF ~a: ~a~&\" (asdf:component-version (asdf:find-system :nasdf)) (nth-value 2 (asdf:locate-system :nasdf)))" "--eval" "(when (find-package :ql) (funcall (read-from-string \"ql:quickload\") :cffi))" "--eval" "(when (and (find-package :cffi) (uiop:getenv \"GUIX_ENVIRONMENT\")) (pushnew (pathname (format nil \"~a/lib/\" (uiop:getenv \"GUIX_ENVIRONMENT\"))) (symbol-value (read-from-string \"cffi:*foreign-library-directories*\" )) :test (quote equal)))" "--eval" "(asdf:load-system :nyxt/gi-gtk-application)" "--eval" "(asdf:make :nyxt/gi-gtk-application)" "--eval" "(uiop:quit)" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--dynamic-space-size" "3072" "--no-userinit" "--non-interactive" "--eval" "(require \"asdf\")" "--eval" "(when (string= \"true\" \"true\") (setf asdf:*default-source-registries* (list (quote asdf/source-registry:environment-source-registry))) (asdf:clear-configuration) (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\") (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\") (asdf:load-system :nyxt/submodules))" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\")" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\")" "--eval" "(format t \"~&; NASDF ~a: ~a~&\" (asdf:component-version (asdf:find-system :nasdf)) (nth-value 2 (asdf:locate-system :nasdf)))" "--eval" "(when (find-package :ql) (funcall (read-from-string \"ql:quickload\") :cffi))" "--eval" "(when (and (find-package :cffi) (uiop:getenv \"GUIX_ENVIRONMENT\")) (pushnew (pathname (format nil \"~a/lib/\" (uiop:getenv \"GUIX_ENVIRONMENT\"))) (symbol-value (read-from-string \"cffi:*foreign-library-directories*\" )) :test (quote equal)))" "--eval" "(asdf:load-system :nyxt/gi-gtk-application)" "--eval" "(asdf:make :nyxt/gi-gtk-application)" "--eval" "(uiop:quit)" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--noinform" "--no-userinit" "--non-interactive" "--eval" "(prin1 (max 3072 (/ (sb-ext:dynamic-space-size) 1024 1024)))" "--quit" "#" "<==" "sh"
cd /volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt;  "sbcl" "--dynamic-space-size" "3072" "--no-userinit" "--non-interactive" "--eval" "(require \"asdf\")" "--eval" "(when (string= \"true\" \"true\") (setf asdf:*default-source-registries* (list (quote asdf/source-registry:environment-source-registry))) (asdf:clear-configuration) (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\") (asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\") (asdf:load-system :nyxt/submodules))" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//libraries/nasdf/nasdf.asd\")" "--eval" "(asdf:load-asd \"/volumes/home/shane/var/smulliga/source/git/atlas-engineer/nyxt//nyxt.asd\")" "--eval" "(format t \"~&; NASDF ~a: ~a~&\" (asdf:component-version (asdf:find-system :nasdf)) (nth-value 2 (asdf:locate-system :nasdf)))" "--eval" "(when (find-package :ql) (funcall (read-from-string \"ql:quickload\") :cffi))" "--eval" "(when (and (find-package :cffi) (uiop:getenv \"GUIX_ENVIRONMENT\")) (pushnew (pathname (format nil \"~a/lib/\" (uiop:getenv \"GUIX_ENVIRONMENT\"))) (symbol-value (read-from-string \"cffi:*foreign-library-directories*\" )) :test (quote equal)))" "--eval" "(asdf:load-system :nyxt/gi-gtk-application)" "--eval" "(asdf:make :nyxt/gi-gtk-application)" "--eval" "(uiop:quit)" "#" "<==" "sh"
