cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (find-file \"/root/.emacs.d/host/pen.el/src/pen-bible-mode.el\")(sit-for 0.2)(run-mode-hooks major-mode)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (find-file \"/root/.emacs.d/host/pen.el/src/pen-bible-mode.el\")(sit-for 0.2)(run-mode-hooks major-mode)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (read-string \"KILL_FRAME\")(kill-frame))" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(funcall-interactively 'bible-open nil nil \"NASB\" \"Deuteronomy 31:8\")(recenter-top-bottom)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (read-string \"KILL_FRAME\")(kill-frame))" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(funcall-interactively 'bible-open nil nil \"NASB\" \"Philippians 4\")(recenter-top-bottom)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(setq eww-no-external-handler nil)(let ((force-eww t)) (eww \"google.com\"))(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (read-string \"KILL_FRAME\")(kill-frame))" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/.emacs.d/host/pen.el/scripts;  "emacsclient" "--version" "#" "<==" "emacs"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/dump/root/notes/databases;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (ignore-errors (package-install 'edbi))(pen-revert-and-quit-emacsclient-without-killing-server)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "-e" "(find-file \"/root/.config/ranger/rifle.conf\")" "#" "<==" "pen-emacsclient"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/.emacs.d/host/pen.el/scripts;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/.emacs.d/host/pen.el/scripts;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/scripts;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/scripts;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (progn (find-file \"/tmp/emacs-stdin-.pqi9ojx\" )(set-visited-file-name nil)(rename-buffer \"*stdin*\"  t)(message (str (frame-terminal)))(ignore-errors (cd \"/root/.emacs.d/host/pen.el/scripts\")(grep-mode)))(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/.emacs.d/elpa/edbi-20160225.141;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/elpa/edbi-20160225.141;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/elpa/edbi-20160225.141;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (find-file \"/root/.emacs.d/elpa/edbi-20160225.141/edbi-bridge.pl\")(sit-for 0.2)(run-mode-hooks major-mode)(get-buffer-create \"*scratch*\")(goto-line 54)(move-to-column 15)))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(find-thing 'bible-random-verse-ref)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (find-file \"/root/.emacs.d/host/pen.el/src/pen-human.el\")(sit-for 0.2)(run-mode-hooks major-mode)(get-buffer-create \"*scratch*\")(goto-line 11)(move-to-column 0)))" "#" "<==" "pen-e"
cd 'emacsclient' '-s' '/root/.emacs.d/server/DEFAULT' '-a' '' '-t' '-e' '(progn (get-buffer-create "*scratch*")(pen-banner)(pen-set-faces)(switch-to-buffer "*scratch*") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa "\"pen-cterm-ssh\" \"-ssh-to-host\" \"n\" \"-cwd\" \"/root/.emacs.d/host/pen.el/scripts\" \"-cmd\" \"tmwr \\\\"pen-tm\\\\" \\\\"ns\\\\" \\\\"-a\\\\" \\\\"-np\\\\" \\\\"-n\\\\" \\\\"human\\\\" \\\\"zsh\\\\"\" \"-user\" \"shane\"") t "pen-cterm-ssh" "cterm-tmwr-pen-tm-ns-a-np-n-human-zs" nil ))))' '#' '<==' 'pen-emacsclient';  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "-e" "(progn (get-buffer-create \"*scratch*\")(pen-banner)(pen-set-faces)(switch-to-buffer \"*scratch*\") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa \"\\\"pen-cterm-ssh\\\" \\\"-ssh-to-host\\\" \\\"n\\\" \\\"-cwd\\\" \\\"/root/.emacs.d/host/pen.el/scripts\\\" \\\"-cmd\\\" \\\"tmwr \\\\\\\\\"pen-tm\\\\\\\\\" \\\\\\\\\"ns\\\\\\\\\" \\\\\\\\\"-a\\\\\\\\\" \\\\\\\\\"-np\\\\\\\\\" \\\\\\\\\"-n\\\\\\\\\" \\\\\\\\\"human\\\\\\\\\" \\\\\\\\\"zsh\\\\\\\\\"\\\" \\\"-user\\\" \\\"shane\\\"\") t \"pen-cterm-ssh\" \"cterm-tmwr-pen-tm-ns-a-np-n-human-zs\" nil ))))" "#" "<==" "pen-emacsclient"
cd 'emacsclient' '-s' '/root/.emacs.d/server/DEFAULT' '-a' '' '-t' '-e' '(progn (get-buffer-create "*scratch*")(pen-banner)(pen-set-faces)(switch-to-buffer "*scratch*") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa "\"pen-cterm-ssh\" \"-ssh-to-host\" \"n\" \"-cwd\" \"/root/notes\" \"-cmd\" \"tmwr \\\\"pen-tm\\\\" \\\\"ns\\\\" \\\\"-a\\\\" \\\\"-np\\\\" \\\\"-n\\\\" \\\\"human\\\\" \\\\"zsh\\\\"\" \"-user\" \"shane\"") t "pen-cterm-ssh" "cterm-tmwr-pen-tm-ns-a-np-n-human-zs" nil ))))' '#' '<==' 'pen-emacsclient';  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "-e" "(progn (get-buffer-create \"*scratch*\")(pen-banner)(pen-set-faces)(switch-to-buffer \"*scratch*\") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa \"\\\"pen-cterm-ssh\\\" \\\"-ssh-to-host\\\" \\\"n\\\" \\\"-cwd\\\" \\\"/root/notes\\\" \\\"-cmd\\\" \\\"tmwr \\\\\\\\\"pen-tm\\\\\\\\\" \\\\\\\\\"ns\\\\\\\\\" \\\\\\\\\"-a\\\\\\\\\" \\\\\\\\\"-np\\\\\\\\\" \\\\\\\\\"-n\\\\\\\\\" \\\\\\\\\"human\\\\\\\\\" \\\\\\\\\"zsh\\\\\\\\\"\\\" \\\"-user\\\" \\\"shane\\\"\") t \"pen-cterm-ssh\" \"cterm-tmwr-pen-tm-ns-a-np-n-human-zs\" nil ))))" "#" "<==" "pen-emacsclient"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/.emacs.d/host/pen.el/src;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(find-thing 'cmd)(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-c" "-a" "" "#" "<==" "pen-emacsclient"
cd 'emacsclient' '-s' '/root/.emacs.d/server/DEFAULT' '-a' '' '-t' '-e' '(progn (get-buffer-create "*scratch*")(pen-banner)(pen-set-faces)(switch-to-buffer "*scratch*") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa "\"pen-cterm-ssh\" \"-ssh-to-host\" \"y\" \"-cwd\" \"/root/notes/\" \"-cmd\" \"tmwr \\\\"nem\\\\" \\\\"fast\\\\" \\\\"ebible\\\\" \\\\"-m\\\\" \\\\"NASB\\\\" \\\\"Genesis 1:4\\\\"\" \"-user\" \"shane\"") t "pen-cterm-ssh" "cterm-tmwr-nem-fast-ebible-m-nasb-ge" nil ))))' '#' '<==' 'pen-emacsclient';  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "-e" "(progn (get-buffer-create \"*scratch*\")(pen-banner)(pen-set-faces)(switch-to-buffer \"*scratch*\") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa \"\\\"pen-cterm-ssh\\\" \\\"-ssh-to-host\\\" \\\"y\\\" \\\"-cwd\\\" \\\"/root/notes/\\\" \\\"-cmd\\\" \\\"tmwr \\\\\\\\\"nem\\\\\\\\\" \\\\\\\\\"fast\\\\\\\\\" \\\\\\\\\"ebible\\\\\\\\\" \\\\\\\\\"-m\\\\\\\\\" \\\\\\\\\"NASB\\\\\\\\\" \\\\\\\\\"Genesis 1:4\\\\\\\\\"\\\" \\\"-user\\\" \\\"shane\\\"\") t \"pen-cterm-ssh\" \"cterm-tmwr-nem-fast-ebible-m-nasb-ge\" nil ))))" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/notes;  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "#" "<==" "pen-emacsclient"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "false" "-e" "t" "-s" "/root/.emacs.d/server/DEFAULT" "#" "<==" "pen-e"
cd /root/dump/root/notes/databases;  "emacsclient" "-a" "" "-t" "-s" "/root/.emacs.d/server/DEFAULT" "-e" "(progn (ignore-errors (message (str (frame-terminal)))(edbi-sqlite \"/root/dump/root/notes/databases/kjv.db\")(get-buffer-create \"*scratch*\")))" "#" "<==" "pen-e"
cd 'emacsclient' '-s' '/root/.emacs.d/server/DEFAULT' '-a' '' '-t' '-e' '(progn (get-buffer-create "*scratch*")(pen-banner)(pen-set-faces)(switch-to-buffer "*scratch*") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa "\"pen-cterm-ssh\" \"-ssh-to-host\" \"n\" \"-cwd\" \"/root/notes\" \"-cmd\" \"tmwr \\\\"litecli\\\\" \\\\"/root/dump/root/notes/databases/kjv.db\\\\"\" \"-user\" \"shane\"") t "pen-cterm-ssh" "cterm-tmwr-litecli-root-dump-root-no" nil ))))' '#' '<==' 'pen-emacsclient';  "emacsclient" "-s" "/root/.emacs.d/server/DEFAULT" "-a" "" "-t" "-e" "(progn (get-buffer-create \"*scratch*\")(pen-banner)(pen-set-faces)(switch-to-buffer \"*scratch*\") (pen-force ((do-pen-update nil) (pen-force-engine nil) (max-generated-tokens nil) (force-temperature nil) (force-stop-sequence nil)) (progn (pen-term (pen-nsfa \"\\\"pen-cterm-ssh\\\" \\\"-ssh-to-host\\\" \\\"n\\\" \\\"-cwd\\\" \\\"/root/notes\\\" \\\"-cmd\\\" \\\"tmwr \\\\\\\\\"litecli\\\\\\\\\" \\\\\\\\\"/root/dump/root/notes/databases/kjv.db\\\\\\\\\"\\\" \\\"-user\\\" \\\"shane\\\"\") t \"pen-cterm-ssh\" \"cterm-tmwr-litecli-root-dump-root-no\" nil ))))" "#" "<==" "pen-emacsclient"
