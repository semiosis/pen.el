cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" cat '/tmp/tf_temp_3fea3e2a30.txt' | 'fzf' '--algo=v2' '-m' '--reverse' '--preview=p {} | pen-fzf-scope' '--preview-window=up:30%:hidden' > '/tmp/tf_tempHAMJO9q.txt'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" cat '/tmp/tf_temp_c573ff1e56.txt' | 'fzf' '--algo=v2' '-m' '--reverse' '--preview=p {} | pen-fzf-scope' '--preview-window=up:30%:hidden' > '/tmp/tf_temp6fvmpz4.txt'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/.emacs.d/host/pen.el/src;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" cat '/tmp/tf_temp_4b238034d8.txt' | 'fzf' '--algo=v2' '-m' '--reverse' '--preview=p {} | pen-fzf-scope' '--preview-window=up:30%:hidden' > '/tmp/tf_temprheC3Rs.txt'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/.emacs.d/host/pen.el/src;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" cat '/tmp/tf_temp_1ee20465a3.txt' | 'fzf' '--algo=v2' '-m' '--reverse' '--preview=p {} | pen-fzf-scope' '--preview-window=up:30%:hidden' > '/tmp/tf_tempHFtTvBM.txt'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/.emacs.d/host/pen.el/src;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" cat '/tmp/tf_temp_706003718f.txt' | 'fzf' '--algo=v2' '-m' '--reverse' '--preview=p {} | pen-fzf-scope' '--preview-window=up:30%:hidden' > '/tmp/tf_tempeFzNxP1.txt'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/.emacs.d/host/pen.el/src;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" cat '/tmp/tf_temp_055f98a839.txt' | 'fzf' '--algo=v2' '-m' '--reverse' '--preview=p {} | pen-fzf-scope' '--preview-window=up:30%:hidden' > '/tmp/tf_tempqjP7PzC.txt'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn
  (setq mode-line-format nil)
  (setq-default mode-line-format nil)

  (load \\\"/tmp/lambda-emacs-load.el\\\")
  (define-key global-map (kbd \\\"q\\\") #'\\''save-buffers-kill-terminal)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (nbfs \\\"hi\\\")
  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n \\n  (nbfs \\\"hi\\\")\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'vim'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n \\n  (nbfs \\\"hi\\\")\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n \\n  (nbfs \\\"hi\\\")\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n \\n  (nbfs \\\"hi\\\")\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n \\n  (nbfs \\\"hi\\\")\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (nbfs \\\"hi\\\")\\n  (read-only-mode 1)\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (nbfs \\\"hi\\\")\\n  (read-only-mode 1)\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''quit-window)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''quit-window)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (load \\\"/tmp/lambda-emacs-load.el\\\")\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\" 'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs \\\"hi\\\")\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n\\n  (defun e/cat (path)\\n    \\\"Return the contents of FILENAME.\\\"\\n    (with-temp-buffer\\n      (insert-file-contents path)\\n      (buffer-string)))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs (e/cat \\\"/root/.emacs.d/host/pen.el/scripts/lambda-emacs\\\"))\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n\\n  (defun e/cat (path)\\n    \\\"Return the contents of FILENAME.\\\"\\n    (with-temp-buffer\\n      (insert-file-contents path)\\n      (buffer-string)))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs (e/cat \\\"/root/.emacs.d/host/pen.el/scripts/lambda-emacs\\\"))\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n\\n  (defun e/cat (path)\\n    \\\"Return the contents of FILENAME.\\\"\\n    (with-temp-buffer\\n      (insert-file-contents path)\\n      (buffer-string)))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs (e/cat \\\"/root/.emacs.d/host/pen.el/scripts/lambda-emacs\\\"))\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n\\n  (defun e/cat (path)\\n    \\\"Return the contents of FILENAME.\\\"\\n    (with-temp-buffer\\n      (insert-file-contents path)\\n      (buffer-string)))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs (e/cat \\\"/root/.emacs.d/host/pen.el/scripts/lambda-emacs\\\"))\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
cd /root/notes;  "nvim" "-u" "/root/.nvimrc" "-c" "call TermAndQuit(\"export TERM=screen-2color;  'emacs' '-nw' '-q' '--eval' '(progn\\n  (setq mode-line-format nil)\\n  (setq-default mode-line-format nil)\\n  (define-key global-map (kbd \\\"q\\\") #'\\\''save-buffers-kill-terminal)\\n\\n  (define-key key-translation-map (kbd \\\"C-M-k\\\") (kbd \\\"<up>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-j\\\") (kbd \\\"<down>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-h\\\") (kbd \\\"<left>\\\"))\\n  (define-key key-translation-map (kbd \\\"C-M-l\\\") (kbd \\\"<right>\\\"))\\n\\n  (defun e/cat (path)\\n    \\\"Return the contents of FILENAME.\\\"\\n    (with-temp-buffer\\n      (insert-file-contents path)\\n      (buffer-string)))\\n \\n  (defun str (thing)\\n    \\\"Converts object or string to an unformatted string.\\\"\\n \\n    (if thing\\n        (if (stringp thing)\\n            (substring-no-properties thing)\\n          (progn\\n            (setq thing (format \\\"%s\\\" thing))\\n            (set-text-properties 0 (length thing) nil thing)\\n            thing))\\n      \\\"\\\"))\\n \\n  (defvar new-buffer-hooks '\\\''())\\n \\n  (defun my-new-buffer-frame (&optional contents bufname mode nodisplay)\\n    \\\"Create a new frame with a new empty buffer.\\\"\\n    (interactive)\\n    (if (not bufname)\\n        (setq bufname \\\"*untitled*\\\"))\\n    (let ((buffer (generate-new-buffer bufname)))\\n      (set-buffer-major-mode buffer)\\n      ;; (display-buffer buffer '\\\''(display-buffer-pop-up-frame . nil))\\n      (if (not nodisplay)\\n          (display-buffer buffer '\\\''(display-buffer-same-window . nil)))\\n      (with-current-buffer buffer\\n        (if contents (insert (str contents)))\\n        (beginning-of-buffer)\\n        (run-hooks '\\\''new-buffer-hooks))\\n      buffer))\\n  (defalias '\\\''new-buffer-from-string '\\\''my-new-buffer-frame)\\n  (defalias '\\\''nbfs '\\\''my-new-buffer-frame)\\n\\n  (tool-bar-mode -1)\\n  (menu-bar-mode -1)\\n  (with-current-buffer (nbfs (e/cat \\\"/root/.emacs.d/host/pen.el/scripts/lambda-emacs\\\"))\\n    (local-set-key \\\"q\\\" '\\\''save-buffers-kill-terminal)\\n    (read-only-mode 1))\\n  (message \\\"\\\"))'\")" "-c" "call GeneralSyntax()" "-c" "call NumberSyntax()" "-c" "normal\! i" "#" "<==" "pen-nvc"
