1620645339650:(name :a)
1620645451606:((juxt identity name) :keyword)
1620645469066:(identity :keyword)
1620645498273:(name :keyword)
1620647271303:((juxt identity name) :keyword)
1620647290822:(into {} (map (juxt identity name) [:a :b :c :d]))
1620647310365:(map (juxt identity name) [:a :b :c :d])
1620647385874:((juxt first count) "Clojure Rocks")
1620647533338:(sort-by (juxt :a :b) [{:a 1 :b 3} {:a 1 :b 2} {:a 2 :b 1}])
1620647558261:(juxt :a :b) [{:a 1 :b 3} {:a 1 :b 2} {:a 2 :b 1}]
1620647757886:(sort-by count ["aaa" "bb" "c"])
1620647931385:(sort-by :rank [{:rank 2} {:rank 3} {:rank 1}])
1620647957985:(:rank {:rank 2})
1620649103500:(def m {:a 0 :b 0 :c 0 :d 0}\n  )
1620649104456:m
1620649110147:(reduce #(%2 %1) m [#(assoc % :a (inc (:a %))) \n                              #(assoc % :b (inc (:b %))) \n                              #(assoc % :d (+ (:a %) (:b %)))])
1620649159403:;; functions which take some params and return a result\n(defn sub [a b] (- a b))\n(defn add [a b] (+ a b))\n\n;; data map\n(def data {:a 5 :b 4 :c 3})\n\n;; transformation map key => output key, value is vector of function\n;; to apply and the params that function will take from the data map\n(def transformations {:a [inc :a]\n                      :b [dec :b]\n                      :c [add :a :b]\n                      :d [sub :b :c]})\n\n; The transformation function\n(defn transform-map [m fm]\n  (into {} (map (fn [[k v]]\n                  [k (apply (first v)\n                            ((apply juxt (rest v)) m))])\n                fm)))\n\n(transform-map data transformations)
1620649186568:(defn transform-map [m fm]\n  (map (fn [[k v]]\n           [k (apply (first v)\n                     ((apply juxt (rest v)) m))])\n       fm))
1620649189999:(transform-map data transformations)
1620649223007:(defn transform-map [m fm]\n  (fn [[k v]]\n      [k (apply (first v)\n                ((apply juxt (rest v)) m))]))
1620649236149:(transform-map data transformations)
1620649249821:data
1620649253981:transformations
1620649292477:(defn transform-map [m fm]\n  (fn [[k v]]\n      [k (apply (first v)\n                ((apply juxt (rest v)) m))]))
1620649295403:(transform-map data transformations)
1620649300123:data
1620649303875:transformations
