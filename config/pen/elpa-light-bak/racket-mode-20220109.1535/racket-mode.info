This is racket-mode.info, produced by makeinfo version 6.7 from
racket-mode.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Racket Mode: (racket-mode). Edit and REPL major modes for Racket lang.
END-INFO-DIR-ENTRY


File: racket-mode.info,  Node: Top,  Next: Introduction,  Up: (dir)

Racket Mode
***********

* Menu:

* Introduction::
* Install::
* Configure::
* Reference::
* Commands::
* Variables::
* Faces::

— The Detailed Node Listing —

Install

* Configure Emacs to use MELPA::
* Install Racket Mode::
* Minimal Racket::
* Uninstall::
* Update::

Update

* Upgrading all packages::
* Updating just Racket Mode::
Configure

* Key bindings::
* Font-lock (syntax highlighting)::
* Completion at point::
* Completion in minibuffer::
* Xref (definitions and references)::
* Indent::
* paredit::
* smartparens::
* Edit buffers and REPL buffers::
* eldoc::
* Start faster::
* Unicode input method::
* Ligatures::

Commands

* Edit::
* Explore::
* Run::
* Test::
* Eval::
* Collections::
* Macro expand::
* Other::
* Showing information::
* Associating edit buffers with REPL buffers::
* Browsing file URLs with anchors::

Edit

* racket-mode::
* racket-insert-lambda::
* racket-fold-all-tests::
* racket-unfold-all-tests::
* racket-tidy-requires::
* racket-trim-requires::
* racket-base-requires::
* racket-add-require-for-identifier::
* racket-indent-line::
* racket-smart-open-bracket-mode::
* racket-insert-closing::
* racket-cycle-paren-shapes::
* racket-backward-up-list::
* racket-unicode-input-method-enable::
* racket-align::
* racket-unalign::
* racket-complete-at-point::

Explore

* racket-xp-mode::
* racket-xp-describe::
* racket-xp-documentation::
* racket-xp-next-definition::
* racket-xp-previous-definition::
* racket-xp-next-use::
* racket-xp-previous-use::
* racket-xp-next-error::
* racket-xp-previous-error::
* racket-xp-tail-up::
* racket-xp-tail-down::
* racket-xp-tail-next-sibling::
* racket-xp-tail-previous-sibling::
* racket-documentation-search::
* racket-describe-search::

Run

* racket-repl-mode::
* racket-run::
* racket-run-and-switch-to-repl::
* racket-run-module-at-point::
* racket-repl::
* racket-repl-describe::
* racket-repl-documentation::
* racket-racket::
* racket-profile::
* racket-profile-mode::
* racket-logger::
* racket-logger-mode::
* racket-debug-mode::
* racket-repl-clear::
* racket-repl-clear-leaving-last-prompt::

Test

* racket-test::
* racket-raco-test::

Eval

* racket-send-region::
* racket-send-definition::
* racket-send-last-sexp::

Collections

* racket-open-require-path::

Macro expand

* racket-stepper-mode::
* racket-expand-file::
* racket-expand-region::
* racket-expand-definition::
* racket-expand-last-sexp::

Other

* racket-mode-start-faster::
* racket-mode-start-slower::

Showing information

* racket-show-pseudo-tooltip::
* racket-show-echo-area::
* racket-show-header-line::
* racket-show-pos-tip::

Associating edit buffers with REPL buffers

* racket-repl-buffer-name-shared::
* racket-repl-buffer-name-unique::
* racket-repl-buffer-name-project::
* racket-project-root::

Browsing file URLs with anchors

* racket-browse-url-using-temporary-file::
Variables

* General variables::
* REPL variables::
* Other variables::
* Experimental debugger variables::
* Showing information: Showing informationx.

General variables

* racket-program::
* racket-command-timeout::
* racket-memory-limit::
* racket-error-context::
* racket-user-command-line-arguments::
* racket-path-from-emacs-to-racket-function::
* racket-path-from-racket-to-emacs-function::
* racket-browse-url-function::
* racket-xp-after-change-refresh-delay::
* racket-xp-highlight-unused-regexp::
* racket-documentation-search-location::

REPL variables

* racket-repl-buffer-name-function::
* racket-submodules-to-run::
* racket-repl-history-directory::
* racket-history-filter-regexp::
* racket-images-inline::
* racket-imagemagick-props::
* racket-images-keep-last::
* racket-images-system-viewer::
* racket-pretty-print::

Other variables

* racket-indent-curly-as-sequence::
* racket-indent-sequence-depth::
* racket-pretty-lambda::
* racket-smart-open-bracket-enable::
* racket-logger-config::
* racket-before-run-hook::
* racket-after-run-hook::

Experimental debugger variables

* racket-debuggable-files::

Showing information

* racket-show-functions::
Faces

* All::

All

* racket-keyword-argument-face::
* racket-reader-quoted-symbol-face::
* racket-reader-syntax-quoted-symbol-face::
* racket-here-string-face::
* racket-xp-def-face::
* racket-xp-use-face::
* racket-xp-unused-face::
* racket-xp-tail-target-face::
* racket-xp-tail-position-face::
* racket-logger-config-face::
* racket-logger-topic-face::
* racket-logger-fatal-face::
* racket-logger-error-face::
* racket-logger-warning-face::
* racket-logger-info-face::
* racket-logger-debug-face::
* racket-doc-link-face::
* racket-ext-link-face::
* racket-doc-output-face::
* racket-doc-litchar-face::


File: racket-mode.info,  Node: Introduction,  Next: Install,  Prev: Top,  Up: Top

1 Introduction
**************

The Racket Mode (https://www.racket-mode.com/) package consists of a
variety of Emacs major and minor modes, including:

   • ‘racket-mode’: A major mode for editing ‘.rkt’ files.

   • *note racket-xp-mode::: An optional minor mode that enhances
     ‘racket-mode’ to explain and explore code.

   • ‘racket-repl-mode’: A major mode for running programs providing a
     REPL.

   • Various other modes to support specific features:
        • *note racket-logger-mode::
        • *note racket-profile-mode::
        • *note racket-debug-mode::

   Racket Mode uses a “back end server” written in Racket, which is
responsible for running files and implementing commands that cannot be
implemented in Emacs Lisp.(1)

   For code, issues, and pull requests, see the Git repo
(https://github.com/greghendershott/racket-mode).

   To fund this work, see GitHub Sponsors
(https://github.com/users/greghendershott/sponsorship) or PayPal
(https://www.paypal.me/greghendershott).

   ---------- Footnotes ----------

   (1) Racket Mode’s Racket code is also delivered as part of the Emacs
package — _not_ as a Racket package.  Delivering both Emacs and Racket
code in one Emacs package simplifies installation and updates.  The main
drawback is that the Racket code is not automatically byte-compiled, as
would normally be done by ‘raco pkg install’.  To address this: *Note
racket-mode-start-faster::.


File: racket-mode.info,  Node: Install,  Next: Configure,  Prev: Introduction,  Up: Top

2 Install
*********

The recommended way to use Racket Mode is to install the package from
MELPA (https://melpa.org/#/racket-mode).
* Menu:

* Configure Emacs to use MELPA::
* Install Racket Mode::
* Minimal Racket::
* Uninstall::
* Update::


File: racket-mode.info,  Node: Configure Emacs to use MELPA,  Next: Install Racket Mode,  Up: Install

2.1 Configure Emacs to use MELPA
================================

To use MELPA:

   • Add the following to your ~/.emacs or ~/.emacs.d/init.el:

     (require 'package)
     (add-to-list 'package-archives
     	      '("melpa" . "https://melpa.org/packages/")
     	      t)

   • Restart Emacs.

   • Type ‘M-x’ ‘package-refresh-contents’ ‘RET’ .


File: racket-mode.info,  Node: Install Racket Mode,  Next: Minimal Racket,  Prev: Configure Emacs to use MELPA,  Up: Install

2.2 Install Racket Mode
=======================

When Emacs is configured to use MELPA, simply type ‘M-x’
‘package-install’ ‘RET’ ‘racket-mode’ ‘RET’ .


File: racket-mode.info,  Node: Minimal Racket,  Next: Uninstall,  Prev: Install Racket Mode,  Up: Install

2.3 Minimal Racket
==================

If you have installed the minimal Racket distribution (for example by
using the homebrew formula
(https://github.com/Homebrew/homebrew-core/blob/master/Formula/minimal-racket.rb))
Racket Mode needs some additional Racket packages.  A simple way to get
all these packages is to install the ‘drracket’ Racket package.  In a
command shell:

     raco pkg install --auto drracket

   If you do _not_ plan to use ‘racket-xp-mode’, then a more-targeted
approach is instead to install these specific packages and their
dependencies:

     raco pkg install --auto data-lib errortrace-lib macro-debugger-text-lib rackunit-lib racket-index scribble-lib

   If you _do_ want to use ‘racket-xp-mode’, then you would also need to
install ‘drracket-tool-lib’ — but since it has many of the same
dependencies (including ‘gui-lib’) as ‘drracket’ you may well install
‘drracket’.


File: racket-mode.info,  Node: Uninstall,  Next: Update,  Prev: Minimal Racket,  Up: Install

2.4 Uninstall
=============

To uninstall Racket Mode, simply type ‘M-x’ ‘package-delete’ ‘RET’
‘racket-mode’ ‘RET’ .

   You should probably also exit and restart Emacs.


File: racket-mode.info,  Node: Update,  Prev: Uninstall,  Up: Install

2.5 Update
==========

* Menu:

* Upgrading all packages::
* Updating just Racket Mode::


File: racket-mode.info,  Node: Upgrading all packages,  Next: Updating just Racket Mode,  Up: Update

2.5.1 Upgrading all packages
----------------------------

The “easy path” provided by Emacs is to update _all_ packages to their
latest versions.  Although you might not want to do this — see next
section — here is how to do so:

  1. Use ‘M-x’ ‘list-packages’.  It should display a message like “42
     packages can be upgraded; type ‘U’ to mark them for upgrading.”.

  2. Press ‘U’ as suggested to mark them all.

  3. Press ‘x’ to execute.

   After such a mass update, it might be wise to exist restart Emacs.


File: racket-mode.info,  Node: Updating just Racket Mode,  Prev: Upgrading all packages,  Up: Update

2.5.2 Updating just Racket Mode
-------------------------------

Updating all packages sometimes is more than you want.  For example,
maybe you will discover that some packages have changed in ways that
require you to take time to learn about, change customizations, and so
on.

   To update just Racket Mode:

  1. Uninstall Racket Mode: ‘M-x’ ‘package-delete’ ‘RET’ ‘racket-mode’
     ‘RET’ .

  2. Optional but most reliable: Exit and restart Emacs.

  3. Install Racket Mode: ‘M-x’ ‘package-install’ ‘RET’ ‘racket-mode’
     ‘RET’ .  This will install the latest version.


File: racket-mode.info,  Node: Configure,  Next: Reference,  Prev: Install,  Up: Top

3 Configure
***********

Although Racket Mode can be customized with many *note Variables::,
there is only one that you might _need_ to set: *note racket-program::.
This is the name or pathname of the Racket executable.  It defaults to
‘Racket.exe’ on Windows else ‘racket’.

   On Windows or Linux, this default will probably work for you.

   On macOS, downloading Racket doesn’t add its ‘bin’ directory to your
‘PATH’.  Even after you add it, GUI Emacs doesn’t automatically use your
path (unless you use the handy exec-path-from-shell
(https://melpa.org/#/exec-path-from-shell) package).  Therefore you
might want to set ‘racket-program’ to a complete pathname.

   You can ‘setq’ this directly in your Emacs init file (~/.emacs or
~/.emacs.d/init.el), or, use ‘M-x’ ‘customize’, as you prefer.
* Menu:

* Key bindings::
* Font-lock (syntax highlighting)::
* Completion at point::
* Completion in minibuffer::
* Xref (definitions and references)::
* Indent::
* paredit::
* smartparens::
* Edit buffers and REPL buffers::
* eldoc::
* Start faster::
* Unicode input method::
* Ligatures::


File: racket-mode.info,  Node: Key bindings,  Next: Font-lock (syntax highlighting),  Up: Configure

3.1 Key bindings
================

To customize things like key bindings, you can use ‘racket-mode-hook’ in
your Emacs init file to modify ‘racket-mode-map’.  For example, although
‘C-c C-c’ is bound by default to the ‘racket-run’ command, let’s say you
wanted ‘F5’ to be an additional binding:

     (add-hook 'racket-mode-hook
     	  (lambda ()
     	    (define-key racket-mode-map (kbd "<f5>") 'racket-run)))

   Likewise for ‘racket-repl-mode-hook’ and ‘racket-repl-mode-map’.


File: racket-mode.info,  Node: Font-lock (syntax highlighting),  Next: Completion at point,  Prev: Key bindings,  Up: Configure

3.2 Font-lock (syntax highlighting)
===================================

Font-lock (as Emacs calls syntax highlighting) can be controlled using
the variable ‘font-lock-maximum-decoration’, which defaults to ‘t’
(maximum).  You can set it to a number, where ‘0’ is the lowest level.
You can even supply an association list to specify different values for
different major modes.

   Historically you might choose a lower level for speed.  These days
you might do so because you prefer a simpler appearance.

   Racket Mode supports four, increasing levels of font-lock:

   • ‘0’: Just strings, comments, and ‘#lang’.
   • ‘1’: ‘#:keyword’ and self-evaluating literals like numbers, quoted
     symbols (including symbols with spaces delimited by ‘|’
     characters), and ‘#rx’ and ‘#px’ regular expressions.
   • ‘2’: Identifiers in ‘define’-like and ‘let’-like forms.
   • ‘3’: Identifiers provided by ‘racket’, ‘typed/racket’,
     ‘racket/syntax’, and ‘syntax/parse’.  (This level effectively
     treats Racket as a language, instead of a language for making
     languages.).


File: racket-mode.info,  Node: Completion at point,  Next: Completion in minibuffer,  Prev: Font-lock (syntax highlighting),  Up: Configure

3.3 Completion at point
=======================

In Emacs, a major mode may supply a “completion-at-point function”.
This function is used by manual completion commands like
‘complete-symbol’ (bound by default to ‘C-M-i’ ), as well as by
auto-completion packages like ‘company-mode’.

   • ‘racket-mode’ supplies ‘racket-complete-at-point’, which simply
     supplies the same symbols that it knows how to font-lock.  This
     does _not_ require the Racket Mode back end to be running.  But of
     course the completion candidates do not correspond to your
     program’s definitions or those it imports.  This is a static,
     “better than nothing” fallback.

   • ‘racket-xp-mode’ — an optional minor mode that enhances
     ‘racket-mode’ — supplies ‘racket-xp-complete-at-point’, which uses
     a static analysis to find local and imported binding names.
     Although this requires the Racket Mode back end to be running — and
     will automatically start it — it does _not_ require the edit buffer
     to be ‘racket-run’.  This also supplies meta data usable by the
     ‘company-capf’ backend.

   • ‘racket-repl-mode’ supplies ‘racket-repl-complete-at-point’, which
     uses the result of ‘namespace-mapped-symbols’ on the program
     currently running in the REPL.

   These completion functions are set by default.  (However,
‘racket-xp-mode’ is not enabled by default.  To do so: *note
racket-xp-mode::.)

   If you want ‘TAB’ to do completion as well as indent, add the
following to your Emacs init file:

     (setq tab-always-indent 'complete)

   This changes the behavior of Emacs’ standard
‘indent-for-tab-command’, to which ‘TAB’ is bound by default in
‘racket-mode’ and ‘racket-repl-mode’.


File: racket-mode.info,  Node: Completion in minibuffer,  Next: Xref (definitions and references),  Prev: Completion at point,  Up: Configure

3.4 Completion in minibuffer
============================

Sometimes Racket Mode asks for input in the minibuffer.  To do so it
uses the standard Emacs function ‘completing-read’, so as to be
compatible with all Emacs packages that enhance ‘completing-read’, such
as helm, ivy, ido-completing-read+, vertico, and so on.

   (Earlier versions of Racket Mode sometimes used
‘ido-completing-read’.  If you have upgraded Racket Mode and miss that,
simply install the ido-completing-read+ package.)


File: racket-mode.info,  Node: Xref (definitions and references),  Next: Indent,  Prev: Completion in minibuffer,  Up: Configure

3.5 Xref (definitions and references)
=====================================

Several modes support the Emacs commands

   • ‘M-.’  ‘xref-find-definitions’
   • ‘M-?’  ‘xref-find-references’
   • ‘M-,’ ‘xref-pop-marker-stack’

   To do so, each mode adds a local hook for ‘xref-backend-functions’:

   • *note racket-mode::: ‘#'racket-mode-xref-backend-function’
   • *note racket-xp-mode::: ‘#'racket-xp-xref-backend-function’
   • *note racket-repl-mode::: ‘#'racket-repl-xref-backend-function’

   If you prefer, you can remove the local hook — e.g.  for
‘racket-mode’: ‘(remove-hook 'xref-backend-functions
#'racket-mode-xref-function t)’.

   You can ‘M-x customize-group’ and enter ‘xref’ to adjust some other
settings.  For example, the customization variable
‘xref-prompt-for-identifier’ controls which commands prompt you and
when.  You might prefer to set it to ‘nil’.

   If you use ‘paredit’, by default it binds ‘M-?’ to
‘paredit-convolute-sexp’.  You can change that binding in
‘paredit-mode-map’ allowing the global binding for ‘M-?’ to be used, or,
pick some other key for ‘xref-find-references’ in the global map.

   Finally, what to expect:

   • Racket does not have a global or project-wide database of
     definitions and references.
   • Various modules can export identifiers with the same symbolic value
     – for example a different “define” is provided by ‘racket/base’,
     ‘typed/racket/base’, and other modules.
   • A module can import something, then rename, contract, and re-export
     it.

   As a result, to find a definition, it is necessary to know exactly
_which_ identifier is meant — either by expanding the module (as is done
by ‘racket-xp-mode’) or by actually running it (‘racket-repl-mode’).
Once known, we can usually find the definition site, even through a
chain of renaming and/or contract-wrapping exports.  In addition, when
point is on a module within ‘require’ form, we can usually find the
source file.  (In plain ‘racket-mode’ edit buffers not enhanced by
‘racket-xp-mode’, the only thing that ‘xref-find-definitions’ does is
visit relative requires, e.g.  ‘foo.rkt’ in ‘(require "foo.rkt")’.)

   As for finding references, the default xref implementation is used,
which greps for strings among a project’s files.  Although
‘racket-xp-mode’ can sometimes do better, using ‘drracket/check-syntax’
for definitions and references _within_ the current buffer, beyond those
it also falls back to the default implementation.

   In any case, using the Emacs xref API allows for consistent command
names, shortcut keys, and even a special buffer to navigate among
references and visit each source location.


File: racket-mode.info,  Node: Indent,  Next: paredit,  Prev: Xref (definitions and references),  Up: Configure

3.6 Indent
==========

Indentation can be customized in a way similar to lisp-mode and
scheme-mode: *note racket-indent-line::.


File: racket-mode.info,  Node: paredit,  Next: smartparens,  Prev: Indent,  Up: Configure

3.7 paredit
===========

If you use paredit (https://melpa.org/#/paredit), you might want to add
keybindings to ‘paredit-mode-map’:

   • Bind the curly brace keys to ‘paredit-open-curly’ and
     ‘paredit-close-curly’.

   • Bind whatever keys you prefer for ‘paredit-wrap-square’ and
     ‘paredit-wrap-curly’.

   For example, with ‘use-package’ (https://melpa.org/#/use-package):

     (use-package paredit
       :ensure t
       :config
       (dolist (m '(emacs-lisp-mode-hook
     	       racket-mode-hook
     	       racket-repl-mode-hook))
         (add-hook m #'paredit-mode))
       (bind-keys :map paredit-mode-map
     	     ("{"   . paredit-open-curly)
     	     ("}"   . paredit-close-curly))
       (unless terminal-frame
         (bind-keys :map paredit-mode-map
     	       ("M-[" . paredit-wrap-square)
     	       ("M-{" . paredit-wrap-curly))))


File: racket-mode.info,  Node: smartparens,  Next: Edit buffers and REPL buffers,  Prev: paredit,  Up: Configure

3.8 smartparens
===============

If instead of paredit you prefer smartparens
(https://melpa.org/#/smartparens), you can use the default configuration
it provides for Lisp modes generally and for Racket Mode specifically:

     (require 'smartparens-config)


File: racket-mode.info,  Node: Edit buffers and REPL buffers,  Next: eldoc,  Prev: smartparens,  Up: Configure

3.9 Edit buffers and REPL buffers
=================================

By default, all ‘racket-mode’ edit buffers share one ‘racket-repl-mode’
buffer, named ‘*Racket REPL*’.  For example, if you run foo.rkt, the
REPL prompt changes to ‘foo.rkt>’, and the REPL is inside the file
module namespace.  If you then run bar.rkt, the REPL prompt changes to
‘bar.rkt>’, and you are in that namespace.

   If you prefer, you can use more than one REPL buffer, by customizing
the variable *note racket-repl-buffer-name-function:::

   • Share a REPL buffer among files belonging to the same project; each
     REPL buffer is named ‘*Racket REPL <project-name>*’.
   • A unique REPL buffer for each edit buffer, similar to Dr Racket;
     each REPL buffer is named ‘*Racket REPL <file.rkt>*’.
   • You can also define your own, custom function.

   You can customize where the REPL buffer is displayed by adding an
item to the Emacs variable ‘display-buffer-alist’.  A good regular
expression to use for this would be ‘\\`\\*Racket REPL’.  For example,
if you wanted to make the REPL buffer appear in a new frame:

     (add-to-list 'display-buffer-alist
     	     '("\\`\\*Racket REPL"
     	       (display-buffer-reuse-window
     		display-buffer-pop-up-frame)
     	       (reusable-frames . 0)
     	       (inhibit-same-window . t)))


File: racket-mode.info,  Node: eldoc,  Next: Start faster,  Prev: Edit buffers and REPL buffers,  Up: Configure

3.10 eldoc
==========

By default Racket Mode sets ‘eldoc-documentation-function’ to ‘nil’ — no
‘eldoc-mode’ support.  You may set it to ‘racket-eldoc-function’ in a
‘racket-mode-hook’ and ‘racket-repl-mode-hook’ if you really want to use
‘eldoc-mode’ with Racket.  But it is not a very satisfying experience
because Racket is not a very “eldoc-friendly” language.  Although Racket
Mode attempts to discover argument lists, contracts, or types this
doesn’t work in many common cases:

   • Many Racket primitives are defined in ‘#%kernel’ or ‘#%runtime’.
     There’s no easy way to determine their argument lists.  Most do not
     ‘provide’ a contract.

   • Many of the interesting Racket forms are syntax (macros) not
     functions.  There’s no easy way to determine their “argument
     lists”.

   • When a form has documentation, Racket Mode can show the \"bluebox\”
     – but often that does not fit in a single line as you would
     normally expect with eldoc.

   A more satisfying experience is to use *note racket-xp-describe:: or
*note racket-xp-documentation::.


File: racket-mode.info,  Node: Start faster,  Next: Unicode input method,  Prev: eldoc,  Up: Configure

3.11 Start faster
=================

You can use *note racket-mode-start-faster:: to make the Racket REPL
start faster.


File: racket-mode.info,  Node: Unicode input method,  Next: Ligatures,  Prev: Start faster,  Up: Configure

3.12 Unicode input method
=========================

An optional Emacs input method, ‘racket-unicode’, lets you easily type
various Unicode symbols that might be useful when writing Racket code.

   To automatically enable the ‘racket-unicode’ input method in
‘racket-mode’ and ‘racket-repl-mode’ buffers, put the following code in
your Emacs init file:

     (add-hook 'racket-mode-hook      #'racket-unicode-input-method-enable)
     (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

   *Note racket-unicode-input-method-enable::.

   *Note racket-insert-lambda::.


File: racket-mode.info,  Node: Ligatures,  Prev: Unicode input method,  Up: Configure

3.13 Ligatures
==============

Prior to Emacs 28.0.50, things like ‘auto-composition-mode’ or
‘ligature-mode’ that use ‘composition-function-table’ to display
ligatures can cause Emacs to freeze.  This can happen when an Emacs
‘overlay’ displays a string containing such a ligature — this includes
the overlays created by ‘racket-show-pseudo-tooltip’, as used by
‘racket-xp-mode’.  The only known work-around is to change the value of
‘racket-show-functions’ to something “boring” such as
‘(racket-show-echo-area)’.


File: racket-mode.info,  Node: Reference,  Next: Commands,  Prev: Configure,  Up: Top

4 Reference
***********

The following sections are generated from the doc strings for each
command, variable, or face.  (As a result, some of the formatting might
not be quite as nice or correct as in the previous sections.)

   You can also view these by using the normal Emacs help mechanism:

   • ‘C-h f’ and enter the name of a command.
   • ‘C-h v’ and enter the name of a variable.


File: racket-mode.info,  Node: Commands,  Next: Variables,  Prev: Reference,  Up: Top

5 Commands
**********

* Menu:

* Edit::
* Explore::
* Run::
* Test::
* Eval::
* Collections::
* Macro expand::
* Other::
* Showing information::
* Associating edit buffers with REPL buffers::
* Browsing file URLs with anchors::


File: racket-mode.info,  Node: Edit,  Next: Explore,  Up: Commands

5.1 Edit
========

* Menu:

* racket-mode::
* racket-insert-lambda::
* racket-fold-all-tests::
* racket-unfold-all-tests::
* racket-tidy-requires::
* racket-trim-requires::
* racket-base-requires::
* racket-add-require-for-identifier::
* racket-indent-line::
* racket-smart-open-bracket-mode::
* racket-insert-closing::
* racket-cycle-paren-shapes::
* racket-backward-up-list::
* racket-unicode-input-method-enable::
* racket-align::
* racket-unalign::
* racket-complete-at-point::


File: racket-mode.info,  Node: racket-mode,  Next: racket-insert-lambda,  Up: Edit

5.1.1 racket-mode
-----------------

‘M-x’ ‘racket-mode’

   Major mode for editing Racket source files.

Key                                                             Binding
‘}’                                                             *note racket-insert-closing::
‘]’                                                             *note racket-insert-closing::
‘)’                                                             *note racket-insert-closing::
‘TAB’                                                           ‘indent-for-tab-command’
‘C-x C-e’                                                       *note racket-send-last-sexp::
‘C-M-y’                                                         *note racket-insert-lambda::
‘C-M-u’                                                         *note racket-backward-up-list::
‘C-M-x’                                                         *note racket-send-definition::
‘C-c C-u’                                                       *note racket-unfold-all-tests::
‘C-c C-f’                                                       *note racket-fold-all-tests::
‘C-c C-.’                                                       *note racket-describe-search::
‘C-c C-s’                                                       *note racket-describe-search::
‘C-c C-d’                                                       *note racket-documentation-search::
‘C-c C-p’                                                       *note racket-cycle-paren-shapes::
‘C-c C-x C-f’                                                   *note racket-open-require-path::
‘C-c C-e r’                                                     *note racket-expand-region::
‘C-c C-e e’                                                     *note racket-expand-last-sexp::
‘C-c C-e x’                                                     *note racket-expand-definition::
‘C-c C-e f’                                                     *note racket-expand-file::
‘C-c C-r’                                                       *note racket-send-region::
‘C-c C-o’                                                       *note racket-profile::
‘C-c C-l’                                                       *note racket-logger::
‘C-c C-t’                                                       *note racket-test::
‘C-c C-z’                                                       *note racket-repl::
‘C-c C-k’                                                       *note racket-run-module-at-point::
‘C-c C-c’                                                       *note racket-run-module-at-point::

   In addition to any hooks its parent mode ‘prog-mode’ might have run,
this mode runs the hook ‘racket-mode-hook’, as the final step during
initialization.


File: racket-mode.info,  Node: racket-insert-lambda,  Next: racket-fold-all-tests,  Prev: racket-mode,  Up: Edit

5.1.2 racket-insert-lambda
--------------------------

‘C-M-y’

   Insert λ.

   To insert Unicode symbols generally, see *note
racket-unicode-input-method-enable::.


File: racket-mode.info,  Node: racket-fold-all-tests,  Next: racket-unfold-all-tests,  Prev: racket-insert-lambda,  Up: Edit

5.1.3 racket-fold-all-tests
---------------------------

‘C-c C-f’

   Fold (hide) all test submodules.


File: racket-mode.info,  Node: racket-unfold-all-tests,  Next: racket-tidy-requires,  Prev: racket-fold-all-tests,  Up: Edit

5.1.4 racket-unfold-all-tests
-----------------------------

‘C-c C-u’

   Unfold (show) all test submodules.


File: racket-mode.info,  Node: racket-tidy-requires,  Next: racket-trim-requires,  Prev: racket-unfold-all-tests,  Up: Edit

5.1.5 racket-tidy-requires
--------------------------

‘M-x’ ‘racket-tidy-requires’

   Make a single “require” form, modules sorted, one per line.

   The scope of this command is the innermost module around point,
including the outermost module for a file using a “#lang” line.  All
require forms within that module are combined into a single form.
Within that form:

   • A single subform is used for each phase level, sorted in this
     order: for-syntax, for-template, for-label, for-meta, and plain
     (phase 0).

        • Within each level subform, the modules are sorted:

             • Collection path modules – sorted alphabetically.

             • Subforms such as only-in.

             • Quoted relative requires – sorted alphabetically.

   At most one required module is listed per line.

   See also: *note racket-trim-requires:: and *note
racket-base-requires::.


File: racket-mode.info,  Node: racket-trim-requires,  Next: racket-base-requires,  Prev: racket-tidy-requires,  Up: Edit

5.1.6 racket-trim-requires
--------------------------

‘M-x’ ‘racket-trim-requires’

   Like *note racket-tidy-requires:: but also deletes unnecessary
requires.

   Note: This only works when the source file can be fully expanded with
no errors.

   Note: This only works for requires at the top level of a source file
using #lang.  It does NOT work for require forms inside module forms.
Furthermore, it is not smart about module+ or module* forms – it might
delete top level requires that are actually needed by such submodules.

   See also: *note racket-base-requires::.


File: racket-mode.info,  Node: racket-base-requires,  Next: racket-add-require-for-identifier,  Prev: racket-trim-requires,  Up: Edit

5.1.7 racket-base-requires
--------------------------

‘M-x’ ‘racket-base-requires’

   Change from “#lang racket” to “#lang racket/base”.

   Adds explicit requires for imports that are provided by “racket” but
not by “racket/base”.

   This is a recommended optimization for Racket applications.  Avoiding
loading all of “racket” can reduce load time and memory footprint.

   Also, as does *note racket-trim-requires::, this removes unneeded
modules and tidies everything into a single, sorted require form.

   Note: This only works when the source file can be fully expanded with
no errors.

   Note: This only works for requires at the top level of a source file
using #lang.  It does NOT work for require forms inside module forms.
Furthermore, it is not smart about module+ or module* forms – it might
delete top level requires that are actually needed by such submodules.

   Note: Currently this only helps change “#lang racket” to “#lang
racket/base”.  It does not help with other similar conversions, such as
changing “#lang typed/racket” to “#lang typed/racket/base”.


File: racket-mode.info,  Node: racket-add-require-for-identifier,  Next: racket-indent-line,  Prev: racket-base-requires,  Up: Edit

5.1.8 racket-add-require-for-identifier
---------------------------------------

‘M-x’ ‘racket-add-require-for-identifier’

   Add a require for the identifier at point.

   When more than one module supplies an identifer with the same name,
they are listed for you to choose one.  The list is sorted
alphabetically, except modules starting with “racket/” and
“typed/racket/” are sorted before others.

   A “require” form is inserted into the buffer, followed by doing a
*note racket-tidy-requires::.

   Caveat: This works in terms of identifiers that are documented.  The
mechanism is similar to that used for Racket’s “Search Manuals” feature.
Today there exists no system-wide database of identifiers that are
exported but not documented.


File: racket-mode.info,  Node: racket-indent-line,  Next: racket-smart-open-bracket-mode,  Prev: racket-add-require-for-identifier,  Up: Edit

5.1.9 racket-indent-line
------------------------

‘M-x’ ‘racket-indent-line’

   Indent current line as Racket code.

   Normally you don’t need to use this command directly, it is used
automatically when you press keys like RET or TAB. However you might
refer to it when configuring custom indentation, explained below.

   This behaves like ‘lisp-indent-line’, except that whole-line comments
are treated the same regardless of whether they start with single or
double semicolons.

   • Automatically indents forms that start with “begin” in the usual
     way that “begin” is indented.

   • Automatically indents forms that start with “def” or “with-” in the
     usual way that “define” is indented.

   • Has rules for many specific standard Racket forms.

   To extend, use your Emacs init file to

     (put SYMBOL 'racket-indent-function INDENT)

   SYMBOL is the name of the Racket form like “’test-case” and INDENT is
an integer or the symbol “’defun”.  When INDENT is an integer, the
meaning is the same as for lisp-indent-function and
scheme-indent-function: Indent the first INDENT arguments specially and
indent any further arguments like a body.

   For example:

     (put 'test-case 'racket-indent-function 1)

   This will change the indent of ‘test-case’ from this:

     (test-case foo
     	   blah
     	   blah)

   to this:

     (test-case foo
       blah
       blah)

   If ‘racket-indent-function’ has no property for a symbol,
scheme-indent-function is also considered, although the “with-” indents
defined by scheme-mode are ignored.  This is only to help people who may
have extensive scheme-indent-function settings, particularly in the form
of file or dir local variables.  Otherwise prefer putting properties on
‘racket-indent-function’.


File: racket-mode.info,  Node: racket-smart-open-bracket-mode,  Next: racket-insert-closing,  Prev: racket-indent-line,  Up: Edit

5.1.10 racket-smart-open-bracket-mode
-------------------------------------

‘M-x’ ‘racket-smart-open-bracket-mode’

   Minor mode to let you always type ‘[’’ to insert ‘(’ or ‘[’
automatically.

   Behaves like the “Automatically adjust opening square brackets”
feature in Dr.  Racket.

   By default, inserts a ‘(’.  Inserts a ‘[’ in the following cases:

   • ‘let’-like bindings – forms with ‘let’ in the name as well as
     things like ‘parameterize’, ‘with-handlers’, and ‘with-syntax’.

   • ‘case’, ‘cond’, ‘match’, ‘syntax-case’, ‘syntax-parse’, and
     ‘syntax-rules’ clauses.

   • ‘for’-like bindings and ‘for/fold’ accumulators.

   • ‘class’ declaration syntax, such as ‘init’ and ‘inherit’.

   When the previous s-expression in a sequence is a compound
expression, uses the same kind of delimiter.

   To force insert ‘[’, use ‘quoted-insert’.

   Combined with *note racket-insert-closing:: this means that you can
press the unshifted ‘[’ and ‘]’ keys to get whatever delimiters follow
the Racket conventions for these forms.  When something like
‘electric-pair-mode’ or ‘paredit-mode’ is active, you need not even
press ‘]’.

   Tip: When also using ‘paredit-mode’, enable that first so that the
binding for the ‘[’’ key in the map for *note
racket-smart-open-bracket-mode:: has higher priority.  See also the
variable ‘minor-mode-map-alist’.


File: racket-mode.info,  Node: racket-insert-closing,  Next: racket-cycle-paren-shapes,  Prev: racket-smart-open-bracket-mode,  Up: Edit

5.1.11 racket-insert-closing
----------------------------

‘]’ or ‘)’

   Insert a matching closing delimiter.

   With ‘C-u’ insert the typed character as-is.

   This is handy if you’re not yet using something like ‘paredit-mode’,
‘smartparens-mode’, ‘parinfer-mode’, or simply ‘electric-pair-mode’
added in Emacs 24.5.


File: racket-mode.info,  Node: racket-cycle-paren-shapes,  Next: racket-backward-up-list,  Prev: racket-insert-closing,  Up: Edit

5.1.12 racket-cycle-paren-shapes
--------------------------------

‘C-c C-p’

   Cycle the sexpr among () [] {}.


File: racket-mode.info,  Node: racket-backward-up-list,  Next: racket-unicode-input-method-enable,  Prev: racket-cycle-paren-shapes,  Up: Edit

5.1.13 racket-backward-up-list
------------------------------

‘C-M-u’

   Like ‘backward-up-list’ but works when point is in a string or
comment.

   Typically you should not use this command in Emacs Lisp – especially
not repeatedly.  Instead, initially use
‘racket--escape-string-or-comment’ to move to the start of a string or
comment, if any, then use normal ‘backward-up-list’ repeatedly.


File: racket-mode.info,  Node: racket-unicode-input-method-enable,  Next: racket-align,  Prev: racket-backward-up-list,  Up: Edit

5.1.14 racket-unicode-input-method-enable
-----------------------------------------

‘M-x’ ‘racket-unicode-input-method-enable’

   Set input method to racket-unicode.

   The racket-unicode input method lets you easily type various Unicode
symbols that might be useful when writing Racket code.

   To automatically enable the racket-unicode input method in
racket-mode and racket-repl-mode buffers, put the following code in your
Emacs init file:

     (add-hook 'racket-mode-hook #'racket-unicode-input-method-enable)
     (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

   To temporarily enable this input method for a single buffer you can
use “M-x racket-unicode-input-method-enable”.

   Use the standard Emacs key C-\ to toggle the input method.

   When the racket-unicode input method is active, you can for example
type “All” and it is immediately replaced with “∀”.  A few other
examples:

omega       ω
x_1         x₁
x^1         x¹
A           𝔸
test–>>E    test–>>∃ (racket/redex)
vdash       ⊢

   To see a table of all key sequences use “M-x describe-input-method
<RET> racket-unicode”.

   If you want to add your own mappings to the “racket-unicode” input
method, you may add code like the following example in your Emacs init
file:

     ;; Either (require 'racket-mode) here, or, if you use
     ;; use-package, put the code below in the :config section.
     (with-temp-buffer
       (racket-unicode-input-method-enable)
       (set-input-method "racket-unicode")
       (let ((quail-current-package (assoc "racket-unicode"
     				      quail-package-alist)))
         (quail-define-rules ((append . t))
     			("^o" ["ᵒ"]))))

   If you don’t like the highlighting of partially matching tokens you
can turn it off by setting ‘input-method-highlight-flag’ to nil.


File: racket-mode.info,  Node: racket-align,  Next: racket-unalign,  Prev: racket-unicode-input-method-enable,  Up: Edit

5.1.15 racket-align
-------------------

‘M-x’ ‘racket-align’

   Align values in the same column.

   Useful for binding forms like “let” and “parameterize”, conditionals
like “cond” and “match”, association lists, and any series of couples
like the arguments to “hash”.

   Before choosing this command, put point on the first of a series of
“couples”.  A couple is:

   • A list of two or more sexprs: "[sexpr val sexpr ...]".
   • Two sexprs: “sexpr val”.

   Each “val” moves to the same column and is ‘prog-indent-sexp’-ed (in
case it is a multi-line form).

   For example with point on the "[" before “a”:

     Before             After

     (let ([a 12]       (let ([a   12]
           [bar 23])          [bar 23])
       ....)              ....)

     '([a . 12]         '([a   . 12]
       [bar . 23])        [bar . 23])

     (cond [a? #t]      (cond [a?   #t]
           [b? (f x           [b?   (f x
     	     y)]                  y)]
           [else #f])         [else #f])

   Or with point on the quote before “a”:

     (list 'a 12        (list 'a   12
           'bar 23)           'bar 23)

   If more than one couple is on the same line, none are aligned,
because it is unclear where the value column should be.  For example the
following form will not change; *note racket-align:: will display an
error message:

     (let ([a 0][b 1]
           [c 2])       error; unchanged
       ....)

   When a couple’s sexprs start on different lines, that couple is
ignored.  Other, single-line couples in the series are aligned as usual.
For example:

     (let ([foo         (let ([foo
            0]                 0]
           [bar 1]            [bar 1]
           [x 2])             [x   2])
       ....)              ....)

   See also: *note racket-unalign::.


File: racket-mode.info,  Node: racket-unalign,  Next: racket-complete-at-point,  Prev: racket-align,  Up: Edit

5.1.16 racket-unalign
---------------------

‘M-x’ ‘racket-unalign’

   The opposite of *note racket-align::.

   Effectively does M-x ‘just-one-space’ and ‘prog-indent-sexp’ for each
couple’s value.


File: racket-mode.info,  Node: racket-complete-at-point,  Prev: racket-unalign,  Up: Edit

5.1.17 racket-complete-at-point
-------------------------------

A value for the variable ‘completion-at-point-functions’.

   Completion candidates are drawn from the same symbols used for
font-lock.  This is a static list.  If you want dynamic, smarter
completion candidates, enable the minor mode *note racket-xp-mode::.


File: racket-mode.info,  Node: Explore,  Next: Run,  Prev: Edit,  Up: Commands

5.2 Explore
===========

* Menu:

* racket-xp-mode::
* racket-xp-describe::
* racket-xp-documentation::
* racket-xp-next-definition::
* racket-xp-previous-definition::
* racket-xp-next-use::
* racket-xp-previous-use::
* racket-xp-next-error::
* racket-xp-previous-error::
* racket-xp-tail-up::
* racket-xp-tail-down::
* racket-xp-tail-next-sibling::
* racket-xp-tail-previous-sibling::
* racket-documentation-search::
* racket-describe-search::


File: racket-mode.info,  Node: racket-xp-mode,  Next: racket-xp-describe,  Up: Explore

5.2.1 racket-xp-mode
--------------------

‘M-x’ ‘racket-xp-mode’

   A minor mode that analyzes expanded code to explain and explore.

   This minor mode is an optional enhancement to *note racket-mode::
edit buffers.  Like any minor mode, you can turn it on or off for a
specific buffer.  If you always want to use it, put the following code
in your Emacs init file:

     (require 'racket-xp)
     (add-hook 'racket-mode-hook #'racket-xp-mode)

   Note: This mode won’t do anything unless/until the Racket Mode back
end is running.  It will try to start the back end automatically.  You
do _not_ need to *note racket-run:: the buffer you are editing.

   This mode uses the drracket/check-syntax package to analyze
fully-expanded programs, without needing to evaluate a.k.a.  “run” them.
The resulting analysis provides information for:

   • Visually annotating bindings – local or imported definitions and
     references to them.

   • Visually annotating expressions in a tail position, as well as the
     enclosing expression with respect to which they are in a tail
     position.

   • Completion candidates.

   • Defintions’ source and documentation.

   When point is on a definition or use, related items are highlighted
using *note racket-xp-def-face:: and *note racket-xp-use-face:: –
instead of drawing arrows as in Dr Racket.  Information is displayed
using the function(s) in the hook variable *note
racket-show-functions::; it is also available when hovering the mouse
cursor.

   Note: If you find these point-motion features too distracting and/or
slow, in your ‘racket-xp-mode-hook’ you may disable them:

     (require 'racket-xp)
     (add-hook 'racket-xp-mode-hook
     	  (lambda ()
     	    (remove-hook 'pre-redisplay-functions
     			 #'racket-xp-pre-redisplay
     			 t)))

   The remaining features discussed below will still work.

   You may also use commands to navigate among a definition and its
uses, or to rename a local definitions and all its uses:

   • *note racket-xp-next-definition::
   • *note racket-xp-previous-definition::
   • *note racket-xp-next-use::
   • *note racket-xp-previous-use::

   In the following little example, not only does drracket/check-syntax
distinguish the various “x” bindings, it understands the two different
imports of “define”:

     #lang racket/base
     (define x 1)
     x
     (let ([x x])
       (+ x 1))
     (module m typed/racket/base
       (define x 2)
       x)

   When point is on the opening parenthesis of an expression in tail
position, it is highlighted using the face *note
racket-xp-tail-position-face::.

   When point is on the opening parenthesis of an enclosing expression
with respect to which one or more expressions are in tail position, it
is highlighted using the face *note racket-xp-tail-target-face::.

   Furthermore, when point is on the opening parenthesis of either kind
of expression, all of the immediately related expressions are also
highlighted.  Various commands move among them:

   • *note racket-xp-tail-up::
   • *note racket-xp-tail-down::
   • *note racket-xp-tail-next-sibling::
   • *note racket-xp-tail-previous-sibling::

   The function ‘racket-xp-complete-at-point’ is added to the variable
‘completion-at-point-functions’.  Note that in this case, it is not
smart about submodules; identifiers are assumed to be definitions from
the file’s module or its imports.  In addition to supplying completion
candidates, it supports the “:company-location” property to inspect the
definition of a candidate and the “:company-doc-buffer” property to view
its documentation.

   When you edit the buffer, existing annotations are retained; their
positions are updated to reflect the edit.  Annotations for new or
deleted text are not requested until after *note
racket-xp-after-change-refresh-delay:: seconds.  The request is made
asynchronously so that Emacs will not block – for moderately complex
source files, it can take some seconds simply to fully expand them, as
well as a little more time for the drracket/check-syntax analysis.  When
the results are ready, all annotations for the buffer are completely
refreshed.

   You may also set *note racket-xp-after-change-refresh-delay:: to nil
and use the ‘racket-xp-annotate’ command manually.

   The mode line changes to reflect the current status of annotations,
and whether or not you had a syntax error.

   If you have one or more syntax errors, *note racket-xp-next-error::
and *note racket-xp-previous-error:: navigate among them.  Although most
languages will stop after the first syntax error, some like Typed Racket
will try to collect and report multiple errors.

   You may use ‘xref-find-definitions’ ‘M-.’ , ‘xref-pop-marker-stack’
‘M-,’ , and ‘xref-find-references’: *note racket-xp-mode:: adds a
backend to the variable ‘xref-backend-functions’.  This backend uses
information from the drracket/check-syntax static analysis.  Its ability
to find references is limited to the current file; when it finds none it
will try the default xref backend implementation which is grep-based.

   Tip: This mode follows the convention that a minor mode may only use
a prefix key consisting of “C-c” followed by a punctuation key.  As a
result, ‘racket-xp-control-c-hash-keymap’ is bound to “C-c #” by
default.  Although you might find this awkward to type, remember that as
an Emacs user, you are free to bind this map to a more convenient
prefix, and/or bind any individual commands directly to whatever keys
you prefer.

Key                                                     Binding
‘M-.’                                                   ‘xref-find-definitions’
‘C-c C-s’                                               *note racket-describe-search::
‘C-c C-d’                                               *note racket-xp-documentation::
‘C-c C-.’                                               *note racket-xp-describe::
‘C-c # P’                                               *note racket-xp-previous-error::
‘C-c # N’                                               *note racket-xp-next-error::
‘C-c # g’                                               ‘racket-xp-annotate’
‘C-c # <’                                               *note racket-xp-tail-previous-sibling::
‘C-c # >’                                               *note racket-xp-tail-next-sibling::
‘C-c # v’                                               *note racket-xp-tail-down::
‘C-c # ^’                                               *note racket-xp-tail-up::
‘C-c # r’                                               ‘racket-xp-rename’
‘C-c # ?’                                               ‘xref-find-references’
‘C-c # .’                                               ‘xref-find-definitions’
‘C-c # p’                                               *note racket-xp-previous-use::
‘C-c # n’                                               *note racket-xp-next-use::
‘C-c # k’                                               *note racket-xp-previous-definition::
‘C-c # j’                                               *note racket-xp-next-definition::


File: racket-mode.info,  Node: racket-xp-describe,  Next: racket-xp-documentation,  Prev: racket-xp-mode,  Up: Explore

5.2.2 racket-xp-describe
------------------------

‘C-c C-.’

   Describe something in a ‘*Racket Describe*’ buffer.

   The command varies based on how many ‘C-u’ command prefixes you
supply.

  1. None.

     Uses the symbol at point.  If no such symbol exists, you are
     prompted enter the identifier, but in this case it only considers
     definitions or imports at the file’s module level – not local
     bindings nor definitions in submodules.

        • If the identifier has installed Racket documentation, then a
          simplified version of the HTML is presented in the buffer,
          including the “blue box”, documentation prose, and examples.

        • Otherwise, if the identifier is a function, then its signature
          is displayed, for example "(name arg-1-name arg-2-name)".

  2. ‘C-u’

     Always prompts you to enter a symbol, defaulting to the symbol at
     point if any.

     Otheriwse behaves like 0.

  3. ‘C-u’ ‘C-u’

     This is an alias for *note racket-describe-search::, which uses
     installed documentation in a ‘racket-describe-mode’ buffer instead
     of an external web browser.

   The intent is to give a quick reminder or introduction to something,
regardless of whether it has installed documentation – and to do so
within Emacs, without switching to a web browser.

   This buffer is also displayed when you use ‘company-mode’ and press
F1 or C-h in its pop up completion list.


File: racket-mode.info,  Node: racket-xp-documentation,  Next: racket-xp-next-definition,  Prev: racket-xp-describe,  Up: Explore

5.2.3 racket-xp-documentation
-----------------------------

‘C-c C-d’

   View documentation in an external web browser.

   The command varies based on how many ‘C-u’ command prefixes you
supply.

  1. None.

     Uses the symbol at point.  Tries to find documentation for an
     identifer defined in the expansion of the current buffer.

     If no such identifer exists, opens the Search Manuals page.  In
     this case, the variable *note
     racket-documentation-search-location:: determines whether the
     search is done locally as with ‘raco doc‘, or visits a URL.

  2. ‘C-u’

     Always prompts you to enter a symbol, defaulting to the symbol at
     point if any.

     Otherwise behaves like 0.

  3. ‘C-u’ ‘C-u’

     Always prompts you to enter anything, defaulting to the symbol at
     point if any.

     Proceeds directly to the Search Manuals page.  Use this if you
     would like to see documentation for all identifiers named “define”,
     for example.


File: racket-mode.info,  Node: racket-xp-next-definition,  Next: racket-xp-previous-definition,  Prev: racket-xp-documentation,  Up: Explore

5.2.4 racket-xp-next-definition
-------------------------------

‘C-c # j’

   Move point to the next definition.


File: racket-mode.info,  Node: racket-xp-previous-definition,  Next: racket-xp-next-use,  Prev: racket-xp-next-definition,  Up: Explore

5.2.5 racket-xp-previous-definition
-----------------------------------

‘C-c # k’

   Move point to the previous definition.


File: racket-mode.info,  Node: racket-xp-next-use,  Next: racket-xp-previous-use,  Prev: racket-xp-previous-definition,  Up: Explore

5.2.6 racket-xp-next-use
------------------------

‘C-c # n’

   When point is on a use, go to the next, sibling use.


File: racket-mode.info,  Node: racket-xp-previous-use,  Next: racket-xp-next-error,  Prev: racket-xp-next-use,  Up: Explore

5.2.7 racket-xp-previous-use
----------------------------

‘C-c # p’

   When point is on a use, go to the previous, sibling use.


File: racket-mode.info,  Node: racket-xp-next-error,  Next: racket-xp-previous-error,  Prev: racket-xp-previous-use,  Up: Explore

5.2.8 racket-xp-next-error
--------------------------

‘C-c # N’

   Go to the next error.


File: racket-mode.info,  Node: racket-xp-previous-error,  Next: racket-xp-tail-up,  Prev: racket-xp-next-error,  Up: Explore

5.2.9 racket-xp-previous-error
------------------------------

‘C-c # P’

   Go to the previous error.


File: racket-mode.info,  Node: racket-xp-tail-up,  Next: racket-xp-tail-down,  Prev: racket-xp-previous-error,  Up: Explore

5.2.10 racket-xp-tail-up
------------------------

‘C-c # ^’

   Go “up” to the expression enclosing an expression in tail position.

   When point is on the opening parenthesis of an expression in tail
position, go its “target” – that is, go to the enclosing expression with
the same continuation as the tail expression.


File: racket-mode.info,  Node: racket-xp-tail-down,  Next: racket-xp-tail-next-sibling,  Prev: racket-xp-tail-up,  Up: Explore

5.2.11 racket-xp-tail-down
--------------------------

‘C-c # v’

   Go “down” to the first tail position enclosed by the current
expression.


File: racket-mode.info,  Node: racket-xp-tail-next-sibling,  Next: racket-xp-tail-previous-sibling,  Prev: racket-xp-tail-down,  Up: Explore

5.2.12 racket-xp-tail-next-sibling
----------------------------------

‘C-c # >’

   Go to the next tail position sharing the same enclosing expression.


File: racket-mode.info,  Node: racket-xp-tail-previous-sibling,  Next: racket-documentation-search,  Prev: racket-xp-tail-next-sibling,  Up: Explore

5.2.13 racket-xp-tail-previous-sibling
--------------------------------------

‘C-c # <’

   Go to the previous tail position sharing the same enclosing
expression.


File: racket-mode.info,  Node: racket-documentation-search,  Next: racket-describe-search,  Prev: racket-xp-tail-previous-sibling,  Up: Explore

5.2.14 racket-documentation-search
----------------------------------

‘C-c C-d’

   Search documentation.

   This command is useful in several situations:

   • You are not using *note racket-xp-mode:: for a *note racket-mode::
     edit buffer, so *note racket-xp-documentation:: is not available.

   • There is no *note racket-repl-mode:: buffer with a live namespace,
     so *note racket-repl-documentation:: is not available or helpful.

   • You want to search for definitions provided by all modules – for
     example, the “define” syntax provided by racket/base, by
     typed/racket/base, and by other modules, as well definitions or
     topics that merely include “define”.

   This command does not try to go directly to the help topic for a
definition provided by any specific module.  Instead it goes to the
Racket “Search Manuals” page.


File: racket-mode.info,  Node: racket-describe-search,  Prev: racket-documentation-search,  Up: Explore

5.2.15 racket-describe-search
-----------------------------

‘C-c C-.’ or ‘C-c C-s’

   Search installed documentation; view using ‘racket-describe-mode’.

   Always prompts you to enter a symbol, defaulting to the symbol at
point if any.

   • If just one module exports the name, you go directly to a Racket
     Describe buffer with its documentation.

   • If multiple modules export the name, you go first to a
     “disambiguation” buffer similar to the Racket “Search Manuals” web
     page.  You may press RET on any item to get a Racket Describe
     buffer for that module’s version of the thing.


File: racket-mode.info,  Node: Run,  Next: Test,  Prev: Explore,  Up: Commands

5.3 Run
=======

* Menu:

* racket-repl-mode::
* racket-run::
* racket-run-and-switch-to-repl::
* racket-run-module-at-point::
* racket-repl::
* racket-repl-describe::
* racket-repl-documentation::
* racket-racket::
* racket-profile::
* racket-profile-mode::
* racket-logger::
* racket-logger-mode::
* racket-debug-mode::
* racket-repl-clear::
* racket-repl-clear-leaving-last-prompt::


File: racket-mode.info,  Node: racket-repl-mode,  Next: racket-run,  Up: Run

5.3.1 racket-repl-mode
----------------------

‘M-x’ ‘racket-repl-mode’

   Major mode for Racket REPL.

   You may use ‘xref-find-definitions’ ‘M-.’ and ‘xref-pop-marker-stack’
‘M-,’ : *note racket-repl-mode:: adds a backend to the variable
‘xref-backend-functions’.  This backend uses information about
identifier bindings and modules from the REPL’s namespace.

Key                                                         Binding
‘}’                                                         *note racket-insert-closing::
‘]’                                                         *note racket-insert-closing::
‘)’                                                         *note racket-insert-closing::
‘C-c C-\’                                                   ‘racket-repl-exit’
‘C-c C-c’                                                   ‘racket-repl-break’
‘C-c C-l’                                                   *note racket-logger::
‘C-c C-z’                                                   ‘racket-repl-switch-to-edit’
‘C-c C-s’                                                   *note racket-describe-search::
‘C-c C-.’                                                   *note racket-repl-describe::
‘C-c C-d’                                                   *note racket-repl-documentation::
‘C-c C-e r’                                                 *note racket-expand-region::
‘C-c C-e e’                                                 *note racket-expand-last-sexp::
‘C-c C-e x’                                                 *note racket-expand-definition::
‘C-c C-e f’                                                 *note racket-expand-file::
‘C-w’                                                       ‘comint-kill-region’
‘C-a’                                                       ‘comint-bol’
‘C-M-y’                                                     *note racket-insert-lambda::
‘C-M-q’                                                     ‘prog-indent-sexp’
‘C-M-u’                                                     *note racket-backward-up-list::
‘TAB’                                                       ‘indent-for-tab-command’
‘C-j’                                                       ‘newline-and-indent’
‘RET’                                                       ‘racket-repl-submit’

   In addition to any hooks its parent mode ‘comint-mode’ might have
run, this mode runs the hook ‘racket-repl-mode-hook’, as the final step
during initialization.


File: racket-mode.info,  Node: racket-run,  Next: racket-run-and-switch-to-repl,  Prev: racket-repl-mode,  Up: Run

5.3.2 racket-run
----------------

‘M-x’ ‘racket-run’

   Save the buffer in REPL and run your program.

   As well as evaluating the outermost, file module, automatically runs
the submodules specified by the customization variable *note
racket-submodules-to-run::.

   See also *note racket-run-module-at-point::, which runs just the
specific module at point.

   With ‘C-u’ uses errortrace for improved stack traces.  Otherwise
follows the *note racket-error-context:: setting.

   With ‘C-u’ ‘C-u’ instruments code for step debugging.  See *note
racket-debug-mode:: and the variable *note racket-debuggable-files::.

   Each run occurs within a Racket custodian.  Any prior run’s custodian
is shut down, releasing resources like threads and ports.  Each run’s
evaluation environment is reset to the contents of the source file.  In
other words, like Dr Racket, this provides the benefit that your source
file is the “single source of truth”.  At the same time, the run gives
you a REPL inside the namespace of the module, giving you the ability to
explore it interactively.  Any explorations are temporary, unless you
also make them to your source file, they will be lost on the next run.

   See also *note racket-run-and-switch-to-repl::, which is even more
like Dr Racket’s Run command because it selects the REPL window after
running.

   In the *note racket-repl-mode:: buffer, output that describes a file
and position is automatically “linkified”.  Examples of such text
include:

   • Racket error messages.
   • rackunit test failure location messages.
   • print representation of path objects.

   To visit these locations, move point there and press RET or mouse
click.  Or, use the standard ‘next-error’ and ‘previous-error’ commands.


File: racket-mode.info,  Node: racket-run-and-switch-to-repl,  Next: racket-run-module-at-point,  Prev: racket-run,  Up: Run

5.3.3 racket-run-and-switch-to-repl
-----------------------------------

‘<f5>’

   This is *note racket-run:: followed by selecting the REPL buffer
window.

   This is similar to how Dr Racket behaves.

   To make it even more similar, you may add *note racket-repl-clear::
to the variable *note racket-before-run-hook::.


File: racket-mode.info,  Node: racket-run-module-at-point,  Next: racket-repl,  Prev: racket-run-and-switch-to-repl,  Up: Run

5.3.4 racket-run-module-at-point
--------------------------------

‘C-c C-k’ or ‘C-c C-c’

   Save the buffer and run the module at point.

   Like *note racket-run:: but runs the innermost module around point,
which is determined textually by looking for “module”, “module*”, or
“module+” forms nested to any depth, else simply the outermost, file
module.


File: racket-mode.info,  Node: racket-repl,  Next: racket-repl-describe,  Prev: racket-run-module-at-point,  Up: Run

5.3.5 racket-repl
-----------------

‘C-c C-z’

   Show a Racket REPL buffer in some window.

   *IMPORTANT*

   The main, intended use of Racket Mode’s REPL is that you ‘find-file’
some specific .rkt file, then *note racket-run:: it.  The REPL will then
match that file.

   If the REPL isn’t running, and you want to start it for no file in
particular?  Then you could use this command.  But the resulting REPL
will have a minimal “#lang racket/base” namespace.  You could enter
"(require racket)" if you want the equivalent of “#lang racket”.  You
could also "(require racket/enter)" if you want things like “enter!”.
But in some sense you’d be “using it wrong”.  If you really don’t want
to use Racket Mode’s REPL as intended, then you might as well use a
plain Emacs shell buffer to run command-line Racket.


File: racket-mode.info,  Node: racket-repl-describe,  Next: racket-repl-documentation,  Prev: racket-repl,  Up: Run

5.3.6 racket-repl-describe
--------------------------

‘C-c C-.’

   Describe the identifier at point in a ‘*Racket Describe*’ buffer.

   The command varies based on how many ‘C-u’ command prefixes you
supply.

  1. None.

     Uses the symbol at point.  If no such symbol exists, you are
     prompted enter the identifier, but in this case it only considers
     definitions or imports at the file’s module level – not local
     bindings nor definitions in submodules.

        • If the identifier has installed Racket documentation, then a
          simplified version of the HTML is presented in the buffer,
          including the “blue box”, documentation prose, and examples.

        • Otherwise, if the identifier is a function, then its signature
          is displayed, for example "(name arg-1-name arg-2-name)".

  2. ‘C-u’

     Always prompts you to enter a symbol, defaulting to the symbol at
     point if any.

     Otheriwse behaves like 0.

  3. ‘C-u’ ‘C-u’

     This is an alias for *note racket-describe-search::, which uses
     installed documentation in a ‘racket-describe-mode’ buffer instead
     of an external web browser.

   The intent is to give a quick reminder or introduction to something,
regardless of whether it has installed documentation – and to do so
within Emacs, without switching to a web browser.


File: racket-mode.info,  Node: racket-repl-documentation,  Next: racket-racket,  Prev: racket-repl-describe,  Up: Run

5.3.7 racket-repl-documentation
-------------------------------

‘C-c C-d’

   View documentation in an external web browser.

   The command varies based on how many ‘C-u’ command prefixes you
supply.

  1. None.

     Uses the symbol at point.  Tries to find documentation for an
     identifer defined in the current namespace.

     If no such identifer exists, opens the Search Manuals page.  In
     this case, the variable *note
     racket-documentation-search-location:: determines whether the
     search is done locally as with ‘raco doc‘, or visits a URL.

  2. ‘C-u’

     Prompts you to enter a symbol, defaulting to the symbol at point if
     any.

     Otherwise behaves like 1.

  3. ‘C-u’ ‘C-u’

     Prompts you to enter anything, defaulting to the symbol at point if
     any.

     Proceeds directly to the Search Manuals page.  Use this if you
     would like to see documentation for all identifiers named “define”,
     for example.


File: racket-mode.info,  Node: racket-racket,  Next: racket-profile,  Prev: racket-repl-documentation,  Up: Run

5.3.8 racket-racket
-------------------

‘<C-M-f5>’

   Do “racket <file>” in a shell buffer.


File: racket-mode.info,  Node: racket-profile,  Next: racket-profile-mode,  Prev: racket-racket,  Up: Run

5.3.9 racket-profile
--------------------

‘C-c C-o’

   Like *note racket-run-module-at-point:: but with profiling.

   Results are presented in a *note racket-profile-mode:: buffer, which
also lets you quickly view the source code.

   You may evaluate expressions in the REPL. They are also profiled.
Use ‘racket-profile-refresh’ to see the updated results.  In other words
a possible workflow is: *note racket-profile:: a .rkt file, call one its
functions in the REPL, and refresh the profile results.

   Caveat: Only source files are instrumented.  You may need to delete
compiled/*.zo files.


File: racket-mode.info,  Node: racket-profile-mode,  Next: racket-logger,  Prev: racket-profile,  Up: Run

5.3.10 racket-profile-mode
--------------------------

‘M-x’ ‘racket-profile-mode’

   Major mode for results of *note racket-profile::.

Key                                             Binding
‘RET’                                           ‘racket-profile-visit’
‘.’                                             ‘racket-profile-visit’
‘f’                                             ‘racket-profile-show-non-project’
‘z’                                             ‘racket-profile-show-zero’
‘g’                                             ‘racket-profile-refresh’
‘q’                                             ‘quit-window’

   In addition to any hooks its parent mode ‘tabulated-list-mode’ might
have run, this mode runs the hook ‘racket-profile-mode-hook’, as the
final step during initialization.


File: racket-mode.info,  Node: racket-logger,  Next: racket-logger-mode,  Prev: racket-profile-mode,  Up: Run

5.3.11 racket-logger
--------------------

‘C-c C-l’

   Create the *note racket-logger-mode:: buffer.


File: racket-mode.info,  Node: racket-logger-mode,  Next: racket-debug-mode,  Prev: racket-logger,  Up: Run

5.3.12 racket-logger-mode
-------------------------

‘M-x’ ‘racket-logger-mode’

   Major mode for Racket logger output.

   The customization variable *note racket-logger-config:: determines
the levels for topics.  During a session you may change topic levels
using ‘racket-logger-topic-level’.

   For more information see:
<https://docs.racket-lang.org/reference/logging.html>

Key                                         Binding
‘g’                                         ‘racket-logger-clear’
‘p’                                         ‘racket-logger-previous-item’
‘n’                                         ‘racket-logger-next-item’
‘w’                                         ‘toggle-truncate-lines’
‘l’                                         ‘racket-logger-topic-level’

   In addition to any hooks its parent mode ‘special-mode’ might have
run, this mode runs the hook ‘racket-logger-mode-hook’, as the final
step during initialization.


File: racket-mode.info,  Node: racket-debug-mode,  Next: racket-repl-clear,  Prev: racket-logger-mode,  Up: Run

5.3.13 racket-debug-mode
------------------------

‘M-x’ ‘racket-debug-mode’

   Minor mode for debug breaks.

   This feature is **EXPERIMENTAL**!!! It is likely to have significant
limitations and bugs.  You are welcome to open an issue to provide
feedback.  Please understand that this feature might never be improved –
it might even be removed someday if it turns out to have too little
value and/or too much cost.

   How to debug:

  1. “Instrument” code for step debugging.  You can instrument entire
     files, and also individual functions.

     a.  Entire Files

     Use two ‘C-u’ command prefixes for either *note racket-run:: or
     *note racket-run-module-at-point::.

     The file will be instrumented for step debugging before it is run.
     Also instrumented are files determined by the variable *note
     racket-debuggable-files::.

     The run will break at the first breakable position.

     Tip: After you run to completion and return to a normal REPL
     prompt, the code remains instrumented.  You may enter expressions
     that evaluate instrumented code and it will break so you can step
     debug again.

     b.  Function Definitions

     Move point inside a function definition form and use ‘C-u’ ‘C-M-x’
     to “instrument” the function for step debugging.  Then in the REPL,
     enter an expression that causes the instrumented function to be
     run, directly or indirectly.

     You can instrument any number of functions.

     You can even instrument while stopped at a break.  For example, to
     instrument a function you are about to call, so you can “step into”
     it:

        • ‘M-x’ ‘racket-xp-visit-definition’ to visit the definition.
        • ‘C-u’ ‘C-M-x’ to instrument the definition.
        • ‘M-x’ ‘racket-unvisit’ to return.
        • Continue stepping.
     Limitation: Instrumenting a function required from another module
     won’t redefine that function.  Instead, it attempts to define an
     instrumented function of the same name, in the module the REPL is
     inside.  The define will fail if it needs definitions visible only
     in that other module.  In that case you’ll probably need to use
     entire-file instrumentation as described above.

  2. When a break occurs, the *note racket-repl-mode:: prompt changes.
     In this debug REPL, local variables are available for you to use
     and even to ‘set!’.

     Also, in the *note racket-mode:: buffer where the break is located,
     *note racket-debug-mode:: is enabled.  This minor mode makes the
     buffer read-only, provides visual feedback – about the break
     position, local variable values, and result values – and provides
     shortcut keys:

Key                                             Binding
‘?’                                             ‘racket-debug-help’
‘h’                                             ‘racket-debug-run-to-here’
‘p’                                             ‘racket-debug-prev-breakable’
‘n’                                             ‘racket-debug-next-breakable’
‘c’                                             ‘racket-debug-continue’
‘u’                                             ‘racket-debug-step-out’
‘o’                                             ‘racket-debug-step-over’
‘SPC’                                           ‘racket-debug-step’


File: racket-mode.info,  Node: racket-repl-clear,  Next: racket-repl-clear-leaving-last-prompt,  Prev: racket-debug-mode,  Up: Run

5.3.14 racket-repl-clear
------------------------

Delete all text in the REPL.

   A suitable value for the hook *note racket-before-run-hook:: if you
want the REPL buffer to be cleared before each run, much like with Dr
Racket.  To do so you can use ‘customize’, or, add to your Emacs init
file something like:

   (add-hook ‘racket-before-run-hook #’racket-repl-clear)

   See also the command *note racket-repl-clear-leaving-last-prompt::.


File: racket-mode.info,  Node: racket-repl-clear-leaving-last-prompt,  Prev: racket-repl-clear,  Up: Run

5.3.15 racket-repl-clear-leaving-last-prompt
--------------------------------------------

‘M-x’ ‘racket-repl-clear-leaving-last-prompt’

   Delete all text in the REPL, except for the last prompt.


File: racket-mode.info,  Node: Test,  Next: Eval,  Prev: Run,  Up: Commands

5.4 Test
========

* Menu:

* racket-test::
* racket-raco-test::


File: racket-mode.info,  Node: racket-test,  Next: racket-raco-test,  Up: Test

5.4.1 racket-test
-----------------

‘<C-f5>’ or ‘C-c C-t’

   Run the “test” submodule.

   Put your tests in a “test” submodule.  For example:

     (module+ test
       (require rackunit)
       (check-true #t))

   Any rackunit test failure messages show the location.  You may use
‘next-error’ to jump to the location of each failing test.

   With ‘C-u’ also runs the tests with coverage instrumentation and
highlights uncovered code using ‘font-lock-warning-face’.

   See also:
   • *note racket-fold-all-tests::
   • *note racket-unfold-all-tests::


File: racket-mode.info,  Node: racket-raco-test,  Prev: racket-test,  Up: Test

5.4.2 racket-raco-test
----------------------

‘M-x’ ‘racket-raco-test’

   Do “raco test -x <file>” in a shell buffer to run the “test”
submodule.


File: racket-mode.info,  Node: Eval,  Next: Collections,  Prev: Test,  Up: Commands

5.5 Eval
========

* Menu:

* racket-send-region::
* racket-send-definition::
* racket-send-last-sexp::


File: racket-mode.info,  Node: racket-send-region,  Next: racket-send-definition,  Up: Eval

5.5.1 racket-send-region
------------------------

‘C-c C-r’

   Send the current region (if any) to the Racket REPL.


File: racket-mode.info,  Node: racket-send-definition,  Next: racket-send-last-sexp,  Prev: racket-send-region,  Up: Eval

5.5.2 racket-send-definition
----------------------------

‘C-M-x’

   Send the current definition to the Racket REPL.


File: racket-mode.info,  Node: racket-send-last-sexp,  Prev: racket-send-definition,  Up: Eval

5.5.3 racket-send-last-sexp
---------------------------

‘C-x C-e’

   Send the previous sexp to the Racket REPL.

   When the previous sexp is a sexp comment the sexp itself is sent,
without the #; prefix.


File: racket-mode.info,  Node: Collections,  Next: Macro expand,  Prev: Eval,  Up: Commands

5.6 Collections
===============

* Menu:

* racket-open-require-path::


File: racket-mode.info,  Node: racket-open-require-path,  Up: Collections

5.6.1 racket-open-require-path
------------------------------

‘C-c C-x C-f’

   Like Dr Racket’s Open Require Path.

   Type (or delete) characters that are part of a module path name.
“Fuzzy” matches appear.  For example try typing “t/t/r”.

   Choices are displayed in a vertical list.  The current choice is at
the top, marked with “->”.

   • C-n and C-p move among the choices.
   • RET on a directory adds its contents to the choices.
   • RET on a file exits doing ‘find-file’.
   • C-g aborts.


File: racket-mode.info,  Node: Macro expand,  Next: Other,  Prev: Collections,  Up: Commands

5.7 Macro expand
================

* Menu:

* racket-stepper-mode::
* racket-expand-file::
* racket-expand-region::
* racket-expand-definition::
* racket-expand-last-sexp::


File: racket-mode.info,  Node: racket-stepper-mode,  Next: racket-expand-file,  Up: Macro expand

5.7.1 racket-stepper-mode
-------------------------

‘M-x’ ‘racket-stepper-mode’

   Major mode for Racket stepper output.

   Used by the commands *note racket-expand-file::, *note
racket-expand-definition::, *note racket-expand-region::, and *note
racket-expand-last-sexp::.

Key                                             Binding
‘k’                                             ‘racket-stepper-previous-item’
‘p’                                             ‘racket-stepper-previous-item’
‘j’                                             ‘racket-stepper-next-item’
‘n’                                             ‘racket-stepper-next-item’
‘RET’                                           ‘racket-stepper-step’

   In addition to any hooks its parent mode ‘special-mode’ might have
run, this mode runs the hook ‘racket-stepper-mode-hook’, as the final
step during initialization.


File: racket-mode.info,  Node: racket-expand-file,  Next: racket-expand-region,  Prev: racket-stepper-mode,  Up: Macro expand

5.7.2 racket-expand-file
------------------------

‘C-c C-e f’

   Expand the *note racket-mode:: buffer’s file in *note
racket-stepper-mode::.

   Uses the ‘macro-debugger’ package to do the expansion.

   You do need to *note racket-run:: the file first; the namespace
active in the REPL is not used.

   If the file is non-trivial and/or is not compiled to a .zo bytecode
file, then it might take many seconds before the original form is
displayed and you can start stepping.

   With ‘C-u’ also expands syntax from racket/base – which can result in
very many expansion steps.


File: racket-mode.info,  Node: racket-expand-region,  Next: racket-expand-definition,  Prev: racket-expand-file,  Up: Macro expand

5.7.3 racket-expand-region
--------------------------

‘C-c C-e r’

   Expand the active region using *note racket-stepper-mode::.

   Uses Racket’s ‘expand-once’ in the namespace from the most recent
*note racket-run::.


File: racket-mode.info,  Node: racket-expand-definition,  Next: racket-expand-last-sexp,  Prev: racket-expand-region,  Up: Macro expand

5.7.4 racket-expand-definition
------------------------------

‘C-c C-e x’

   Expand the definition around point using *note racket-stepper-mode::.

   Uses Racket’s ‘expand-once’ in the namespace from the most recent
*note racket-run::.


File: racket-mode.info,  Node: racket-expand-last-sexp,  Prev: racket-expand-definition,  Up: Macro expand

5.7.5 racket-expand-last-sexp
-----------------------------

‘C-c C-e e’

   Expand the sexp before point using *note racket-stepper-mode::.

   Uses Racket’s ‘expand-once’ in the namespace from the most recent
*note racket-run::.


File: racket-mode.info,  Node: Other,  Next: Showing information,  Prev: Macro expand,  Up: Commands

5.8 Other
=========

* Menu:

* racket-mode-start-faster::
* racket-mode-start-slower::


File: racket-mode.info,  Node: racket-mode-start-faster,  Next: racket-mode-start-slower,  Up: Other

5.8.1 racket-mode-start-faster
------------------------------

‘M-x’ ‘racket-mode-start-faster’

   Compile Racket Mode’s .rkt files for faster startup.

   Racket Mode is implemented as an Emacs Lisp “front end” that talks to
a Racket process “back end”.  Because Racket Mode is delivered as an
Emacs package instead of a Racket package, installing it does not do the
‘raco setup’ that is normally done for Racket packages.

   This command will do a ‘raco make’ of Racket Mode’s .rkt files,
creating bytecode files in ‘compiled/’ subdirectories.  As a result,
when a command must start the Racket process, it will start somewhat
faster.

   On many computers, the resulting speed up is negligible, and might
not be worth the complication.

   If you run this command, ever, you will need to run it again after:

   • Installing an updated version of Racket Mode.  Otherwise, you might
     lose some of the speed-up.

   • Installing a new version of Racket and/or changing the value of the
     variable *note racket-program::.  Otherwise, you might get an error
     message due to the bytecode being different versions.

   To revert to compiling on startup, use *note
racket-mode-start-slower::.


File: racket-mode.info,  Node: racket-mode-start-slower,  Prev: racket-mode-start-faster,  Up: Other

5.8.2 racket-mode-start-slower
------------------------------

‘M-x’ ‘racket-mode-start-slower’

   Delete the “compiled” directories made by *note
racket-mode-start-faster::.


File: racket-mode.info,  Node: Showing information,  Next: Associating edit buffers with REPL buffers,  Prev: Other,  Up: Commands

5.9 Showing information
=======================

* Menu:

* racket-show-pseudo-tooltip::
* racket-show-echo-area::
* racket-show-header-line::
* racket-show-pos-tip::


File: racket-mode.info,  Node: racket-show-pseudo-tooltip,  Next: racket-show-echo-area,  Up: Showing information

5.9.1 racket-show-pseudo-tooltip
--------------------------------

Show using an overlay that resembles a tooltip.

   This is nicer than *note racket-show-pos-tip:: because it:

   • Doesn’t flicker while navigating.
   • Doesn’t disappear after a timeout.
   • Performs well when ‘x-gtk-use-system-tooltips’ is nil.

   On the other hand, this does not look as nice when displaying text
that spans multiple lines or is too wide to fit the window.  In that
case, we simply left-justify everything and do not draw any border.


File: racket-mode.info,  Node: racket-show-echo-area,  Next: racket-show-header-line,  Prev: racket-show-pseudo-tooltip,  Up: Showing information

5.9.2 racket-show-echo-area
---------------------------

Show things in the echo area.

   A value for the variable *note racket-show-functions::.

   This does _not_ add STR to the “*Messages*” log buffer.


File: racket-mode.info,  Node: racket-show-header-line,  Next: racket-show-pos-tip,  Prev: racket-show-echo-area,  Up: Showing information

5.9.3 racket-show-header-line
-----------------------------

Show things using a buffer header line.

   A value for the variable *note racket-show-functions::.

   When there is nothing to show, keep a blank header-line.  That way,
the buffer below doesn’t “jump up and down” by a line as messages appear
and disappear.  Only when V is nil do we remove the header line.


File: racket-mode.info,  Node: racket-show-pos-tip,  Prev: racket-show-header-line,  Up: Showing information

5.9.4 racket-show-pos-tip
-------------------------

Show things using ‘pos-tip-show’ if available.

   A value for the variable *note racket-show-functions::.


File: racket-mode.info,  Node: Associating edit buffers with REPL buffers,  Next: Browsing file URLs with anchors,  Prev: Showing information,  Up: Commands

5.10 Associating edit buffers with REPL buffers
===============================================

* Menu:

* racket-repl-buffer-name-shared::
* racket-repl-buffer-name-unique::
* racket-repl-buffer-name-project::
* racket-project-root::


File: racket-mode.info,  Node: racket-repl-buffer-name-shared,  Next: racket-repl-buffer-name-unique,  Up: Associating edit buffers with REPL buffers

5.10.1 racket-repl-buffer-name-shared
-------------------------------------

‘M-x’ ‘racket-repl-buffer-name-shared’

   All *note racket-mode:: edit buffers share one *note
racket-repl-mode:: buffer.

   A value for the variable *note racket-repl-buffer-name-function::.


File: racket-mode.info,  Node: racket-repl-buffer-name-unique,  Next: racket-repl-buffer-name-project,  Prev: racket-repl-buffer-name-shared,  Up: Associating edit buffers with REPL buffers

5.10.2 racket-repl-buffer-name-unique
-------------------------------------

‘M-x’ ‘racket-repl-buffer-name-unique’

   Each *note racket-mode:: edit buffer gets its own *note
racket-repl-mode:: buffer.

   A value for the variable *note racket-repl-buffer-name-function::.


File: racket-mode.info,  Node: racket-repl-buffer-name-project,  Next: racket-project-root,  Prev: racket-repl-buffer-name-unique,  Up: Associating edit buffers with REPL buffers

5.10.3 racket-repl-buffer-name-project
--------------------------------------

‘M-x’ ‘racket-repl-buffer-name-project’

   All *note racket-mode:: buffers in a project share a *note
racket-repl-mode:: buffer.

   A value for the variable *note racket-repl-buffer-name-function::.

   The “project” is determined by *note racket-project-root::.


File: racket-mode.info,  Node: racket-project-root,  Prev: racket-repl-buffer-name-project,  Up: Associating edit buffers with REPL buffers

5.10.4 racket-project-root
--------------------------

Given an absolute pathname for FILE, return its project root directory.

   The “project” is determined by trying, in order:

   • ‘projectile-project-root’
   • ‘vc-root-dir’
   • ‘project-current’
   • ‘file-name-directory’


File: racket-mode.info,  Node: Browsing file URLs with anchors,  Prev: Associating edit buffers with REPL buffers,  Up: Commands

5.11 Browsing file URLs with anchors
====================================

* Menu:

* racket-browse-url-using-temporary-file::


File: racket-mode.info,  Node: racket-browse-url-using-temporary-file,  Up: Browsing file URLs with anchors

5.11.1 racket-browse-url-using-temporary-file
---------------------------------------------

Browse a URL via a temporary HTML file using a meta redirect.

   A suitable value for the variable *note racket-browse-url-function::.

   Racket documentation URLs depend on anchors – the portion of the URL
after the # character – to jump to a location within a page.
Unfortunately on some operating systems and/or versions of Emacs, the
default handling for browsing file URLs ignores anchors.  This function
attempts to avoid the problem by using a temporary HTML file with a meta
redirect as a “trampoline”.

   Although the intent is to provide a default that “just works”, you do
not need to use this.  You can customize the variable *note
racket-browse-url-function:: instead to be ‘browse-url’, or
‘browse-url-browser-function’ in case have have customized that, or
indeed whatever you want.


File: racket-mode.info,  Node: Variables,  Next: Faces,  Prev: Commands,  Up: Top

6 Variables
***********

* Menu:

* General variables::
* REPL variables::
* Other variables::
* Experimental debugger variables::
* Showing information: Showing informationx.


File: racket-mode.info,  Node: General variables,  Next: REPL variables,  Up: Variables

6.1 General variables
=====================

* Menu:

* racket-program::
* racket-command-timeout::
* racket-memory-limit::
* racket-error-context::
* racket-user-command-line-arguments::
* racket-path-from-emacs-to-racket-function::
* racket-path-from-racket-to-emacs-function::
* racket-browse-url-function::
* racket-xp-after-change-refresh-delay::
* racket-xp-highlight-unused-regexp::
* racket-documentation-search-location::


File: racket-mode.info,  Node: racket-program,  Next: racket-command-timeout,  Up: General variables

6.1.1 racket-program
--------------------

Pathname of the racket executable.


File: racket-mode.info,  Node: racket-command-timeout,  Next: racket-memory-limit,  Prev: racket-program,  Up: General variables

6.1.2 racket-command-timeout
----------------------------

How many seconds to wait for command server responses.

   Note: This is mostly obsolete, fortunately, because it applies only
to commands that must block the Emacs UI until they get a response.
Instead most Racket Mode commands these days receive their response
asychronously.


File: racket-mode.info,  Node: racket-memory-limit,  Next: racket-error-context,  Prev: racket-command-timeout,  Up: General variables

6.1.3 racket-memory-limit
-------------------------

Terminate the Racket process if memory use exceeds this value in MB.

   Changes to this value take effect upon the next *note racket-run::.
A value of 0 means no limit.

   Caveat: This uses Racket’s ‘custodian-limit-memory’, which does not
enforce the limit exactly.  Instead, the program will be terminated upon
the first garbage collection where memory exceeds the limit (maybe by a
significant amount).


File: racket-mode.info,  Node: racket-error-context,  Next: racket-user-command-line-arguments,  Prev: racket-memory-limit,  Up: General variables

6.1.4 racket-error-context
--------------------------

The amount of context for error messages.

   Each increasing level supplies better context (“stack trace”) for
error messages, but causing your program to run more slowly.

   • low corresponds to compile-enforce-module-constants #t and
     compile-context-preservation-enabled #f.

   • medium corresponds to compile-enforce-module-constants #f and
     compile-context-preservation-enabled #t, which disables some
     optimizations like inlining.

   • high corresponds to medium plus the use of errortrace, which
     extensively instruments your code and therefore might cause it to
     run significantly slower.

   Tip: Regardless of this setting, you can enable high errortrace for a
specific *note racket-run:: or *note racket-run-module-at-point:: by
using ‘C-u’ .  This lets you normally run with a lower, faster setting,
and re-run when desired to get a more-helpful error message.


File: racket-mode.info,  Node: racket-user-command-line-arguments,  Next: racket-path-from-emacs-to-racket-function,  Prev: racket-error-context,  Up: General variables

6.1.5 racket-user-command-line-arguments
----------------------------------------

List of command-line arguments to supply to your Racket program.

   Accessible in your Racket program in the usual way — the parameter
‘current-command-line-arguments’ and friends.

   This is an Emacs buffer-local variable — convenient to set as a file
local variable.  For example at the end of your .rkt file:

     ;; Local Variables:
     ;; racket-user-command-line-arguments: ("-f" "bar")
     ;; End:

   Set this way, the value must be an *unquoted* list of strings.  For
example:

     ("-f" "bar")

   The following values will _not_ work:

     '("-f" "bar")
     (list "-f" "bar")


File: racket-mode.info,  Node: racket-path-from-emacs-to-racket-function,  Next: racket-path-from-racket-to-emacs-function,  Prev: racket-user-command-line-arguments,  Up: General variables

6.1.6 racket-path-from-emacs-to-racket-function
-----------------------------------------------

A function to transform Emacs Lisp pathnames given to the Racket back
end.

   If you run Emacs on Windows Subsystem for Linux, and want to run
Racket programs using Windows Racket.exe rather than Linux racket, you
can set this to ‘racket-wsl-to-windows’.  In that case you probably also
want to customize the “reverse”: *note
racket-path-from-racket-to-emacs-function::.


File: racket-mode.info,  Node: racket-path-from-racket-to-emacs-function,  Next: racket-browse-url-function,  Prev: racket-path-from-emacs-to-racket-function,  Up: General variables

6.1.7 racket-path-from-racket-to-emacs-function
-----------------------------------------------

A function to transform Racket back end pathnames given to Emacs Lisp.

   The default on Windows replaces back with forward slashes.  The
default elsewhere is ‘identity’.

   If you run Emacs on Windows Subsystem for Linux, and want to run
Racket programs using Windows Racket.exe rather than Linux racket, you
can set this to ‘racket-windows-to-wsl’.  In that case you probably also
want to customize the “reverse”: *note
racket-path-from-emacs-to-racket-function::.


File: racket-mode.info,  Node: racket-browse-url-function,  Next: racket-xp-after-change-refresh-delay,  Prev: racket-path-from-racket-to-emacs-function,  Up: General variables

6.1.8 racket-browse-url-function
--------------------------------

Function to call to browse a URL.


File: racket-mode.info,  Node: racket-xp-after-change-refresh-delay,  Next: racket-xp-highlight-unused-regexp,  Prev: racket-browse-url-function,  Up: General variables

6.1.9 racket-xp-after-change-refresh-delay
------------------------------------------

Seconds to wait before refreshing *note racket-xp-mode:: annotations.

   Set to nil to disable automatic refresh and manually use
‘racket-xp-annotate’.


File: racket-mode.info,  Node: racket-xp-highlight-unused-regexp,  Next: racket-documentation-search-location,  Prev: racket-xp-after-change-refresh-delay,  Up: General variables

6.1.10 racket-xp-highlight-unused-regexp
----------------------------------------

Only give *note racket-xp-unused-face:: to unused bindings that match
this regexp.

   The default is to highlight identifiers that do not start with an
underline, which is a common convention.


File: racket-mode.info,  Node: racket-documentation-search-location,  Prev: racket-xp-highlight-unused-regexp,  Up: General variables

6.1.11 racket-documentation-search-location
-------------------------------------------

The location of the Racket “Search Manuals” web page.  Where *note
racket-documentation-search::, *note racket-xp-documentation:: and *note
racket-repl-documentation:: should look for the search page.

   • If the value of this variable is ‘local, open the search page from
     the local documentation, as with “raco doc”.

   • Otherwise, the value is a string recognizable by ‘format’, with
     “%s” at the point at which to insert the user’s search text.  the
     help desk.  Apart from “%s”, the string should be a properly
     encoded URL.


File: racket-mode.info,  Node: REPL variables,  Next: Other variables,  Prev: General variables,  Up: Variables

6.2 REPL variables
==================

* Menu:

* racket-repl-buffer-name-function::
* racket-submodules-to-run::
* racket-repl-history-directory::
* racket-history-filter-regexp::
* racket-images-inline::
* racket-imagemagick-props::
* racket-images-keep-last::
* racket-images-system-viewer::
* racket-pretty-print::


File: racket-mode.info,  Node: racket-repl-buffer-name-function,  Next: racket-submodules-to-run,  Up: REPL variables

6.2.1 racket-repl-buffer-name-function
--------------------------------------

How to associate *note racket-mode:: edit buffers with *note
racket-repl-mode:: buffers.

   The default is nil, which is equivalent to supplying *note
racket-repl-buffer-name-shared::: One REPL buffer is shared.

   Other predefined choices include *note
racket-repl-buffer-name-unique:: and *note
racket-repl-buffer-name-project::.

   This is used when a *note racket-mode:: buffer is created.  Changing
this to a new value only affects *note racket-mode:: buffers created
later.

   Any such function takes no arguments, should look at
‘buffer-file-name’ if necessary, and either ‘setq-default’ or
‘setq-local’ the variable ‘racket-repl-buffer-name’ to a desired *note
racket-repl-mode:: buffer name.  As a result, *note racket-run::
commands will use a buffer of that name, creating it if necessary.


File: racket-mode.info,  Node: racket-submodules-to-run,  Next: racket-repl-history-directory,  Prev: racket-repl-buffer-name-function,  Up: REPL variables

6.2.2 racket-submodules-to-run
------------------------------

Extra submodules to run.

   This is a list of submodules.  Each submodule is described as a list,
to support submodules nested to any depth.

   This is used by commands that emulate the DrRacket Run command:

   • *note racket-run::
   • *note racket-run-and-switch-to-repl:: ‘<f5>’

   It is NOT used by commands that run one specific module, such as:

   • *note racket-run-module-at-point:: ‘C-c C-k’ or ‘C-c C-c’
   • *note racket-test:: ‘<C-f5>’ or ‘C-c C-t’
   • *note racket-profile::


File: racket-mode.info,  Node: racket-repl-history-directory,  Next: racket-history-filter-regexp,  Prev: racket-submodules-to-run,  Up: REPL variables

6.2.3 racket-repl-history-directory
-----------------------------------

Directory for *note racket-repl-mode:: history files.


File: racket-mode.info,  Node: racket-history-filter-regexp,  Next: racket-images-inline,  Prev: racket-repl-history-directory,  Up: REPL variables

6.2.4 racket-history-filter-regexp
----------------------------------

Input matching this regexp are NOT saved on the history list.  Default
value is a regexp to ignore input that is all whitespace.


File: racket-mode.info,  Node: racket-images-inline,  Next: racket-imagemagick-props,  Prev: racket-history-filter-regexp,  Up: REPL variables

6.2.5 racket-images-inline
--------------------------

Whether to display inline images in the REPL.


File: racket-mode.info,  Node: racket-imagemagick-props,  Next: racket-images-keep-last,  Prev: racket-images-inline,  Up: REPL variables

6.2.6 racket-imagemagick-props
------------------------------

Use ImageMagick with these properties for REPL images.

   When this property list is not empty – and the variable *note
racket-images-inline:: is true, and Emacs is built with with ImageMagick
support – then ‘create-image’ is called with “imagemagick” as the type
and with this property list.

   For example, to scale images whose width is larger than 500 pixels,
supply (:max-width 500).


File: racket-mode.info,  Node: racket-images-keep-last,  Next: racket-images-system-viewer,  Prev: racket-imagemagick-props,  Up: REPL variables

6.2.7 racket-images-keep-last
-----------------------------

How many images to keep in the image cache.


File: racket-mode.info,  Node: racket-images-system-viewer,  Next: racket-pretty-print,  Prev: racket-images-keep-last,  Up: REPL variables

6.2.8 racket-images-system-viewer
---------------------------------

The image viewer program to use for ‘racket-view-image’.


File: racket-mode.info,  Node: racket-pretty-print,  Prev: racket-images-system-viewer,  Up: REPL variables

6.2.9 racket-pretty-print
-------------------------

Use pretty-print instead of print in REPL?


File: racket-mode.info,  Node: Other variables,  Next: Experimental debugger variables,  Prev: REPL variables,  Up: Variables

6.3 Other variables
===================

* Menu:

* racket-indent-curly-as-sequence::
* racket-indent-sequence-depth::
* racket-pretty-lambda::
* racket-smart-open-bracket-enable::
* racket-logger-config::
* racket-before-run-hook::
* racket-after-run-hook::


File: racket-mode.info,  Node: racket-indent-curly-as-sequence,  Next: racket-indent-sequence-depth,  Up: Other variables

6.3.1 racket-indent-curly-as-sequence
-------------------------------------

Indent ‘{}’ with items aligned with the head item?

   This is indirectly disabled if *note racket-indent-sequence-depth::
is 0.  This is safe to set as a file-local variable.


File: racket-mode.info,  Node: racket-indent-sequence-depth,  Next: racket-pretty-lambda,  Prev: racket-indent-curly-as-sequence,  Up: Other variables

6.3.2 racket-indent-sequence-depth
----------------------------------

To what depth should *note racket-indent-line:: search.

   This affects the indentation of forms like ’() ‘() #() – and {} if
*note racket-indent-curly-as-sequence:: is t — but not #’() #‘() ,()
,@().  A zero value disables, giving the normal indent behavior of
DrRacket or Emacs ‘lisp-mode’ derived modes like ‘scheme-mode’.  Setting
this to a high value can make indentation noticeably slower.  This is
safe to set as a file-local variable.


File: racket-mode.info,  Node: racket-pretty-lambda,  Next: racket-smart-open-bracket-enable,  Prev: racket-indent-sequence-depth,  Up: Other variables

6.3.3 racket-pretty-lambda
--------------------------

Display lambda keywords using λ.  This is DEPRECATED.

   Instead use ‘prettify-symbols-mode’ in newer verisons of Emacs, or,
use *note racket-insert-lambda:: to insert actual λ characters.


File: racket-mode.info,  Node: racket-smart-open-bracket-enable,  Next: racket-logger-config,  Prev: racket-pretty-lambda,  Up: Other variables

6.3.4 racket-smart-open-bracket-enable
--------------------------------------

This variable is obsolete and has no effect.

   Instead of using this variable, you may bind the ‘[’ key to the
‘racket-smart-open-bracket’ command in the ‘racket-mode-map’ and/or
‘racket-repl-mode-map’ keymaps.


File: racket-mode.info,  Node: racket-logger-config,  Next: racket-before-run-hook,  Prev: racket-smart-open-bracket-enable,  Up: Other variables

6.3.5 racket-logger-config
--------------------------

Configuration of *note racket-logger-mode:: topics and levels.

   The topic ‘* respresents the default level used for topics not
assigned a level.  Otherwise, the topic symbols are the same as used by
Racket’s ‘define-logger’.

   The levels are those used by Racket’s logging system: ‘debug, ‘info,
‘warning, ‘error, ‘fatal.

   For more information see:
<https://docs.racket-lang.org/reference/logging.html>

   The default value sets some known “noisy” topics to be one level
quieter.  That way you can set the ‘* topic to a level like ‘debug and
not get overhwelmed by these noisy topics.


File: racket-mode.info,  Node: racket-before-run-hook,  Next: racket-after-run-hook,  Prev: racket-logger-config,  Up: Other variables

6.3.6 racket-before-run-hook
----------------------------

Normal hook done before various Racket Mode run commands.

   When hook functions are called, ‘current-buffer’ is that of the *note
racket-mode:: buffer when the run command was issued.  If a hook
function instead needs the *note racket-repl-mode:: buffer, it should
get that from the variable ‘racket-repl-buffer-name’.


File: racket-mode.info,  Node: racket-after-run-hook,  Prev: racket-before-run-hook,  Up: Other variables

6.3.7 racket-after-run-hook
---------------------------

Normal hook done after various Racket Mode run commands.

   Here “after” means that the run has completed and the REPL is waiting
at another prompt.

   When hook functions are called, ‘current-buffer’ is that of the *note
racket-mode:: buffer when the run command was issued.  If a hook
function instead needs the *note racket-repl-mode:: buffer, it should
get that from the variable ‘racket-repl-buffer-name’.


File: racket-mode.info,  Node: Experimental debugger variables,  Next: Showing informationx,  Prev: Other variables,  Up: Variables

6.4 Experimental debugger variables
===================================

* Menu:

* racket-debuggable-files::


File: racket-mode.info,  Node: racket-debuggable-files,  Up: Experimental debugger variables

6.4.1 racket-debuggable-files
-----------------------------

Used to tell *note racket-run:: what files may be instrumented for
debugging.  Must be a list of strings that are pathnames, such as from
‘racket--buffer-file-name’, -or-, a function that returns such a list
given the pathname of the file being run.  If any path strings are
relative, they are made absolute using ‘expand-file-name’ with the
directory of the file being run.  The symbol ‘run-file may be supplied
in the list; it will be replaced with the pathname of the file being
run.  Safe to set as a file-local variable.


File: racket-mode.info,  Node: Showing informationx,  Prev: Experimental debugger variables,  Up: Variables

6.5 Showing information
=======================

* Menu:

* racket-show-functions::


File: racket-mode.info,  Node: racket-show-functions,  Up: Showing informationx

6.5.1 racket-show-functions
---------------------------

An “abnormal hook” variable to customize ‘racket-show’.

   This is a list of one or more functions.

   Each such function must accept two arguments: STR and POS.

   STR is one of:

   • Non-blank string: Display the string somehow.

   • Blank string: Hide any previously displayed string.

   • nil: Hide any persistent UI that might have been created.  For
     instance *note racket-show-header-line:: hides the header line.

   POS may be nil when STR is nil or a blank string.

   Otherwise POS is the buffer position – typically the end of a span –
that the non-blank STR describes.

   A function that shows STR near POS should position it not to hide the
span, i.e.  below and/or right of POS. Examples: *note
racket-show-pseudo-tooltip:: and *note racket-show-pos-tip::.

   A function that shows STR in a fixed location may of course ignore
POS. Examples: *note racket-show-echo-area:: and *note
racket-show-header-line::


File: racket-mode.info,  Node: Faces,  Prev: Variables,  Up: Top

7 Faces
*******

* Menu:

* All::


File: racket-mode.info,  Node: All,  Up: Faces

7.1 All
=======

* Menu:

* racket-keyword-argument-face::
* racket-reader-quoted-symbol-face::
* racket-reader-syntax-quoted-symbol-face::
* racket-here-string-face::
* racket-xp-def-face::
* racket-xp-use-face::
* racket-xp-unused-face::
* racket-xp-tail-target-face::
* racket-xp-tail-position-face::
* racket-logger-config-face::
* racket-logger-topic-face::
* racket-logger-fatal-face::
* racket-logger-error-face::
* racket-logger-warning-face::
* racket-logger-info-face::
* racket-logger-debug-face::
* racket-doc-link-face::
* racket-ext-link-face::
* racket-doc-output-face::
* racket-doc-litchar-face::


File: racket-mode.info,  Node: racket-keyword-argument-face,  Next: racket-reader-quoted-symbol-face,  Up: All

7.1.1 racket-keyword-argument-face
----------------------------------

Face for ‘#:keyword’ arguments.


File: racket-mode.info,  Node: racket-reader-quoted-symbol-face,  Next: racket-reader-syntax-quoted-symbol-face,  Prev: racket-keyword-argument-face,  Up: All

7.1.2 racket-reader-quoted-symbol-face
--------------------------------------

Face for symbols quoted using ’ or ‘.

   This face is given only to symbols directly quoted using the reader
shorthands ’ or ‘.  All other directly quoted values, including symbols
quoted using “quote” or “quasiquote”, get the face
‘font-lock-constant-face’.


File: racket-mode.info,  Node: racket-reader-syntax-quoted-symbol-face,  Next: racket-here-string-face,  Prev: racket-reader-quoted-symbol-face,  Up: All

7.1.3 racket-reader-syntax-quoted-symbol-face
---------------------------------------------

Face for symbols quoted using #’ or #‘.

   This face is given only to symbols directly quoted using the reader
shorthands #’ or #‘.  All other directly quoted values, including
symbols quoted using “syntax” or “quasisyntax”, get the face
‘font-lock-constant-face’.


File: racket-mode.info,  Node: racket-here-string-face,  Next: racket-xp-def-face,  Prev: racket-reader-syntax-quoted-symbol-face,  Up: All

7.1.4 racket-here-string-face
-----------------------------

Face for here strings.


File: racket-mode.info,  Node: racket-xp-def-face,  Next: racket-xp-use-face,  Prev: racket-here-string-face,  Up: All

7.1.5 racket-xp-def-face
------------------------

Face *note racket-xp-mode:: uses to highlight definitions.


File: racket-mode.info,  Node: racket-xp-use-face,  Next: racket-xp-unused-face,  Prev: racket-xp-def-face,  Up: All

7.1.6 racket-xp-use-face
------------------------

Face *note racket-xp-mode:: uses to highlight uses.


File: racket-mode.info,  Node: racket-xp-unused-face,  Next: racket-xp-tail-target-face,  Prev: racket-xp-use-face,  Up: All

7.1.7 racket-xp-unused-face
---------------------------

Face *note racket-xp-mode:: uses to highlight unused requires or
definitions.


File: racket-mode.info,  Node: racket-xp-tail-target-face,  Next: racket-xp-tail-position-face,  Prev: racket-xp-unused-face,  Up: All

7.1.8 racket-xp-tail-target-face
--------------------------------

Face *note racket-xp-mode:: uses to highlight targets of a tail
position.


File: racket-mode.info,  Node: racket-xp-tail-position-face,  Next: racket-logger-config-face,  Prev: racket-xp-tail-target-face,  Up: All

7.1.9 racket-xp-tail-position-face
----------------------------------

Face *note racket-xp-mode:: uses to highlight expressions in a tail
position.


File: racket-mode.info,  Node: racket-logger-config-face,  Next: racket-logger-topic-face,  Prev: racket-xp-tail-position-face,  Up: All

7.1.10 racket-logger-config-face
--------------------------------

Face for *note racket-logger-mode:: configuration.


File: racket-mode.info,  Node: racket-logger-topic-face,  Next: racket-logger-fatal-face,  Prev: racket-logger-config-face,  Up: All

7.1.11 racket-logger-topic-face
-------------------------------

Face for *note racket-logger-mode:: topics.


File: racket-mode.info,  Node: racket-logger-fatal-face,  Next: racket-logger-error-face,  Prev: racket-logger-topic-face,  Up: All

7.1.12 racket-logger-fatal-face
-------------------------------

Face for *note racket-logger-mode:: fatal level.


File: racket-mode.info,  Node: racket-logger-error-face,  Next: racket-logger-warning-face,  Prev: racket-logger-fatal-face,  Up: All

7.1.13 racket-logger-error-face
-------------------------------

Face for *note racket-logger-mode:: error level.


File: racket-mode.info,  Node: racket-logger-warning-face,  Next: racket-logger-info-face,  Prev: racket-logger-error-face,  Up: All

7.1.14 racket-logger-warning-face
---------------------------------

Face for *note racket-logger-mode:: warning level.


File: racket-mode.info,  Node: racket-logger-info-face,  Next: racket-logger-debug-face,  Prev: racket-logger-warning-face,  Up: All

7.1.15 racket-logger-info-face
------------------------------

Face for *note racket-logger-mode:: info level.


File: racket-mode.info,  Node: racket-logger-debug-face,  Next: racket-doc-link-face,  Prev: racket-logger-info-face,  Up: All

7.1.16 racket-logger-debug-face
-------------------------------

Face for *note racket-logger-mode:: debug level.


File: racket-mode.info,  Node: racket-doc-link-face,  Next: racket-ext-link-face,  Prev: racket-logger-debug-face,  Up: All

7.1.17 racket-doc-link-face
---------------------------

Face ‘racket-describe-mode’ uses for links within documentation.  Note:
When some special face is already specified by the documentation, then
to avoid visual clutter this face is NOT also added.


File: racket-mode.info,  Node: racket-ext-link-face,  Next: racket-doc-output-face,  Prev: racket-doc-link-face,  Up: All

7.1.18 racket-ext-link-face
---------------------------

Face ‘racket-describe-mode’ uses for external links.  See the variable
*note racket-browse-url-function::.


File: racket-mode.info,  Node: racket-doc-output-face,  Next: racket-doc-litchar-face,  Prev: racket-ext-link-face,  Up: All

7.1.19 racket-doc-output-face
-----------------------------

Face ‘racket-describe-mode’ uses for Scribble @example or @interactions
output.


File: racket-mode.info,  Node: racket-doc-litchar-face,  Prev: racket-doc-output-face,  Up: All

7.1.20 racket-doc-litchar-face
------------------------------

Face ‘racket-describe-mode’ uses for Scribble @litchar.



Tag Table:
Node: Top220
Node: Introduction4929
Ref: Introduction-Footnote-16088
Node: Install6483
Node: Configure Emacs to use MELPA6817
Node: Install Racket Mode7290
Node: Minimal Racket7591
Node: Uninstall8633
Node: Update8921
Node: Upgrading all packages9084
Node: Updating just Racket Mode9738
Node: Configure10459
Node: Key bindings11675
Node: Font-lock (syntax highlighting)12292
Node: Completion at point13585
Node: Completion in minibuffer15547
Node: Xref (definitions and references)16199
Node: Indent19156
Node: paredit19400
Node: smartparens20393
Node: Edit buffers and REPL buffers20768
Node: eldoc22254
Node: Start faster23515
Node: Unicode input method23742
Node: Ligatures24458
Node: Reference25102
Node: Commands25594
Node: Edit25913
Node: racket-mode26466
Node: racket-insert-lambda29444
Node: racket-fold-all-tests29732
Node: racket-unfold-all-tests29969
Node: racket-tidy-requires30212
Node: racket-trim-requires31256
Node: racket-base-requires31966
Node: racket-add-require-for-identifier33231
Node: racket-indent-line34137
Node: racket-smart-open-bracket-mode36125
Node: racket-insert-closing37772
Node: racket-cycle-paren-shapes38265
Node: racket-backward-up-list38516
Node: racket-unicode-input-method-enable39076
Node: racket-align41076
Node: racket-unalign43044
Node: racket-complete-at-point43377
Node: Explore43799
Node: racket-xp-mode44327
Node: racket-xp-describe51729
Node: racket-xp-documentation53339
Node: racket-xp-next-definition54483
Node: racket-xp-previous-definition54746
Node: racket-xp-next-use55016
Node: racket-xp-previous-use55275
Node: racket-xp-next-error55537
Node: racket-xp-previous-error55766
Node: racket-xp-tail-up56002
Node: racket-xp-tail-down56466
Node: racket-xp-tail-next-sibling56747
Node: racket-xp-tail-previous-sibling57049
Node: racket-documentation-search57371
Node: racket-describe-search58399
Node: Run59140
Node: racket-repl-mode59609
Node: racket-run62346
Node: racket-run-and-switch-to-repl64264
Node: racket-run-module-at-point64720
Node: racket-repl65227
Node: racket-repl-describe66195
Node: racket-repl-documentation67703
Node: racket-racket68811
Node: racket-profile69029
Node: racket-profile-mode69746
Node: racket-logger70724
Node: racket-logger-mode70945
Node: racket-debug-mode72068
Node: racket-repl-clear75665
Node: racket-repl-clear-leaving-last-prompt76252
Node: Test76567
Node: racket-test76712
Node: racket-raco-test77385
Node: Eval77632
Node: racket-send-region77824
Node: racket-send-definition78042
Node: racket-send-last-sexp78291
Node: Collections78601
Node: racket-open-require-path78768
Node: Macro expand79379
Node: racket-stepper-mode79649
Node: racket-expand-file80687
Node: racket-expand-region81413
Node: racket-expand-definition81779
Node: racket-expand-last-sexp82168
Node: Other82520
Node: racket-mode-start-faster82713
Node: racket-mode-start-slower84056
Node: Showing information84349
Node: racket-show-pseudo-tooltip84651
Node: racket-show-echo-area85309
Node: racket-show-header-line85670
Node: racket-show-pos-tip86190
Node: Associating edit buffers with REPL buffers86467
Node: racket-repl-buffer-name-shared86864
Node: racket-repl-buffer-name-unique87297
Node: racket-repl-buffer-name-project87773
Node: racket-project-root88312
Node: Browsing file URLs with anchors88765
Node: racket-browse-url-using-temporary-file89025
Node: Variables90051
Node: General variables90313
Node: racket-program90836
Node: racket-command-timeout91019
Node: racket-memory-limit91489
Node: racket-error-context92095
Node: racket-user-command-line-arguments93212
Node: racket-path-from-emacs-to-racket-function94071
Node: racket-path-from-racket-to-emacs-function94742
Node: racket-browse-url-function95506
Node: racket-xp-after-change-refresh-delay95788
Node: racket-xp-highlight-unused-regexp96205
Node: racket-documentation-search-location96665
Node: REPL variables97469
Node: racket-repl-buffer-name-function97904
Node: racket-submodules-to-run98926
Node: racket-repl-history-directory99673
Node: racket-history-filter-regexp99956
Node: racket-images-inline100308
Node: racket-imagemagick-props100556
Node: racket-images-keep-last101164
Node: racket-images-system-viewer101418
Node: racket-pretty-print101692
Node: Other variables101900
Node: racket-indent-curly-as-sequence102289
Node: racket-indent-sequence-depth102672
Node: racket-pretty-lambda103362
Node: racket-smart-open-bracket-enable103769
Node: racket-logger-config104225
Node: racket-before-run-hook105052
Node: racket-after-run-hook105579
Node: Experimental debugger variables106171
Node: racket-debuggable-files106417
Node: Showing informationx107111
Node: racket-show-functions107307
Node: Faces108401
Node: All108504
Node: racket-keyword-argument-face109169
Node: racket-reader-quoted-symbol-face109391
Node: racket-reader-syntax-quoted-symbol-face109913
Node: racket-here-string-face110450
Node: racket-xp-def-face110678
Node: racket-xp-use-face110911
Node: racket-xp-unused-face111135
Node: racket-xp-tail-target-face111399
Node: racket-xp-tail-position-face111679
Node: racket-logger-config-face111971
Node: racket-logger-topic-face112230
Node: racket-logger-fatal-face112476
Node: racket-logger-error-face112726
Node: racket-logger-warning-face112978
Node: racket-logger-info-face113235
Node: racket-logger-debug-face113483
Node: racket-doc-link-face113728
Node: racket-ext-link-face114113
Node: racket-doc-output-face114407
Node: racket-doc-litchar-face114681

End Tag Table


Local Variables:
coding: utf-8
End:
