# A sample config for use in a git repo.
#
# To browse repo via a graph of commits:
#   rat -m git.log -c 'git log --oneline --decorate --graph'
#
# To browse based on branches:
#   rat -m git.refs -c 'git branch'
#
# To see and stage working copy changes and make and amend commits:
#   rat -m git.status -c 'git status --short -uall'
#
# Extend this config file to suit your own environment. Add flags to the
# commands that you find helpful. If you have local git aliases, consider
# binding keys to run them.
#
# You may want to incorporate programs that you have installed. For example:
#   - `diff-highlight` - to highlight word-level changes in line-level diffs
#   - `xdg-open` - for opening things in other programs, e.g. URLs in browser
#   - `vipe` - to prompt for user input in a pipeline
#   - `rediff` - for letting user edit a patch with `vipe` before applying

mode git.log
  annotate match git_commit -- git rev-list --all --reflog --abbrev=2 --abbrev-commit
  annotate match git_ref    -- git for-each-ref --format='%(refname)%0a%(refname:short)'

  # !  Do not open a new pager. Execute the command and reload the current pager.
  bindkey enter git_commit git.show -- >git show --stat=400 -p $git_commit
  # ?! is like ! but asks for user confirmation
  bindkey S-r   git_commit          -- ?!git rebase --interactive $git_commit
  bindkey S-f   git_commit          -- ?!git commit --fixup=$git_commit

  # >  Like the default, open a new pager with the contents of the shell command, but also set up a parent-child relationship so that the parent cursor can be moved up and down from inside the child pager with the ParentCursorUp and ParentCursorDown commands.
  bindkey b git_commit git.blame -- >git blame $git_commit -- "$git_filename"
  bindkey d git_commit git.diff  -- >git log -p --follow -1 $git_commit -- "$git_filename"

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.show
  annotate match git_filename -- git ls-tree --name-only -r $git_commit

  bindkey enter git_filename git.diff   -- >git log -p --follow -1 $git_commit -- "$git_filename"
  bindkey b     git_filename git.blame  -- >git blame $git_commit -- "$git_filename"
  bindkey l     git_filename git.log    -- >git log --oneline --follow $git_commit -- "$git_filename"
  bindkey v     git_filename git.source -- >git show $git_commit:"$git_filename"

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.blame
  annotate match git_commit -- git log --abbrev=2 --pretty="%h" --follow -- "$git_filename"

  bindkey enter git_commit git.show  -- >git show --stat=400 -p $git_commit
  bindkey b     git_commit git.blame -- >git blame $git_commit -- "$git_filename"
  bindkey S-b   git_commit git.blame -- >git blame $git_commit~ -- "$git_filename"

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.status
  annotate match git_filename -- git ls-files --cached --modified --others --exclude-standard

  bindkey e   git_filename -- !$VISUAL $git_filename
  bindkey a   git_filename -- !git add $git_filename
  bindkey r   git_filename -- !git reset $git_filename
  bindkey c,o git_filename -- ?!git checkout $git_filename
  bindkey S-d git_filename -- ?!rm $git_filename

  bindkey d,d   git_filename git.diff,git.stage   -- >git diff $git_filename
  bindkey w,d,d git_filename git.diff             -- >git diff --word-diff=color $git_filename
  bindkey d,a   git_filename git.diff,git.unstage -- >git diff --cached $git_filename
  bindkey w,d,a git_filename git.diff             -- >git diff --cached --word-diff=color $git_filename

  bindkey l git_filename git.log    -- >git log --oneline --follow -- "$git_filename"
  bindkey v git_filename git.source -- >cat "$git_filename"

  bindkey S-c -- ?!git commit
  bindkey S-a -- ?!git commit --amend

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.diff
  annotate external hunk_patch -- annotate-diff --mode hunks
  annotate external line_patch -- annotate-diff --mode lines

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.stage
  bindkey S-a -- !git add $git_filename

  bindkey a hunk_patch -- !echo -nE "$hunk_patch" | git apply --cached --unidiff-zero -
  bindkey 1 line_patch -- !echo -nE "$line_patch" | git apply --cached --unidiff-zero -

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.unstage
  bindkey S-r -- !git reset $git_filename

  bindkey r hunk_patch -- !echo -nE "$hunk_patch" | git apply --cached --unidiff-zero --reverse -
  bindkey 1 line_patch -- !echo -nE "$line_patch" | git apply --cached --unidiff-zero --reverse -

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.refs
  annotate match git_ref -- git for-each-ref --format='%(refname:short)'

  bindkey f                      -- !git fetch
  bindkey S-f                    -- !git fetch --all
  bindkey enter  git_ref git.log -- >git log $git_ref
  bindkey c      git_ref         -- !git checkout $git_ref
  bindkey r      git_ref         -- !git rebase $git_ref
  bindkey m      git_ref         -- !git merge $git_ref
  bindkey d      git_ref         -- !git branch -d $git_ref
  bindkey delete git_ref         -- ?!git merge $git_ref
  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.source
  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end

mode git.misc
  annotate match git_commit   -- git rev-list --all --reflog --abbrev=2 --abbrev-commit
  annotate match git_filename -- git ls-files
  annotate match git_ref      -- git for-each-ref --format='%(refname)%0a%(refname:short)'

  bindkey s   git_commit   git.show   -- >git show --stat=400 -p $git_commit
  bindkey v   git_filename git.source -- >cat "$git_filename"
  bindkey b   git_filename git.blame  -- >git blame -- "$git_filename"
  bindkey l   git_ref      git.log    -- >git log $git_ref
  bindkey S-r git_commit              -- ?!git rebase --interactive $git_commit
  bindkey S-f git_commit              -- ?!git commit --fixup=$git_commit
  

  bindkey ?        -- !sps vs $HOME/.config/rat/git &
end
