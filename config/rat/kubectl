mode kubectl.contexts
    annotate match  ctx                  -- kubectl config get-contexts -o='name'
    bindkey enter   ctx kubectl.namespaces       -- >kubectl get namespace --context $ctx --no-headers=true
    bindkey n       ctx  kubectl.nodes           -- >kubectl get nodes --context $ctx --no-headers=true

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end

mode kubectl.namespaces
    annotate match  ns                  -- kubectl get namespace --context $ctx -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
    bindkey enter   ns  kubectl.pods            -- >kubectl get pods --context $ctx -n $ns --no-headers=true
    bindkey s       ns  kubectl.secrets         -- >kubectl get secrets --context $ctx -n $ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end

mode kubectl.nodes
    annotate regex  node                -- ^\S*
    bindkey  enter  node    preview     -- kubectl describe node $node --context $ctx

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end

mode kubectl.pods
    annotate match pod -- kubectl get pods --context $ctx -n $ns -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
    bindkey enter   pod     kubectl.containers  -- >kubectl get pods --context $ctx -n $ns $pod -o go-template --template='{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'
    bindkey l       pod     preview     -- kubectl logs -f --context $ctx -n $ns $pod
    bindkey d       pod                 -- ! kubectl describe pod --context $ctx -n $ns $pod | bat
    bindkey e       pod                 -- !kubectl exec -ti --context $ctx -n $ns $pod -- bash
    bindkey S-d     pod                 -- ?!kubectl delete pod --context $ctx -n $ns $pod

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end

mode kubectl.containers
    annotate match container -- kubectl get pods $pod --context $ctx -n $ns -o go-template --template='{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'

    bindkey enter   container           -- !kubectl exec -ti --context $ctx -n $ns $pod -c $container -- bash
    bindkey l       container preview   -- kubectl logs -f --context $ctx -n $ns $pod -c $container

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end

mode kubectl.secrets
    annotate match secret -- kubectl get secrets --context $ctx -n $ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
    bindkey enter   secret   kubectl.secretKeys -- >kubectl --context $ctx -n $ns get secret $secret -o json | jq -r '.data | keys[]'
    bindkey d       secret   preview    -- kubectl --context $ctx -n $ns get secret $secret -o json

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end

mode kubectl.secretKeys
    annotate match key -- kubectl --context $ctx -n $ns get secret $secret -o json | jq -r '.data | keys[]'
    bindkey enter  key preview -- >kubectl --context $ctx -n $ns get secret $secret -o json | jq -r ".data.$key" | base64 --decode

    bindkey ?        -- !sps vs $HOME/.config/rat/kubectl &
end
