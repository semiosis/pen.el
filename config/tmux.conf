# Help key is C-M-], which is \E^]
# infocmp -L1 | v +/help

set -g display-time 1
#set -g display-time 300

set -g allow-rename off

set -g buffer-limit 30
set -g set-titles on
set -g set-titles-string "tmux [host: #h, session: #S, title: #T]"
set -g renumber-windows on
set -g word-separators " -_@:=.;()[]/\\{}\"\',"

set -g history-limit 100000
# set -g default-shell '/bin/bash'
set -g default-shell '/root/.emacs.d/pen.el/scripts/tmux-shell'
set -g set-clipboard on
set-environment -g ENV "$HOME/.bashrc"
set -g default-terminal "screen-256color"
setenv -u -g COLUMNS
setenv -u -g LINES
set -g mouse on # tmux 2.3

set -g base-index 1
set -g status-interval 30
set -g status-left-length 40
set -g status-right-length 40

# set -g pane-border-bg black
# set -g pane-border-fg colour234
# set -g pane-active-border-bg default
# set -g pane-active-border-fg colour234
# set -g pane-active-border-bg colour234

set -g status-right ""
set -g status-left '[ #S ]  '
set -g mode-keys emacs # overrides EDITOR
set -s -g escape-time 100

set -g update-environment "TMUX_NOTES CWD TMUX_PROJECT PYTHONPATH PATH DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY" #LC_TYPE LANG PAGER TMUX

# set -g message-bg default
# set -g message-fg colour134
# set -g status-right-fg colour124
# set -g status-left-fg colour124
# set -g status-right-fg colour078
# set -g status-left-fg colour012

# # tmux 3.4
# set -g pane-active-border-style 'bg=colour234,fg=colour234'
# I have decided to switch to this. Now I can see the pane titles.
set -g pane-active-border-style 'bg=colour234,fg=black'
set -g pane-border-style 'bg=black,fg=colour234'
set -g message-style 'bg=default,fg=colour134'
set -g status-left-style 'bg=default,fg=colour012'
set -g status-right-style 'bg=default,fg=colour078'
set -g window-status-style 'bg=colour25,fg=color006'
# set -g window-status-current-style 'bg=colour25,fg=white'
set -g window-status-current-style 'reverse'
set -g popup-border-style 'bg=default,fg=colour012'

## I was getting this error on Pen.el startup with tmux next-3.4
#  /root/.emacs.d/host/pen.el/config/tmux.conf:61: no current window         [0/0]
# set pane-active-border-style 'bg=colour234,fg=colour234'
# set pane-border-style 'bg=black,fg=colour234'
# set message-style 'bg=default,fg=colour134'
# set status-left-style 'bg=default,fg=colour012'
# set status-right-style 'bg=default,fg=colour078'
# set window-status-style 'bg=colour25,fg=color006'
# # set window-status-current-style 'bg=colour25,fg=white'
# set window-status-current-style 'reverse'
# set popup-border-style 'bg=default,fg=colour012'

set -g status-bg colour025
# set status-bg colour025
set -g status-fg white
# set status-fg white

# It's best not to use pane_title because the titles are too verbose
set -g window-status-format         "#[fg=colour081]#I #[fg=colour075]#W #{=20:pane_title}"
set -g window-status-current-format "#[fg=colour081]#I #[fg=colour087]#W #{=20:pane_title}"

# set -g window-status-format         "#[fg=colour081]#I #[fg=colour075]#W"
# set -g window-status-current-format "#[fg=colour081]#I #[fg=colour087]#W"

# set window-status-format "#[fg=colour081]#I #[fg=colour075]#W"
# set window-status-current-format "#[fg=colour081]#I #[fg=colour087]#W"

# set -g status-bg black
# set -g window-status-format "#[fg=colour244]#I #[fg=colour240]#W"
# set -g window-status-current-format "#[fg=colour254]#I #[fg=colour134]#W"
# set -g window-status-format "#I #W"

setw -g other-pane-width 81
setw -g other-pane-height 30
setw -g clock-mode-colour colour234
setw -g clock-mode-style 24

# setw -g mode-bg colour25
# setw -g mode-fg colour254
# setw -g window-status-fg colour240
# setw -g window-status-current-fg white

setw -g alternate-screen on
setw -g word-separators ' -_@/()'
setw -g automatic-rename off
setw -g xterm-keys on
setw -g aggressive-resize on

set -g prefix "F1"

bind ! run 'pen-tm breakp'
bind M-! run -b 'pen-tm breakp -other'
bind M-b run -b 'pen-tm breakp -reserve'
bind M-B run -b 'pen-tm breakp -save'
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind F1 send-prefix #depth 2
bind -n F2 send-prefix #depth 2
bind -n F3 send F2 #depth 3
bind -n F4 send F3 #depth 4
bind -n F5 send F4 #depth 5
bind -n F6 send F5 #depth 6
bind -n F7 send F6 #depth 7
bind -n F8 send F7 #depth 8
bind -n F9 send F8 #depth 9
bind -n F10 send F9 #depth 10
bind -n F11 send F10 #depth 11
bind -n F12 send F11 #depth 12

bind i run -b "pen-tm copy-pane-name"
bind I run -b "pen-tm copy-pane-id"

bind K run "tmux detach-client -s \"$(tmux display-message -p '#{session_name}')\""

bind C-M-k send-keys "C-M-k"
bind -n C-M-k send-keys "Up"
bind C-M-j send-keys "C-M-j"
bind -n C-M-j send-keys "Down"
bind C-M-h send-keys "C-M-h"
bind -n C-M-h send-keys "Left"
bind C-M-l send-keys "C-M-l"
bind -n C-M-l send-keys "Right"
bind C-M-b send-keys "C-M-b"
bind -n C-M-b send-keys "END" # Can already use Fn-Right
bind C-M-y send-keys "C-M-y"
bind -n C-M-y send-keys "HOME" # Can already use Fn-Left
bind C-M-i send-keys "C-M-i"
bind -n C-M-i send-keys "IC" # Insert key. See xterm-278/xtermcap.c
bind C-M-u send-keys "C-M-u"
bind -n C-M-u send-keys "DC" # Delete key. See xterm-278/xtermcap.c
bind C-M-p send-keys "C-M-p"
bind -n C-M-p send-keys "Pageup"
bind C-M-n send-keys "C-M-n"
bind -n C-M-n send-keys "Pagedown"
bind C-M-o send-keys "C-M-o"
bind -n C-M-o send-keys "BSpace" # backspace

bind -n C-M-Up run "tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up"
bind -n C-M-Down run "tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down"
bind -n C-M-Left run "tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left"
bind -n C-M-Right run "tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right"

bind -n C-Up send-keys "up"
bind -n C-Down send-keys "down"
bind -n C-Left send-keys "left"
bind -n C-Right send-keys "right"

bind -n M-F3 run "pen-tm-xp"

bind M-F4 run "pen-tm xp"

bind -n M-F4 send M-F4

bind -n M-F5 run "pen-tm xp -u"

bind -n M-F6 send M-F6
bind -n M-F7 send M-F7
bind -n M-F8 send M-F8
bind -n M-F12 send M-F12
bind F1 send F1
bind F2 send F2
bind F3 send F3
bind F4 send F4
bind F5 send F5
bind F6 send F6
bind F7 send F7
bind F8 send F8
bind F9 send F9
bind F10 send F10
bind F11 send F11
bind F12 send F12

bind -n S-F1 send S-F1
bind -n S-F2 send S-F2
bind -n S-F3 send S-F3
bind -n S-F4 send S-F4
bind -n S-F5 send S-F5
bind -n S-F6 send S-F6
bind -n S-F7 send S-F7
bind -n S-F8 send S-F8
bind -n S-F9 send S-F9
bind -n S-F10 send S-F10
bind -n S-F11 send S-F11
bind -n S-F12 send S-F12
bind -n M-S-F1 send M-S-F1
bind -n M-S-F2 send M-S-F2
bind -n M-S-F3 send M-S-F3
bind -n M-S-F4 send M-S-F4
bind -n M-S-F5 send M-S-F5
bind -n M-S-F6 send M-S-F6
bind -n M-S-F7 send M-S-F7
bind -n M-S-F8 send M-S-F8
bind -n M-S-F9 send M-S-F9
bind -n M-S-F10 send S-F10
bind -n M-S-F11 send S-F11
bind -n M-S-F12 send S-F12
bind r run "pen-tm refresh"

bind e respawn-pane -k
bind '$' command-prompt "rename-session \"%%\""
bind ',' command-prompt "rename-window \"%%\""
bind 0 selectw -t :10 \; refresh
bind 1 selectw -t :1 \; refresh
bind 2 selectw -t :2 \; refresh
bind 3 selectw -t :3 \; refresh
bind 4 selectw -t :4 \; refresh
bind 5 selectw -t :5 \; refresh
bind 6 selectw -t :6 \; refresh
bind 7 selectw -t :7 \; refresh
bind 8 selectw -t :8 \; refresh
bind 9 selectw -t :9 \; refresh

# Dang! These are truly old bindings!
# bind P run -b "pen-tm -te -d spv -n notes.txt -fa e c sidenotes.org"
# bind E run -b "pen-tm -te -d nw -n notes.txt -fa e c notes.txt"

bind @ run -b "pen-tm sel localhost:glossary"

bind '#' run -b "pen-tm sel localhost:templates.sh"

# bind T run -b "pen-tm select-subsession"
bind T run -b "unbuffer pen-tm xt -p &"

bind t run -b "pen-tm subsession"

bind q display-panes \; run -b "pen-tm -d pane-status -nw"
bind Q run -b "pen-tm -d -t sps \"sh-pane \$(tpn)\""

bind m last-window \; refresh

# -N removes the preview in tmux 3.4
bind s choose-session -N \; refresh

# Sadly choosewindow just isn't the same
# I made my own
# bind w choose-window -N \; refresh
bind w run -b 'unbuffer toggle-tmux-popup -b double -bg 004 -fg 049 -nos -w 30% -h 90% -x L hide-cursor tmux-choose-window -t "$(tmux display -pF "#{session_name}")"'

# bind s choose-session \; refresh
# bind w choose-window \; refresh

bind M-W neww -n "ws document..." "tmux-ws-document.sh"

bind '\' run -b "pen-tm edit-file"

bind PgUp neww
bind PgDn neww
bind Home neww
bind End neww

bind -r C-k resize-pane -U 2
bind -r C-j resize-pane -D 2
bind -r C-h resize-pane -L 4
bind -r C-l resize-pane -R 4
bind -r M-Up resize-pane -U 10
bind -r M-Down resize-pane -D 10
bind -r M-Left resize-pane -L 10
bind -r M-Right resize-pane -R 10
bind -r o select-pane -t :.+

bind W command-prompt -I 'Be careful ' -p 'warning:' "neww -n 'Warning' \"echo '%1'|less\"; setw window-status-format '#[fg=colour244]#I #F#[fg=colour226]#W'"
bind X unlinkw

# bind G neww 'magit'
bind G neww 'counsel-google'

bind -r S run 'pen-tm-swap-pane-from-last-window'
bind -r M-S run 'pen-tm-swap-pane-from-last-window -s'
bind -r O run 'pen-tm-swap-last-pane-this-window'
bind -r M-O run 'pen-tm-swap-last-pane-this-window'

bind -n M-Q new-window -n "sh-general" "stty stop undef; stty start undef; sh-general"
bind - new-window -n "sh-general" "stty stop undef; stty start undef; sh-general"
bind M-L run -b "pen-tm copy-previous-line"

# unbind -T emacs-copy M-R
# bind -T emacs-copy M-e bottom-line
# bind -T emacs-copy M-t top-line

# Have to sleep after C-l because bash needs to clear before tmux clears
bind -n C-l send "C-l" \; run-shell "sleep .1s" \; clear-history

bind \; command-prompt
bind : last-pane
bind ` split-window -v pen-sh-tmux
bind '~' run "pen-tm wolfram-alpha"

bind M-w run -b "pen-tm copy-pane-command"
bind M-c run -b "pen-tm copy-pane-command -nc"
bind '[' copy-mode
bind v run "pen-tm xv"
bind c run "pen-tm xc"
bind C-n run "pen-tm pastekeys"
bind C-v run -b "pen-tm remote-xclip -r"
bind Z run -b "pen-tm typeclip -j"
bind z run -b "pen-tm edit-paste"
bind M-e run -b "pen-tm editsession"
bind C-e neww "pen-tm nw 'tm editbuffer'"
bind -n KPEnter send-keys "Enter"
bind F run -b "unbuffer tpop find-text-in-terminals &>/dev/null"

# bind > neww -n find-content "printf -- \"%s\\n\" \"search-recent-files-for-something.sh \" | rtcmd"
bind E neww -n find-content "zrepl -E 'mru | ead'"
bind > neww -n pen.yaml "e ~/.pen/pen.yaml"

bind M-i run -b "pen-tm -d -te nw -n mru» -fa tm mru"

bind f run -b "pen-tm find-window-from-session -no-activate"
bind -r & run 'tmux-kill-window.sh'
bind M-6 run -b "pen-tm kill-subsessions"
bind M-7 run -b "pen-tm kill-subsession"
bind M-h run -b "pen-tm base-here"
bind M-l run -b "pen-tm base-localhost"
# bind M-t run -b "pen-tm omni-session"
unbind -n C-S-Left
unbind -n C-S-Right
bind -r C-S-Left swap-window -t -1
bind -r C-S-Right swap-window -t +1
bind ? run -b "pen-tm list-keybindings"

bind M-/ neww "show-vim-mappings"

bind + run 'tmux neww -n "#W" "#{pane_start_command}"'

set -s terminal-overrides '*:kf22=\E[21;2~,*:kf23=\E[23;2~,*:kf24=\E[24;2~'

set -ag terminal-overrides ',screen*:cvvis=\E[34l\E[?25h'

bind -n MouseDown2Status send-keys -M
bind -n MouseUp2Status send-keys -M
bind -n MouseDrag2Status send-keys -M
bind -n MouseDown3Status send-keys -M
bind -n MouseUp3Status send-keys -M
bind -n MouseDrag3Status send-keys -M
bind -n WheelUpStatus send-keys -M
bind -n WheelDownStatus send-keys -M

bind -n C-MouseDown2Status send-keys -M
bind -n C-MouseUp2Status send-keys -M
bind -n C-MouseDrag2Status send-keys -M
bind -n C-MouseDown3Status send-keys -M
bind -n C-MouseUp3Status send-keys -M
bind -n C-MouseDrag3Status send-keys -M
bind -n C-WheelUpStatus send-keys -M
bind -n C-WheelDownStatus send-keys -M

bind -n S-MouseDown2Status send-keys -M
bind -n S-MouseUp2Status send-keys -M
bind -n S-MouseDrag2Status send-keys -M
bind -n S-MouseDown3Status send-keys -M
bind -n S-MouseUp3Status send-keys -M
bind -n S-MouseDrag3Status send-keys -M
bind -n S-WheelUpStatus send-keys -M
bind -n S-WheelDownStatus send-keys -M

bind '"' run -b "pen-tm -f -d sph"
bind "M-'" run -b "pen-tm -f -d sph -tpwd"
bind 'M-"' run -b "pen-tm -f -d spv -tpwd"
bind "'" run -b "pen-tm open-files"
bind M-q run -b "pen-tm open-dirs"

bind M-H run -b "pen-tm -f -d sph"
bind '%' run -b "pen-tm -f -d spv"
bind y run -b "pen-tm -f -d nw"
bind x run -b 'pen-tm -f kp'
bind -r 'p' run -b 'pen-tm prw'
bind -r 'n' run -b 'pen-tm nxw'

bind Space run -b "pen-tm -d sps -nv slmenu"

bind = run 'pen-tm lw'
bind n next-window
bind p previous-window

# bind M-g run -b 'pen-tm goto'
# bind M-g run -b 'pen-tm -d sps guru'
# I need to split later (i.e. from guru) because guru first scrapes the tmux pane
bind M-g run -b 'guru -sps -win'

bind L run -b "pen-tm lasturl"

bind g run -b "pen-tm sel localhost_ws_google:google.txt || unbuffer nw orspv $NOTES/google.org"
bind -n M-F11 run -b "pen-tm sel localhost:bpython3"
bind B run -b "pen-tm sel localhost:bpython3"

# bind H run -b "pen-tm command-history"
bind H neww "htop"

# Keep these unboud
unbind b
unbind -n b

bind R run -b "pen-tm recent-isues"

bind M-m neww 'magit'

unbind -n C-M-e

bind -n C-M-e run "pen-tm saykeyunbound C-M-e M-T"
bind -n C-M-q run "pen-tm scrape-things"

bind C-r run -b     " unbuffer pen-tm -te -d edit-x-clipboard "
bind Enter run -b   " unbuffer pen-tm -te -d edit-x-clipboard "
bind KPEnter run -b " unbuffer pen-tm -te -d edit-x-clipboard "

bind M run -b   " pen-tm -te -d new-script     "
bind N run -b   " pen-tm -te -d new-file       "
bind M-d run -b " pen-tm -te -d split-and-pipe "
bind C-p run -b " pen-tm -te -d pipec"
bind * run -b   " pen-tm -te -d free-resources "

unbind -n C-M-m

bind A run -b                 " pen-tm -te -d capture -tty -ansi                                              "
bind Y run -b                 " pen-tm -te -d capture -tty                                                    "
bind M-A run -b               " pen-tm -te -d capture -tty -ansi -history                                     "
bind a last-window \; refresh
bind M-a run -b               " pen-tm -te -d capture -tty -clean -nohist -editor 'v -nc'                     "

bind -n M-F9 run -b "pen-tm -te -d capture -tty -clean -editor e -wrap"

bind -n M-F10 run -b "pen-tm -te -d capture -tty -clean -editor 'sp c' -session c "

bind M-f run -b "pen-tm scrapep" # filters
bind M-F run -b "pen-tm scrape" # filters
bind M-u run -b "pen-tm -te -d capture -tty -clean -editor 'e -D default c' -filter" # all filters into emacs
bind M-v run -b "adn pen-tm -te -d capture -tty -clean -history" # not really needed anymore. Can just do an A then a C-M-d
bind M-D run "pen-tm -te -d capture -tty -clean -nohistory" # ok, so we can't use C-M-d to mean C-d in vim but that's good because we already broke C-M-u.

bind M-V run -b "pen-tm-capture-pane-view-vs"

bind M-s run -b "pen-tm -te -d capture -tty -wrap -clean -editor 'sp'" # -b is bottom of emacs

bind M-3 select-layout even-horizontal
bind M-1 run -b "pen-tm move-to-start"

bind M-0 run -b "pen-tm move-to-end"

bind -n C-M-e run " pen-tm saykeyunbound C-M-e 'New key M-T' "
bind V run        " pen-tm saykeyunbound V 'Key is free'     "
bind R run        " pen-tm saykeyunbound V 'Key is free'     "

bind -n F9 run -b " unbuffer pen-tm ranger  "
bind u run -b     " pen-tm -d ranger       "
bind U run -b     " pen-tm -d ranger -dump "

bind M-Space run 'pen-tm nextlayout'
bind '*' run -b "pen-tm urls-file"
bind '(' run -b "pen-tm dir"
bind ')' run -b "pen-tm src"

bind -n C-M-r run -b "pen-tm -f -d nw fz-s"
bind M-R run -b "pen-tm -f -d nw fz-s"

bind J run -b "pen-tm scrape-paths"
# bind M-r run -b "pen-tm project-edit"
bind M-r run -b "tm-run-prompt-function"
# bind / run -b "pen-tm man"
bind / run -b "sps counsel-google"
bind -n C-M-v run "pen-tm visor"
bind C-s run "pen-tm search"
bind C-k run "pen-tm easymotion"
bind M-k run "pen-tm avy"
bind M-K run "pen-tm kill-other"
# bind M-j run "pen-tm nv-wrap"

bind BSpace run -b "pen-tm -d shortcuts" # backspace
bind M-BSpace run -b "pen-tm open-dirs" # backspace
bind D run -b "pen-tm directories"

bind -n M-T run -b "pen-tm -f -d -te -tout -u nw \"tm config\""

bind M-, run -b "pen-tm ncmd"

bind M-x run -b "pen-asciinema-end-session"

bind M-Y run -b "pen-tm yank-line"
bind C-Y run -b "pen-tm yank-line -from"
bind M-y new-window sh-yank

bind '.' run -b "pen-tm -d sps sh-clipboard"
bind -n C-M-w run "pen-tm scrape-filter" # scrape-filter is localhost: only. I need a pane-only one.
bind < run "pen-tm scrapep" # this is pane-only. Hopfully C-M-q is OK. I may need this somewhere

# bind -n C-M-f run -b "pen-tm-em-click"
bind -n C-M-R run -b "pen-tm-em-click"
bind M-j run -b "pen-tm-em-click"

bind -n C-M-x run -b "pen-tm click"

bind -n C-M-z run -b "pen-tm mouseclick -x -r"

set-option -sa terminal-overrides ",xterm*:Tc,*:indn@"

bind -n MouseDown1Pane select-pane -t=\; send-keys -M

# unbind -n MouseDown3Pane
bind -n MouseDown3Pane send-keys -M MouseDown3Pane

bind 'M-$' run -b "pen-tm-sh-tmux-actions &>/dev/null"

bind M-t run -b "tm-window-ctermify"
# bind M-n run -b "tm-window-nvtermify"
bind M-n run -b "tm-window-nvt"
# bind M-n run -b "tm-window-nvtermify"
bind M-N run -b "tm-window-nvt2ermify"
# bind M-m run -b "tm-window-etermify"
bind M-m run -b "tm-window-ctermify"
bind M-T run -b "tm-window-vt100ify"

# set-hook -g after-new-session 'if -F "#{==:#{session_name},popup}" "source ~/.tmux.conf.popup" "source ~/.tmux.conf.main"'
# set-hook -g after-new-window 'if -F "#{==:#{session_name},popup}" "source ~/.tmux.conf.popup" "source ~/.tmux.conf.main"'

# For the hidden human tmux session
# Sadly, this isn't reliable enough. I may need to use a shell script.
set-hook -g after-new-session 'if -F "#{==:#{session_name},human}" "source ~/.tmux.conf.human" "source ~/.tmux.conf.main"'
set-hook -g after-new-window 'if -F "#{==:#{session_name},human}" "source ~/.tmux.conf.human" "source ~/.tmux.conf.main"'

# This is to refresh panes (particularly emacs) which may have resized
# However, when using pen for vim (in insert mode), I don't want C-l to be inserted
set-hook -g pane-exited "run -b pen-send-cl-maybe"

# TODO Make C-c cancel choose-session, as C-g does
bind-key -T root C-c if -F "#{==:#{pane_mode},tree-mode}" "send C-g" "send C-c"

# bind-key -T root C-c if -F "#{==:#{pane_mode},tree-mode}" "send-keys C-c" "send-keys C-c"
# bind-key -T root  j if -F "#{==:#{pane_mode},tree-mode}" "send h" "send j"
# bind-key -T root  k if -F "#{==:#{pane_mode},tree-mode}" "send j" "send k"
# bind-key -T root  l if -F "#{==:#{pane_mode},tree-mode}" "send k" "send l"
# bind-key -T root \; if -F "#{==:#{pane_mode},tree-mode}" "send-keys \;" "send-keys \;"
unbind-key -T root j
unbind-key -T root k
unbind-key -T root l
unbind-key -T root \;

# set -g pane-border-status top
set -g pane-border-status off
# set -g pane-border-status bottom
# #{pane_current_command} - unreliable
# set -g pane-border-format "#{pane_index} [#{cursor_x},#{cursor_y}] #{pane_tty} #{pane_title}"
set -g pane-border-format "#{pane_index} [#{cursor_x},#{cursor_y}] #{pane_tty}"
