# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create the file
# ~/.config/ranger/rc.conf and add your custom commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================


# I think meta bindings do not work because they are 2 bytes and input
# into ranger is unbuffered. Try pasting into the command line.


# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden false

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# Which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/ranger-scope
# set preview_script /dev/null

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images true

# Be aware of version control systems and display information.
set vcs_aware false
# This actually does slow it right down. But it's not noticable when
# running the source-code version of ranger.py. Can't afford either of
# them.
#set vcs_aware true
set vcs_aware false

# State of the three backends git, hg, bzr. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled

# Use one of the supported image preview protocols
set preview_images true

# set preview_images true
# set preview_images_method w3m

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
set preview_images_method w3m

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized
# set colorscheme snow
set colorscheme solarized

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
# set status_bar_on_top false
set status_bar_on_top true

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns?
set draw_borders false
# set draw_borders true

# Display the directory name in tabs?
set dirname_in_tabs false

# Enable the mouse support?
# set mouse_enabled true
# # It's annoying to click on it
set mouse_enabled false

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar false

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window?
set update_title true

# Set the title to "ranger" in the tmux program?
set update_tmux_title false

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar true

# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticable when ranger lags)
# # It's not noticable, in my experience. And often is misleading
set flushinput true
# set flushinput false

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
#set show_cursor false
set show_cursor true

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive false
set sort_directories_first true
set sort_unicode false

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
#set xterm_alt_key false
set xterm_alt_key true

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# setlocal path=~/Screenshots sort mtime
# setlocal path=~/Screenshots sort_reverse False

# ===================================================================
# == Command Aliases in the Console
# ===================================================================

alias e    edit
alias q    quit
alias q!   quitall
alias qa   quitall
alias qall quitall
alias setl setlocal

alias filter     scout -prt
alias find       scout -aeit
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefiklst

# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic
map     Q quit!
map     q quit
copymap q ZZ ZQ

map R     reload_cwd
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal

map i display_file
map ? help
map W display_log
map w taskview_open
# map S shell $SHELL

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
# map s  console shell%space
map r  chain draw_possible_programs; console open_with%space
map F  console find%space
map cd console cd%space
map f  console filter%space

map FF  flat -1
map F0  flat 0
map FN  flat 0
map FZ  flat 0
map F1  flat 1
map F!  flat 1
map FO  flat 1
map F2  flat 2
map F@  flat 2
map FT  flat 2
map F3  flat 3
map F#  flat 3
map FR  flat 3
map F4  flat 4
map F$  flat 4
map FU  flat 4

# Change the line mode
map Mf linemode filename
map Mi linemode fileinfo
map Mp linemode permissions
map Mt linemode metatitle

# Tagging / Marking
# map t       tag_toggle
map ut      tag_remove
map \"<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
map <Alt>u      mark_files all=True val=False
# map V       toggle_visual_mode
# map uV      toggle_visual_mode reverse=True

# Same as in emacs
map <F49> exit
# ;; (define-key my-mode-map (kbd "<M-f1>") #'revert-and-quit-emacsclient)
# ;; (define-key my-mode-map (kbd "<f49>") #'revert-and-quit-emacsclient)
 
# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
map <F10> exit

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
#map <DELETE>   console delete
# map <INSERT>   console touch%space
# map <INSERT>   shell -p sps cr
map <INSERT>   shell sps cr

# VIM-like
copymap <UP>       k
copymap <DOWN>     j
copymap <UP>       <Alt><C-k>
copymap <DOWN>     <Alt><C-j>
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <LEFT>       <Alt><C-h>
copymap <RIGHT>     <Alt><C-l>
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>
copymap <PAGEDOWN> <Alt><C-n>
copymap <PAGEUP>   <Alt><C-p>

map J  move down=0.5  pages=True
map K  move up=0.5    pages=True
copymap J <C-D>
copymap K <C-U>

# Jumping around
map H     history_go -1
map L     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse

map gh cd ~
# map ge cd /etc
map gu cd /usr
# map gd cd /dev
# map gl cd -r .
# map gL cd -r %f
map go cd /opt
map gv cd /var
map gm cd /media
map gM cd /mnt
map gs cd /srv
# map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /
map g? cd /usr/share/doc/ranger

# External Programs
# map E edit
# map e edit
map e open_with vim
map P open_with fehdf
# map P open_with feh

# map du shell -p du --max-depth=1 -h --apparent-size

# I did this to fix clipboard etc. - put the shell bindings
# inside of bash -c '' because it's as if pipe was ignored
# %s/^\(\s*map.*shell -f \)\(.*\)/\1bash -c '\2'/

map di shell -f bash -c 'pen-tm -f -d -te sps -c %d "dirinfo . | xsv table | vs"'
map du shell -f bash -c 'pen-tm -f -d -te sps -c %d "ncdu ."'
# map E shell -f pen-tm -f -d -te sps -c %d "show-extensions-below | xsv table | less -lv"
map E shell -f bash -c 'pen-tm -f -d -te sps -c %d "show-extensions-below | xsv table | pager -lv"'
map dE shell -f bash -c 'pen-tm -f -d -te sps -c %d "show-extensions-below | xsv table | pager -lv"'
map dU shell -p rpt -d 5 bash -c "du --max-depth=1 -h --apparent-size | sort -rh"

map gr shell -f bash -c 'pen-tm -f -d -te sps -c %d "x -s \"eack \" -i"'
map ge shell -f bash -c 'pen-tm -f -d -te sps -c %d "x -s \"eack \" -i"'
map gd shell -f bash -c 'pen-tm -f -d -te sps -c %d "x -s \"dack \" -i"'
map gl shell -f bash -c 'pen-tm -f -d -te sps -c %d "x -s \"lack \" -i"'

# map df shell -f pen-tm -f -d -te sps -pakfk q -c %d "df -h"
map df shell -f bash -c 'pen-tm -f -d -te sps -c %d "df -h | less -S"'

# This is a little dangerous. Oh well.
# map <C-l> shell -f pen-tm -f -d -te rsp -c %d ranger
# sadly, this doesn't work. I need to extend open_with
# map <C-l> open_with "apply \"u dn | xa ranger\""
# This is not dangerous
# map <C-l> open_with udn-ranger
# map <C-l> open_with dn-ranger
# Keep C-l as refresh
# map <C-r> reset
# Annoyingly, C-j is linked to C-m
# map <C-j> open_with dn-ranger
# map <Alt>j open_with dn-ranger
# map <Alt>` open_with dn-ranger
# This is the best one
map <Alt>r open_with dn-ranger

# I should seriously make more alt bindings

# Deleting
    # delete paths
    map dp shell -f bash -c 'pl %s | r dp'

    # delete empty -- recursively
    map de shell -f bash -c 'pl %s | r de'

# Copying
    # yank test
    map yt shell -f bash -c 'echo %s | r yt'

    # Append path
    # It's just better as ya
    map ya shell -f bash -c 'pl %s | r yap'

    map Zr shell -f bash -c 'pl %s | tm -f -d -S -tout sps -c %d -xargs cr'
    map ZR shell -f bash -c 'pl %s | tm -f -d -S -tout sps -c %d -xargs ru'

    # why can't ranger find r?
    #
    # copy paths as-is
    map yp shell -f bash -c 'pl %s | r yp'
    map yl shell -f bash -c 'pl %s | r yl'
    map yP shell -f bash -c 'pl %s | r yP'
    # map YP shell -f pl %s | r YP # unminimised
    map yF shell -f bash -c 'pl %s | r yF'
    map yB shell -f bash -c 'pl %s | r yB'
    map yD shell -f bash -c 'pl %s | r yD'
    # map yp shell -f cat %z | r yp
    # map yp shell -f pen-tm -te nw "cat %z | xc"
    # map yp shell -f pen-tm -te -d nw "{ cat %z; printf -- '\0' } | xc"
    # map yp shell -f pl %z | pen-tm -S -tout nw v
    # map yp shell -f pl %s | pen-tm -S -tout nw v

    # yank git
    map yg shell -f bash -c 'pl %s | r yg'

    # copy paths realpaths
    map yr shell -f bash -c 'pl %s | r yr'

    # Simply copy the directory
    # map yd shell -d pl -n %d | mnm | tee >(xsel -i) | pen-tm -f sps "vim -"

    # # copy directories. convert files to parent directory
    # # Unless only one file is selected, then copy the parent directory
    map yd shell -f bash -c 'pl %s | r yd'

    # copy filenames. filter directories
    map yf shell -f bash -c 'pl %s | r yf'

    # copy basenames
    map yb shell -f bash -c 'pl %s | r yb'
    # copymap yf yb

# tmux
    map tp shell -f bash -c 'pl %s | r tp'
    map ts shell -f bash -c 'pl %s | r ts'
    map th shell -f bash -c 'pl %s | r th'

# Filesystem Operations
map =  chmod

map cw console rename%space
map a  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.basename)
map I  eval fm.open_console('rename ' + fm.thisfile.basename, position=7)

map pp paste
map po paste overwrite=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dD console delete

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove

map yy copy
map uy uncut
# map ya copy mode=add
map yr copy mode=remove

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
# map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search%space
map n  search_next
map N  search_next forward=False
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# Tabs
map <C-n>     tab_new ~
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map gt        tab_move 1
map gT        tab_move -1
map gn        tab_new ~
map gc        tab_close
map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# Sorting
map or toggle_option sort_reverse
map oz set sort=random
map od chain set sort=pathdate;  set sort_reverse=False
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oD chain set sort=pathdate;  set sort_reverse=True
map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size

# Settings
map zc    toggle_option collapse_preview
map zd    toggle_option sort_directories_first
map zh    toggle_option show_hidden
map <C-h> toggle_option show_hidden
map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled
map zp    toggle_option preview_files
map zP    toggle_option preview_directories
map zs    toggle_option sort_case_insensitive
map zu    toggle_option autoupdate_cumulative_size
map zv    toggle_option use_preview_script
map zf    console filter%space

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# I could have a hydra here or simply use ranger to create bindings
map gt shell -f bash -c 'pen-tm -t sps -c %d "tm git"'
# Faster than using the hydra. Use one of the commands from the hydra.
map gist shell -f bash -c 'pen-tm -t -f sps -c %d "tm gist"'

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>

# How to make these know the proper CWD?
# why, when I put zsh on the end does this not work

# map s shell -f pen-tm -t sps -pak zsh
# map S shell -f pen-tm -t sps -pak zsh
# map s shell -f pen-tm -t sps -pak "CWD=/ zsh"
# map S shell -f pen-tm -t sps -pak "CWD=/ zsh"
## Without the -d it will wait a little bit after quitting zsh

# %d is already quoted.
map s shell -f bash -c 'pen-tm -f -d -t sph -c %d "zsh"'
map S shell -f bash -c 'pen-tm -f -d -t spv -c %d "zsh"'
map <Alt>s shell -f bash -c 'pen-tm -f -d -t sph -c %d "zsh"'
map <Alt>S shell -f bash -c 'pen-tm -f -d -t spv -c %d "zsh"'

# free bindings
# map <Alt>h shell -f pen-tm -f -d -t spv -c %d "zsh"
# map <Alt>H shell -f pen-tm -f -d -t sph -c %d "zsh"

# Use this for history
# map H shell -f pen-tm -f -t sps -c %d "zsh"

map <Alt>w shell -f bash -c 'pen-tm -f -d -t sps -c %d "dired ."'
map <Alt>W shell -f bash -c 'pen-tm -f -d -t sps -c %d "dired -g ."'
map <Alt>R shell -f bash -c 'pen-tm -f -d -t sps -c %d "dired -g ."'

map tt shell -f bash -c 'r tree'
map T shell -f bash -c 'r tree'

# Use this to drag pdfs into emacs
map ZM shell -f bash -c 'nautilus %d'

# scope - open preview in vim
map <Alt>1 open_with tpreview

# macro
map F. shell -f bash -c 'tm-send-slow FFf'

# Keep undo. Just use s
# map u shell -f pen-tm -t -f sps ranger

# However this works. why?
# map U shell -f pen-tm -t -f sps "ranger -dump"
map U shell -f bash -c 'pen-tm -f -d -t sps -c %d "ranger -dump"'

# If I could only make meta-key bindings. ESC doesn't appear to work.
# map <M-q> exit
# map <Alt>q exit
map <Alt>q shell -f bash -c 'pen-tm -f -d -t sps -c %d "fzf-files"'

# map <Alt>m shell -f pen-tm -f -t sps -c %d "magit ."
map <Alt>m shell -f bash -c 'pen-tm -f -d -t sps -c %d "magit ."'

# These don't work.
# map <ESC>v open_with vim
# map <M-v> open_with vim
# map <Alt-v> open_with vim
# Meta key bindings appear to not work. They do! <Alt>
# map <M-v> open_with vim
# map <ESC>v open_with vim


# This works!
map <Alt>v open_with vim
map <Alt>V open_with vs
map <Alt>a open_with vs
map <Alt>e open_with sp
map <C-q> shell -f bash -c 'pen-tm -f -d -t sps -c %d "fzf-files"'
map <Alt>i shell -f bash -c 'pen-tm -f -d -t sps -c %d "cat | fzf"'
map <Alt>l shell -f bash -c 'pen-tm -f -d -t sps -c %d sh-general'
map <Alt>L open_with sh-ranger-lingo
map <Alt>Y open_with sh-ranger-yank
map <Alt>F open_with fzfit

map B shell -f bash -c 'pen-tm -f -d -t sps -args -c %d x -sh bash -e '$' -s "unset HISTFILE" -c m -i'

# map B open_with magit-blame

map Dv open_with vd
map DV open_with vd
map Dm open_with med
map DM open_with med

map <Alt>? shell -f bash -c 'pen-tm -f -d -t sps -c %d "zrepl -E 'ead '"'

# I think meta bindings do not work because they are 2 bytes and input
# into ranger is unbuffered. Try pasting into the command line.
