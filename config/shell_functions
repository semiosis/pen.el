# ohmyzsh set this
# unalias ls 2>/dev/null || :

# I removed df because I extended the script
# ls pwd df
for sn in which du env ifconfig route mount netstat; do
IFS= read -r -d '' shcode <<HEREDOC
    $sn() {
        (
        set -o pipefail
        command "$sn" "\$@" | pa -E vs
        )
    }
HEREDOC
eval "$shcode"
done

unalias ls
ls() {
    /bin/ls --color=tty -A -I ".git" -p "$@"
}

apply() {
    f="$1"
    shift

    for (( i = 1; i <= $#; i++ )); do
        eval ARG=\${$i}
        printf -- "%s" "$ARG" | eval "$f"
    done
}

gcd() {
    dir="$(gc "$1")"
    if test -d "$dir"; then
        cd "$dir"
    fi
}

mcd() {
  # mkdir -p "$1" && cd "$1";

  last_arg="${@: -1}"

  mkdir -p "$@" && cd "$last_arg";
}

mvd() {
  mv "$1" "$2" && cd "$2";
}

rfc() {
  cd `racket -l find-collection/run -- $@`
}

# interactive version
rfci() {
  cd `racket -l find-collection/run -- -i $@`
}

# https://stackoverflow.com/questions/12340846/bash-shell-script-to-find-the-closest-parent-directory-of-several-files
longest_common_prefix() {
    declare -a names
    declare -a parts
    declare i=0

    names=("$@")
    name="$1"
    while x=$(dirname "$name"); [ "$x" != "/" ]
    do
        parts[$i]="$x"
        i=$(($i + 1))
        name="$x"
    done

    for prefix in "${parts[@]}" /
    do
        for name in "${names[@]}"
        do
            if [ "${name#$prefix/}" = "${name}" ]
            then continue 2
            fi
        done
        echo "$prefix"
        break
    done
}

path_without_prefix() {
    local prefix="$1/"
    shift
    local arg
    for arg in "$@"
    do
        echo "${arg#$prefix}"
    done
}

install_shanepy_here() {
    # This installs to a venv if I have already sourced.

    ( cd $MYGIT/mullikine/shanepy; python setup.py build -b /tmp/shanepy install --record /tmp/files.txt; )
}

sactivate() {
    source env/bin/activate
}

snewenv() {
    snewenv3.5 "$@"
}

snewenv3.6() {
    python3.6 -m venv env
}

snewenv3.5() {
    python3.5 -m venv env
}

cd () {
    ret=0

    if test "$#" -eq 1 && { test -h "$1" || test -f "$1"; }
    then
        rp="$(realpath "$1")"
        if test -d "$rp"
        then
            cd "$rp"
        elif test -f "$rp"
        then
            dn="$(dirname "$rp")"
            cd "$dn"
        fi
    elif [[ "x$*" = "x..." ]]
    then
        cd ../..
    elif [[ "x$*" = "x...." ]]
    then
        cd ../../..
    elif [[ "x$*" = "x....." ]]
    then
        cd ../../..
    elif [[ "x$*" = "x......" ]]
    then
        cd ../../../..
    else
        if [ -z "$@" ]; then
            CWD="$HOME"
        else
            CWD="$@"
        fi
        # silence to stop vim gf complaining. can't be bothered finding the real reason
        # enable again
        builtin cd "$CWD"
        ret="$?"
        CWD="`pwd`"
    fi

    # . $HOME/scripts/libraries/when-cd.sh

    return "$ret"
}

set_terminal_title() {
    echo -en "\e]2;$@\a"
}

# Doesn't seem to work
get_title() {
    (
    set -e
    ss=`stty -g`; trap 'exit 11' INT QUIT TERM; trap 'stty "$ss"' EXIT
    e=`printf '\033'`; st=`printf '\234'`; t=
    stty -echo -icanon min 0 time "${2:-2}"
    printf "${1:-\033[21t}" > "`tty`"
    while c=`dd bs=1 count=1 2>/dev/null` && [ "$c" ]; do
            t="$t$c"
            case "$t" in
            $e*$e\\|$e*$st)
                    t=${t%$e\\}; t=${t%$st}; printf '%s\n' "${t#$e\][lL]}";
                    exit 0;;
            $e*);;
            *) break;;
            esac
    done
    printf %s "$t"; exit 1
    )
}

get_title_force() {
    get_title </dev/tty
}