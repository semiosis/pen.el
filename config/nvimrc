filetype plugin indent on
" syntax on

set mouse=a
silent! set ttymouse=xterm2
highlight Cursor gui=reverse guifg=NONE guibg=NONE
set notimeout
set nottimeout
if has('nvim')
    silent! set cmdheight=0
    set nonumber
else
    set nocscopeverbose
endif
set modelines=0 nomodeline
set guicursor=
set imsearch=0
set redrawtime=10000
set sessionoptions-=options
set nowarn
set nolinebreak
set encoding=utf-8
set fileencodings=ucs-bom,utf-8
set nocompatible
set listchars=nbsp:¬¨,tab:>-
set list
" so it works:
au VimEnter * set list
" set cursorline
set diffopt+=vertical
set isk+=√©
" this allows filename completion with spaces. however, it also means spaces before the path name mess it up
set isf+=32
set isf+=\*
set isf+={
set isf+=}
set isf+=(
set isf+=)
set isf+=[
set isf+=]
set isf+=:
set isf+=;
set isf+=\\
set isf+=\?
set isf+=#
set isf+=%
" @ sign doesn't appar to work for cfile
" @re
" echom expand('<cfile>')
set isf+=@
" add ampersand to filename selection
" ASCII number
"set isf+=38
" add questionmark to filename selection for urls
set isf+=63
" add ampersand ( use ascii command line  to work these out )
set isf+=38
silent! set norelativenumber
" this stops commands like :grep outputting to the shell
"set relativenumber
set shellpipe=&>
set maxmempattern=2000
set switchbuf=usetab
" this means that F7 toggles paste in input mode as well as normal mode
if !has('nvim')
    set pastetoggle=<F7>
endif
" doesn't work unless binary is set (which is an annoying predicament)
set nostartofline
set noeol
set hidden
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set lazyredraw
set expandtab
set formatoptions-=t
au BufEnter * set formatoptions-=cro
set history=50
" set nohlsearch
set hlsearch
set ignorecase smartcase
set incsearch
silent! set ls=2
set nobackup
set nomousehide
set nowrap
set vb t_vb=
set novisualbell
set scrolloff=5
set sidescrolloff=12
set shiftwidth=4
set shortmess+=r
set shortmess+=F
set showmode
set showcmd
set showtabline=0
set sm
" spellfile must end in ".{encoding}.add".
"set spellfile=$HOME/notes/ws/vim/spellfile.utf-8.add
set smartcase
set smartindent
set copyindent
set preserveindent
set smarttab
set splitright
set tabstop=4
silent! set nomodelineeexpr " disable modelineexpr if it's available
" set nomle
set tags=~/.tags
set notitle

" I couldn't get this going:
" It works fine on nvim, but not vim
set title
if ! has('nvim')
    " But here is a workaround. It doesn't reset the title string on quit though
    silent! !echo -en "\033]0;vim\a"
    autocmd BufEnter * silent! !echo -en "\033]0;v %:t\a"
else
    let &titlestring = 'YO'
endif

" setting virtualedit to onemore fixes the ‚Äòcw‚Äô bug for words at end of
" file
"set virtualedit=onemore
set virtualedit=all
if &term == "xterm"
  set title
endif
" This disables automatic line breaking
set textwidth=0
set visualbell t_vb=
if version > 720
    set undoreload=0
endif
set matchpairs+=<:>
set matchpairs+=‚Äò:‚Äô
set matchpairs+=‚Äú:‚Äù
set thesaurus+=~/.vim/mthes10/thesaurus.txt
set completeopt=longest,menuone
" vim command-line autocomplete, not regular autocomplete
set wildmenu
set wildmode=list:longest,full
" where swap files go now
set noswapfile " Swap is disabled. Using git anyway.
"swap messages are super annoying
"set swapfile
" Vim is scaring me by deleting files.
set nofixendofline

" This should be default
set autochdir

" set backupdir=/dev/shm/var/tmp/shane/vim
" set directory=/dev/shm/var/tmp/shane/vim
" set undodir=/dev/shm/var/tmp/shane/vim
set foldcolumn=0 " margin, gutter

if ! has('nvim')
    call pathogen#infect()
    if isdirectory("~/.pen/vim-bundles/")
        call pathogen#infect("~/.pen/vim-bundles/{}")
    elseif isdirectory("~/.vim/bundle")
        call pathogen#infect("~/.vim/bundle/{}")
    elseif isdirectory("~/.emacs.d/host/pen.el/config/vim/bundle")
        call pathogen#infect("~/.emacs.d/host/pen.el/config/vim/bundle/{}")
    endif
endif

if has('nvim')
    set ls=0

    set mouse=a
endif

""" NERDCommenter
"let NERDCreateDefaultMappings=0 " disable default mappings
let NERDMenuMode=0              " disable menu
let NERDSpaceDelims=1           " place spaces after comment chars
let NERDDefaultNesting=0        " don't recomment commented lines

xmap # <Plug>NERDCommenterToggle
nmap # <Plug>NERDCommenterToggle

set foldexpr=FoldBrace()
function! FoldBrace()
  if getline(v:lnum+1)[0] == '{'
    return '>1'
  endif
  if getline(v:lnum)[0] == '}'
    return '<1'
  endif
  return foldlevel(v:lnum-1)
endfunction

function! ToggleKeymap()
    if &keymap == ""
        set keymap=dvorak
        set imsearch=0
        echom "dvorak"
    elseif &keymap == "dvorak"
        set keymap=colemak
        set imsearch=0
        echom "colemak"
    elseif &keymap == "colemak"
        set keymap=dvorak-german
        set imsearch=0
        echom "dvorak-german"
    else
        set keymap=
        set iminsert=0
        echom "qwerty"
    endif
endfunction

set keymap=
silent! call ToggleKeymap()

" Hacky solution to dvorak issue inside select mode
smap : <C-h>S

fun! GetCharDvorak()
    return system('dvorak', nr2char(getchar()))
endf

" SUPER IMPORTANT
function! FindChar(mode, count)
    if a:mode ==# 'v'
        normal! gv
    endif

    let c = escape( GetCharDvorak(), "^.*$~")

    let @/=c

    let i=count
    if ! i > 0
        let i=1
    endif
    for i in range(1, i)
        let match = search(c)
    endfor
endfunction

nnoremap f :call FindChar('n', v:count1)<CR>
xnoremap f :<C-u>call FindChar('v', v:count1)<CR>

" SUPER IMPORTANT
function! FindCharBack(mode, count)
    if a:mode ==# 'v'
        normal! gv
    endif

    let c = escape( GetCharDvorak(), "^.*$~")

    let @/=c

    let i=count
    if ! i > 0
        let i=1
    endif
    for i in range(1, i)
        let match = search(c, 'b')
    endfor
endfunction

nnoremap F :call FindCharBack('n', v:count1)<CR>
xnoremap F :<C-u>call FindCharBack('v', v:count1)<CR>

command! K call ToggleKeymap() " This is the one I should use
command! TK call ToggleKeymap()

function! EraseBadWhitespace()
    EraseBadWhitespace
endfunction

" extra digraphs
" sp +/"extra digraphs" "$EMACSD/config/my-evil.el"
digr ZZ 8484
digr NN 8469
digr RR 8477
" looking glass
digr lg 128269
digr sy 129680
" huggingface
digr hf 129303
" spacy (ringed planet)
digr sy 129680
" It appears as though this was already set
digr    0160
" put this after a character to use the 'combining macron'
digr ^_ 0772
" dotted circle
digr .o 9676
" entails
digr \|= 8871
" infers
digr \|- 8866
" mapselementto
digr \|> 8614
" ùë•
digr xm 119909
" ùëñ
digr im 119894
" îíØ
digr jn 83119
" ‚áå
digr rv 8652
" üñä
digr pn 128394
" ‚öî
digr sw 9876
" üçì
digr st 127827
" üí°
digr lb 128161
" ‡øã
digr sf 4043
" üêà
digr ca 128008
" üëç
digr li 128077
" üëé Can't use dl because it's for down-left
digr DL 128078
" ‚òï
digr co 9749
" ¬≥
digr S3 179
" ¬≤
digr S2 178
" ¬π - already works
" digr S1 185
" ‚Å¥ - already works
" digr S4 8308
" ‚ÇÑ
digr S4 8324


function! Q(string)
    return system('q', a:string)
endf

function! RTCmdSetup(cmd)
    exe("autocmd TextChanged * silent! call system(".Q(a:cmd).", GetBufferContents())")
    exe("autocmd TextChangedI * silent! call system(".Q(a:cmd).", GetBufferContents())")
endfunction

fun! StartAppend()
    startinsert
    call cursor( line('.'), col('.') + 1)
endf
command! StartAppend call StartAppend()




hi Normal       ctermfg=60

" Will work with zsh but not emacs
" set clipboard=unnamed

" Will work with emacs but not zsh
" unnamedplus seems to work better for copying around
" and to the host 27.11.24
set clipboard=unnamedplus

" if !has('nvim')
"     set clipboard=unnamedplus
" else
"     set clipboard=unnamed
" endif
fun! QuitNvim(...)
    q!
endf
fun! TermAndQuit(...)
    let s:cmd = get(a:, 1, "TERM=vt100 tmux attach -t localhost")
    let s:callbacks = {
                \ 'on_exit': function('QuitNvim')
                \ }
    let jobid = termopen(s:cmd, s:callbacks)
endf
" set ls=0
set mouse=a
hi morediscrete cterm=NONE ctermfg=236 ctermbg=NONE

source ~/syntax.vim

" call NumberSyntax()
" call GeneralSyntax()

" This works better:
" windo silent! call GeneralSyntax()|au BufEnter * call GeneralSyntax()

tnoremap <C-@> <C-Space>
tmap <LeftMouse> <LeftMouse>
" tmap <C-LeftMouse> <C-LeftMouse>
" It maps correctly, but can't SEND C-LeftMouse
" tmap <C-LeftMouse> :echom 'Foo'<CR>
" The 16; is the bit that is the C-
" The rest is the location
tmap <C-LeftMouse> [<16;1;7M
" That's all that matters for Pen.el because the Right Click Menu doesn't care about
" The cursor click position
" tmap <RightMouse> <RightMouse>
tmap <RightMouse> [<16;1;7M
tmap <C-M-O> <BS>
tmap <S-Up> [1;2A
tmap <S-Down> [1;2B
tmap <S-Right> [1;2C
tmap <S-Left> [1;2D
tmap <M-Up> [1;3A
tmap <M-Down> [1;3B
tmap <M-Right> [1;3C
tmap <M-Left> [1;3D
tmap <M-S-Up> [1;4A
tmap <M-S-Down> [1;4B
tmap <M-S-Right> [1;4C
tmap <M-S-Left> [1;4D
tmap <C-Up> [1;5A
tmap <C-Down> [1;5B
tmap <C-Right> [1;5C
tmap <C-Left> [1;5D
tmap <C-S-Up> [1;6A
tmap <C-S-Down> [1;6B
tmap <C-S-Right> [1;6C
tmap <C-S-Left> [1;6D
tmap <M-C-Up> [1;7A
tmap <M-C-Down> [1;7B
tmap <M-C-Right> [1;7C
tmap <M-C-Left> [1;7D
tmap <M-C-S-Up> [1;8A
tmap <M-C-S-Down> [1;8B
tmap <M-C-S-Right> [1;8C
tmap <M-C-S-Left> [1;8D
tmap <F1> OP
tmap <S-F1> [1;2P
tmap <F1> [1;3P
tmap <M-F1> [1;9P
tmap <M-F1> [1;3P
tmap <S-M-F1> [1;4P
tmap <C-F1> [1;5P
tmap <C-S-F1> [1;6P
tmap <C-S-M-F1> [1;8P
tmap <F2> OQ
tmap <S-F2> [1;2Q
tmap <S-F2> [26~
tmap <F2> [1;3Q
tmap <M-F2> [1;3Q
tmap <S-M-F2> [1;4Q
tmap <C-F2> [1;5Q
tmap <C-S-M-F2> [1;8Q
tmap <F3> OR
tmap <S-F3> [1;2R
tmap <F3> [1;3R
tmap <M-F3> [1;3R
tmap <S-M-F3> [1;4R
tmap <C-F3> [1;5R
tmap <C-S-M-F3> [1;8R
tmap <F4> OS
tmap <S-F4> [1;2S
tmap <F4> [1;3S
tmap <M-F4> [1;3S
tmap <S-M-F4> [1;4S
tmap <C-F4> [1;5S
tmap <S-M-F4> [1;8S
tmap <F5> [15~
tmap <S-F5> [15;2~
tmap <F15> [15;2~
tmap <F5> [15;3~
tmap <M-F5> [15;3~
tmap <S-M-F5> [15;4~
tmap <C-F5> [15;5~
tmap <C-S-M-F5> [15;8~
tmap <F6> [17~
tmap <F16> [17;2~
tmap <S-F6> [17;2~
tmap <F6> [17;3~
tmap <M-F6> [17;3~
tmap <S-M-F6> [17;4~
tmap <C-F6> [17;5~
tmap <C-S-M-F6> [17;8~
tmap <F7> [18~
tmap <F17> [18;2~
tmap <S-F7> [18;2~
tmap <F7> [18;3~
tmap <M-F7> [18;3~
tmap <S-M-F7> [18;4~
tmap <C-F7> [18;5~
tmap <C-S-M-F7> [18;8~
tmap <F8> [19~
tmap <F18> [19;2~
tmap <S-F8> [19;2~
tmap <F8> [19;3~
tmap <M-F8> [19;3~
tmap <S-M-F8> [19;4~
tmap <C-F8> [19;5~
tmap <C-S-M-F8> [19;8~
tmap <F9> [20~
tmap <F19> [20;2~
tmap <S-F9> [20;2~
tmap <F9> [20;3~
tmap <M-F9> [20;3~
tmap <S-M-F9> [20;4~
tmap <C-F9> [20;5~
tmap <C-S-M-F9> [20;8~
tmap <F10> [21~
tmap <F20> [21;2~
tmap <S-F10> [21;2~
tmap <F10> [21;3~
tmap <M-F10> [21;3~
tmap <S-M-F10> [21;4~
tmap <C-F10> [21;5~
tmap <C-S-M-F10> [21;8~
tmap <F11> [23~
tmap <S-F11> [23;2~
tmap <F11> [23;3~
tmap <M-F11> [23;3~
tmap <S-M-F11> [23;4~
tmap <C-F11> [23;5~
tmap <C-S-M-F11> [23;8~
tmap <F12> [24~
tmap <S-F12> [24;2~
tmap <F12> [24;3~
tmap <M-F12> [24;3~
tmap <S-M-F12> [24;4~
tmap <C-F12> [24;5~
tmap <C-S-M-F12> [24;8~
tmap <F13> [25~
tmap <S-F13> [25;2~
tmap <M-F13> [25;3~
tmap <S-M-F13> [25;4~
tmap <C-F13> [25;5~
tmap <C-S-M-F13> [25;8~
tmap <F14> [26~
tmap <S-F14> [26;2~
tmap <M-F14> [26;3~
tmap <S-M-F14> [26;4~
tmap <C-F14> [26;5~
tmap <C-S-M-F14> [26;8~
inoremap <M-F1> <Esc>:bd!<CR>i
noremap <M-F1> :bd!<CR>i
inoremap <M-F2> <Esc>:bd!<CR>i
noremap <M-F2> :bd!<CR>i
inoremap <M-F3> <Esc>:call QuitJump()<CR>
noremap <M-F3> :call QuitJump()<CR>
nnoremap <f1> <nop>
map <F1> <Nop>
tmap <S-Tab> [Z
nnoremap <M-a> <Esc>a
nnoremap <M-b> <Esc>b
nnoremap <M-c> <Esc>c
nnoremap <M-d> <Esc>d
nnoremap <M-e> <Esc>e
nnoremap <M-f> <Esc>f
nnoremap <M-g> <Esc>g
nnoremap <M-h> <Esc>h
nnoremap <M-i> <Esc>i
nnoremap <M-j> <Esc>j
nnoremap <M-k> <Esc>k
nnoremap <M-l> <Esc>l
nnoremap <M-m> <Esc>m
nnoremap <M-n> <Esc>n
nnoremap <M-o> <Esc>o
nnoremap <M-p> <Esc>p
nnoremap <M-q> <Esc>q
nnoremap <M-r> <Esc>r
nnoremap <M-s> <Esc>s
nnoremap <M-t> <Esc>t
nnoremap <M-u> <Esc>u
nnoremap <M-v> <Esc>v
nnoremap <M-w> <Esc>w
nnoremap <M-x> <Esc>x
nnoremap <M-y> <Esc>y
nnoremap <M-z> <Esc>z
nnoremap <M--> <Esc>-
nnoremap <M-[> <Esc>[
nnoremap <M-;> <Esc>;
nnoremap <M-'> <Esc>'
nnoremap <M-,> <Esc>,
nnoremap <M-.> <Esc>.
nnoremap <M-/> <Esc>/
nnoremap <M-A> <Esc>A
nnoremap <M-B> <Esc>B
nnoremap <M-C> <Esc>C
nnoremap <M-D> <Esc>D
nnoremap <M-E> <Esc>E
nnoremap <M-F> <Esc>F
nnoremap <M-G> <Esc>G
nnoremap <M-H> <Esc>H
nnoremap <M-I> <Esc>I
nnoremap <M-J> <Esc>J
nnoremap <M-K> <Esc>K
nnoremap <M-L> <Esc>L
nnoremap <M-M> <Esc>M
nnoremap <M-N> <Esc>N
nnoremap <M-O> <Esc>O
nnoremap <M-P> <Esc>P
nnoremap <M-Q> <Esc>Q
nnoremap <M-R> <Esc>R
nnoremap <M-S> <Esc>S
nnoremap <M-T> <Esc>T
nnoremap <M-U> <Esc>U
nnoremap <M-V> <Esc>V
nnoremap <M-W> <Esc>W
nnoremap <M-X> <Esc>X
nnoremap <M-Y> <Esc>Y
nnoremap <M-Z> <Esc>Z
nnoremap <M-_> <Esc>_
nnoremap <M-{> <Esc>{
nnoremap <M-:> <Esc>:
nnoremap <M-\> <Esc>\
nnoremap <M-<> <Esc><
nnoremap <M->> <Esc>>
nnoremap <M-?> <Esc>?
nnoremap <M-=> <Esc>=
nnoremap <M-+> <Esc>+
nnoremap <M-]> <Esc>]
nnoremap <M-}> <Esc>}
inoremap <M-a> <Esc>a
inoremap <M-b> <Esc>b
inoremap <M-c> <Esc>c
inoremap <M-d> <Esc>d
inoremap <M-e> <Esc>e
inoremap <M-f> <Esc>f
inoremap <M-g> <Esc>g
inoremap <M-h> <Esc>h
inoremap <M-i> <Esc>i
inoremap <M-j> <Esc>j
inoremap <M-k> <Esc>k
inoremap <M-l> <Esc>l
inoremap <M-m> <Esc>m
inoremap <M-n> <Esc>n
inoremap <M-o> <Esc>o
inoremap <M-p> <Esc>p
inoremap <M-q> <Esc>q
inoremap <M-r> <Esc>r
inoremap <M-s> <Esc>s
inoremap <M-t> <Esc>t
inoremap <M-u> <Esc>u
inoremap <M-v> <Esc>v
inoremap <M-w> <Esc>w
inoremap <M-x> <Esc>x
inoremap <M-y> <Esc>y
inoremap <M-z> <Esc>z
inoremap <M--> <Esc>-
inoremap <M-[> <Esc>[
inoremap <M-;> <Esc>;
inoremap <M-'> <Esc>'
inoremap <M-,> <Esc>,
inoremap <M-.> <Esc>.
inoremap <M-/> <Esc>/
inoremap <M-A> <Esc>A
inoremap <M-B> <Esc>B
inoremap <M-C> <Esc>C
inoremap <M-D> <Esc>D
inoremap <M-E> <Esc>E
inoremap <M-F> <Esc>F
inoremap <M-G> <Esc>G
inoremap <M-H> <Esc>H
inoremap <M-I> <Esc>I
inoremap <M-J> <Esc>J
inoremap <M-K> <Esc>K
inoremap <M-L> <Esc>L
inoremap <M-M> <Esc>M
inoremap <M-N> <Esc>N
inoremap <M-O> <Esc>O
inoremap <M-P> <Esc>P
inoremap <M-Q> <Esc>Q
inoremap <M-R> <Esc>R
inoremap <M-S> <Esc>S
inoremap <M-T> <Esc>T
inoremap <M-U> <Esc>U
inoremap <M-V> <Esc>V
inoremap <M-W> <Esc>W
inoremap <M-X> <Esc>X
inoremap <M-Y> <Esc>Y
inoremap <M-Z> <Esc>Z
inoremap <M-_> <Esc>_
inoremap <M-{> <Esc>{
inoremap <M-:> <Esc>:
inoremap <M-\> <Esc>\
inoremap <M-<> <Esc><
inoremap <M->> <Esc>>
inoremap <M-?> <Esc>?
inoremap <M-=> <Esc>=
inoremap <M-+> <Esc>+
inoremap <M-]> <Esc>]
inoremap <M-}> <Esc>}

nmap <C-^> ;echo "USE gl, ca OR cm"<CR>
nnoremap ca <C-^>

noremap <silent> ZB :call system("tm -f -d nw -c \"".expand('%:p:h')."\" zsh &")<CR>
noremap <silent> ZC :call system("tm -f -d sph -c \"".expand('%:p:h')."\" zsh &")<CR>
noremap <silent> ZV :call system("tm -f -d spv -c \"".expand('%:p:h')."\" zsh &")<CR>

" echom Byte()
" echom Byte(".")
" echom Byte("'<")
" echom Byte("'>")
fun! Byte(...)
    " https://vi.stackexchange.com/questions/2410/how-to-make-a-vimscript-function-with-optional-arguments
    let indicator = get(a:, 1, ".")
    return line2byte(line(indicator))+col(indicator)-1
endf

" vimhelp a:000
fun! MapM(func, ...)
    let m = ''
    for s in a:000
        let m = m.'<Esc>'.s
    endfor

    if a:func =~ ")$"
        exec 'nnoremap '.m.' :call '.a:func.'<CR>'
        exec 'inoremap '.m.' <Esc>:call '.a:func.'<CR>'
        exec 'xnoremap '.m.' "zy:call '.a:func.'<CR>'
    else
        exec 'nnoremap '.m.' :call '.a:func.'()<CR>'
        exec 'inoremap '.m.' <Esc>:call '.a:func.'()<CR>'
        exec 'xnoremap '.m.' "zy:call '.a:func.'()<CR>'
    endif
endf
command! -nargs=+ MapM call MapM(<f-args>)

fun! OpenInEmacsSameWindow()
    exe "silent! !TTY=`tm-tty` e +".line('.').":".(col('.') - 1)." ".Q(expand('%:p'))
    redraw!
endf

function! RTCmdSetup(cmd)
    exe("autocmd TextChanged * silent! call system(".Q(a:cmd).", GetBufferContents())")
    exe("autocmd TextChangedI * silent! call system(".Q(a:cmd).", GetBufferContents())")
endfunction

fun! StartAppend()
    startinsert
    call cursor( line('.'), col('.') + 1)
endf
command! StartAppend call StartAppend()

" output of ex command into new buffer
function! Message(cmd)
  let cmd = a:cmd
  if len(cmd) == 0
      let cmd = "mess"
  endif
  redir => message
  silent execute cmd
  redir END
  "vsplit
  enew
  silent put=message
  set nomodified
endfunction
command! -nargs=* -complete=command Message call Message(<q-args>)
command! -nargs=* -complete=command M call Message(<q-args>)
" command! Messages call Message("mess")

"Sadly this interferes with vim-sneak
"Hardcode into vim?
"swap colon and semicolon
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" This fixes select-mode when needing to enter dvorak letters (e.g. in
" snipmate)
sunmap ;

"swap j with gj and k with gk
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk
nnoremap gj j
nnoremap gk k
xnoremap gj j
xnoremap gk k

"swap quote and backtick
nnoremap ' `
nnoremap ` '

fun! CharAtCursor()
    return matchstr(getline('.'), '\%' . col('.') . 'c.')
endf

fun! ReselectVisual()
    " New function
    " echom visualmode()
    " call system("tv", visualmode())
    if visualmode() == "V"
       " we are in visual line mode
        normal! mxgv`x
    elseif visualmode() == "\<C-V>"
       " we are in visual block mode
        normal! mxgv`x
    else
        normal! mxgv
    endif
endf

fun! Byte(...)
    " https://vi.stackexchange.com/questions/2410/how-to-make-a-vimscript-function-with-optional-arguments
    let indicator = get(a:, 1, ".")
    return line2byte(line(indicator))+col(indicator)-1
endf

" TODO Do more work on this
fun! VisualTL()
    if Byte(".") != Byte("'<")
        normal o
    endif

    if ! visualmode() == "V"
        if col(".") > col("'>")
            normal O
        endif
    endif
endf

" Reselect visual only works if the cursor is not moved;
" You can't relocate and then run ReselectVisual
fun! ReselectVisualTL()
    " call Tv(visualmode())

    if visualmode() == "V"
       " we are in visual line mode
        " normal! mxgv`x
        normal! mxgv
    elseif visualmode() == "\<C-V>"
       " we are in visual block mode
        normal! mxgv`x
    else
        normal! mxgvV
    endif

    " call VisualTL()
endf

" I can improve on these to be more picky
fun! SearchUpDiffColPicky()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '?\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '?\%'.virtcol('.').'v'.charatcursor.'\@!'
endf

fun! SearchDownDiffColPicky()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '/\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '/\%'.virtcol('.').'v'.charatcursor.'\@!'
endf

fun! SearchUpDiffCol()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '?\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '?\C\%'.virtcol('.').'v\('.charatcursor.'\| \|$\)\@!'
endf

fun! SearchDownDiffCol()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '/\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '/\C\%'.virtcol('.').'v\('.charatcursor.'\| \|$\)\@!'
endf

nnoremap <silent> <Esc>_ :call SearchUpDiffCol()<CR>
nnoremap <silent> <Esc>+ :call SearchDownDiffCol()<CR>
xnoremap <silent> <Esc>_ <C-c>:call SearchUpDiffCol() \| call ReselectVisual()<CR>
xnoremap <silent> <Esc>+ <C-c>:call SearchDownDiffCol() \| call ReselectVisual()<CR>
nnoremap <silent> <Esc>- :call SearchUpDiffColPicky()<CR>
nnoremap <silent> <Esc>= :call SearchDownDiffColPicky()<CR>
xnoremap <silent> <Esc>- <C-c>:call SearchUpDiffColPicky() \| call ReselectVisual()<CR>
xnoremap <silent> <Esc>= <C-c>:call SearchDownDiffColPicky() \| call ReselectVisual()<CR>

nmap <C-s> /
cmap <silent> <Esc>f <C-e><C-u>mess<CR>
cmap <silent> <Esc>d <Esc>dd
imap <silent> <Esc>[2~ <Esc>ZX
nmap <silent> <Esc>[2~ ZX
cmap <silent> <Esc>t normal ge<CR>
" cmap <silent> <Esc>e silent! e! \| call NumberSyntax() \| call GeneralSyntax()<CR>
cmap <silent> <Esc>e silent! e!<CR>
cmap <silent> <Esc>w silent! w!<CR>
cmap <silent> <Esc>; silent! wa!<CR>
cmap <silent> <Esc>p normal <leader>tb<CR>
cmap <silent> <Esc>q silent! q!<CR>
cmap <silent> <Esc>s silent! wqa!<CR>
cmap <silent> <Esc>x silent! bd!<CR>
cmap <silent> <Esc>r silent! wa! \| e! \| call NumberSyntax() \| call GeneralSyntax()<CR>
"cmap <silent> <Esc>g call MinimiseAndWrap()<CR>
cmap <silent> <Esc>g .!mnm<CR>
cmap <silent> <Esc>G .!acronymise \| mnm<CR>

" Make C-g from inside command mode work like emacs, in that in
" cancels any current operation.
cmap  

nmap yc ggVG

map  <left>
map  <right>
map  <up>
map <C-J> <down>

" having these are more important than being able to quickly enter
" easymotion.
imap  <left>
imap  <right>
imap  <up>
imap <C-J> <down>

" important fix (hopefully there are no escape code conflicts)
imap $ l$

xnoremap t lt
xnoremap T hT

"xnoremap $ $h
xnoremap $ g_
xnoremap g_ $

xnoremap . s<C-R>.

inoremap <C-h> <Left>

if ! has('nvim')
    " Only works in vim, not nvim
    set <M-$>=$
endif
" need this for going to the end of a line after editing something.
"inoremap <M-$> $
nnoremap <M-$> $
xnoremap <M-$> <ESC>$

nmap <C-w>h <C-w>h
nmap <C-w>l <C-w>l
nmap <silent> g<C-w>k ;let linenum=getpos('.')[1]\|:wincmd k\|;call cursor(linenum,0)<cr>
nmap <silent> g<C-w>i ;let linenum=getpos('.')[1]\|:wincmd i\|;call cursor(linenum,0)<cr>
nmap <silent> g<C-w>h ;let linenum=getpos('.')[1]\|:wincmd h\|;call cursor(linenum,0)<cr>
nmap <silent> g<C-w>l ;let linenum=getpos('.')[1]\|:wincmd l\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><down> ;let linenum=getpos('.')[1]\|:wincmd k\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><up> ;let linenum=getpos('.')[1]\|:wincmd i\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><left> ;let linenum=getpos('.')[1]\|:wincmd h\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><right> ;let linenum=getpos('.')[1]\|:wincmd l\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w>w ;let linenum=getpos('.')[1]\|:wincmd w\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><C-w> <C-w>w

if !exists("g:ncolumns")
    let g:ncolumns=1
endif

" these function allows you to put a number prefix before <C-u>, which
" means before <C-b> as well in our case.
" Note: The <C-U> is required to remove the line range that you get when
" typing ':' after a count.
function! ScrollUp(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    let c = c * 2
    for i in range(1, c)
        exec "normal! \<C-u>"
    endfor
endfunction
function! ScrollDown(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    let c = c * 2
    for i in range(1, c)
        exec "normal! \<C-d>"
    endfor
endfunction
function! HalfscrollUp(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    for i in range(1, c)
        exec "normal! \<C-u>"
    endfor
endfunction
function! HalfscrollDown(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    for i in range(1, c)
        exec "normal! \<C-d>"
    endfor
endfunction

nnoremap <silent> <C-u> :<C-U>call HalfscrollUp(v:count1)<CR>
nnoremap <silent> <C-d> :<C-U>call HalfscrollDown(v:count1)<CR>
nnoremap <silent> <C-b> :<C-U>call ScrollUp(v:count1)<CR>
nnoremap <silent> <C-f> :<C-U>call ScrollDown(v:count1)<CR>
nnoremap <silent> <pageup> :<C-U>call ScrollUp(v:count1)<CR>
nnoremap <silent> <pagedown> :<C-U>call ScrollDown(v:count1)<CR>
"nmap <pageup> ;PreviousChange<CR>zz
"nmap <pagedown> ;NextChange<CR>zz

nnoremap y/ /<up><C-f><left>v0y<C-c><C-c>
nmap 1<C-g> ;echo expand('%:p')<CR>
nmap 2<C-g> ;echo @%<CR>

nmap <2-LeftMouse> *
xmap <2-LeftMouse> *

nmap <RightMouse> *
xmap <RightMouse> *

nmap ch ;bprev<CR>
nmap cl ;bnext<CR>
nmap gt gt

nmap gd gdzt
vmap gd *gg0n

function! MovePercent(signedpercent, mode)
    if a:mode ==# 'v'
        normal! gv
    endif

    let step = max([abs(a:signedpercent) * winheight(0) / 100, 1])
    if a:signedpercent < 0
        for i in range(1,step)
            exec "normal! \<C-e>"
        endfor
    elseif a:signedpercent > 0
        for i in range(1,step)
            exec "normal! \<C-y>"
        endfor
    endif
endfunction

nnoremap <ScrollWheelUp> 6<C-y>
map <S-ScrollWheelUp> 6<C-U>
nnoremap <ScrollWheelDown> 6<C-e>
map <S-ScrollWheelDown> 6<C-D>

function! OpenClipInWin()
    let cmd = "tm -f -S -tout -i nw v"
    silent! call system(cmd, @z)
endfunction
xmap <CR> "zy;silent! call OpenClipInWin()<CR>

nnoremap <silent> <C-e> :call MovePercent(-5, 'n')<CR>
nnoremap <silent> <C-t> :call MovePercent(5, 'n')<CR>

xnoremap <silent> <C-e> :call MovePercent(-5, 'v')<CR>
xnoremap <silent> <C-t> :call MovePercent(5, 'v')<CR>

nnoremap <silent> <C-n> :call MovePercent(-10, 'n')<CR>
nnoremap <silent> <C-p> :call MovePercent(10, 'n')<CR>

xnoremap <silent> <C-n> :call MovePercent(-10, 'v')<CR>
xnoremap <silent> <C-p> :call MovePercent(10, 'v')<CR>

nmap [u ;cprev<CR>
nmap ]u ;cnext<CR>
nmap [e ;ERRP<CR>
nmap ]e ;ERR<CR>
nmap [/ 0;COMP<CR>
nmap ]/ $;COM<CR>
nmap ZU ;Ctoggle<CR>

map w <Plug>CamelCaseMotion_w
map b <Plug>CamelCaseMotion_b
map e <Plug>CamelCaseMotion_e
omap iw <Plug>CamelCaseMotion_iw
xmap iw <Plug>CamelCaseMotion_iw
omap ib <Plug>CamelCaseMotion_ib
xmap ib <Plug>CamelCaseMotion_ib
omap ie <Plug>CamelCaseMotion_ie
xmap ie <Plug>CamelCaseMotion_ie
nmap cw ce
omap iw ie
xmap iw ie
nmap vit ;normal! viw<CR>
nmap vir ;call SelectWordAndDots()<cr>
nmap viq ;call SelectArgument()<cr>

imap <C-w> vlbs
nmap <C-w><C-c> <NOP>

" use the search register to find the next thing directly above or below
nmap ]> ;exe '/\%'.virtcol('.').'v'.@/<CR>
nmap [> ;exe '?\%'.virtcol('.').'v'<CR>
xmap ]> <C-c>;exe '/\%'.virtcol('.').'v'.@/<CR>mxgv`x
xmap [> <C-c>;exe '?\%'.virtcol('.').'v'.@/<CR>mxgv`x

" Find next
nmap ]? ;exe '/\%'.virtcol('.').'v\S'<CR>
nmap [? ;exe '?\%'.virtcol('.').'v\S'<CR>
xmap ]? <C-c>;exe '/\%'.virtcol('.').'v\S'<CR>mxgv`x
xmap [? <C-c>;exe '?\%'.virtcol('.').'v\S'<CR>mxgv`x

function! SelectWordAndDots()
    set iskeyword+=.
    set iskeyword+=-
    normal! viw
    set iskeyword-=.
    set iskeyword-=-
endfunction

" automatically give executable permissions if file begins with #! and contains
" '/bin/' in the path
"use function! not function to overwrite
function! ModeChange()
  if getline(1) =~ "^#!"
      silent !chmod a+x %
  endif
endfunction

" It would be nice if this function could work out what () it should
" select. I.e. You're selecting an argument inside a pair of parenthesis
" and the argument has parenthesis itself, so only select the pair
" belonging to the argument.
function! SelectArgument()
    set iskeyword+=.
    set iskeyword+=-
    set iskeyword+=[
    set iskeyword+=]
    "set iskeyword+== "why equals?
    set iskeyword+='
    set iskeyword+="
    normal! viw
    set iskeyword-=.
    set iskeyword-=-
    set iskeyword-=[
    set iskeyword-=]
    "set iskeyword-== "why equals?
    set iskeyword-='
    set iskeyword-="
endfunction

" counters the issue with smartindent that affects making comments in
" python (puts comment on the first column).
inoremap # X#

nnoremap gl <C-^>

" unmap annoying keys
nnoremap K <Nop>
nnoremap q: <Nop>
nnoremap q/ <Nop>
nnoremap q? <Nop>

" This makes it faster to do ;<C-f> or ;<C-r>
"   -- can do <C-;><C-f>
"nnoremap <C-;> ;
nnoremap [27;5;59~ :

nnoremap ZQ :qa!<CR>

imap <C-b> <Left>
imap <C-f> <Right>

nnoremap <F8> "=strftime("%c")<CR>P
inoremap <F8> <C-R>=strftime("%c")<CR>
cnoremap <F8> <C-R>=strftime("%c")<CR>

if has('autocmd')
    autocmd BufWrite * if &diff | diffu | endif

    au FileType vim  set foldmethod=marker

    augroup vimrc
        au BufReadPre * setlocal foldmethod=manual
    augroup END

    autocmd BufEnter * if &filetype == "" | setlocal ft=txt | endif

    au BufWritePost * silent call ModeChange()
endif

imap <C-d> <Delete>
cmap <C-d> <Delete>

noremap <Esc>< gg0
noremap <Esc>> G$ " emacs G

" https://github.com/tpope/vim-pathogen

nmap <C-k> <Plug>(easymotion-bd-w)
xmap <C-k> <Plug>(easymotion-bd-w)

let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_default_mapping = 0
let g:indent_guides_enable_on_vim_startup = 1

map <F12> ;call ToggleCommentSyntax()<CR>
map <F11> ;call ToggleBrightness()<CR>
map <F10> ;call ToggleSyntax()<CR>

" delete buffer without closing window
function! Bclose()
    let curbufnr = bufnr("%")
    let altbufnr = bufnr("#")
    if buflisted(altbufnr)
        buffer #
    else
        bnext
    endif
    if bufnr("%") == curbufnr
        new
    endif
    if buflisted(curbufnr)
        execute("bdelete! " . curbufnr)
    endif
endfunction

function! ForceQuit()
    qa!
endfunction

fun! ToggleOpt(opt)
    exec 'windo set '.a:opt.'!'
    exec 'set '.a:opt.'?'
endf

function! MapToggle(key, opt)
    let savepos = getpos('.')
    let cmd = ':silent! call ToggleOpt("'.a:opt.'")<CR>'
    exec 'nnoremap '.a:key.' '.cmd
    exec 'inoremap '.a:key." \<C-O>".cmd
    call setpos('.', savepos)
    "echom a:opt
endfunction

command! -nargs=+ MapToggle call MapToggle(<f-args>)

function! MapToggleBoth(key, opt_a, opt_b)
    let savepos = getpos('.')
    let cmd = ':silent! call ToggleOpt("'.a:opt_a.'") \| silent! call ToggleOpt("'.a:opt_b.'")<CR>'
    exec 'nnoremap '.a:key.' '.cmd
    exec 'inoremap '.a:key." \<C-O>".cmd
    call setpos('.', savepos)
    "echom a:opt_a a:opt_b
endfunction

command! -nargs=+ MapToggleBoth call MapToggleBoth(<f-args>)

command! ForceQuit silent! call ForceQuit()

if ! has('nvim')
    colorscheme inkpot
endif

source ~/.vim/paste-replace.vim
source ~/.vim/utils.vim
source ~/.vim/pen.vim
" source ~/.vim/nvim-function-keysvimrc
source ~/.vim/fixkeymaps-vimrc

silent! MapToggleBoth <F4> wrap number
silent! MapToggle <F5> number
" silent! MapToggleBoth <F5> number relativenumber
silent! MapToggle <F6> spell
silent! MapToggle <F7> paste

let pen_path = expand("~/.pen/pen.vim")
if filereadable(pen_path)
  exe "source " . pen_path
endif

nnoremap Y ^vg_o
nnoremap z= :set spellz=

" undo -- emacs compatibility
nnoremap <C-_> u
inoremap <C-_> <Esc>u
xmap <Esc>w y
nmap <Esc>y<Esc>p yp
" not really emacs but related
xmap <Esc>Y Y

fun! MQQuit()
    if @% == ""
        qa!
    else
        wqa!
    else
endf

fun! GoToTop()
    exe expand("normal! \<Esc>gg")
endf

fun! Anywhere_gf()
    silent! normal! gf
endf

function! AmendRespawn()
    !vc amend-respawn
    redraw!
endfunction

function! CommitRespawn()
    !vc commit-respawn
    redraw!
endfunction

MapM MQQuit q q
MapM GoToTop g g
MapM OpenInEmacsSameWindow q v
MapM Anywhere_gf g f
MapM ForceQuit g q
nmap <silent> <Leader>7 ;silent! call AmendRespawn()<CR>
nmap <silent> <Leader>8 ;silent! call CommitRespawn()<CR>
nmap <silent> <Leader>9 ;!git difftool HEAD\^\! -- %<CR><C-L>

" autocmd BufEnter * call GeneralSyntax()

" autocmd BufEnter * call NumberSyntax()
" autocmd BufEnter * call GeneralSyntax()
" autocmd BufReadPre * call NumberSyntax()
" autocmd BufReadPre * call GeneralSyntax()

fun! OpenSnippets()
    let fp = '$VIMSNIPPETS/'.&filetype.'.snippets'

    call system('tm -f -te -d sps -n snippets "vs '.fp.'" &')
endf

MapM OpenSnippets q d

fun! InsertParaAbove()
    "exe expand("normal! 0O\<Esc>O")
    exe expand("normal! 0O\<Esc>O")
    startinsert
endf

MapM InsertParaAbove q o

MapM FilterWithFzf q f

MapM GeneralSyntax q y

function! AmendRespawn()
    !vc amend-respawn
    redraw!
endfunction

function! CommitRespawn()
    !vc commit-respawn
    redraw!
endfunction

MapM CommitRespawn q 8
MapM AmendRespawn q 7

nnoremap <Esc>7 :silent! call AmendRespawn()<CR>
nnoremap <Esc>8 :silent! call CommitRespawn()<CR>
cmap <silent> <Esc>8 silent! call CommitRespawn()<CR>
cmap <silent> <Esc>9 Git difftool HEAD\^\! -- %<CR><C-L>

" This fixes select-mode when needing to enter dvorak letters (e.g. in
" snipmate)
sunmap ;

" for starting a new snippet complete from within a snippet
" i'm not sure how to break out of select mode without using a motion
" smap means it must be selected
smap <Esc>L <Esc>a<Esc>ljki<C-l>
" snipmate global variables might be bringing me back into select mode
" but nothing to fear, this takes care of it
imap <Esc>L <Esc>a<Esc>ljki<C-l>
" Swapping C-l with <Esc>L only makes it worse
imap <C-l> <Plug>snipMateNextOrTrigger
smap <C-l> <Plug>snipMateNextOrTrigger

" The extra <CR> gets rid of the annoying "Press ENTER or type command to continue" prompt
vnoremap <silent> K K<cr>

nnoremap <silent> <leader>! :set opfunc=ProgramFilter<cr>g@
vnoremap <silent> <leader>! :<c-u>call ProgramFilter(visualmode(), 1)<cr>
function! ProgramFilter(vt, ...)
    let [qr, qt] = [getreg('"'), getregtype('"')]
    let [oai, ocin, osi, oinde] = [&ai, &cin, &si, &inde]
    setl noai nocin nosi inde=

    let [sm, em] = ['[<'[a:0], ']>'[a:0]]
    exe 'norm!`' . sm . a:vt . '`' . em . 'x'

    call inputsave()
    let cmd = input('!')
    call inputrestore()

    " let out = system("ptw ".cmd, @")
    let out = system(cmd, @")
    let out = substitute(out, '\n$', '', '')
    exe "norm!i\<c-r>=out\r"

    let [&ai, &cin, &si, &inde] = [oai, ocin, osi, oinde]
    call setreg('"', qr, qt)
endfunction

function! ExecInTmux()
    silent! call SaveTemp()
    silent! call TmuxBaseWait()
    silent! call system('tm -f -te -d sps -c "'.fnameescape(expand('%:p:h')).'" "cr '.fnameescape(expand('%:p')).'"'))
endfunction

nnoremap <silent> Zr :call ExecInTmux()<CR>
xnoremap <silent> Zr <ESC>:call ExecInTmux()<CR>

function! SchemaInTmux()
    silent! call SaveTemp()
    silent! call TmuxBaseWait()
    silent! call system('tm -f -te -d sph -c "'.fnameescape(expand('%:p:h')).'" "zh '.fnameescape(expand('%:p')).'"'))
endfunction

nnoremap <silent> Zh :call SchemaInTmux()<CR>
xnoremap <silent> Zh <ESC>:call SchemaInTmux()<CR>

fun! GoogleWithEww(incmd)
    let cmd = 'nw egr '.escape(fnameescape(a:incmd), "()<>")
    call system(cmd.'&')
endf

xmap H "zy;call GoogleWithEww(@z)<CR>

fun! GetCopySearchFileProgram()
     if &ft=='help'
        return "vimhelp"
     elseif &ft=='man'
        return "man"
     else
        return "v"
     endif
endf

fun! GetCopySearchFilePath()
     if &ft=='help'
        return tolower(substitute(getline(1), "^\\([^	 ]\\+\\).*", "\\1", ""))
     elseif &ft=='man'
        " return getline(1)
        return tolower(substitute(getline(1), "^\\([^	 ]\\+\\).*", "\\1", ""))
     else
        return expand('%:p')
     endif
endf

" line
fun! CopySearchFile(sel)
    if has_key(environ(), "GY_CMD")
        let result=substitute(environ()["GY_CMD"], "^pvr ", "", "") . ' | vs +/"'.escape(escape(a:sel, '\\'),'`"$*[]\\').'"'
    else
        let result=GetCopySearchFileProgram() . ' +/"'.escape(escape(a:sel, '\\'),'`"$*[]\\').'" "'.GetCopySearchFilePath().'"'
        " silent! call system('xc -m', 'v +/"'.escape(a:sel, '`/"$*[]').'" "'.expand('%:p').'"')
    endif

    silent! call system('xc -m', result)
    " silent! call system('xc -m', 'v +/"'.escape(a:sel,'`"$*').'" "'.expand('%:p').'"')

    if v:shell_error == 0
        echom "Copied: " . result
    endif
endf
xmap gy "zy;call CopySearchFile(@z)<CR>

function! Babel(lang)
    " Only operate in visual line mode
    if visualmode() == "V"
        let cmd = "org-template-gen " . a:lang . " | xc"
        silent! call system(cmd, @z)
    endif
endfunction

" Unfortulately, yanking moves the cursor again before reselectvisual
" That's why it breaks sometimes.
" Therefore, I can't use yanking as the mechanism.
xmap Z/ "zy;silent! call Babel("sps") \| call ReselectVisualTL()<CR>P
xmap Zb "zy;silent! call Babel("bash") \| call ReselectVisualTL()<CR>P
xmap Ze "zy;silent! call Babel("emacs-lisp") \| call ReselectVisualTL()<CR>P
xmap ZH "zy;silent! call Babel("haskell") \| call ReselectVisualTL()<CR>P
xmap ZJ "zy;silent! call Babel("clojure") \| call ReselectVisualTL()<CR>P
xmap ZT "zy;silent! call Babel("text") \| call ReselectVisualTL()<CR>P

function! RunInTmux(cmd)
    call system('tnw -icmd', a:cmd)
endfunction

fun! YRun()
    normal Y"zy
    call RunInTmux(@z)
endf

cmap <Esc>m <C-e><C-u>silent! call YRun()<CR>
cmap <Esc>d <C-e><C-u>bd!<CR>


nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" Fixes this
" Error detected while processing function gitgutter#process_buffer[17]..gitgutter#diff#handler[15]..gitgutter#sign#update_signs[1]..<SNR>204_find_current_signs:
let g:gitgutter_realtime = 0

nmap <silent> <Leader>' ;silent! :call system("tm -f -d sph -c \"".expand('%:p:h')."\" -fargs git d -- " . system("xa realpath", expand('%'))[:-2] . " &")<CR>
" nmap <silent> <Leader>' ;silent! call TmuxSplitH('git d -- '.system("xa realpath", expand('%'))[:-2])<CR>


nnoremap <leader>um :%!mnm<CR>
xnoremap <leader>um :!mnm<CR>
nnoremap <leader>uu :%!umn<CR>
xnoremap <leader>uu :!umn<CR>

let g:comment_syntax_on = 1
let g:syntax_on = 1

map <F12> ;call ToggleCommentSyntax()<CR>
map <F10> ;call ToggleSyntax()<CR>
map <F11> ;call ToggleBrightness()<CR>

function! DiffPrevRev(count)
    exe "silent !git-dp.sh ".expand("%")." ".count
    redraw!
endfunction

command! -nargs=1 DiffPrevRev call DiffPrevRev(<args>)
map <silent> <Leader>= ;<C-U>DiffPrevRev(v:count1)<CR>

let g:MRU_Use_Current_Window = 1
let g:MRU_Max_Entries = 100000

" visually move lines up and down
vnoremap <ESC>N :m '>+1<CR>gv=gv
vnoremap <ESC>P :m '<-2<CR>gv=gv

" TODO save and restore the region
" visually move paragraph/selection up and down - more useful
vnoremap <ESC>J j"xx}"xpvip
vnoremap <ESC>K ok"xx{"xPjvip

function! TodayFile()
    let fp = strftime("%d.%m.%y") . ".org"
    " exe "e " . getcwd() . "/" . fp
    exe "e " . expand('%:p:h') . "/" . fp
endfunction

command! TodayFile silent! call TodayFile()

function! TodayFolder()
    let dp = expand('%:p:h') . "/" . strftime("%d.%m.%y")
    call system("mkdir -p ".Q(dp))
    exe "e " . dp
endfunction

command! TodayFolder silent! call TodayFolder()
command! TodayDir silent! call TodayFolder()



" unhighlight word under cursor
fun! UnLightUpCurrent()
    if &ft != 'fugitiveblame'
        match IncSearch ''
    endif
endf

" highlight word under cursor
fun! LightUpCurrent()
    if &ft != 'fugitiveblame'
        exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
    endif
endf

autocmd CursorMoved * call LightUpCurrent()
" useful but too distracting
"autocmd CursorMoved * call UnLightUpCurrent()
"autocmd CursorMovedI * call UnLightUpCurrent()
"autocmd CursorHold * call LightUpCurrent()
"autocmd CursorHoldI * call LightUpCurrent()

" Kinda like an iedit search and replace on all instances,
" though, I need to escape some characters
vnoremap <Leader>zr :<c-u>%s/<c-r>*
