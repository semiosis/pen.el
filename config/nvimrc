filetype plugin indent on
" syntax on

set mouse=a
silent! set ttymouse=xterm2
highlight Cursor gui=reverse guifg=NONE guibg=NONE
set notimeout
set nottimeout
if !has('nvim')
    set nocscopeverbose
endif
set modelines=0 nomodeline
set guicursor=
set imsearch=0
set redrawtime=10000
set sessionoptions-=options
set nowarn
set nolinebreak
set encoding=utf-8
set fileencodings=ucs-bom,utf-8
set nocompatible
set listchars=nbsp:¬¨,tab:>-
set list
" so it works:
au VimEnter * set list
" set cursorline
set diffopt+=vertical
set isk+=√©
" this allows filename completion with spaces. however, it also means spaces before the path name mess it up
set isf+=32
set isf+=\*
set isf+={
set isf+=}
set isf+=(
set isf+=)
set isf+=[
set isf+=]
set isf+=:
set isf+=;
set isf+=\\
set isf+=\?
set isf+=#
set isf+=%
" @ sign doesn't appar to work for cfile
" @re
" echom expand('<cfile>')
set isf+=@
" add ampersand to filename selection
" ASCII number
"set isf+=38
" add questionmark to filename selection for urls
set isf+=63
" add ampersand ( use ascii command line  to work these out )
set isf+=38
silent! set norelativenumber
" this stops commands like :grep outputting to the shell
"set relativenumber
set shellpipe=&>
set maxmempattern=2000
set switchbuf=usetab
" this means that F7 toggles paste in input mode as well as normal mode
set pastetoggle=<F7>
" doesn't work unless binary is set (which is an annoying predicament)
set nostartofline
set noeol
set hidden
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set lazyredraw
set expandtab
set formatoptions-=t
au BufEnter * set formatoptions-=cro
set history=50
" set nohlsearch
set hlsearch
set ignorecase smartcase
set incsearch
silent! set ls=2
set nobackup
set nomousehide
set nowrap
set vb t_vb=
set novisualbell
set scrolloff=5
set sidescrolloff=12
set shiftwidth=4
set shortmess+=r
set shortmess+=F
set showmode
set showcmd
set showtabline=0
set sm
" spellfile must end in ".{encoding}.add".
"set spellfile=$HOME/notes/ws/vim/spellfile.utf-8.add
set smartcase
set smartindent
set copyindent
set preserveindent
set smarttab
set splitright
set tabstop=4
silent! set nomodelineeexpr " disable modelineexpr if it's available
" set nomle
set tags=~/.tags
set notitle
" setting virtualedit to onemore fixes the ‚Äòcw‚Äô bug for words at end of
" file
"set virtualedit=onemore
set virtualedit=all
if &term == "xterm"
  set title
endif
" This disables automatic line breaking
set textwidth=0
set visualbell t_vb=
if version > 720
    set undoreload=0
endif
set matchpairs+=<:>
set matchpairs+=‚Äò:‚Äô
set matchpairs+=‚Äú:‚Äù
set thesaurus+=~/.vim/mthes10/thesaurus.txt
set completeopt=longest,menuone
" vim command-line autocomplete, not regular autocomplete
set wildmenu
set wildmode=list:longest,full
" where swap files go now
set noswapfile " Swap is disabled. Using git anyway.
"swap messages are super annoying
"set swapfile
" Vim is scaring me by deleting files.
set nofixendofline

" This should be default
set autochdir

" set backupdir=/dev/shm/var/tmp/shane/vim
" set directory=/dev/shm/var/tmp/shane/vim
" set undodir=/dev/shm/var/tmp/shane/vim
set foldcolumn=0 " margin, gutter

call pathogen#infect()
call pathogen#infect("/root/.pen/vim-bundles/{}")

""" NERDCommenter
"let NERDCreateDefaultMappings=0 " disable default mappings
let NERDMenuMode=0              " disable menu
let NERDSpaceDelims=1           " place spaces after comment chars
let NERDDefaultNesting=0        " don't recomment commented lines

xmap # <Plug>NERDCommenterToggle
nmap # <Plug>NERDCommenterToggle

set foldexpr=FoldBrace()
function! FoldBrace()
  if getline(v:lnum+1)[0] == '{'
    return '>1'
  endif
  if getline(v:lnum)[0] == '}'
    return '<1'
  endif
  return foldlevel(v:lnum-1)
endfunction

function! ToggleKeymap()
    if &keymap == ""
        set keymap=dvorak
        set imsearch=0
        echom "dvorak"
    elseif &keymap == "dvorak"
        set keymap=colemak
        set imsearch=0
        echom "colemak"
    elseif &keymap == "colemak"
        set keymap=dvorak-german
        set imsearch=0
        echom "dvorak-german"
    else
        set keymap=
        set iminsert=0
        echom "qwerty"
    endif
endfunction

set keymap=
silent! call ToggleKeymap()

" Hacky solution to dvorak issue inside select mode
smap : <C-h>S

fun! GetCharDvorak()
    return system('dvorak', nr2char(getchar()))
endf

" SUPER IMPORTANT
function! FindChar(mode, count)
    if a:mode ==# 'v'
        normal! gv
    endif

    let c = escape( GetCharDvorak(), "^.*$~")

    let @/=c

    let i=count
    if ! i > 0
        let i=1
    endif
    for i in range(1, i)
        let match = search(c)
    endfor
endfunction

nnoremap f :call FindChar('n', v:count1)<CR>
xnoremap f :<C-u>call FindChar('v', v:count1)<CR>

" SUPER IMPORTANT
function! FindCharBack(mode, count)
    if a:mode ==# 'v'
        normal! gv
    endif

    let c = escape( GetCharDvorak(), "^.*$~")

    let @/=c

    let i=count
    if ! i > 0
        let i=1
    endif
    for i in range(1, i)
        let match = search(c, 'b')
    endfor
endfunction

nnoremap F :call FindCharBack('n', v:count1)<CR>
xnoremap F :<C-u>call FindCharBack('v', v:count1)<CR>

command! K call ToggleKeymap() " This is the one I should use
command! TK call ToggleKeymap()

function! EraseBadWhitespace()
    EraseBadWhitespace
endfunction

" extra digraphs
" sp +/"extra digraphs" "$EMACSD/config/my-evil.el"
digr ZZ 8484
digr NN 8469
digr RR 8477
" looking glass
digr lg 128269
digr sy 129680
" huggingface
digr hf 129303
" spacy (ringed planet)
digr sy 129680
" It appears as though this was already set
digr    0160
" put this after a character to use the 'combining macron'
digr ^_ 0772
" dotted circle
digr .o 9676
" entails
digr \|= 8871
" infers
digr \|- 8866
" mapselementto
digr \|> 8614
" ùë•
digr xm 119909
" ùëñ
digr im 119894
" îíØ
digr jn 83119
" ‚áå
digr rv 8652
" üñä
digr pn 128394
" ‚öî
digr sw 9876
" üçì
digr st 127827
" üí°
digr lb 128161
" ‡øã
digr sf 4043
" üêà
digr ca 128008
" üëç
digr li 128077
" üëé
digr dl 128078
" ‚òï
digr co 9749
" ¬≥
digr S3 179
" ¬≤
digr S2 178
" ¬π - already works
" digr S1 185
" ‚Å¥ - already works
" digr S4 8308
" ‚ÇÑ
digr S4 8324


function! Q(string)
    return system('q', a:string)
endf

function! RTCmdSetup(cmd)
    exe("autocmd TextChanged * silent! call system(".Q(a:cmd).", GetBufferContents())")
    exe("autocmd TextChangedI * silent! call system(".Q(a:cmd).", GetBufferContents())")
endfunction

fun! StartAppend()
    startinsert
    call cursor( line('.'), col('.') + 1)
endf
command! StartAppend call StartAppend()




hi Normal       ctermfg=60

" Will work with zsh but not emacs
set clipboard=unnamed

" Will work with emacs but not zsh
"set clipboard=unnamedplus

" if !has('nvim')
"     set clipboard=unnamedplus
" else
"     set clipboard=unnamed
" endif
fun! QuitNvim(...)
    q!
endf
fun! TermAndQuit(...)
    let s:cmd = get(a:, 1, "TERM=vt100 tmux attach -t localhost")
    let s:callbacks = {
                \ 'on_exit': function('QuitNvim')
                \ }
    let jobid = termopen(s:cmd, s:callbacks)
endf
" set ls=0
set mouse=a
hi morediscrete cterm=NONE ctermfg=236 ctermbg=NONE
fun! NumberSyntax()
    hi one cterm=NONE ctermfg=033 ctermbg=236
    syntax match one "\c[a-f]*\(\d*1\)\d\@!\a*"
    syntax match one "\[\@<=\\\]\@="
    syntax match one "\<GPGGA\>"
    syntax match one "\c\<one\>"
    syntax match one "\c(\?\<[a])"
    syntax match one "\c\<jan\>"
    hi two cterm=NONE ctermfg=149 ctermbg=236
    syntax match two "\c[a-f]*\(\d*2\)\d\@![a-z]*"
    syntax match two "\c[a-z]*\(\d*2\)\d\@![a-z]*\(_t\)\@="
    syntax match two "\[\@<=/\]\@="
    syntax match two "\<GPGSA\>"
    syntax match two "\c\<two\>"
    syntax match two "\c(\?\<[b])"
    syntax match two "\c\<feb\>"
    hi three cterm=NONE ctermfg=206 ctermbg=236
    syntax match three "\c[a-f]*\(\d*3\)\d\@![a-z]*"
    syntax match three "\[\@<=|\]\@="
    syntax match three "\<GPGSV\>"
    syntax match three "\c\<z\>"
    syntax match three "\c\<three\>"
    syntax match three "\c(\?\<[c])"
    syntax match three "\c\<mar\>"
    hi four cterm=NONE ctermfg=227 ctermbg=236
    syntax match four "\c[a-f]*\(\d*4\)\d\@![a-z]*"
    syntax match four "\c[a-z]*\(\d*4\)\d\@![a-z]*\(_t\)\@="
    syntax match four "\[\@<=-\]\@="
    syntax match four "\<GPRMC\>"
    syntax match four "\c\<four\>"
    syntax match four "\c(\?\<%\@<![d])"
    syntax match four "\c\<apr\>"
    hi five cterm=NONE ctermfg=161 ctermbg=236
    syntax match five "\c\(h[a-f]*\)\@<![a-f]*h\@<!\(\d*5\)\d\@![a-z]*"
    syntax match five "\<V\>"
    syntax match five "\<five\>"
    syntax match five "\c(\?\<[e])"
    syntax match five "\c\<may\>"
    hi six cterm=NONE ctermfg=214 ctermbg=236
    syntax match six "\c[a-f]*\(\d*6\)\d\@![a-z]*"
    syntax match six "\c[a-z]*\(\d*6\)\d\@![a-z]*\(_t\)\@="
    syntax match six "\<six\>"
    syntax match six "\c(\?\<[f])"
    syntax match six " \@<=f \@="
    syntax match six "\c\<jun\>"
    hi seven cterm=NONE ctermfg=075 ctermbg=236
    syntax match seven "\c[a-f]*\(\d*7\)\d\@![a-z]*"
    syntax match seven "\<seven\>"
    syntax match seven "\c(\?\<[g])"
    syntax match seven "\c\<jul\>"
    hi eight cterm=NONE ctermfg=204 ctermbg=236
    syntax match eight "\c[a-f]*\(\d*8\)\d\@![a-z]*"
    syntax match eight "\c[a-z]*\(\d*8\)\d\@![a-z]*\(_t\)\@="
    syntax match eight "\<eight\>"
    syntax match eight "\c(\?\<[h])"
    syntax match eight "\c\<aug\>"
    hi nine cterm=NONE ctermfg=049 ctermbg=236
    syntax match nine "\c[a-f]*\(\d*9\)\d\@![a-z]*"
    syntax match nine "\<nine\>"
    syntax match nine "\c(\?\<[i])"
    syntax match nine "\c\<sep\>"
    hi zero cterm=NONE ctermfg=127 ctermbg=236
    syntax match zero "\c[a-f]*\(\d*0\)\d\@![a-z]*"
    syntax match zero "zero"
    syntax match zero "\c\<oct\>"
    syntax match one "\c\<nov\>"
    syntax match onlyhex "\c\<dec\>"
    hi onlyhex cterm=NONE ctermfg=149 ctermbg=236
    syntax match onlyhex "\c[a-z0-9]\@<![a-f]\{4,}[a-z0-9]\@!"
    syntax match onlyhex "\c[a-z0-9]\@<![ae-f]\{2,}[a-z0-9]\@!"
endf
fun! GeneralSyntax()
    hi domainbright cterm=NONE ctermfg=250 ctermbg=236
    syntax match domainbright "\(\<www.\)\@<=[a-z]\+\(\.[a-z]\+\)\@="
    syntax match domainbright "\(https\?:\/\/\([a-z-]\+\.\)*\)\@<=\([a-z0-9-]\+\)\(\.[a-z]\+\($\|[^a-z]\)\)\@="
    hi domain cterm=NONE ctermfg=243 ctermbg=236
    syntax match domain "\<www.\([a-z]\+\.[a-z]\+\)\@="
    hi numberpunctuation cterm=NONE ctermbg=236
    syntax match numberpunctuation "\c[0-9]\@<=[.][0-9]\@="
    syntax match numberpunctuation "\c[:]\@<=[a-f][a-f][:]\@="
    hi bullets ctermfg=247 ctermbg=236
    syntax match bullets "\c[^(]\@<![a-z][^)]\@!"
    hi allcaps cterm=NONE ctermfg=245
    syntax match allcaps "\(\<\|_\)\@<=[A-Z]\{2,\}\([a-z]\?\)\(\>\|_\|[0-9]\)\@="
    syntax match allcaps "\(\<\|_\)\@<=[A-Z]\([^A-Za-z]\(\>\|_\|[0-9]\)\)\@="
    hi currentProject cterm=NONE ctermfg=000 ctermbg=249
    syntax match currentProject "PROJECTS/"
    syntax match currentProject "\<alias\>"
    hi quote cterm=NONE ctermfg=39 ctermbg=234
    syntax match quote "'"
    hi doublequote cterm=NONE ctermfg=244 ctermbg=234
    syntax match doublequote "\""
    hi gitRtcPackage cterm=NONE ctermfg=027 ctermbg=017
    syntax match gitRtcPackage "\(\(^\|‚îÇ\||\) *\)\@<=modified   "
    syntax match gitRtcPackage "\<function\( [^ ]*(\|:\|\>\)\@="
    syntax match gitRtcPackage "\<func\>"
    syntax match gitRtcPackage "\<sub\>"
    syntax match gitRtcPackage "\<Function\>"
    syntax match gitRtcPackage "\<Sub\>"
    syntax match gitRtcPackage "\<proc\>"
    syntax match gitRtcPackage "\<defun\>"
    hi variable cterm=NONE ctermfg=041 ctermbg=236
    syntax match variable "\<var\(iable\)\?\>"
    syntax match variable "\<member\>"
    syntax match variable "\<my\>"
    syntax match variable "\<Dim\>"
    syntax match variable "\<Set\>"
    syntax match onlyhex "\<enum\>"
    hi module cterm=NONE ctermfg=041 ctermbg=022
    syntax match module "\<module:\@=""
    syntax match module "\<package\>"
    hi instance cterm=NONE ctermfg=164 ctermbg=054
    syntax match instance "\<instance:\@=""
    syntax match morediscrete "\<statement:\@="
    hi gitRtcPackage cterm=NONE ctermfg=027 ctermbg=017
    syntax match gitRtcPackage "\(^\|‚îÇ\||\)\@<=Entering"
    hi gitRtcError cterm=NONE ctermfg=161 ctermbg=052
    syntax match gitRtcError "\(^\|‚îÇ\||\)Cannot \a\+:[a-z A-Z]\+\.$"
    syntax match gitRtcError "\c\(\w\+\)\?\<timed out\>"
    syntax match gitRtcError "\c\(\w\+\)\?\<core dumped\>"
    syntax match gitRtcError "\<rebasing\>"
    syntax match gitRtcError "\c\<problem\>"
    hi gdb cterm=NONE ctermfg=226 ctermbg=236
    syntax match gdb "\<\([sl]\?trace\|gdb\|InteractiveConsole\)\>"
    syntax match gdb  "DEBUG[^:]\@!"
    syntax match gdb  "unittest.skip"
    syntax match gdb  " \@<! \@<=[a-z]\+> \@="
    syntax match gdb "\<ghci>"
    hi neosession cterm=NONE ctermfg=069 ctermbg=225
    syntax match neosession "\(^\|‚îÇ\||\)NV \^\?[A-Za-z0-9-]\+\>"
    hi myhighlightResults cterm=NONE ctermfg=163 ctermbg=055
    syntax match myhighlightResults "\$RESULTSD" " show-results.sh
    hi login cterm=NONE ctermfg=036 ctermbg=023
    syntax match login "\a\+@[a-z.-]\+" " hiltest@hil-node1 crown@nitrogen
    syntax match login "\(\a\+\)\@<=@[a-z.-]\+"
    hi startingSymbol cterm=NONE ctermfg=184 ctermbg=NONE
    syntax match startingSymbol "\(^\|‚îÇ\)\@<=\(\[[A-Z]\+\]\)\? \?[<>$]\+\( \|$\) \@!"
    syntax match startingSymbol "[>]\@<!>>>[>]\@!"
    syntax match startingSymbol "\<scala>"
    hi seleniumError cterm=NONE ctermfg=125 ctermbg=052
    syntax match seleniumError "\c\<\(can\)\?not\>"
    syntax match seleniumError "\c\<bad\>"
    syntax match seleniumError "\c\<\(wrong\|incorrect\)\>"
    syntax match seleniumError "\c\<[a-z]\+n't\( [a-z]\+\)\?\>"
    syntax match seleniumError "\c\<dont\>"
    syntax match seleniumError "\<\a\+Error\>" " ERROR
    syntax match seleniumError "\<color:red\>" " ERROR
    syntax match seleniumError "\c\<\(could not\|couldn't\)\>"
    syntax match seleniumError "\c\<\(not [a-z]\+\)\>"
    syntax match seleniumError "\cerror[:s]\?"
    syntax match seleniumError "\c\([a-z]\+\)\?exceptions\?"
    syntax match seleniumError "\c\(\w\+ \)\?thrown"
    syntax match seleniumError "\creferenced before assignment"
    syntax match gitbranch "\c\(\<set \)\@<=no\([a-z]\+\>\)\@="
    syntax match seleniumError "\c\[\@<=no[a-z]\+\]\@=\>"
    syntax match seleniumError "\c\<no\>\( [a-z]\+\)\?\( [a-z]\+\)\?\>"
    syntax match seleniumError "\c\<false\>"
    syntax match seleniumError "\c\<locked\>"
    syntax match seleniumError "\c\<ro\>" " read only
    syntax match seleniumError "\c\<read only\>" " read only
    syntax match seleniumError "\c\<n\(an\?\)\?\>"
    syntax match seleniumError "FIXME"
    syntax match seleniumError "\cis undefined"
    syntax match seleniumError "\c\(is \)\@<!undefined\( [a-z]\+\)\?"
    syntax match seleniumError "\<\(\w\+ \)\?behind\>"
    syntax match safe "\<\(\w\+ \)\?ahead of\>"
    syntax match safe "\<\(\w\+ \)\?ahead\( [0-9]\)\@="
    syntax match seleniumError "\c\(resource \)\?\([a-z]\+ \)\?unavailable"
    hi null cterm=NONE ctermfg=237 ctermbg=232
    syntax match null "\c\<null\>"
    hi generalError cterm=NONE ctermfg=197 ctermbg=052
    syntax match generalError "\c\<invalid \w\+\>"
    hi notideal cterm=NONE ctermfg=085 ctermbg=197
    syntax match notideal "\<time.sleep([0-9.]\+)"
    hi success cterm=NONE ctermfg=083 ctermbg=236
    syntax match success "\c\<success\(\a\+\)\?\>"
    syntax match success "\c\<pass\(\a\+\)\?\>"
    syntax match success "\c\([a-z-.]\+\)\? exists"
    syntax match success "\c\<running\>"
    syntax match success "\c\<accepted\>"
    syntax match success "\c\<available\>"
    syntax match success "\<UP\>"
    syntax match success "\c\<OK\>"
    syntax match success "\c\<\(not \)\@<!connected\( to \([a-z]\+\)\?\)\?\>"
    syntax match success "\c\(not\)\@<!up.\?.\?to.\?date\>"
    syntax match success "\c\(not\)\@<!clean\>"
    syntax match safe "\<can be fast-forwarded\>"
    hi safe cterm=NONE ctermfg=045 ctermbg=236
    syntax match safe "\c\<n/a\>"
    syntax match safe "\c\<yes\>"
    syntax match safe "\c\<true\>"
    syntax match safe "\c\<good\>"
    syntax match safe "\c\<rw\>"
    syntax match safe "\c\<allow\(ed\)\?\( from\)\?\>"
    syntax match safe "\c\<y\>"
    syntax match safe "\c\<p\>"
    syntax match safe "\c\<\(not \)\@<!safe\>"
    syntax match safe "\c\<enabled\>"
    syntax match safe "\c\(not\|'t \)\@<!continued\?\>"
    syntax match safe "\c\<any\( [a-z-]\+\)\?\>"
    syntax match safe "\c\<open\>"
    syntax match safe "\c\<return\>"
    syntax match safe "\c\<unclaimed\>"
    syntax match gitbranch "\c\<\(abort\|q\|exit\|died\?\)\>"
    syntax match safe "\c\<exit code\>"
    syntax match buildfiles "\c\<Starting [0-9a-z]\+test\>"
    syntax match seleniumError "\c\<exiting\>"
    hi sshError cterm=NONE ctermfg=226 ctermbg=197
    syntax match sshError "Host key verification failed."
    syntax match sshError "\c\<\(\w\+ \)\?not found"
    syntax match sshError "\cunexpected\(ly\)\?"
    syntax match sshError "\c\<[a-z]\+ refused\>"
    syntax match sshError "\c\(connection \)\?closed\?\>"
    syntax match sshError "\csorry"
    syntax match sshError "\c\([a-z]\+ \)\?den\(ied\|y\)\( from\)\?"
    syntax match sshError "\ckilled"
    syntax match sshError "unmerged"
    syntax match sshError "unknown"
    syntax match sshError "\cillegal \<[a-z]\+\>"
    hi buildError cterm=NONE ctermfg=226 ctermbg=197
    syntax match buildError "symbol lookup error"
    syntax match buildError "undefined symbol"
    hi testcase cterm=NONE ctermfg=213 ctermbg=237
    syntax match testcase '\c\<\w\+(\w\+\.TestCase)'
    syntax match testcasebold "RETURN CODE:"
    hi testcasebold cterm=NONE ctermfg=239 ctermbg=213
    syntax match testcasebold '\cfuncname: \<test_\(\d\+\)\w\+\(\.\w\w\>\)\@!\(\.\w\w\w\+\)\?\>'
    hi crown cterm=NONE ctermfg=202 ctermbg=240
    hi visorReplacement cterm=NONE ctermfg=009 ctermbg=018
    syntax match visorReplacement 'Œë.\{-\}Œ©' " capital alpha and capital omega
    hi crownShane cterm=NONE ctermfg=047 ctermbg=092
    syntax match crownShane '\([^ ]\@<!;\)\@<=[a-z]*;\@='
    syntax match crownShane '\c\<qxm\>'
    syntax match crownShane '\c\<ixm\>'
    syntax match crownShane '\c\<cxd\>'
    syntax match crownShane '\c\<Query XML\>'
    syntax match crownShane '\c\<Information XML\>'
    syntax match crownShane '\c\<Crown XML Database\>'
    syntax match crownShane '\<log2ixm\>'
    syntax match crownShane '\<ixm2cxd\>'
    syntax match crownShane '\c\<tmux visualiser\>'
    syntax match crownShane '\ccroogle\(\>\|:\)'
    syntax match crownShane '\(^\|‚îÇ\||\) *\~:'
    syntax match crownShane '\c\<elastic\(.\?search\)\?\>'
    syntax match crownShane '\c\<es\>'
    syntax match crownShane '\c\<logstash\>'
    syntax match crownShane '\c\<arangodb\>'
    syntax match crownShane '\c\<prelert\>'
    syntax match crownShane '\<LS\>'
    syntax match crownShane '\<ELK\>'
    syntax match crownShane '\c\<kibana\>'
    hi crownVision cterm=NONE ctermfg=212 ctermbg=240
    syntax match crownVision '\c\<Vision\>'
    syntax match crownVision '\<OpenCV\>'
    hi xpath cterm=NONE ctermfg=061 ctermbg=235
    syntax match xpath '\<id=\(\'\w\+\'\|"\w\+"\)'
    hi xpath2 cterm=NONE ctermfg=063 ctermbg=235
    syntax match xpath2 '\<class=\(\'\w\+\'\|"\w\+"\)'
    hi xpath3 cterm=NONE ctermfg=138 ctermbg=235
    syntax match xpath3 '\(\'\w\+\'\|"\w\+"\), \?By.\(ID\|XPATH\)'
    hi importantHardware cterm=NONE ctermfg=162 ctermbg=054
    syntax match importantHardware '\cstart[a-z]\+'
    hi builddep cterm=NONE ctermfg=126 ctermbg=220
    syntax match builddep '\c\<builddep\>'
    hi crownMessaging cterm=NONE ctermfg=136 ctermbg=240
    syntax match crownMessaging '\c\<Messaging\>'
    hi crownVehicleCalibration cterm=NONE ctermfg=158 ctermbg=240
    syntax match crownVehicleCalibration '\c\<Vehicle \?Calibration\>'
    hi importantFile cterm=NONE ctermfg=162 ctermbg=NONE
    syntax match importantFile '\c\<syslog\>'
    syntax match importantFile '\c\<auth.log\>'
    hi kashyap cterm=NONE ctermfg=041 ctermbg=022 " also used for other things
    hi inka cterm=NONE ctermfg=044 ctermbg=099
    hi inka cterm=NONE ctermfg=227 ctermbg=099
    syntax match inka "\c\<Inka\>\([\- .]OLO\)\?[\a]\@!" " Inka OLO
    syntax match inka "\c\<\(balance\|wonderland\)\>" " Inka OLO
    syntax match inka "\c\<\(path\|existence\)\>" " Inka OLO
    syntax match inka "\c\<\(light\|magical\)\>" " Inka OLO
    syntax match inka "\c\<\(traveller\|lilac\|wave\)\>" " Inka OLO
    syntax match inka "\c\<\(solipsism\)\>" " Inka OLO
    syntax match inka "\c\<\(key\|disco\|gypsy\)\>" " Inka OLO
    syntax match inka "\c\<\(fourteen\|14\)\>" " Inka OLO
    hi redpill cterm=NONE ctermfg=204 ctermbg=027
    syntax match redpill "\c\<Shane\>\([\- .]Mulligan\)\?[\a]\@!" " Shane Mulligan
    syntax match redpill "\c\<Laria\>\([\- .]Reynolds\)\?[\a]\@!" " Laria Reynolds
    syntax match redpill "\c\<Melee\>\([\- .]Dowle\)\?[\a]\@!" " Melee Dowle
    syntax match redpill "\csmulliga"
    syntax match redpill "\c\<JOB\>"
    syntax match redpill "\clibertyprime"
    syntax match crown "\calphapapa"
    hi bluepill cterm=NONE ctermfg=027 ctermbg=204
    syntax match bluepill "\c\<Megan\>\([\- .]Goodwin\)\?[\a]\@!" " Megan Goodwin
    syntax match bluepill "\clibertyprimebot"
    hi hannah cterm=NONE ctermfg=142 ctermbg=237
    syntax match hannah "\c\<Hannah\>\( Clark[\- .]Younger\)\?[\a]\@!"
    hi toby cterm=NONE ctermfg=255 ctermbg=059
    hi kefin cterm=NONE ctermfg=216 ctermbg=098
    syntax match kefin "\c\<kefin[\a]\@!"
    hi ircfriends cterm=NONE ctermfg=098 ctermbg=216
    syntax match ircfriends "\c\<aidalgol[\a]\@!"
    syntax match ircfriends "\c\<technomancy[\a]\@!"
    syntax match ircfriends "\c\<bpalmer[\a]\@!"
    hi lexilambda cterm=NONE ctermfg=103 ctermbg=056
    syntax match lexilambda "\c\<lexi-lambda[\a]\@!"
    hi mp3foley cterm=NONE ctermfg=077 ctermbg=026
    syntax match mp3foley "\c\<mp3foley[\a]\@!"
    hi arleen cterm=NONE ctermfg=002 ctermbg=022
    syntax match arleen "\c\<Arleen\([\- .]Donaldson\)\?[\a]\@!" " Arleen Donaldson
    hi textpath cterm=NONE ctermfg=113 ctermbg=234
    syntax match textpath "\.\(sh\|h\|hpp\|hh\)\@!\a\{1,4\}\(\d\?\([ "';:/0-9]\||[0-9]\+|\|$\)\)\@="
    hi headerpath cterm=NONE ctermfg=211 ctermbg=234
    syntax match headerpath "\.\(h\|hpp\|hh\)\>"
    hi pathshell cterm=NONE ctermfg=202 ctermbg=088
    syntax match pathshell "\.\(sh\|exp\)\([^ :;'")]\@!\|$\)"
    syntax match pathshell "\<ssh.\?\>"
    syntax match error "\<sudo\>"
    syntax match error "\<msudo\>"
    syntax match pathshell "\c\<auth[a-z]\+"
    hi pathh5 cterm=NONE ctermfg=131 ctermbg=234
    syntax match pathh5 "$\?\([A-Za-z0-9\-._/\+]\|\\ \)\{4,}\(\.\(h5\)\(.bz2\)\?\(\w\)\@!\)"
    hi subdued cterm=NONE ctermfg=237 ctermbg=NONE
    hi brighter cterm=NONE ctermfg=240 ctermbg=248
    syntax match brighter "funcname:"
    hi verysubdued cterm=NONE ctermfg=234 ctermbg=NONE
    syntax match verysubdued "--- modulename:"
    hi textdone cterm=NONE ctermfg=085 ctermbg=022
    syntax match textdone "\c\(\w\+ \)\?\<\(DONE\|FIXED\)\>"
    syntax match textdone "\c\<\(finished\|completed\?\)\>"
    syntax match textdone "\c\<sol\(ution\|ved\)\>"
    syntax match textdone "\c\<done\.\@="
    syntax match serviceAdd "\c\<on\>\(-\| [^ ]\)\@!"
    syntax match serviceAdd "\c\<active\>"
    syntax match serviceRemove "\c\<off\>"
    hi started cterm=NONE ctermfg=226 ctermbg=020
    syntax match started "\c\<\(started\)\>"
    hi stopped cterm=NONE ctermfg=161 ctermbg=234
    syntax match stopped "\c\<\(stop\|pause\|suspend\)\>"
    syntax match stopped "\c\<\([a-z]\+ \)\?\(stopped\|paused\|suspended\)\>"
    hi saved cterm=NONE ctermfg=085 ctermbg=022
    syntax match saved "\c\(not \)\@<!\<Sav[a-z]\+\>"
    hi textcomplete cterm=NONE ctermfg=232 ctermbg=236
    syntax match textcomplete ".*\<COMPLETE\>.*"
    hi textwaiting cterm=NONE ctermfg=000 ctermbg=172
    syntax match textwaiting "\<\(WAITING\|PENDING\)\>"
    hi textprogress cterm=NONE ctermfg=166 ctermbg=233
    syntax match textprogress "\c\(IN PROGRESS\>\)"
    syntax match textprogress "\<INCOMPLETE\>"
    hi importantDate cterm=NONE ctermfg=154 ctermbg=235
    syntax match importantDate "\<\d\{4\}-\d\{2\}-\d\{2\}\>"
    syntax match gitbranch "[.-]\@!#\?\<\d\{3,5\}\>[.-]\@!" " ERROR
    syntax match gitbranch "#\(\d\+\>\)\@="
    hi money cterm=NONE ctermfg=254 ctermbg=028
    syntax match money "\$\d\+\(\.\d\+\)\?\>" " $100
    hi textonloan cterm=NONE ctermfg=220 ctermbg=233
    syntax match textonloan ".*\<ON LOAN\>.*"
    hi textavailable cterm=NONE ctermfg=032 ctermbg=236
    syntax match textavailable ".*\<AVAILABLE\>.*"
    hi textunverified cterm=NONE ctermfg=144 ctermbg=233
    syntax match textunverified ".*\<UNVERIFIED\>.*"
    hi textnot cterm=NONE ctermfg=001 ctermbg=052
    syntax match textnot "\(\$\)\@!\(NOT\>\)\( IN PROGRESS\|\( [A-Z]\+\>\)\)\?"
    hi textdiscard cterm=NONE ctermfg=000 ctermbg=095
    syntax match textdiscard "\c\<\(FLAGS\?\|DISCARD\|ABO\?RT\|CANCEL\)\( THAT\)\?"
    syntax match textdiscard "\c\(STRIKEOUT\).*"
    syntax match textdiscard "\c\<cancel[a-z]*\>"
    hi texttimeboxed cterm=NONE ctermfg=000 ctermbg=095
    syntax match texttimeboxed "\c\(timeboxed\)"
    hi lowpriority cterm=NONE ctermfg=178 ctermbg=094
    syntax match lowpriority "\c\(LOW PRIORITY\)"
    syntax match lowpriority "\c\(LOW IMPORTANCE\)"
    syntax match lowpriority "\c\(not important\)" " this exists so that 'not important' does not get important highlighting
    syntax match criticalpriority "\c\(Insight:\)"
    hi priority cterm=NONE ctermfg=084 ctermbg=094
    syntax match priority "\c\<TODO\>"
    syntax match priority "\a\@<!\(Make\)\a\@!"
    syntax match priority "\<ONLY\>"
    syntax match priority "\c\<finish\>"
    syntax match priority "\c\<learn\>"
    syntax match priority "\c\<sidenote\>"
    hi task cterm=NONE ctermfg=171 ctermbg=235
    syntax match task "\(TASK\)"
    hi failing cterm=NONE ctermfg=001 ctermbg=052
    syntax match failing "ERROR"
    syntax match failing "\cis not\>"
    syntax match failing "\c\(is \)\?not \(permitted\|defined\)"
    syntax match failing "\cfail[a-z]*"
    syntax match failing "EXIT_FAILURE"
    syntax match failing "\cbroken"
    syntax match failing "\cconflict[a-z]*"
    syntax match failing "\cregression"
    syntax match failing "\cdisabled\?"
    syntax match failing "exited with return code [^0]\+"
    syntax match failing "\c\(\<FIX\>\)"
    syntax match failing "\c\(\<REPLACE\>\)"
    syntax match failing "\(\(^\|‚îÇ\)\s\+\)\@<=In \([A-Za-z]\+ \)\+\(.*[,:]\(  \|$\|‚îÇ\)\)\@="
    hi comment cterm=NONE ctermfg=110 ctermbg=240
    hi glue cterm=NONE ctermfg=084 ctermbg=235
    syntax match comment '\(/\@<!///\?/\@!\)'
    syntax match comment '\(\(^\|‚îÇ\) *\)\@<=///\+'
    syntax match comment '@\+'
    hi criticalpriority cterm=NONE ctermfg=196 ctermbg=226
    syntax match criticalpriority "\c\<CRITICAL\(LY\)\?\>"
    syntax match criticalpriority "\c\(vital\)"
    syntax match criticalpriority "\(NEXT STEP\)"
    syntax match criticalpriority "\c\<so important"
    syntax match criticalpriority "\cis king"
    syntax match criticalpriority "\cparamount"
    syntax match criticalpriority "\cessential"
    syntax match criticalpriority "Device or resource busy"
    syntax match criticalpriority "\<MUST\>"
    hi security cterm=NONE ctermfg=228 ctermbg=149
    syntax match security "\c\<priv[a-z]\+"
    syntax match security "\c\<crypt[a-z]\+\>"
    syntax match security "\c\<enc[a-z]\+\>"
    syntax match security "\c\<sec[a-z]\+\>"
    syntax match security "\c\<passw[a-z]\+\>"
    hi superimportant cterm=NONE ctermfg=226 ctermbg=208
    syntax match superimportant "\c\<super\(-duper\)\? important\>"
    syntax match superimportant "\c\<ultra important\>"
    syntax match superimportant "\c\<urgent\>"
    syntax match superimportant "\c\<absolutely\>"
    syntax match superimportant "Press\>"
    syntax match superimportant "\<W\(ait\|AIT\)\>"
    syntax match pathshell "\<root\>"
    hi toppriority cterm=NONE ctermfg=019 ctermbg=196
    syntax match toppriority "\c\(priority 1\)"
    syntax match toppriority "\c\(desperately\)"
    syntax match toppriority "\c\(top priority\)"
    syntax match toppriority "\c\(immediate\)\(ly\)\?"
    syntax match toppriority "\cextremely important"
    hi lookto cterm=NONE ctermfg=019 ctermbg=105
    syntax match lookto "\c\(\<look to[a-z]*\>\)"
    hi highpriority cterm=NONE ctermfg=226 ctermbg=142
    syntax match highpriority "\(FOUND\)"
    syntax match highpriority "\c\(high priority\)"
    syntax match highpriority "\<must\>"
    syntax match highpriority "\c\<\(require\|needs\?\)\>"
    syntax match highpriority "\c\(most \|very \)\?\(importan\(t\|ce\|ly\)\)"
    syntax match highpriority "\a\@<!\(Need\)\a\@!"
    syntax match highpriority "\c\(THIS WAY\)"
    syntax match highpriority "\c\(on second thought\)"
    syntax match highpriority "\c\(instead\)"
    syntax match highpriority "\c\<note\>"
    syntax match highpriority "\c\<REMEMBER\>"
    syntax match highpriority "\c\(\<amazing\>\)"
    syntax match highpriority "\c\(\<interesting\>\)"
    syntax match highpriority "\c\(alternatively\)"
    syntax match highpriority "\c\(actually,\)"
    syntax match highpriority "\c\(be \)\?careful\a*"
    syntax match highpriority "\cdon'\?t forget"
    hi consider cterm=NONE ctermfg=199 ctermbg=026
    syntax match consider "\cthink about"
    syntax match consider "\cconsider\>"
    hi warning cterm=NONE ctermfg=214 ctermbg=094
    syntax match warning "\(DO NOT\>\)\( [A-Z]\+\)"
    syntax match warning "\c\<warning\>"
    syntax match warning "\c\<rethink\>"
    syntax match warning "\ctimeout"
    syntax match warning "\c\<already\>"
    hi warning2 cterm=NONE ctermfg=215 ctermbg=094
    syntax match warning2 "\c\<portability\>"
    hi unknownword cterm=NONE ctermfg=010 ctermbg=034
    syntax match unknownword "\(\<UNK\(KNOWN\)\?\>\)"
    syntax match unknownword "\s?\s"
    call NumberSyntax()
    hi sensing3d cterm=NONE ctermfg=219 ctermbg=240
    syntax match sensing3d '\c3dsensing'
    syntax match sensing3d '\csensing3d'
    hi diffRemove cterm=NONE ctermfg=196 ctermbg=088
    syntax match diffRemove "\(\(^\|‚îÇ\||\) *\)\@<=-\{1,3\}[>-]\@!"
    hi def link shOptionGeneral Special
    syn match   shOptionGeneral "[ '"|(,[]\@<=[-+][_a-zA-Z#-][a-zA-Z-]\@!\([ .0-9'"=,[|)\]]\|$\)\@="
    syn match   shOptionGeneral "[ '"|(,[]\@<=\(, \?\)\@<![-+][-a-zA-Z][-_a-zA-Z]*[_a-zA-Z][a-zA-Z-]\@!\([ .0-9'"=,[|)\]]\|$\)\@="
    syn match   shOptionGeneral "[ '"|(,[]\@<=---\@![a-zA-Z#_][-_a-zA-Z#_]*\([ 0-9'"=,[|)\]]\|\)\@="
    hi shOptionNum cterm=NONE ctermfg=204 ctermbg=237
    syn match   shOptionNum "[ '"|[]\@<=[-+]\([0-9]\+\>\)\@="
    hi gcc ctermfg=051 ctermbg=032
    syntax match gcc "[ '"|,([]\@<=-isystem"
    syntax match gcc "[ '"|,([]\@<=-I\>"
    hi ld ctermfg=213 ctermbg=091
    syntax match ld "\c\<ld\w*"
    syntax match ld "\/\@<=lib"
    syntax match ld "\<\(LD\|LIB\|LINK\)[A-Z_]\+"
    syntax match ld "[ '"|,([]\@<=-l[a-z]\@="
    syntax match ld "\c\<linker\>"
    hi ldbright ctermfg=210 ctermbg=126
    syntax match ldbright "[ '"|,([]\@<=-L[a-z]\@="
    hi logcode ctermfg=023 ctermbg=166
    syntax match logcode "\c\<log\w*"
    hi discrete cterm=NONE ctermfg=238
    syntax match discrete "[<>]"
    syntax match subdued ":"
    hi emoticon cterm=NONE ctermfg=215 ctermbg=161
    syntax match emoticon " \@<=\(<3\|T_T\|>_>\|:)\|:(\|:'(\|¬¨_¬¨\|L/\|:/\|D:\|∆∏ÃµÃ°”úÃµÃ®∆∑\)\( \|$\)\@="
    syntax match emoticon "@}\~}\~\~\~"
    hi unicode cterm=NONE ctermfg=197 ctermbg=234
    syntax match unicode "[^\d0-\d127]\+"
    hi hlred cterm=NONE ctermfg=000 ctermbg=197
    hi hlgreen cterm=NONE ctermfg=000 ctermbg=28
    hi hlpurple cterm=NONE ctermfg=000 ctermbg=201
    syntax match hlred "\<R: "
    syntax match hlgreen "\<G: "
    syntax match hlpurple "\<X: "
    syntax match discrete "[a-z0-9?>]\@<=::\<"
    syntax match discrete "\%o267"
    syntax match morediscrete "\>\.\( \|$\)\@="
    syntax match brightoperator "[ |]\@<! \(==\|[%]\) "
    syntax match brightoperator "[ |]\@<! [!=/-]=\? "
    syntax match brightoperator " [=-]>\( \|$\|‚îÇ\)\@="
    syntax match brightoperator "<[=-] [ |]\@!"
    syntax match brightoperator "\c[a-z]\@<=->[a-z]\@="
    syntax match brightoperator "\c[a-z]\@<=<-[a-z]\@="
    syntax match brightoperator "\([^ ] \? \)\@<=-\(  \?[^ ]\)\@="
    syntax match brightoperator "[!,&]"
    syntax match gitbranch "\^"
    syntax match brightoperator "\(^\|‚îÇ\)\@<!+"
    hi asteriskoperator ctermbg=052 ctermfg=196
    syntax match asteriskoperator "\.\?\(#\**\)\@<!\*"
    syntax match brightoperator ":[=-]"
    syntax match brightoperator " \@<=++ \@="
    hi diffAdd cterm=NONE ctermfg=076 ctermbg=028
    syntax match diffAdd "\(\(^\|‚îÇ\||\) *\)\@<=+\{1,3\}"
    syntax match subdued "[0-9]\@<=%"
    hi gitbranch cterm=NONE ctermfg=161 ctermbg=052
    hi brightoperator2 cterm=NONE ctermbg=235 ctermfg=083
    syntax match brightoperator2 "[?]"
    syntax match gitbranch "[$]"
    syntax match brightoperator2 "\\\@<=|=\?"
    hi brightoperator3 cterm=NONE ctermbg=060 ctermfg=202
    syntax match brightoperator3 "\(\\\|| \|* \|[/_]\)\@<!|=\?"
    syntax match discrete ";"
    syntax match discrete " \@<=\\\+; \@="
    hi unaryoperator ctermbg=239 ctermfg=105
    syntax match unaryoperator "\(\\+ \?\)[a-z]\@="
    syntax match unaryoperator "+\@<!++[a-z]\@="
    syntax match unaryoperator "[a-z]\@<=+++\@!"
    hi compiler ctermbg=177 ctermfg=129
    syntax match compiler "distcc"
    syntax match compiler "\<[gc]++"
    hi new cterm=NONE ctermfg=210 ctermbg=025
    syntax match new "\c\<new\([- ][a-z0-9]\+\( camera\)\?\)\?\(/[a-z0-9]\+\)\?\>"
    hi magitstandout cterm=NONE ctermfg=193 ctermbg=244
    syntax match magitstandout "\(\(new file\|resolved\|unmerged\|modified\|deleted \)\@<=   \)[^ ]\+"
    hi old cterm=NONE ctermfg=178 ctermbg=090
    syntax match old "\c\<old\>"
    hi tmuxsession cterm=NONE ctermfg=199 ctermbg=053
    syntax match tmuxsession "\(^\|‚îÇ\||\)F\d\+ \^\?[A-Za-z0-9-]\+\>"
    syntax match tmuxsession "\(\<localhost\(_[A-Za-z0-9-]\+\)*\)\@<=:"
    syntax match tmuxsession "\<localhost\(\(_[A-Za-z0-9-]\+\)*:\)\@="
    syntax match tmuxsession "\<localhost\(\(_[A-Za-z0-9-]\+\)\+\)\@="
    hi ui cterm=NONE ctermfg=242 ctermbg=239
    syntax match ui "[^[]\@<!|\+"
    hi textunderline cterm=NONE ctermfg=240 ctermbg=236
    hi textunderlineadd cterm=NONE ctermfg=042 ctermbg=236
    syntax match textunderlineadd "\(| \+[0-9]\+ \)\@<=[+]\+\(  \|$\|‚îÇ\)\@="
    hi textunderlinemod cterm=NONE ctermfg=202 ctermbg=236
    syntax match textunderlinemod "\(| \+[0-9]\+ \)\@<=[+]\+[-]\+\(  \|$\|‚îÇ\)\@="
    hi textunderlinerem cterm=NONE ctermfg=124 ctermbg=236
    syntax match textunderlinerem "\(| \+[0-9]\+ \)\@<=[-]\+\(  \|$\|‚îÇ\)\@="
    hi importantfolder cterm=NONE ctermfg=087 ctermbg=243
    syntax match importantfolder "\/ws\/[a-z0-9-]\+"
    hi punctuation cterm=NONE ctermfg=007 ctermbg=NONE
    syntax match punctuation "\(\(^\|‚îÇ\||\)[^a-zA-Z]*\)\@<=[‚óÜ‚àô]"
    syntax match punctuation "\([^a-zA-Z]\+\)\@<=[‚óÜ‚àô]\s\+"
    hi texturl cterm=NONE ctermfg=069 ctermbg=234
    syntax match texturl "https\?://" " http://www.google.com
    syntax match texturl "ssh://" " ssh://stash
    hi emacstmuxkey cterm=NONE ctermfg=099 ctermbg=234
    syntax match emacstmuxkey "\<\([ACMS]-\)\+[^ ]\(\.\|\s\|$\|>\)\@="
    syntax match emacstmuxkey "\c\<\([ACMS]-\)\+\([a-z]\+-\)*[a-z]\+\(-[0-9]\|>\|\.\|\s\|\|:$\|\"\|>\?>-\)\@="
    syntax match emacstmuxkey "\(^\|\s\@<=\)\^[A-Z_]\>"
    syntax match emacstmuxkey "\<\([ACMS]-\)\+[F\"]\@="
    syntax match emacstmuxkey "‚Äò[^ ]\+‚Äô"
    syntax match emacstmuxkey "\c\<\(\(esc\(ape\)\?\|page\|ctrl\|alt\|shift\|meta\)\>-\?\)\+"
    syntax match emacstmuxkey "\c\<\(\(esc\(ape\)\?\|pg\|page\|ctrl\|alt\|shift\|meta\)-\)\+\(.\( \|$\)\@=\|[a-z]\+\)"
    syntax match emacstmuxkey "\c\([ACMS]-\)\?<[a-z]\+\(-[0-3]\)\?>"
    syntax match emacstmuxkey "\(^\|‚îÇ\||\) [a-zA-Z] \{11\} \@!"
    syntax match brighter "\<d\([r-][w-]\)\@="
    hi allperm cterm=NONE ctermfg=154 ctermbg=166
    syntax match allperm 'rwx'
    hi rw cterm=NONE ctermfg=154 ctermbg=133
    syntax match rw 'rw-'
    hi rx cterm=NONE ctermfg=154 ctermbg=068
    syntax match rx 'r-x'
    hi ro cterm=NONE ctermfg=252 ctermbg=241
    syntax match ro 'r--'
    hi rs cterm=NONE ctermfg=226 ctermbg=208
    syntax match rs 'rws'
    hi level4 cterm=NONE ctermfg=227 ctermbg=236
    hi level3 cterm=NONE ctermfg=206 ctermbg=236
    syntax match level3 '>\@<=all<\@='
    hi level2 cterm=NONE ctermfg=149 ctermbg=236
    syntax match level2 '>\@<=trace<\@='
    hi level1 cterm=NONE ctermfg=033 ctermbg=236
    syntax match level1 '>\@<=debug<\@='
    hi level0 cterm=NONE ctermfg=127 ctermbg=236
    syntax match level0 '>\@<=none<\@='
    hi staging cterm=NONE ctermfg=242 ctermbg=237
    syntax match staging '\/\@<=staging\/\@='
    hi irc cterm=NONE ctermfg=237 ctermbg=242
    syntax match discrete '\c\(\d\d:\d\d ::: .\{-\}\(  \|$\|‚îÇ\)\@=\)'
    syntax match discrete '\c\(\d\d:\d\d \[.\{-\}\(  \|$\|‚îÇ\)\@=\)'
    syntax match discrete "\(\>\|[!: ]\|^\)\@<=/\(\<\|\$\|  \|$\)\@="
    syntax match discrete "[+*/<>-]\@<!="
    syntax match discrete ">\@<!>\?>-\+>\@!"
    syntax match morediscrete "[[\]]"
    hi googleblue cterm=NONE ctermfg=069 ctermbg=255
    syntax match googleblue '\c\<g\(oogle\)\@='
    syntax match googleblue '\c\(\<goo\)\@<=g\(le\)\@='
    syntax match googleblue '\<g\([rl]\>\)\@='
    syntax match googleblue '\<f\(l\>\)\@='
    hi googlered cterm=NONE ctermfg=197 ctermbg=255
    syntax match googlered '\c\(\<g\)\@<=o\(ogle\)\@='
    syntax match googlered '\c\(\<googl\)\@<=e[ry]\?'
    syntax match googlered '\(\<g\)\@<=[rl]\>'
    syntax match googlered '\(\<f\)\@<=l\>'
    syntax match googlered '\<yt\>'
    syntax match googlered '\<so\>'
    syntax match googlered '\<gh\>'
    syntax match googlered '\<ga\>'
    syntax match googlered '\<gx\>'
    syntax match googlered '\<wk\>'
    syntax match googlered '\<gdc\>'
    syntax match googlered '\<googling\>'
    syntax match googlered '\<youtube\>'
    hi tensorflow cterm=NONE ctermfg=202 ctermbg=255
    syntax match tensorflow '\c\<tensorflow\>'
    syntax match tensorflow '\c\<tf\>'
    syntax match tensorflow '\c\<keras\>'
    hi hackernewsorange cterm=NONE ctermfg=000 ctermbg=202
    syntax match hackernewsorange '\<hn\>'
    syntax match hackernewsorange '\<yc\>'
    syntax match hackernewsorange '\<ycombinator\>'
    syntax match hackernewsorange '\<hacker\>'
    hi googleyellow cterm=NONE ctermfg=178 ctermbg=255
    syntax match googleyellow '\c\(\<go\)\@<=o\(gle\)\@='
    hi googlegreen cterm=NONE ctermfg=28 ctermbg=255
    syntax match googlegreen '\c\(\<goog\)\@<=l\(e\)\@='
    hi unixutil cterm=NONE ctermfg=049 ctermbg=024
    syntax match unixutil '\c\<pip\>'
    syntax match unixutil "\<arg[cv]\>"
    syntax match tests "['\"]\@<=git [a-z]\+\>"
    hi online cterm=NONE ctermfg=049 ctermbg=024
    syntax match online "[\d10003]"
    syntax match online "[\d9711]"
    hi logic cterm=NONE ctermfg=210 ctermbg=236
    syntax match logic "\ctherefore"
    syntax match logic "\creally do"
    syntax match logic "\cexcept"
    syntax match logic "\c\<but\>"
    syntax match logic "\c\<if\>"
    syntax match logic "\c\<else\>"
    syntax match logic "\c\<el\(se\)\?if\>"
    syntax match logic "\c\<then\(  \|$\)\@!\>"
    syntax match discrete "\c\<then\(  \|$\)\@=\>"
    syntax match logic "\c\<and\>"
    syntax match logic "\c\</\?or\>"
    syntax match logic "\c\<case\>"
    syntax match logic "\c\<while\>"
    hi codekeywords cterm=NONE ctermfg=068 ctermbg=236
    syntax match codekeywords "^[a-z-0-9-A-Z_-]\+\(:\)\@="
    syntax match codekeywords "\<def\>"
    syntax match codekeywords "\<class\>"
    syntax match codekeywords "\<try\>"
    syntax match codekeywords "\<throw\>"
    syntax match codekeywords "\<catch\>"
    syntax match codekeywords "\<foreach\>"
    syntax match codekeywords "\<except\>"
    syntax match codekeywords "\<finally\>"
    syntax match codekeywords "\<yield\>"
    syntax match codekeywords "\<import\>"
    syntax match codekeywords "\<virtual\>"
    syntax match codekeywords "\<namespace\>"
    syntax match codekeywords "\<void\>"
    syntax match codekeywords "\<with\>"
    syntax match codekeywords "\<pass\>"
    syntax match codekeywords "#\?\<include\>"
    syntax match codekeywords "\<explicit\>"
    syntax match codekeywords "\<protected\>"
    syntax match codekeywords "\<vector\>"
    syntax match codekeywords "#\?\<define\>"
    syntax match codekeywords "\c\<for\>"
    syntax match codekeywords "\<With\>"
    syntax match codekeywords "\<To\>"
    syntax match codekeywords "\<Next\>"
    " syntax match codekeywords "\c\<Private\>"
    " syntax match codekeywords "\c\<Public\>"
    syntax match codekeywords "\<\(struct\|type\)\>"
    syntax match codekeywords "\<typedef\>"
    syntax match codekeywords "\<where\>"
    syntax match money "\cjust entered"
    syntax match money "\cbitcoin"
    syntax match money "\cblockchain"
    syntax match codekeywords "\<contract\>"
    hi algorithms cterm=NONE ctermfg=129 ctermbg=236
    syntax match algorithms "\<argmin\>"
    syntax match algorithms "\<argmax\>"
    syntax match discrete "\<boost\>"
    syntax match discrete "\<std\>"
    hi awesome ctermfg=063 ctermbg=053
    syntax match awesome "\<problog"
    syntax match awesome "\<query"
    syntax match awesome "\<queries"
    syntax match awesome "\<examples\?"
    syntax match awesome "\c\<search\>"
    syntax match awesome "\c\<artificial intelligence\>"
    syntax match awesome "\c\<ai\>"
    hi facebook ctermfg=255 ctermbg=062
    syntax match facebook "\c\<facebook\>"
    syntax match facebook "\c\<fb\>"
    hi buildfiles ctermfg=227 ctermbg=058
    syntax match buildfiles "\csconscript"
    syntax match buildfiles "\c\<scons\>"
    hi interesting ctermfg=149 ctermbg=029
    syntax match interesting "\cmachine[- ]\?learning"
    syntax match interesting "\cdeep[- ]\?learning"
    syntax match interesting "\clearning"
    syntax match interesting "\csemantic"
    syntax match interesting "\cartificial[- ]\?intelligence"
    syntax match interesting "\c\<ai\>"
    syntax match interesting "\c\<\(neural\)\(.network\)\?\>"
    syntax match interesting "\c\<predict[a-z]\+"
    syntax match interesting "\c\<probab[a-z]\+"  " Use chinese later to override
    syntax match interesting "\c\<classif[a-z]\+"
    syntax match interesting "\c\<sentim[a-z]\+"
    syntax match interesting "\(a.\?p\|poste\)riori"
    syntax match interesting "\<Magnet\>"
    hi automatic ctermfg=253 ctermbg=124
    syntax match automatic "\c\<macro\>"
    syntax match automatic "\c\<automat\w\+\>"
    hi machinelearning ctermfg=034 ctermbg=234
    syntax match machinelearning "\ck-means"
    syntax match machinelearning "\ccluster"
    syntax match machinelearning "\cgaussian"
    syntax match machinelearning "\cnlp"
    hi reality ctermfg=075 ctermbg=234
    syntax match reality "\cgpt-[a-z0-9]"
    syntax match reality "\clms\?\>"
    syntax match reality "\clanguage"
    syntax match reality "\cmodels\?\>"
    syntax match reality "\cimaginary"
    syntax match reality "\creality"
    syntax match reality "\ctruth"
    syntax match reality "\cfact"
    hi math ctermfg=172 ctermbg=228
    syntax match math "\c\<pi\>"
    syntax match math "\c\<\(linear.\|abstract.\)\?algebra\>"
    hi whiteonblack ctermfg=255 ctermbg=245
    syntax match whiteonblack "\c\(\<[a-z]*\(map\) \)\@<=[a-z]\+"
    syntax match allcaps "\c\<[a-z]\+\(\(map\)\>\)\@="
    hi serviceAdd cterm=NONE ctermfg=077 ctermbg=028
    hi serviceRemove cterm=NONE ctermfg=196 ctermbg=088
    syntax match serviceAdd "\[\@<= + \]\@="
    syntax match serviceRemove "\[\@<= - \]\@="
    syntax match serviceAdd "\[\@<=+\]\@="
    syntax match serviceAdd "\[\@<=-\]\@="
    syntax match serviceRemove "\[\@<= \]\@="
    syntax match discrete "|---"
    syntax match comment '\(\([~+-]\|^\|‚îÇ\||\) *\)\@<="\([^"]*\("[^"]*"[^"]*\)*"[^"]*\(  \|$\|‚îÇ\)\)\@!'
    syntax match comment ' \@<=\(#\|%\|!\) \@='
    syntax match comment '\(\([~+-]\|^\|‚îÇ\||\) *\)\@<=\(#\|%\|!\)'
    syntax match comment '\(\([~+-]\|^\|‚îÇ\||\) *\)\@<=;'
    syntax match morediscrete '\(\([~+-]\|^\|‚îÇ\||\) *\(#\|\"\|%\)\)\@<=\(#\|\"\|%\)\+'
    syntax match morediscrete '\(\([~+-]\|^\|‚îÇ\||\) *\(!\)\)\@<=\(!\)\+'
    syntax match morediscrete '\(\([~+-]\|^\|‚îÇ\||\) *;\)\@<=;\+'
    syntax match discrete '\\[tn]'
    syntax match discrete '\.snippets'
    syntax match discrete '\(\$\)\@<=[A-Z]\+[/$]\@='
    syntax match discrete '\<const\>'
    syntax match morediscrete '¬¨'
    syntax match morediscrete '<<global>>'
    syntax match onlyhex 'a-z'
    syntax match onlyhex 'A-Z'
    syntax match onlyhex '0-9'
    hi glue2 cterm=NONE ctermfg=029 ctermbg=234
    syntax match glue2 '\(/\*\+\|\*\+/\)'
    syn match discrete "\([-+][_a-zA-Z#-]\)\@<=,"
    hi master ctermfg=136 ctermbg=234
    syntax match master "master[_-]\@="
    hi matrix ctermfg=245 ctermbg=234
    syntax match matrix "[_-]\@<=matrix"
    hi verify ctermfg=024 ctermbg=234
    syntax match verify "verify[_-]\@="
    hi auto ctermfg=125 ctermbg=234
    syntax match auto "auto\(test\)\@="
    hi soak ctermfg=130 ctermbg=234
    syntax match soak "soak\(test\)\@="
    hi bin ctermfg=226 ctermbg=095
    syntax match bin "\(\/s\?bin\/\)\@<=[A-Za-z-_]\+[A-Za-z_/-]\@!"
    syntax match brightoperator "=\@<!=\{1,2\}=\@!"
    syntax match emacstmuxkey " \@<==[A-Za-z] \([A-Z][a-z]\([A-Za-z-]\+ \?\)\+\)\@="
    syntax match buildfiles "\.\/"
    syntax match glue "\(\.\)\@<!\.\.\.\([./]\)\@!"
    syntax match buildfiles "`"
    hi gitbranch cterm=NONE ctermfg=197 ctermbg=052
    syntax match subdued "master"
    syntax match gitbranch "\(\(\(^\|‚îÇ\)\s*\)\([a-f0-9]\{7\}\)\)\@<= [a-z-]\+ "
    syntax match gitbranch "\(\(\(^\|‚îÇ\)\s*\)\([a-f0-9]\{7\} [a-z-]\+\|not git\) \[\)\@<=.\{-}\(\]\)\@="
    syntax match buildfiles "Œ¥"
    hi tilde ctermfg=033 ctermbg=019
    syntax match tilde "\(\(^\||\|‚îÇ\) *\)\@<!\~\(\/\([a-z]\+\/\)\?\)\?"
    syntax match tilde "\(\(^\||\|‚îÇ\) *\)\@<=\~\/\([a-z]\+\/\)\?"
    syntax match tilde "\(::\)\@<=\~\([A-Za-z0-9]\+\)"
    syntax match gitbranch "\.\.\/"
    syntax match three "\<third"
    syntax match tests "\c\(third\)\@<=party"
    syntax match discrete "\.\.\.\/"
    hi gitbranchdetached cterm=NONE ctermfg=161 ctermbg=052
    syntax match gitbranchdetached "\(\(^\|‚îÇ\)[a-f0-9]\{7\}\)\@<=  \([^ ]\+ \)\+\(Œ¥ \)\?¬ª"
    syntax match gitbranch  "\(^\|‚îÇ\)\@<=\(-\?[a-z]\+\)\+\( -- \)\@="
    syntax match subdued  "origin\/"
    syntax match gdb  "\<release\/"
    syntax match glue '\c\(\<\|[^a-z]\)\@<=tmux[a-z]\@!'
    syntax match gitbranch  "-\?\<SIG[A-Z]\+\([0-9]\?\>\)\@="
    syntax match gitbranch "\ckill\(all\)\? \?\(-[A-Z0-9]\)\@="
    syntax match codekeywords "\chdf5\?"
    syntax match discrete "\<auto\>"
    syntax match success '\(\<[A-Z5_]\+\)\@<=_MODE\>'
    syntax match success '\<[A-Z5_]\+\(_MODE\>\)\@='
    syntax match success "EXIT_SUCCESS"
    syntax match subdued "[a-z]\@<= | \(-[a-z]\)\@="
    syntax match gitbranch "\(\(^\|‚îÇ\) *\([~+] \)\?\)\@<=snippet "
    syntax match buildfiles "\(snippet \)\@<=[^ ]\+"
    syntax match gitbranch "\<diverged\>"
    syntax match textunderlinemod "\<modified\>"
    syntax match serviceRemove "\<deleted\>"
    syntax match serviceAdd "\<resolved\>"
    syntax match serviceAdd "\<Installed\>"
    syntax match one '_\@<=w\>'
    syntax match one 'fg\>'
    syntax match one '\<fg'
    syntax match one '\cforeground'
    syntax match five '_\@<=s\>'
    syntax match five 'bg\>'
    syntax match five '\<bg'
    syntax match five '\cbackground'
    syntax match one '\c\(_\|\<\)\@<=x\(_\|\>\)\@='
    syntax match two '\c\(_\|\<\)\@<=y\(_\|\>\)\@='
    syntax match three '\c\(_\|\<\)\@<=z\(_\|\>\)\@='
    syntax match onlyhex '\([^A-Za-z0-9]\)\@<=%[a-zA-Z][a-zA-Z]\@!'
    syntax match zero '\([^A-Za-z0-9]\|\>\)\@<=%[a-z]\>'
    syntax match one '\([^A-Za-z0-9]\|\>\)\@<=%s\>'
    syntax match two '\([^A-Za-z0-9]\|\>\)\@<=%d\>'
    syntax match three '\([^A-Za-z0-9]\|\>\)\@<=%\([ld]u\)\>'
    syntax match four '\([^A-Za-z0-9]\|\>\)\@<=%f\>'
    syntax match five '\([^A-Za-z0-9]\|\>\)\@<=%lld\>'
    syntax match six '\([^A-Za-z0-9]\|\>\)\@<=%llu\>'
    syntax match brightoperator '\([^A-Za-z0-9]\|\>\)\@<=%\.\?[0-9]\@='
    hi interface cterm=NONE ctermfg=228 ctermbg=148
    syntax match interface '\<enp[0-9]\@='
    syntax match discrete '\<self\.'
    syntax match discrete '\<this->'
    syntax match testcase '\<test_\([A-Z0-9a-z_]\+\.py\)\@='
    syntax match testcase '\(\<test_\)\@<=[A-Za-z_]\+\(\.py\)\@='
    syntax match testcase '\(\<test_[0-9]\+[a-z]*\)\@<=_[A-Za-z_]\+\(\.py\)\@='
    syntax match subdued "\.\(pyc\|os\?\)\>"
    syntax match subdued "\cnothing to \w\+"
    syntax match subdued "\(python2\)"
    syntax match discrete "Out\(\[[0-9]\+\]\)="
    syntax match discrete "In\[\([0-9]\+\]:=\)\@="
    syntax match discrete "\(In\[[0-9]\+\)\@<=\]:="
    syntax match discrete "\<fi\>"
    syntax match discrete "\<esac\>"
    syntax match tests "\c\<none\>"
    hi searchtermsgreen ctermfg=000 ctermbg=084
    hi searchtermspurple ctermfg=000 ctermbg=201
    hi regex ctermfg=074 ctermbg=237
    syntax match regex "\c\<pcre\>"
    syntax match regex "\c\<regex\>"
    syntax match regex "\c\<match\>"
    syntax match diffRemove "<\(  \|$\|‚îÇ\)\@="
    syntax match diffAdd "\(^\|‚îÇ\)\@<=>\(  \|$\|‚îÇ\)\@="
    syntax match diffRemove "<\{7\} "
    syntax match textunderlinemod "=\@<!=\{7\}\( \|$\)"
    syntax match diffAdd ">\{7\} "
    hi red ctermfg=160 ctermbg=088
    syntax match red "\<red\>"
    hi blue ctermfg=075 ctermbg=027
    syntax match blue "\c\<blue\>"
    hi green ctermfg=082 ctermbg=034
    syntax match green "\c\<green\>"
    hi yellow ctermfg=226 ctermbg=142
    syntax match yellow "\c\<yellow\>"
    hi purple cterm=NONE ctermfg=165 ctermbg=093
    syntax match purple "\c\<purple\>"
    hi orange cterm=NONE ctermfg=216 ctermbg=166
    syntax match orange "\c\<orange\>"
    " teal is the dark cyan
    hi teal cterm=NONE ctermfg=030 ctermbg=024
    syntax match teal "\c\<teal\>"
    hi cyan cterm=NONE ctermfg=123 ctermbg=045
    syntax match cyan "\c\<cyan\>"
    syntax match blue "\<Enh\>"
    hi haskellop ctermfg=130 ctermbg=250
    syntax match haskellop "\((| \)\@<=[^ ]\+\( [A-Za-z -/[\]]\+ |)\)\@="
    hi haskelldesc ctermfg=209 ctermbg=234
    syntax match haskelldesc "\((| [^ ]\+ \)\@<=[A-Za-z -/[\]]\+\( |)\)\@="
    syntax match buildfiles "On branch"
    syntax match buildfiles "\<mk[a-z]*\>"
    hi tests cterm=NONE ctermfg=247 ctermbg=234
    syntax match tests "\c\([a-z]*\)\?tests\?\([a-z]*\)\?"
    hi hlgdb cterm=NONE ctermfg=000 ctermbg=255
    syntax match hlgdb "[^/ ]\+\.[a-z]\+:[0-9]\+\(:.*\|  \|$\|‚îÇ\)\@="
    syntax match morediscrete "\(^\|‚îÇ\)\@<=\.\+"
    syntax match morediscrete "\(^\|‚îÇ\)\@<=?? [^ ]\+"
    syntax match gitbranch "\(^\|‚îÇ\)\@<= M "
    syntax match tests "\c\(TS_\)\?assert[_a-z]*"
    hi reallyBad cterm=NONE ctermfg=226 ctermbg=197
    syntax match reallyBad "\cfatal"
    syntax match reallyBad "\cterminated"
    syntax match reallyBad "\cerror:"
    syntax match reallyBad "\c\<shame\>"
    hi reallyBad cterm=NONE ctermfg=226 ctermbg=197
    syntax match reallyBad "\(\<[a-zA-Z]\+\>\)\s\<\1\>"
    syntax match numberpunctuation "[0-9]\@<=[ :-][0-9]\@="
    hi boldquote cterm=NONE ctermfg=234 ctermbg=39
    syntax match boldquote "-\@<!-\?->>"
    syntax match boldquote "<<--\?-\@!"
    syntax match brightoperator "<[/.$*]>"
    syntax match brightoperator ">\{1,2\}="
    syntax match brightoperator "<>"
    syntax match brightoperator "=<<"
    syntax match failing "&\@<=optional "
    syntax match reallyBad "\cbanned"
    syntax match reallyBad "\ckicked"
    syntax match buildfiles "\c\<pip\>"
    syntax match buildfiles "\c\<pypi\>"
    syntax match buildfiles "\c\<apt\(-cache\)\?\>"
    syntax match buildfiles "\c\<npm\>"
    syntax match buildfiles "\c\<cabal\>"
    syntax match buildfiles "\c\<ghc-pkg\>"
    syntax match gitRtcPackage "=== \d\+\/\d\+\( \w\+\)\+"
    " emacs keywords - fist element of sexp
    syntax match kashyap "(\@<=\([a-z:-]\+\)\( \|$\)\@="
    syntax match justin "(\@<=:\([a-z:-]\+\)\( \|$\)\@="
    syntax match toby "(\@<=\(unless\|def[a-z]\+\|add-to-list\|if\|let\|and\|not\|set\|setq\|or\|when\)\( \|$\)\@="
    syntax match diffRemove "|\@<=---\@!"
    syntax match morediscrete "\<Domain Users\>"
    syntax match morediscrete "\([a-zA-Z0-9]\)\@<!\(\\[a-z_]\+\)\+\>"
    syntax match discrete "\<pick\( [a-f0-9]\{7\}\)\@=\>"
    syntax match reallyBad "\<work\( [a-f0-9]\{7\}\)\@=\>"
    syntax match discrete "\<onto\( [a-f0-9]\{7\}\)\@=\>"
    hi closesyntax cterm=NONE ctermfg=065 ctermbg=000
    syntax match closesyntax "\<end\(ing\)\@![a-z]\+\>"
    syntax match closesyntax "End [A-Z][a-z]\+"
    hi api cterm=NONE ctermfg=112 ctermbg=238
    syntax match api "\c\<\(rest\|graphql\|api\)\>"
    syntax match emacstmuxkey "\(\<MapM \w\+\)\@<=\( \w\)\+"
    hi devnull cterm=NONE ctermfg=124 ctermbg=000
    syntax match devnull "\/dev\/null"
    syntax match toby "\c\<github\>"
    syntax match codekeywords "[a-z0-9]\@<=_t\>"
    hi elonmusk cterm=NONE ctermfg=015 ctermbg=199
    syntax match elonmusk "{{"
    syntax match elonmusk "}}"
    hi pullrequest cterm=NONE ctermfg=255 ctermbg=080
    syntax match pullrequest "\cpull request"
    syntax match emacstmuxkey "\({{\)\@<=[ a-zA-Z_0-9()-]*\(}}\)\@="
    hi ircroom cterm=NONE ctermfg=023 ctermbg=NONE
    syntax match ircroom "#\@<!##\?[A-Za-z-]\+"
    syntax match toby "\(\(known\)\@<! as \)\@<=[^ ]\+$"
    hi ircname cterm=NONE ctermfg=093 ctermbg=234 " this looks the same as irc names, and is the superset, so i disabled the syntax just above
    syntax match ircname "\c< *[+@]\?[/a-z 0-9_-]\+\(\[m\]\)\?`\? *>"
    syntax match ircname "\(known as \)\@<=[^ ]\+$"
    syntax match ircname "\c\(] \)\@<=<[/a-z 0-9._-]\+> \@="
    hi liesel cterm=NONE ctermfg=178 ctermbg=094
    syntax match liesel "\c\<lisel\>"
endf
command! GeneralSyntax silent! call GeneralSyntax()

" call NumberSyntax()
" call GeneralSyntax()

" This works better:
" windo silent! call GeneralSyntax()|au BufEnter * call GeneralSyntax()

tnoremap <C-@> <C-Space>
tmap <LeftMouse> <LeftMouse>
" tmap <C-LeftMouse> <C-LeftMouse>
" It maps correctly, but can't SEND C-LeftMouse
" tmap <C-LeftMouse> :echom 'Foo'<CR>
" The 16; is the bit that is the C-
" The rest is the location
tmap <C-LeftMouse> [<16;1;7M
" That's all that matters for Pen.el because the Right Click Menu doesn't care about
" The cursor click position
" tmap <RightMouse> <RightMouse>
tmap <RightMouse> [<16;1;7M
tmap <C-M-O> <BS>
tmap <S-Up> [1;2A
tmap <S-Down> [1;2B
tmap <S-Right> [1;2C
tmap <S-Left> [1;2D
tmap <M-Up> [1;3A
tmap <M-Down> [1;3B
tmap <M-Right> [1;3C
tmap <M-Left> [1;3D
tmap <M-S-Up> [1;4A
tmap <M-S-Down> [1;4B
tmap <M-S-Right> [1;4C
tmap <M-S-Left> [1;4D
tmap <C-Up> [1;5A
tmap <C-Down> [1;5B
tmap <C-Right> [1;5C
tmap <C-Left> [1;5D
tmap <C-S-Up> [1;6A
tmap <C-S-Down> [1;6B
tmap <C-S-Right> [1;6C
tmap <C-S-Left> [1;6D
tmap <M-C-Up> [1;7A
tmap <M-C-Down> [1;7B
tmap <M-C-Right> [1;7C
tmap <M-C-Left> [1;7D
tmap <M-C-S-Up> [1;8A
tmap <M-C-S-Down> [1;8B
tmap <M-C-S-Right> [1;8C
tmap <M-C-S-Left> [1;8D
tmap <F1> OP
tmap <S-F1> [1;2P
tmap <F1> [1;3P
tmap <M-F1> [1;9P
tmap <M-F1> [1;3P
tmap <S-M-F1> [1;4P
tmap <C-F1> [1;5P
tmap <C-S-F1> [1;6P
tmap <C-S-M-F1> [1;8P
tmap <F2> OQ
tmap <S-F2> [1;2Q
tmap <S-F2> [26~
tmap <F2> [1;3Q
tmap <M-F2> [1;3Q
tmap <S-M-F2> [1;4Q
tmap <C-F2> [1;5Q
tmap <C-S-M-F2> [1;8Q
tmap <F3> OR
tmap <S-F3> [1;2R
tmap <F3> [1;3R
tmap <M-F3> [1;3R
tmap <S-M-F3> [1;4R
tmap <C-F3> [1;5R
tmap <C-S-M-F3> [1;8R
tmap <F4> OS
tmap <S-F4> [1;2S
tmap <F4> [1;3S
tmap <M-F4> [1;3S
tmap <S-M-F4> [1;4S
tmap <C-F4> [1;5S
tmap <S-M-F4> [1;8S
tmap <F5> [15~
tmap <S-F5> [15;2~
tmap <F15> [15;2~
tmap <F5> [15;3~
tmap <M-F5> [15;3~
tmap <S-M-F5> [15;4~
tmap <C-F5> [15;5~
tmap <C-S-M-F5> [15;8~
tmap <F6> [17~
tmap <F16> [17;2~
tmap <S-F6> [17;2~
tmap <F6> [17;3~
tmap <M-F6> [17;3~
tmap <S-M-F6> [17;4~
tmap <C-F6> [17;5~
tmap <C-S-M-F6> [17;8~
tmap <F7> [18~
tmap <F17> [18;2~
tmap <S-F7> [18;2~
tmap <F7> [18;3~
tmap <M-F7> [18;3~
tmap <S-M-F7> [18;4~
tmap <C-F7> [18;5~
tmap <C-S-M-F7> [18;8~
tmap <F8> [19~
tmap <F18> [19;2~
tmap <S-F8> [19;2~
tmap <F8> [19;3~
tmap <M-F8> [19;3~
tmap <S-M-F8> [19;4~
tmap <C-F8> [19;5~
tmap <C-S-M-F8> [19;8~
tmap <F9> [20~
tmap <F19> [20;2~
tmap <S-F9> [20;2~
tmap <F9> [20;3~
tmap <M-F9> [20;3~
tmap <S-M-F9> [20;4~
tmap <C-F9> [20;5~
tmap <C-S-M-F9> [20;8~
tmap <F10> [21~
tmap <F20> [21;2~
tmap <S-F10> [21;2~
tmap <F10> [21;3~
tmap <M-F10> [21;3~
tmap <S-M-F10> [21;4~
tmap <C-F10> [21;5~
tmap <C-S-M-F10> [21;8~
tmap <F11> [23~
tmap <S-F11> [23;2~
tmap <F11> [23;3~
tmap <M-F11> [23;3~
tmap <S-M-F11> [23;4~
tmap <C-F11> [23;5~
tmap <C-S-M-F11> [23;8~
tmap <F12> [24~
tmap <S-F12> [24;2~
tmap <F12> [24;3~
tmap <M-F12> [24;3~
tmap <S-M-F12> [24;4~
tmap <C-F12> [24;5~
tmap <C-S-M-F12> [24;8~
tmap <F13> [25~
tmap <S-F13> [25;2~
tmap <M-F13> [25;3~
tmap <S-M-F13> [25;4~
tmap <C-F13> [25;5~
tmap <C-S-M-F13> [25;8~
tmap <F14> [26~
tmap <S-F14> [26;2~
tmap <M-F14> [26;3~
tmap <S-M-F14> [26;4~
tmap <C-F14> [26;5~
tmap <C-S-M-F14> [26;8~
inoremap <M-F1> <Esc>:bd!<CR>i
noremap <M-F1> :bd!<CR>i
inoremap <M-F2> <Esc>:bd!<CR>i
noremap <M-F2> :bd!<CR>i
inoremap <M-F3> <Esc>:call QuitJump()<CR>
noremap <M-F3> :call QuitJump()<CR>
nnoremap <f1> <nop>
map <F1> <Nop>
tmap <S-Tab> [Z
nnoremap <M-a> <Esc>a
nnoremap <M-b> <Esc>b
nnoremap <M-c> <Esc>c
nnoremap <M-d> <Esc>d
nnoremap <M-e> <Esc>e
nnoremap <M-f> <Esc>f
nnoremap <M-g> <Esc>g
nnoremap <M-h> <Esc>h
nnoremap <M-i> <Esc>i
nnoremap <M-j> <Esc>j
nnoremap <M-k> <Esc>k
nnoremap <M-l> <Esc>l
nnoremap <M-m> <Esc>m
nnoremap <M-n> <Esc>n
nnoremap <M-o> <Esc>o
nnoremap <M-p> <Esc>p
nnoremap <M-q> <Esc>q
nnoremap <M-r> <Esc>r
nnoremap <M-s> <Esc>s
nnoremap <M-t> <Esc>t
nnoremap <M-u> <Esc>u
nnoremap <M-v> <Esc>v
nnoremap <M-w> <Esc>w
nnoremap <M-x> <Esc>x
nnoremap <M-y> <Esc>y
nnoremap <M-z> <Esc>z
nnoremap <M--> <Esc>-
nnoremap <M-[> <Esc>[
nnoremap <M-;> <Esc>;
nnoremap <M-'> <Esc>'
nnoremap <M-,> <Esc>,
nnoremap <M-.> <Esc>.
nnoremap <M-/> <Esc>/
nnoremap <M-A> <Esc>A
nnoremap <M-B> <Esc>B
nnoremap <M-C> <Esc>C
nnoremap <M-D> <Esc>D
nnoremap <M-E> <Esc>E
nnoremap <M-F> <Esc>F
nnoremap <M-G> <Esc>G
nnoremap <M-H> <Esc>H
nnoremap <M-I> <Esc>I
nnoremap <M-J> <Esc>J
nnoremap <M-K> <Esc>K
nnoremap <M-L> <Esc>L
nnoremap <M-M> <Esc>M
nnoremap <M-N> <Esc>N
nnoremap <M-O> <Esc>O
nnoremap <M-P> <Esc>P
nnoremap <M-Q> <Esc>Q
nnoremap <M-R> <Esc>R
nnoremap <M-S> <Esc>S
nnoremap <M-T> <Esc>T
nnoremap <M-U> <Esc>U
nnoremap <M-V> <Esc>V
nnoremap <M-W> <Esc>W
nnoremap <M-X> <Esc>X
nnoremap <M-Y> <Esc>Y
nnoremap <M-Z> <Esc>Z
nnoremap <M-_> <Esc>_
nnoremap <M-{> <Esc>{
nnoremap <M-:> <Esc>:
nnoremap <M-\> <Esc>\
nnoremap <M-<> <Esc><
nnoremap <M->> <Esc>>
nnoremap <M-?> <Esc>?
nnoremap <M-=> <Esc>=
nnoremap <M-+> <Esc>+
nnoremap <M-]> <Esc>]
nnoremap <M-}> <Esc>}
inoremap <M-a> <Esc>a
inoremap <M-b> <Esc>b
inoremap <M-c> <Esc>c
inoremap <M-d> <Esc>d
inoremap <M-e> <Esc>e
inoremap <M-f> <Esc>f
inoremap <M-g> <Esc>g
inoremap <M-h> <Esc>h
inoremap <M-i> <Esc>i
inoremap <M-j> <Esc>j
inoremap <M-k> <Esc>k
inoremap <M-l> <Esc>l
inoremap <M-m> <Esc>m
inoremap <M-n> <Esc>n
inoremap <M-o> <Esc>o
inoremap <M-p> <Esc>p
inoremap <M-q> <Esc>q
inoremap <M-r> <Esc>r
inoremap <M-s> <Esc>s
inoremap <M-t> <Esc>t
inoremap <M-u> <Esc>u
inoremap <M-v> <Esc>v
inoremap <M-w> <Esc>w
inoremap <M-x> <Esc>x
inoremap <M-y> <Esc>y
inoremap <M-z> <Esc>z
inoremap <M--> <Esc>-
inoremap <M-[> <Esc>[
inoremap <M-;> <Esc>;
inoremap <M-'> <Esc>'
inoremap <M-,> <Esc>,
inoremap <M-.> <Esc>.
inoremap <M-/> <Esc>/
inoremap <M-A> <Esc>A
inoremap <M-B> <Esc>B
inoremap <M-C> <Esc>C
inoremap <M-D> <Esc>D
inoremap <M-E> <Esc>E
inoremap <M-F> <Esc>F
inoremap <M-G> <Esc>G
inoremap <M-H> <Esc>H
inoremap <M-I> <Esc>I
inoremap <M-J> <Esc>J
inoremap <M-K> <Esc>K
inoremap <M-L> <Esc>L
inoremap <M-M> <Esc>M
inoremap <M-N> <Esc>N
inoremap <M-O> <Esc>O
inoremap <M-P> <Esc>P
inoremap <M-Q> <Esc>Q
inoremap <M-R> <Esc>R
inoremap <M-S> <Esc>S
inoremap <M-T> <Esc>T
inoremap <M-U> <Esc>U
inoremap <M-V> <Esc>V
inoremap <M-W> <Esc>W
inoremap <M-X> <Esc>X
inoremap <M-Y> <Esc>Y
inoremap <M-Z> <Esc>Z
inoremap <M-_> <Esc>_
inoremap <M-{> <Esc>{
inoremap <M-:> <Esc>:
inoremap <M-\> <Esc>\
inoremap <M-<> <Esc><
inoremap <M->> <Esc>>
inoremap <M-?> <Esc>?
inoremap <M-=> <Esc>=
inoremap <M-+> <Esc>+
inoremap <M-]> <Esc>]
inoremap <M-}> <Esc>}

nmap <C-^> ;echo "USE gl, ca OR cm"<CR>
nnoremap ca <C-^>

noremap <silent> ZB :call system("tm -f -d nw -c \"".expand('%:p:h')."\" zsh &")<CR>
noremap <silent> ZC :call system("tm -f -d sph -c \"".expand('%:p:h')."\" zsh &")<CR>
noremap <silent> ZV :call system("tm -f -d spv -c \"".expand('%:p:h')."\" zsh &")<CR>

" echom Byte()
" echom Byte(".")
" echom Byte("'<")
" echom Byte("'>")
fun! Byte(...)
    " https://vi.stackexchange.com/questions/2410/how-to-make-a-vimscript-function-with-optional-arguments
    let indicator = get(a:, 1, ".")
    return line2byte(line(indicator))+col(indicator)-1
endf

" vimhelp a:000
fun! MapM(func, ...)
    let m = ''
    for s in a:000
        let m = m.'<Esc>'.s
    endfor

    if a:func =~ ")$"
        exec 'nnoremap '.m.' :call '.a:func.'<CR>'
        exec 'inoremap '.m.' <Esc>:call '.a:func.'<CR>'
        exec 'xnoremap '.m.' "zy:call '.a:func.'<CR>'
    else
        exec 'nnoremap '.m.' :call '.a:func.'()<CR>'
        exec 'inoremap '.m.' <Esc>:call '.a:func.'()<CR>'
        exec 'xnoremap '.m.' "zy:call '.a:func.'()<CR>'
    endif
endf
command! -nargs=+ MapM call MapM(<f-args>)

fun! OpenInEmacsSameWindow()
    exe "silent! !TTY=`tm-tty` e +".line('.').":".(col('.') - 1)." ".Q(expand('%:p'))
    redraw!
endf

function! RTCmdSetup(cmd)
    exe("autocmd TextChanged * silent! call system(".Q(a:cmd).", GetBufferContents())")
    exe("autocmd TextChangedI * silent! call system(".Q(a:cmd).", GetBufferContents())")
endfunction

fun! StartAppend()
    startinsert
    call cursor( line('.'), col('.') + 1)
endf
command! StartAppend call StartAppend()

" output of ex command into new buffer
function! Message(cmd)
  let cmd = a:cmd
  if len(cmd) == 0
      let cmd = "mess"
  endif
  redir => message
  silent execute cmd
  redir END
  "vsplit
  enew
  silent put=message
  set nomodified
endfunction
command! -nargs=* -complete=command Message call Message(<q-args>)
command! -nargs=* -complete=command M call Message(<q-args>)
" command! Messages call Message("mess")

"Sadly this interferes with vim-sneak
"Hardcode into vim?
"swap colon and semicolon
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" This fixes select-mode when needing to enter dvorak letters (e.g. in
" snipmate)
sunmap ;

"swap j with gj and k with gk
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk
nnoremap gj j
nnoremap gk k
xnoremap gj j
xnoremap gk k

"swap quote and backtick
nnoremap ' `
nnoremap ` '

fun! CharAtCursor()
    return matchstr(getline('.'), '\%' . col('.') . 'c.')
endf

fun! ReselectVisual()
    " New function
    " echom visualmode()
    " call system("tv", visualmode())
    if visualmode() == "V"
       " we are in visual line mode
        normal! mxgv`x
    elseif visualmode() == "\<C-V>"
       " we are in visual block mode
        normal! mxgv`x
    else
        normal! mxgv
    endif
endf

fun! Byte(...)
    " https://vi.stackexchange.com/questions/2410/how-to-make-a-vimscript-function-with-optional-arguments
    let indicator = get(a:, 1, ".")
    return line2byte(line(indicator))+col(indicator)-1
endf

" TODO Do more work on this
fun! VisualTL()
    if Byte(".") != Byte("'<")
        normal o
    endif

    if ! visualmode() == "V"
        if col(".") > col("'>")
            normal O
        endif
    endif
endf

" Reselect visual only works if the cursor is not moved;
" You can't relocate and then run ReselectVisual
fun! ReselectVisualTL()
    " call Tv(visualmode())

    if visualmode() == "V"
       " we are in visual line mode
        " normal! mxgv`x
        normal! mxgv
    elseif visualmode() == "\<C-V>"
       " we are in visual block mode
        normal! mxgv`x
    else
        normal! mxgvV
    endif

    " call VisualTL()
endf

" I can improve on these to be more picky
fun! SearchUpDiffColPicky()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '?\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '?\%'.virtcol('.').'v'.charatcursor.'\@!'
endf

fun! SearchDownDiffColPicky()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '/\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '/\%'.virtcol('.').'v'.charatcursor.'\@!'
endf

fun! SearchUpDiffCol()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '?\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '?\C\%'.virtcol('.').'v\('.charatcursor.'\| \|$\)\@!'
endf

fun! SearchDownDiffCol()
    let charatcursor = escape(CharAtCursor(), "*./\\")
    if empty(charatcursor)
        let charatcursor = ' '
    endif
    "exe '/\%'.virtcol('.').'v'.charatcursor.'\@!'
    silent! exe '/\C\%'.virtcol('.').'v\('.charatcursor.'\| \|$\)\@!'
endf

nnoremap <silent> <Esc>_ :call SearchUpDiffCol()<CR>
nnoremap <silent> <Esc>+ :call SearchDownDiffCol()<CR>
xnoremap <silent> <Esc>_ <C-c>:call SearchUpDiffCol() \| call ReselectVisual()<CR>
xnoremap <silent> <Esc>+ <C-c>:call SearchDownDiffCol() \| call ReselectVisual()<CR>
nnoremap <silent> <Esc>- :call SearchUpDiffColPicky()<CR>
nnoremap <silent> <Esc>= :call SearchDownDiffColPicky()<CR>
xnoremap <silent> <Esc>- <C-c>:call SearchUpDiffColPicky() \| call ReselectVisual()<CR>
xnoremap <silent> <Esc>= <C-c>:call SearchDownDiffColPicky() \| call ReselectVisual()<CR>

nmap <C-s> /
cmap <silent> <Esc>f <C-e><C-u>mess<CR>
cmap <silent> <Esc>d <Esc>dd
imap <silent> <Esc>[2~ <Esc>ZX
nmap <silent> <Esc>[2~ ZX
cmap <silent> <Esc>t normal ge<CR>
" cmap <silent> <Esc>e silent! e! \| call NumberSyntax() \| call GeneralSyntax()<CR>
cmap <silent> <Esc>e silent! e!<CR>
cmap <silent> <Esc>w silent! w!<CR>
cmap <silent> <Esc>; silent! wa!<CR>
cmap <silent> <Esc>p normal <leader>tb<CR>
cmap <silent> <Esc>q silent! q!<CR>
cmap <silent> <Esc>s silent! wqa!<CR>
cmap <silent> <Esc>x silent! bd!<CR>
cmap <silent> <Esc>r silent! wa! \| e! \| call NumberSyntax() \| call GeneralSyntax()<CR>
"cmap <silent> <Esc>g call MinimiseAndWrap()<CR>
cmap <silent> <Esc>g .!mnm<CR>
cmap <silent> <Esc>G .!acronymise \| mnm<CR>

" Make C-g from inside command mode work like emacs, in that in
" cancels any current operation.
cmap  

nmap yc ggVG

map  <left>
map  <right>
map  <up>
map <C-J> <down>

" having these are more important than being able to quickly enter
" easymotion.
imap  <left>
imap  <right>
imap  <up>
imap <C-J> <down>

" important fix (hopefully there are no escape code conflicts)
imap $ l$

xnoremap t lt
xnoremap T hT

"xnoremap $ $h
xnoremap $ g_
xnoremap g_ $

xnoremap . s<C-R>.

inoremap <C-h> <Left>

if ! has('nvim')
    " Only works in vim, not nvim
    set <M-$>=$
endif
" need this for going to the end of a line after editing something.
"inoremap <M-$> $
nnoremap <M-$> $
xnoremap <M-$> <ESC>$

nmap <C-w>h <C-w>h
nmap <C-w>l <C-w>l
nmap <silent> g<C-w>k ;let linenum=getpos('.')[1]\|:wincmd k\|;call cursor(linenum,0)<cr>
nmap <silent> g<C-w>i ;let linenum=getpos('.')[1]\|:wincmd i\|;call cursor(linenum,0)<cr>
nmap <silent> g<C-w>h ;let linenum=getpos('.')[1]\|:wincmd h\|;call cursor(linenum,0)<cr>
nmap <silent> g<C-w>l ;let linenum=getpos('.')[1]\|:wincmd l\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><down> ;let linenum=getpos('.')[1]\|:wincmd k\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><up> ;let linenum=getpos('.')[1]\|:wincmd i\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><left> ;let linenum=getpos('.')[1]\|:wincmd h\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><right> ;let linenum=getpos('.')[1]\|:wincmd l\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w>w ;let linenum=getpos('.')[1]\|:wincmd w\|;call cursor(linenum,0)<cr>
nmap <silent> <C-w><C-w> <C-w>w

if !exists("g:ncolumns")
    let g:ncolumns=1
endif

" these function allows you to put a number prefix before <C-u>, which
" means before <C-b> as well in our case.
" Note: The <C-U> is required to remove the line range that you get when
" typing ':' after a count.
function! ScrollUp(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    let c = c * 2
    for i in range(1, c)
        exec "normal! \<C-u>"
    endfor
endfunction
function! ScrollDown(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    let c = c * 2
    for i in range(1, c)
        exec "normal! \<C-d>"
    endfor
endfunction
function! HalfscrollUp(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    for i in range(1, c)
        exec "normal! \<C-u>"
    endfor
endfunction
function! HalfscrollDown(count)
    let c=a:count * g:ncolumns
    if ! c > 0
        let c=1
    endif
    for i in range(1, c)
        exec "normal! \<C-d>"
    endfor
endfunction

nnoremap <silent> <C-u> :<C-U>call HalfscrollUp(v:count1)<CR>
nnoremap <silent> <C-d> :<C-U>call HalfscrollDown(v:count1)<CR>
nnoremap <silent> <C-b> :<C-U>call ScrollUp(v:count1)<CR>
nnoremap <silent> <C-f> :<C-U>call ScrollDown(v:count1)<CR>
nnoremap <silent> <pageup> :<C-U>call ScrollUp(v:count1)<CR>
nnoremap <silent> <pagedown> :<C-U>call ScrollDown(v:count1)<CR>
"nmap <pageup> ;PreviousChange<CR>zz
"nmap <pagedown> ;NextChange<CR>zz

nnoremap y/ /<up><C-f><left>v0y<C-c><C-c>
nmap 1<C-g> ;echo expand('%:p')<CR>
nmap 2<C-g> ;echo @%<CR>

nmap <2-LeftMouse> *
xmap <2-LeftMouse> *

nmap <RightMouse> *
xmap <RightMouse> *

nmap ch ;bprev<CR>
nmap cl ;bnext<CR>
nmap gt gt

nmap gd gdzt
vmap gd *gg0n

function! MovePercent(signedpercent, mode)
    if a:mode ==# 'v'
        normal! gv
    endif

    let step = max([abs(a:signedpercent) * winheight(0) / 100, 1])
    if a:signedpercent < 0
        for i in range(1,step)
            exec "normal! \<C-e>"
        endfor
    elseif a:signedpercent > 0
        for i in range(1,step)
            exec "normal! \<C-y>"
        endfor
    endif
endfunction

nnoremap <ScrollWheelUp> 6<C-y>
map <S-ScrollWheelUp> 6<C-U>
nnoremap <ScrollWheelDown> 6<C-e>
map <S-ScrollWheelDown> 6<C-D>

function! OpenClipInWin()
    let cmd = "tm -f -S -tout -i nw v"
    silent! call system(cmd, @z)
endfunction
xmap <CR> "zy;silent! call OpenClipInWin()<CR>

nnoremap <silent> <C-e> :call MovePercent(-5, 'n')<CR>
nnoremap <silent> <C-t> :call MovePercent(5, 'n')<CR>

xnoremap <silent> <C-e> :call MovePercent(-5, 'v')<CR>
xnoremap <silent> <C-t> :call MovePercent(5, 'v')<CR>

nnoremap <silent> <C-n> :call MovePercent(-10, 'n')<CR>
nnoremap <silent> <C-p> :call MovePercent(10, 'n')<CR>

xnoremap <silent> <C-n> :call MovePercent(-10, 'v')<CR>
xnoremap <silent> <C-p> :call MovePercent(10, 'v')<CR>

nmap [u ;cprev<CR>
nmap ]u ;cnext<CR>
nmap [e ;ERRP<CR>
nmap ]e ;ERR<CR>
nmap [/ 0;COMP<CR>
nmap ]/ $;COM<CR>
nmap ZU ;Ctoggle<CR>

map w <Plug>CamelCaseMotion_w
map b <Plug>CamelCaseMotion_b
map e <Plug>CamelCaseMotion_e
omap iw <Plug>CamelCaseMotion_iw
xmap iw <Plug>CamelCaseMotion_iw
omap ib <Plug>CamelCaseMotion_ib
xmap ib <Plug>CamelCaseMotion_ib
omap ie <Plug>CamelCaseMotion_ie
xmap ie <Plug>CamelCaseMotion_ie
nmap cw ce
omap iw ie
xmap iw ie
nmap vit ;normal! viw<CR>
nmap vir ;call SelectWordAndDots()<cr>
nmap viq ;call SelectArgument()<cr>

imap <C-w> vlbs
nmap <C-w><C-c> <NOP>

" use the search register to find the next thing directly above or below
nmap ]> ;exe '/\%'.virtcol('.').'v'.@/<CR>
nmap [> ;exe '?\%'.virtcol('.').'v'<CR>
xmap ]> <C-c>;exe '/\%'.virtcol('.').'v'.@/<CR>mxgv`x
xmap [> <C-c>;exe '?\%'.virtcol('.').'v'.@/<CR>mxgv`x

" Find next
nmap ]? ;exe '/\%'.virtcol('.').'v\S'<CR>
nmap [? ;exe '?\%'.virtcol('.').'v\S'<CR>
xmap ]? <C-c>;exe '/\%'.virtcol('.').'v\S'<CR>mxgv`x
xmap [? <C-c>;exe '?\%'.virtcol('.').'v\S'<CR>mxgv`x

function! SelectWordAndDots()
    set iskeyword+=.
    set iskeyword+=-
    normal! viw
    set iskeyword-=.
    set iskeyword-=-
endfunction

" automatically give executable permissions if file begins with #! and contains
" '/bin/' in the path
"use function! not function to overwrite
function! ModeChange()
  if getline(1) =~ "^#!"
      silent !chmod a+x %
  endif
endfunction

" It would be nice if this function could work out what () it should
" select. I.e. You're selecting an argument inside a pair of parenthesis
" and the argument has parenthesis itself, so only select the pair
" belonging to the argument.
function! SelectArgument()
    set iskeyword+=.
    set iskeyword+=-
    set iskeyword+=[
    set iskeyword+=]
    "set iskeyword+== "why equals?
    set iskeyword+='
    set iskeyword+="
    normal! viw
    set iskeyword-=.
    set iskeyword-=-
    set iskeyword-=[
    set iskeyword-=]
    "set iskeyword-== "why equals?
    set iskeyword-='
    set iskeyword-="
endfunction

" counters the issue with smartindent that affects making comments in
" python (puts comment on the first column).
inoremap # X#

nnoremap gl <C-^>

" unmap annoying keys
nnoremap K <Nop>
nnoremap q: <Nop>
nnoremap q/ <Nop>
nnoremap q? <Nop>

" This makes it faster to do ;<C-f> or ;<C-r>
"   -- can do <C-;><C-f>
"nnoremap <C-;> ;
nnoremap [27;5;59~ :

nnoremap ZQ :qa!<CR>

imap <C-b> <Left>
imap <C-f> <Right>

nnoremap <F8> "=strftime("%c")<CR>P
inoremap <F8> <C-R>=strftime("%c")<CR>
cnoremap <F8> <C-R>=strftime("%c")<CR>

if has('autocmd')
    autocmd BufWrite * if &diff | diffu | endif

    au FileType vim  set foldmethod=marker

    augroup vimrc
        au BufReadPre * setlocal foldmethod=manual
    augroup END

    autocmd BufEnter * if &filetype == "" | setlocal ft=txt | endif

    au BufWritePost * silent call ModeChange()
endif

imap <C-d> <Delete>
cmap <C-d> <Delete>

noremap <Esc>< gg0
noremap <Esc>> G$ " emacs G

" https://github.com/tpope/vim-pathogen

nmap <C-k> <Plug>(easymotion-bd-w)
xmap <C-k> <Plug>(easymotion-bd-w)

let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_default_mapping = 0
let g:indent_guides_enable_on_vim_startup = 1

map <F12> ;call ToggleCommentSyntax()<CR>
map <F11> ;call ToggleBrightness()<CR>
map <F10> ;call ToggleSyntax()<CR>

" delete buffer without closing window
function! Bclose()
    let curbufnr = bufnr("%")
    let altbufnr = bufnr("#")
    if buflisted(altbufnr)
        buffer #
    else
        bnext
    endif
    if bufnr("%") == curbufnr
        new
    endif
    if buflisted(curbufnr)
        execute("bdelete! " . curbufnr)
    endif
endfunction

function! ForceQuit()
    qa!
endfunction

fun! ToggleOpt(opt)
    exec 'windo set '.a:opt.'!'
    exec 'set '.a:opt.'?'
endf

function! MapToggle(key, opt)
    let savepos = getpos('.')
    let cmd = ':silent! call ToggleOpt("'.a:opt.'")<CR>'
    exec 'nnoremap '.a:key.' '.cmd
    exec 'inoremap '.a:key." \<C-O>".cmd
    call setpos('.', savepos)
    "echom a:opt
endfunction

command! -nargs=+ MapToggle call MapToggle(<f-args>)

function! MapToggleBoth(key, opt_a, opt_b)
    let savepos = getpos('.')
    let cmd = ':silent! call ToggleOpt("'.a:opt_a.'") \| silent! call ToggleOpt("'.a:opt_b.'")<CR>'
    exec 'nnoremap '.a:key.' '.cmd
    exec 'inoremap '.a:key." \<C-O>".cmd
    call setpos('.', savepos)
    "echom a:opt_a a:opt_b
endfunction

command! -nargs=+ MapToggleBoth call MapToggleBoth(<f-args>)

command! ForceQuit silent! call ForceQuit()

colorscheme inkpot
source ~/.vim/paste-replace.vim
source ~/.vim/utils.vim
source ~/.vim/pen.vim
" source ~/.vim/nvim-function-keysvimrc
source ~/.vim/fixkeymaps-vimrc

silent! MapToggleBoth <F4> wrap number
silent! MapToggle <F5> number
" silent! MapToggleBoth <F5> number relativenumber
silent! MapToggle <F6> spell
silent! MapToggle <F7> paste

let pen_path = expand("~/.pen/pen.vim")
if filereadable(pen_path)
  exe "source " . pen_path
endif

nnoremap Y ^vg_o
nnoremap z= :set spellz=

" undo -- emacs compatibility
nnoremap <C-_> u
inoremap <C-_> <Esc>u
xmap <Esc>w y
nmap <Esc>y<Esc>p yp
" not really emacs but related
xmap <Esc>Y Y

fun! MQQuit()
    if @% == ""
        qa!
    else
        wqa!
    else
endf

fun! GoToTop()
    exe expand("normal! \<Esc>gg")
endf

fun! Anywhere_gf()
    silent! normal! gf
endf

function! AmendRespawn()
    !vc amend-respawn
    redraw!
endfunction

function! CommitRespawn()
    !vc commit-respawn
    redraw!
endfunction

MapM MQQuit q q
MapM GoToTop g g
MapM OpenInEmacsSameWindow q v
MapM Anywhere_gf g f
MapM ForceQuit g q
nmap <silent> <Leader>7 ;silent! call AmendRespawn()<CR>
nmap <silent> <Leader>8 ;silent! call CommitRespawn()<CR>
nmap <silent> <Leader>9 ;!git difftool HEAD\^\! -- %<CR><C-L>

" autocmd BufEnter * call GeneralSyntax()

" autocmd BufEnter * call NumberSyntax()
" autocmd BufEnter * call GeneralSyntax()
" autocmd BufReadPre * call NumberSyntax()
" autocmd BufReadPre * call GeneralSyntax()

fun! OpenSnippets()
    let fp = '$VIMSNIPPETS/'.&filetype.'.snippets'

    call system('tm -f -te -d sps -n snippets "vs '.fp.'" &')
endf

MapM OpenSnippets q d

fun! InsertParaAbove()
    "exe expand("normal! 0O\<Esc>O")
    exe expand("normal! 0O\<Esc>O")
    startinsert
endf

MapM InsertParaAbove q o

MapM FilterWithFzf q f

MapM GeneralSyntax q y

function! AmendRespawn()
    !vc amend-respawn
    redraw!
endfunction

function! CommitRespawn()
    !vc commit-respawn
    redraw!
endfunction

MapM CommitRespawn q 8
MapM AmendRespawn q 7

nnoremap <Esc>7 :silent! call AmendRespawn()<CR>
nnoremap <Esc>8 :silent! call CommitRespawn()<CR>
cmap <silent> <Esc>8 silent! call CommitRespawn()<CR>
cmap <silent> <Esc>9 Git difftool HEAD\^\! -- %<CR><C-L>

" This fixes select-mode when needing to enter dvorak letters (e.g. in
" snipmate)
sunmap ;

" for starting a new snippet complete from within a snippet
" i'm not sure how to break out of select mode without using a motion
" smap means it must be selected
smap <Esc>L <Esc>a<Esc>ljki<C-l>
" snipmate global variables might be bringing me back into select mode
" but nothing to fear, this takes care of it
imap <Esc>L <Esc>a<Esc>ljki<C-l>
" Swapping C-l with <Esc>L only makes it worse
imap <C-l> <Plug>snipMateNextOrTrigger
smap <C-l> <Plug>snipMateNextOrTrigger

nnoremap <silent> <leader>! :set opfunc=ProgramFilter<cr>g@
vnoremap <silent> <leader>! :<c-u>call ProgramFilter(visualmode(), 1)<cr>
function! ProgramFilter(vt, ...)
    let [qr, qt] = [getreg('"'), getregtype('"')]
    let [oai, ocin, osi, oinde] = [&ai, &cin, &si, &inde]
    setl noai nocin nosi inde=

    let [sm, em] = ['[<'[a:0], ']>'[a:0]]
    exe 'norm!`' . sm . a:vt . '`' . em . 'x'

    call inputsave()
    let cmd = input('!')
    call inputrestore()

    " let out = system("ptw ".cmd, @")
    let out = system(cmd, @")
    let out = substitute(out, '\n$', '', '')
    exe "norm!i\<c-r>=out\r"

    let [&ai, &cin, &si, &inde] = [oai, ocin, osi, oinde]
    call setreg('"', qr, qt)
endfunction

function! ExecInTmux()
    silent! call SaveTemp()
    silent! call TmuxBaseWait()
    silent! call system('tm -f -te -d sps -c "'.fnameescape(expand('%:p:h')).'" "cr '.fnameescape(expand('%:p')).'"'))
endfunction

nnoremap <silent> Zr :call ExecInTmux()<CR>
xnoremap <silent> Zr <ESC>:call ExecInTmux()<CR>

function! SchemaInTmux()
    silent! call SaveTemp()
    silent! call TmuxBaseWait()
    silent! call system('tm -f -te -d sph -c "'.fnameescape(expand('%:p:h')).'" "zh '.fnameescape(expand('%:p')).'"'))
endfunction

nnoremap <silent> Zh :call SchemaInTmux()<CR>
xnoremap <silent> Zh <ESC>:call SchemaInTmux()<CR>

fun! GoogleWithEww(incmd)
    let cmd = 'nw egr '.escape(fnameescape(a:incmd), "()<>")
    call system(cmd.'&')
endf

xmap H "zy;call GoogleWithEww(@z)<CR>

fun! GetCopySearchFileProgram()
     if &ft=='help'
        return "vimhelp"
     elseif &ft=='man'
        return "man"
     else
        return "v"
     endif
endf

fun! GetCopySearchFilePath()
     if &ft=='help'
        return tolower(substitute(getline(1), "^\\([^	 ]\\+\\).*", "\\1", ""))
     elseif &ft=='man'
        " return getline(1)
        return tolower(substitute(getline(1), "^\\([^	 ]\\+\\).*", "\\1", ""))
     else
        return expand('%:p')
     endif
endf

" line
fun! CopySearchFile(sel)
    if has_key(environ(), "GY_CMD")
        let result=substitute(environ()["GY_CMD"], "^pvr ", "", "") . ' | vs +/"'.escape(escape(a:sel, '\\'),'`"$*[]\\').'"'
    else
        let result=GetCopySearchFileProgram() . ' +/"'.escape(escape(a:sel, '\\'),'`"$*[]\\').'" "'.GetCopySearchFilePath().'"'
        " silent! call system('xc -m', 'v +/"'.escape(a:sel, '`/"$*[]').'" "'.expand('%:p').'"')
    endif

    silent! call system('xc -m', result)
    " silent! call system('xc -m', 'v +/"'.escape(a:sel,'`"$*').'" "'.expand('%:p').'"')

    if v:shell_error == 0
        echom "Copied: " . result
    endif
endf
xmap gy "zy;call CopySearchFile(@z)<CR>

function! Babel(lang)
    " Only operate in visual line mode
    if visualmode() == "V"
        let cmd = "org-template-gen " . a:lang . " | xc"
        silent! call system(cmd, @z)
    endif
endfunction

" Unfortulately, yanking moves the cursor again before reselectvisual
" That's why it breaks sometimes.
" Therefore, I can't use yanking as the mechanism.
xmap Z/ "zy;silent! call Babel("sps") \| call ReselectVisualTL()<CR>P
xmap Zb "zy;silent! call Babel("bash") \| call ReselectVisualTL()<CR>P
xmap Ze "zy;silent! call Babel("emacs-lisp") \| call ReselectVisualTL()<CR>P
xmap ZH "zy;silent! call Babel("haskell") \| call ReselectVisualTL()<CR>P
xmap ZJ "zy;silent! call Babel("clojure") \| call ReselectVisualTL()<CR>P
xmap ZT "zy;silent! call Babel("text") \| call ReselectVisualTL()<CR>P

function! RunInTmux(cmd)
    call system('tnw -icmd', a:cmd)
endfunction

fun! YRun()
    normal Y"zy
    call RunInTmux(@z)
endf

cmap <Esc>m <C-e><C-u>silent! call YRun()<CR>
cmap <Esc>d <C-e><C-u>bd!<CR>


nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" Fixes this
" Error detected while processing function gitgutter#process_buffer[17]..gitgutter#diff#handler[15]..gitgutter#sign#update_signs[1]..<SNR>204_find_current_signs:
let g:gitgutter_realtime = 0

nmap <silent> <Leader>' ;silent! :call system("tm -f -d sph -c \"".expand('%:p:h')."\" -fargs git d -- " . system("xa realpath", expand('%'))[:-2] . " &")<CR>
" nmap <silent> <Leader>' ;silent! call TmuxSplitH('git d -- '.system("xa realpath", expand('%'))[:-2])<CR>


nnoremap <leader>um :%!mnm<CR>
xnoremap <leader>um :!mnm<CR>
nnoremap <leader>uu :%!umn<CR>
xnoremap <leader>uu :!umn<CR>

let g:comment_syntax_on = 1
let g:syntax_on = 1

map <F12> ;call ToggleCommentSyntax()<CR>
map <F10> ;call ToggleSyntax()<CR>
map <F11> ;call ToggleBrightness()<CR>

function! DiffPrevRev(count)
    exe "silent !git-dp.sh ".expand("%")." ".count
    redraw!
endfunction

command! -nargs=1 DiffPrevRev call DiffPrevRev(<args>)
map <silent> <Leader>= ;<C-U>DiffPrevRev(v:count1)<CR>

