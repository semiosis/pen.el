HISTFILE=$HOME/programs/zsh/dotfiles/.zsh_history

autoload up-line-or-beginning-search
autoload down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

setopt rmstarsilent
setopt extended_glob # disabling this will not disable **, but having this unset will disable the evil # sign. echo yo #yo, echo yo#yo. so evil
disable -p \#     # this disables the pound sign only!
setopt no_hist_save_by_copy
#setopt inc_append_history
setopt share_history
setopt no_inc_append_history
setopt no_append_history
#setopt append_history no_inc_append_history no_share_history
setopt null_glob

# Have the full path here because PATH may not be set up
: ${TTY:="$(pen-tm-tty)"}

# To stop bailing on the command when it fails to match a glob pattern.
# Put this option in your .zshrc:
setopt NO_NOMATCH
# So important I've defined it twice
alias -g noglob git

setopt interactivecomments

typeset +x CWD
export HIST_IGNORE_ALL_DUPS
export DISABLE_AUTO_UPDATE="true"
export DISABLE_AUTO_TITLE="true"

omzdir=/root/repos/oh-my-zsh

if test -f "$omzdir/oh-my-zsh.sh"; then
    export ZSH="$omzdir"
    export ZSH_THEME="more-minimal" # - fav
    # plugins=(command-not-found git)
    # git is just too slow, especially when I'm using the git wrapper
    plugins=(command-not-found)
    source "$omzdir/oh-my-zsh.sh"
fi

plugins+=(zsh-autosuggestions)

# This works
. $ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

unsetopt correct_all

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
if [ -f ~/.zsh_aliases ]; then
    . ~/.zsh_aliases
fi
if [ -f ~/.shell_aliases ]; then
    . ~/.shell_aliases
fi
if [ -f ~/.shellrc ]; then
    . ~/.shellrc
fi
if [ -f ~/.shell_functions ]; then
    . ~/.shell_functions
fi

_tilde () {
    [[ -n "$compstate[quote]" ]] && return 1

    local expl suf ret=1

    if [[ "$SUFFIX" = */* ]]; then
        ISUFFIX="/${SUFFIX#*/}$ISUFFIX"
        SUFFIX="${SUFFIX%%/*}"
        suf=(-S '')
    else
        suf=(-qS/)
    fi

    _tags directory-stack

    while _tags; do
        _requested directory-stack && _directory_stack "$suf[@]" && ret=0

        (( ret )) || return 0
    done

    return ret
}

fpath=($HOME/.zsh_completion.d $fpath)

rationalise-dot() {
    if [[ $LBUFFER = *.. ]]; then
        LBUFFER+=/..
    else
        LBUFFER+=.
    fi
}
settitle() {
    printf "\033k$1\033\\"
}

unsetopt autocd
unsetopt auto_name_dirs

if [ -n "$CWD" ] && ! test "$CWD" = "$(pwd)"; then
    printf -- "%s\n" "Inherited CWD: $CWD" | pen-mnm | hls nearblack 1>&2

    cd "$CWD"
else
    CWD="$(pwd)"
fi

echo -en "\e[0;37m"
echo -en "\e[0m"

zstyle ':completion:history-words:*' list no
zstyle ':completion:history-words:*' menu yes
zstyle ':completion:history-words:*' remove-all-dups yes
zstyle ":completion:*:descriptions" format "%B%d%b"

bindkey '^W' kill-region
bindkey '^[w' copy-region-as-kill
bindkey "\e/" _history-complete-older
bindkey "\e," _history-complete-newer
bindkey "\e[B" down-line-or-beginning-search
bindkey "\eOA" up-line-or-beginning-search
bindkey "\eOB" down-line-or-beginning-search
[[ -n "${key[Up]}"   ]] && bindkey "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey "${key[Down]}" down-line-or-beginning-search

function edit-command-line() {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"

    print -R - "$PREBUFFER$BUFFER" > "$tf_zle"

    exec <&1

    # This might be better than using tmux because it will also work inside emacs
    vim "$tf_zle"

    print -Rz - "$(<$tf_zle)"

    command rm -f "$tf_zle"
    zle send-break		# Force reload from the buffer stack
}

# M-v
autoload -z edit-command-line
zle -N edit-command-line
bindkey "\ev" edit-command-line

function cmd-niceify() {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"

    print -Rz - "$(eval "cmd-nice-posix $(print -R - "$PREBUFFER$BUFFER")")"

    zle send-break		# Force reload from the buffer stack
}

# M-N
autoload -z cmd-niceify
zle -N cmd-niceify
bindkey "\eN" cmd-niceify

function edit-command-line-sp() {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"

    print -R - "$PREBUFFER$BUFFER" > "$tf_zle"

    exec <&1

    sp "$tf_zle"

    print -Rz - "$(<$tf_zle)"

    command rm -f "$tf_zle"
    zle send-break		# Force reload from the buffer stack
}

# M-C
autoload -z edit-command-line-sp
zle -N edit-command-line-sp
bindkey "\eC" edit-command-line-sp

function zsh-tmux-edit-pane {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"
    print -R - "$PREBUFFER$BUFFER" > "$tf_zle"

    pen-tm -te -d capture -clean -noabort - 2>/dev/null | pen-vs +G

    print -Rz - "$(<$tf_zle)"
    zle send-break		# Force reload from the buffer stack
}

# M-V
autoload -z zsh-tmux-edit-pane
zle -N zsh-tmux-edit-pane
bindkey "\eV" zsh-tmux-edit-pane

function zshexplainshell {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"
    print -R - "$PREBUFFER$BUFFER" > $tf_zle

    exec <&1
    print -R - "$PREBUFFER$BUFFER" | explainshell
    print -Rz - "$(<$tf_zle)"
    zle send-break		# Force reload from the buffer stack
}

# M-E
autoload -z zshexplainshell
zle -N zshexplainshell
bindkey "\eE" zshexplainshell

function rt-grep() {
    exec </dev/tty
    print -Rz - "eack "
    zle send-break		# Force reload from the buffer stack
}

# M-u
autoload -z rt-grep
zle -N rt-grep
bindkey "^[^t" rt-grep

function rt-command-line() {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"

    print -R - "$PREBUFFER$BUFFER" > $tf_zle

    exec </dev/tty `# see etty`

    tf_zle_contents="$(cat "$tf_zle")"

    if test -n "$tf_zle_contents"; then
        rtcmd -E "$(cat $tf_zle)"
    else
        fz-rtcmd
    fi

    print -Rz - "$(<$tf_zle)"

    command rm -f "$tf_zle"
    zle send-break		# Force reload from the buffer stack
}

autoload -z rt-command-line
zle -N rt-command-line
bindkey "\eu" rt-command-line

function zsh-cr() {
    trap func_trap EXIT
    func_trap() {
        tput rc
    }

    tput sc

    exec </dev/tty
    cr
}

# M-TAB
bindkey -s "\e[2~" "^A^Kcr\n"

function source-sh-source() {
    tf_zle="$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)"

    print -R - "$PREBUFFER$BUFFER" > $tf_zle

    exec <&1

    tf_zle_contents="$(cat "$tf_zle")"

    nvc -E "sh-source | pen-ds -s source-to-source"
    sts="$(gs source-to-source | pen-umn)"
    if test -n "$sts"; then
        . "$(gs source-to-source | pen-umn)"
    fi

    print -Rz - "$(<$tf_zle)"

    command rm -f "$tf_zle"
    zle send-break		# Force reload from the buffer stack
}

# M-x
autoload -z source-sh-source
zle -N source-sh-source
bindkey "\ex" source-sh-source

function zsh-slmenu() {
    trap func_trap EXIT
    func_trap() {
        tput rc
    }

    tput sc

    exec <&1
    slmenu
}

# M-SPC
autoload -z zsh-slmenu
zle -N zsh-slmenu
bindkey "\e " zsh-slmenu

bindkey "\eD" backward-kill-word
bindkey -s "^[a" "^A^Ksh-apps\r"
bindkey -s "^[\^" "^A^Kis-git && cd \"\$(pen-vc get-top-level)\" && pwd\r"
bindkey -s "^[\`" "^A^Kis-git && cd \"\$(pen-vc get-top-level)\" && pwd\r"
bindkey -s "^[$" "^A^Kdifftool.sh \`tmux show-buffer|head -1|sed \"s/^\\\[ \t\\\]*//\"|cut -d ' ' -f 1\`\t\\\\\^! "
bindkey -s "^[~" "^A^Kgit commit --amend -m \"\"^B"
bindkey -s "^[" "^A^Kgit amend\r" # C-M-S-~
bindkey -s "^[5" "^A^Kgit show --name-only \`tmux show-buffer|head -1|sed \"s/^\\\[ \t\\\]*//\"|cut -d ' ' -f 1\`\t"
bindkey -s "^[%" "^A^Kgit stash show -u \t"
# bindkey -s "^[K" "^A^Kvc g dt -c\r" #bindkey -s "^[K" "^A^Kgit d --cached\r"
bindkey -s "^[K" "^A^Ktwalk\r"
bindkey -s "^[J" "^A^Kf find-file-repo \"*\"^B" # find a file by name in all commits
bindkey -s "^[l" "^A^Ksh-general\r"

# M-B
# bindkey -s "^[B" "^A^Kbr\r"
bindkey -s "^[B" "^A^Kbr-txt\r"

# M-N
bindkey -s "^[N" "^A^Kbr-img\r"
bindkey -s "^[U" "^A^Kncdu\r"

bindkey -s "^[j" "^A^Ksh-jump\r"
bindkey -s "^[y" "^A^Ksh-yank\r"
bindkey -s "^[;" "^A^Ksh-git-hydra\r"
bindkey -s "^[:" "^A^Kgit diff --cached\r"
bindkey -s "^[M" "^A^Kmagithub\r"
bindkey -s "^[m" "^A^Ksh-git\r"
bindkey -s "^[n" "^A^Ksh-new\r"
bindkey -s "^[w" "^A^Kdired\r"
bindkey -s "^[W" "^A^Kdired -g\r"
bindkey -s "^[R" "^A^Kdired -g -alR -XGh --group-directories-first\r"
bindkey -s "^[s" "^A^Kpe\r" # spacemacs
bindkey -s "^[t" "^A^Kgit add -A .\r"
bindkey -s "^[e" "^A^Kgit commit -m \"\"^B"
bindkey -s "^[F" "^A^Kgit log -m -S \"\"^B" # -S Search for changes containing string, -m search merges also
bindkey -s "^[c" "^A^Knav menu\r"
bindkey -s "^[G" "^A^Kagrep -1 -i -e \"eli5\" \$(find-non-binary)bbbbd" # Search commit messages for regexp.
bindkey -s "^[1" "^A^Kgit add -p \t"
bindkey -s "^[4" "^A^Kgit rebase -i \`tmux show-buffer|head -1|sed \"s/^\\\[ \t\\\]*//\"|cut -d ' ' -f 1\`\t"
bindkey -s "^[8" "^A^Kdifftool.sh \\\\\^!^B^B^B"
bindkey -s "^[9" "^A^Kdifftool.sh HEAD\\\\\^:\n"
bindkey -s "^[(" "^A^Kgit diff HEAD\\\\\^!\n"
bindkey -s "^[^O" "^A^Kgit checkout \`tmux show-buffer|head -1|sed \"s/^\\\[ \t\\\]*//\"|cut -d ' ' -f 1\`\t\r"
bindkey -s "^[=" "^A^Kgit branch\n"
bindkey "\C-r" history-incremental-pattern-search-backward
bindkey -s "^[r" "^A^Kranger\r"
bindkey -s "^[o" "^A^Kpopd\r"

f_tmux_split_h() { pen-tm -d -te sph }
zle -N f_tmux_split_h
bindkey "^[h" f_tmux_split_h

f_tmux_split_v() { pen-tm -d -te spv }
zle -N f_tmux_split_v
bindkey "^[H" f_tmux_split_v

bindkey -s "^[Q" "^A^K\`!!\`^A"
bindkey -s "^[S" "^A^Ktp find-here-path \"**\"^B^B"
bindkey -s "^[A" "^A^Ktp find-here-symlink \"**\"^B^B"

bindkey -s "^[X" "^A^Ksh-find\n"
bindkey -s "^[I" "^A^Ktp find-here-path -:2 \"**\"^B^B"

# arrow keys
bindkey -s "^[[1;3D" "^A^Kpopd\n"
bindkey -s "^[[1;3A" "^A^Kcd ..\n"
bindkey -s "^[[1;3C" "^A^Kranger ..\n"
bindkey -s "^[[1;3B" "^A^K( pwd;echo;ls --color=always -ld * )| less -rS\n"

# M-F1 - quit (like vim)
bindkey -s "^[[1;3P" "^A^K^D"
# M-F4 - quit (like vim)
bindkey -s "^[[1;3S" "^A^K^D"
# M-F1 from xterm
bindkey -s "^[[1;9P" "^A^K^D"
# M-F9 - quit (like vim)
bindkey -s "^[[20;3~" "^A^K^D"
# M-F12 - quit (like vim)
bindkey -s "^[[24;3~" "^A^K^D"
# S-F8 - insert date (like vim)
bindkey -s "^[[19;2~" "$(date +%d.%m.%y)"
# M-F8 - insert date (like vim)
bindkey -s "^[[19;3~" "$(date +%d.%m.%y)"
# C-;
bindkey -s "^[[27;5;59~" ";"
# C-:
bindkey -s "^[[27;6;58~" ":"
# C-'
bindkey -s "^[[27;5;39~" "'"
# C-"
bindkey -s "^[[27;6;34~" "\""
# C-,
bindkey -s "^[[27;5;44~" ","
# C-.
bindkey -s "^[[27;5;46~" "."
# C-<
bindkey -s "^[[27;6;60~" "<"
# C->
bindkey -s "^[[27;6;62~" ">"

bindkey "\e[D" backward-kill-word
bindkey "\eOD" backward-kill-word
bindkey "\e[C" kill-word
bindkey "\eOC" kill-word
bindkey "\e^L" kill-word

vi-append-x-selection () { RBUFFER=$(xsel -o -p </dev/null)$RBUFFER; }
zle -N vi-append-x-selection
bindkey -e '\e[1;3R' vi-append-x-selection
vi-yank-x-selection () { print -rn -- $CUTBUFFER | xsel -i -p; }
zle -N vi-yank-x-selection
bindkey -e '\e[1;3Q' vi-yank-x-selection

zmodload -i zsh/parameter

zsh-open-main() {
    eopen-main "$(pwd)"
}
zle -N zsh-open-main
# H-o
bindkey "^[^\\\o" zsh-open-main


copy-last-command-output() {
    pen-zl copy-last-output &>/dev/null
}
zle -N copy-last-command-output
bindkey "^X^K" copy-last-command-output

copy-last-line() {
    pen-zl copy-last-line &>/dev/null
}

zle -N copy-last-line
bindkey "^X^L" copy-last-line

qtv-term() {
    pen-zl qtv-term
}
zle -N qtv-term
bindkey "^X^H" qtv-term

qtv-last-output() {
    pen-zl qtv-last-output
}
zle -N qtv-last-output
bindkey "^X^V" qtv-last-output

copy-zle() {
  printf -- "%s" "$BUFFER" | pen-xc -i
}

zle -N copy-zle
bindkey "\eY" copy-zle

# M-i
bindkey -s "^[i" "^A^Kcd ..\r"

export CWD

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

stty stop undef
stty start undef
stty -ixon

# Tmux completion
_tmux_pane_words() {
  compset -q
  local expl
  local -a w
  if [[ -z "$TMUX_PANE" ]]; then
    _message "not running inside tmux!"
    return 1
  fi
  w=( ${(u)=$(tm ngrams)} )
  _wanted values expl 'words from tmux' compadd -a w
}

zle -C tmux-pane-words-prefix   complete-word _generic
zle -C tmux-pane-words-anywhere complete-word _generic
bindkey '^Xt' tmux-pane-words-prefix
bindkey '^X^X' tmux-pane-words-anywhere
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' completer _tmux_pane_words
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' ignore-line current
zstyle ':completion:tmux-pane-words-anywhere:*' matcher-list 'b:=* m:{A-Za-z}={a-zA-Z}'

export DOWNLOADS=$HOME/.pen/downloads

chr() {
  printf "\\$(printf '%03o' "$1")"
}

ord() {
  LC_CTYPE=C printf '%d' "'$1"
}

# Overrides for terminfo$
export TERMINFO=~/.terminfo

# This is deprecated, so disable it. Not sure what is setting it.
unset GREP_OPTIONS

# . $HOME/scripts/libraries/when-cd.sh

zmodload -i zsh/parameter
copy-last-command-with-wd() {
    echo "cd \"$(pwd)\"; $history[$((HISTCMD-1))]" | sed 's//\\b/g' | pen-mnm | pen-xc -n -i 2>/dev/null
}
zle -N copy-last-command-with-wd
bindkey "\ek" copy-last-command-with-wd

{
    function zsh-paste-after() {
        text_to_add="$(pen-xc -ub | chomp)"
        RBUFFER="${text_to_add}${RBUFFER}"
    }

    function zsh-paste-before() {
        text_to_add="$(pen-xc -ub | chomp)"
        LBUFFER="${LBUFFER}${text_to_add}"
    }

    # # I can't use ^Y because zsh actually uses it.
    # # I can't use ^V because zsh uses it to insert literal characters.
    autoload -z zsh-paste-after
    zle -N zsh-paste-after
    bindkey "\eP" zsh-paste-after

    autoload -z zsh-paste-before
    zle -N zsh-paste-before
    bindkey "\ep" zsh-paste-before
}

fzf-dirs() {
    trap func_trap EXIT
    func_trap() {
        tput rc # Restore cursor position
    }

    tput sc # Set curser position

    pen-F d | pen-mfz -m -P -pscript "xa -E show-extensions-below 'echo; :' ls" | {
        input="$(cat)"
        if [ -n "$input" ]; then
            printf -- "%s" "$input" | pen-xc -s -i
            exec </dev/tty
            input="$(printf -- "%s" "$input" | pen-umn)"
            cd "$input"
            CWD="$input" zsh
        fi
    }
}
# c-q
zle -N fzf-dirs
bindkey '^Q' fzf-dirs

fzf-files() {
    trap func_trap EXIT
    func_trap() {
        tput rc
    }

    tput sc

    pen-F f -f | pen-mfz -m | {
        input="$(cat)"
        if [ -n "$input" ]; then
            printf -- "%s" "$input" | pen-xc -s -i
            # exec </dev/tty
            # This might be more stable:
            # exec <&2
            # Actually, it's inside Pen.el, so make a split pane
            sps rifle -- "$(printf -- "%s" "$input" | pen-umn)"
        fi
    }
}
zle -N fzf-files
bindkey '\eq' fzf-files # M-q

function _git-status {
    zle kill-whole-line
    zle -U "git status"
    zle accept-line
}
# Declare the function as a widget
zle -N _git-status

export COLUMNS

disable r

. ~/.shellrc

. `which pen-bash-library.sh`

export HH_CONFIG=hicolor        # get more colors
export SHELL=zsh
export PATH

# This is so I can run pen-tm commands taken from autofiles file in zsh.
export TM_SESSION_NAME
export PARENT_SESSION_ID
export PARENT_SESSION_NAME
export PARENT_WINDOW_ID

# If you use zsh and Tramp hangs every time you try to connect, try
# placing this in your .zshrc from the remote computer:

if [[ "$TERM" == "dumb" ]]
then
    # When zsh is run in emacs through C-c r, or ("s" shell "shell"), it enters here.

    {
        unsetopt zle
        unsetopt prompt_cr
        # Why was this unset? It stops zsh from displaying the prompt in emacs
        # unsetopt prompt_subst
        unfunction precmd
        unfunction preexec
        PS1="zsh dumb $ $PS1"
    } &>/dev/null
fi

export TTY

export DISPLAY=:0

HISTSIZE=10000000
SAVEHIST=10000000
# unsetopt BANG_HIST                 # Treat the '!' character specially during expansion. Unset this.
# Keep it on because I use !$ all the time
setopt BANG_HIST                 # Treat the '!' character specially during expansion. Unset this.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
# setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
# setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

PATH="$(uniqpath)"

stty stop undef 2>/dev/null; stty start undef 2>/dev/null

source /root/.config/broot/launcher/bash/br

eval "$(direnv hook zsh)"
