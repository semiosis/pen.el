#!/bin/bash
export TTY

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -nbs) {
        export NOBS=y
        shift
    }
    ;;

    *) break;
esac; done

# This is primarily designed for posix shell double-quote escapes.
# If other languages can use this, then great.

cmd-nice() {
    for var in "$@"
    do
        # A grand test of this is that it's idempotent with myeval
        # myeval cmd-nice "$(cmd-nice "hi ")"

        # Remember that some chars escape differently
        # pl "\$"
        # pl "\)"
        # It might be too hairy to capture all these rules for the moment

        # printf '"%s" ' "$(printf %s "$var" | sed 's/\(\\*\)"/\1\1\\"/g')";

        # TODO Ensure that the first \ to touch the non-" is not doubled?
        # printf %s "$var"
        # sadlly, command substitution removes the trailing newlines
        # printf '"%s" ' "$(printf %s "$var")"
        # printf '"%s" ' "$(printf %s "$var" | sed 's/\(\\\)\([^"]\|$\)/\1\1\2/g' | sed 's/\(\\*\)"/\1\1\\"/g')";

        IFS= read -rd '' quoted < <(printf %s "$var" | sed 's/\(\\\)\([^"]\|$\)/\1\1\2/g' | sed 's/\(\\*\)"/\1\1\\"/g');typeset -p quoted &>/dev/null
        printf '"%s" ' "$quoted";
    done | sed 's/ $//'
}

cmd-nice "$@"
