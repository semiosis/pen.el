#!/usr/bin/perl -X
# q: string Quoting utility
# Copyright (C) 2017 Shane Mulligan <mullikine@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# -X prevents it from printing errors
 
# Pretty good elisp version. Doesn't work past lispy.
#vim +/"(defun lispy-stringify (&optional arg)" "$HOME$MYGIT/spacemacs/packages26/lispy-20180317.722/lispy.el"
#vim +/"(defun lispy-unstringify ()" "$HOME$MYGIT/spacemacs/packages26/lispy-20180317.722/lispy.el"

# http://search.cpan.org/~evo/String-Escape-2010.002/Escape.pm#INSTALLATION

# Examples:
# cat $HOME/scripts/s | s awrl "q -c | q -cu"

# I want this script to not be buffered

use File::Basename;
my $name = basename($0);


# use strict;
use Getopt::Std;

# declare the perl command line flags/options we want to allow
my %options=();

# echo "hi\nhi hi" | qf
# q full/force. Puts quotes on. same as q -ftln
if ($name eq "qftln") {
    $options{f} = 1;
    $options{t} = 1;
    $options{l} = 1;
    $options{n} = 1;
}

# turn lines into arguments. Great for ranger.
if ($name eq "qf" or $name eq "qargs" or $name eq "qfdl") {
    $options{f} = 1;
    $options{d} = " ";
    $options{l} = 1;
}

if ($name eq "Q") {
    $options{f} = 1;
    $options{l} = 1;
}

# echo "hi\nhi hi" | qs
# q simple. Only adds quotes when necessary. same as q -tln
if ($name eq "qs") {
    $options{t} = 1;
    $options{l} = 1;
    $options{n} = 1;
}

if ($name eq "qne") {
    $options{b} = 1;
}

if ($name eq "uq") {
    $options{u} = 1;
}

if ($name eq "unquote.pl") {
    $options{u} = 1;
}

$delim = "\n";

getopts("d:Jufnbthl", \%options);

if (defined $options{d}) {
    $delim = $options{d};
}

if (defined $options{J}) {
    $delim = '';
}

if (defined $options{h}) {
    my $message = <<'END_MESSAGE';
-n no trailing newline (bad for awk coprocess / unbuffering)
-b bare (no ends)
-q unquote
-d output delimeter (default \n)
-l read lines
-J join lines (bad for awk coprocess / unbuffering)
-f force surrounding quotes. Default is to not force if not needed. Good for script wrappers.
-t trim (don't quote leading and trailing whitespace)
END_MESSAGE

    print $message;

    exit 0
}

use String::Escape qw( unquote qqbackslash quote backslash unquotemeta escape printable unprintable unqprintable qprintable );


# TODO :: This script has a deficiency. When I want to force wrapping
# quotes, as sometimes I do want, I want to specify -f
# vim +/"file_path=\"\$(p \"\$file_path\" | qne)\"" "$HOME/scripts/e"


# sudo cpanm String::Escape

# sub say {
    # print "\"",@_, "\""
# }

# c = 0

# This is buffered
# foreach $line (<>)  {   

my $leading;
my $middle;
my $trailing;
my $line;

sub quote_substring {
    $subject = $_[0];

    if (defined $options{t}) {
        $leading = $subject;
        $middle = $subject;
        $trailing = $subject;

        $leading =~ s/^(\s*).*/$1/;
        $middle =~ s/^\s*(.*?)\s*$/$1/;
        $trailing =~ s/^\s*.*?(\s*)$/$1/;

        return $leading . quote_it($middle) . $trailing;
    } else {
        return quote_it($subject);
    }
}

sub quote_it {
    $subject = $_[0];

    if (defined $options{u}) {
        # this is bad i don't want the unicode codes to come though
        $subject = unqprintable($subject);
    } else {
        if (defined $options{f}) {
            if (defined $options{b}) {
                $subject = printable($subject);
            } else {
                $subject = quote(printable($subject));
            }
            # print qqbackslash($subject); # this creates those horrid
            # unicode codes
        } else {
            if ($subject ne "") {
                if (defined $options{b}) {
                    $subject = unquote(qprintable($subject));
                } else {
                    $subject = qprintable($subject);
                }
            }
        }
    }
    
    return $subject;
}

if (! defined $options{l}) {
    local $/;
    my $stdin = <STDIN>;
    
    print quote_substring($stdin);
    exit 0;
} else {
    while(<>) {
        $chomp_result=0;

        if (! chomp) {
            $chomp_result = 1;
        }

        print quote_substring($_);

        # Annoyingly, a line must always come out after data is
        # received, for awk to not hang.

        if (($chomp_result eq 1) && (defined $options{n})) {
            0;
        } else {
            print $delim;
        }
    }
    # select()->flush();
    exit 0
}

exit 0
