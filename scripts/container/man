#!/bin/bash
export TTY

# Remember:
# $EMACSD/host/pen.el/scripts/container/man /usr/local/lib/python3.7/dist-packages/visidata/man/vd.1

. $PENELD/scripts/utils.sh

checktut=y
checkinfo=y

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -callingfromemacs) {
        checktut=n
        checkinfo=n
        shift
    }
    ;;

    *) break;
esac; done

IFS= read -r -d '' shcode <<'HEREDOC'
/usr/bin/man bash-builtins |
    sed -e '0,/SYNOPSIS/d' -e '/^$/,$d' |
    sed -e 's/^\s\+//' -e 's/, */\n/g' |
    sed '/^$/d' |
    sed '1s/.*: //' |
    sed -z 's/‐\n//g' |
    sed '$s/\.$//' |
    grep -vP "^(kill)$"
HEREDOC

# builtins_list="$(pf -- "%s\n" "$shcode" | ci -f -nd myeval)"
# I need to fix stdin caching
builtins_list="$(pf -- "%s\n" "$shcode" | myeval)"
signals_list="$(/bin/kill -l | tr -s ' ' '\n')"

CMD="$(cmd "$@")"
export GY_CMD="man $CMD"

parent_bn="$(ps -o comm= $PPID)"

caller_tree="$(pstree -lAsp "$PPID")"
# When fpdv calls 'man' break it into a separate tmux window
if pl "$caller_tree" | grep -q -P 'pvd'; then
    nw "$0" "$@"
    exit "$?"
fi

if [ -z "$COLUMNS" ] && test "$istty" = 0; then
    eval `resize`
fi

if [ -n "$COLUMNS" ] && [ "$COLUMNS" -gt 90 ]; then
    COLUMNS=90
fi

export COLUMNS
export MANWIDTH="$COLUMNS"

if test "$istty" = 0; then
    export PAGER=v
else
    export PAGER=sps-v
fi

is_tty() { [ -t 1 ] && ! test "$TERM" = "dumb"; }

if test "$#" -gt 0; then
    last_arg="${@: -1}"

    if is_tty; then
        if test "$checktut" = y && tut -q "$last_arg"; then
            if yn "tut $last_arg? (y) or man $last_arg? (n)"; then
                tut "$last_arg"
                exit "$?"
            fi
        fi

        if test "$checkinfo" = y && info -q "$last_arg"; then
            echo "Info for ${last_arg} exists." | hls blue 1>&2
            if yn "info $last_arg? (y) or man $last_arg? (n)"; then
                info "$@"
                exit "$?"
            fi
        fi
    fi

    case "$last_arg" in
        pipexec) {
            # /usr/bin/man -l doc/man/pipexec.1 | pen-strip-ansi | v
            (
             cd $MYGIT/flonatel/pipexec
            /usr/bin/man -l doc/man/pipexec.1
            ) | v -ft man
            exit "$?"
        }
        ;;

        hdc) {
            x -sh hdc -e '>' -s :help -c m -i
            exit "$?"
        }
        ;;

        broot) {
            shift
            br -h "$@"
            exit "$?"
        }
        ;;

        figlet) {
            shift
            set -- toilet "$@"
        }
        ;;

        irust) {
            # x -sh irust -z 'In:' -s ":help full" -c m -i
            x -sh "tmwr irust" -e 'In:' -s ":help full" -c m -i
            exit "$?"
        }
        ;;

        *)
    esac

    last_arg="${@: -1}"
    # String length of the last argument
    len=${#last_arg}
    builtin_match="$(pl -- "$builtins_list" | grep -F "$last_arg" | grep -P "^$(0</dev/null rps "$len" .)$")"

    if test "$builtin_match" = "["; then
        builtin_match=test
    fi

    if test -n "$builtin_match"; then
        vimcmd="vs +/$(cmd-nice "$builtin_match") -ft man"
        eval "/usr/bin/man bash-builtins 2>&1 | $vimcmd"
        exit "$?"
    fi

    maybe_signame="$(pl "$last_arg" | sed 's/^SIG//')"
    len=${#maybe_signame}
    signals_match="$(pl -- "$signals_list" | grep -F "$maybe_signame" | grep -P "^$(0</dev/null rps "$len" .)$")"
    if test -n "$signals_match"; then
        vimcmd="vs +/$(cmd-nice "$signals_match") -ft man"
        eval "man 7 signal 2>&1 | $vimcmd"
        exit "$?"
    fi
fi

if test "$parent_bn" = emacs || test "$TERM" = dumb; then
    /usr/bin/man "$@" 2>/dev/null | pen-pa -E "$PAGER"
elif man-page-exists-p "$@"; then
    /usr/bin/man "$@" 2>/dev/null | pen-pa -E "$PAGER"
else
    iman "$@"
fi
