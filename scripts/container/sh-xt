#!/bin/bash
export TTY

# . ~/.shell_environment

# This starts off by asking you what kind of terminal you want
# This command should only spawn async commands

set -m

# exec 1> >(pen-mnm)

# I should turn this entire script into an elisp hydra.
# Although that would require that emacs has been started already.

read -r -d '' options <<HEREDOC
.  EDIT
1  xt -b sh-lingo
\`  xt -b sh-general
z  xt zsh
Z  xt -b zsh
u  win xterm-tmux
U  win xterm-tmux -b
a  xt -d tmux attach
A  xt -d -b tmux attach
g  xt-mosh-tmux shane@instance-1
G  xt-mosh-tmux -b shane@instance-1
l  win xterm-tmux localhost_ws_codelingo:
L  win xterm-tmux -b localhost_ws_codelingo:
i  win xterm-tmux localhost_ws_codelingo_issues:
I  win xterm-tmux -b localhost_ws_codelingo_issues:
j  win xterm-tmux localhost_ws_codelingo_journal:
J  win xterm-tmux -b localhost_ws_codelingo_journal:
HEREDOC

echo "$0" | udl | hls green
echo "$options" | pen-mnm | hls dgrey

read -n1 d; test "$d" = "" && read -n1 d
# clear

case "$d" in
    .) cmd="v $0" ;;
    1) cmd="xt -d -b sh-lingo" ;;
    \`) cmd="xt -d -b sh-general" ;;
    z) cmd="xt -d zsh" ;;
    Z) cmd="xt -d -b zsh" ;;
    u) cmd="win xterm-tmux & disown" ;;
    U) cmd="win xterm-tmux -b & disown" ;;
    a) cmd="xt -d tmux attach" ;;
    A) cmd="xt -d -b tmux attach" ;;
    g) cmd="xt-mosh-tmux shane@instance-1" ;;
    G) cmd="xt-mosh-tmux -b shane@instance-1" ;;
    l) cmd="win xterm-tmux localhost_ws_codelingo: & disown" ;;
    L) cmd="win xterm-tmux -b localhost_ws_codelingo: & disown" ;;
    i) cmd="win xterm-tmux localhost_ws_codelingo_issues: & disown" ;;
    I) cmd="win xterm-tmux -b localhost_ws_codelingo_issues: & disown" ;;
    j) cmd="win xterm-tmux localhost_ws_codelingo_journal: & disown" ;;
    J) cmd="win xterm-tmux -b localhost_ws_codelingo_journal: & disown" ;;
esac
echo
echo "$cmd" | hls nearblack

# exec <`tm-tty`
# exec 1> /dev/tty

# Async only. Because we are starting a new xterm
eval "$cmd"