#!/bin/bash
export TTY

# ( hs "$(basename -- "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

unset CWD

sshargs=()
: "${USE_TTY:="y"}"
: "${USE_PROFILE:="y"}"
: "${QUIET:="y"}"
: "${SSH_HOST_ALLOWED:="y"}"
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -ssh) {
        SSH_TO_HOST=y
        shift

        # All arguments that proceed -ssh should be captured and used
        # as arguments to ssh:
        # Examples:
        # pen-cterm-ssh -ssh -M zsh
        # pen-cterm-ssh -ssh -M -- bash
        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            "") { shift; }; ;;
            --) { shift; break; }; ;;

            *) {
                sshargs=( "${sshargs[@]}" "$opt" )
                shift
            }
            ;;

            # Break at a non-option
            [^-]*) break;
        esac; done
    }
    ;;

    -ssh-to-host) {
        SSH_TO_HOST="$2"
        shift
        shift
    }
    ;;

    -cwd) {
        CWD="$2"
        shift
        shift
    }
    ;;

    -t) {
        USE_TTY=y
        shift
    }
    ;;

    -q) {
        QUIET=y
        shift
    }
    ;;

    -v) {
        VERBOSE=y
        shift
    }
    ;;

    -p) {
        USE_PROFILE=y
        shift
    }
    ;;

    -np) {
        USE_PROFILE=n
        shift
    }
    ;;

    -nt) {
        USE_TTY=n
        shift
    }
    ;;

    -E) {
        DO_EXEC=y
        shift
    }
    ;;

    -cmd) {
        CMD="$2"
        shift
        shift
    }
    ;;

    -user) {
        PEN_USER="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

if test "$USE_TTY" = "y"; then
    sshargs=( -t "${sshargs[@]}" )
fi

if test "$QUIET" = "y"; then
    sshargs=( -q "${sshargs[@]}" )
fi

if test "$VERBOSE" = "y"; then
    sshargs=( -vvv "${sshargs[@]}" )
fi

if test -n "$CMD"; then
    :
elif test "$DO_EXEC" = "y"; then
    CMD="$1"
else
    : ${CMD:="$(cmd-nice-posix "$@")"}
fi

if test "$SSH_TO_HOST" = y && inside-docker-p; then
    if test -n ~/pen_user.txt; then
        PEN_USER="$(cat ~/pen_user.txt)"
    fi

    : ${PEN_USER:="$(pen-readln "host username")"}
else
    : ${USER:="$(whoami)"}
    PEN_USER=$USER
fi

hn="$(hostname)"
hn="$(p "$hn" | sed 's/^pen-//')"

# Just forcefully set the term to screen-256color.
# I can remove these statements without too much trouble, but some programs such as vim don't like it.
# If I log into a remote server while using cterm/pet then eterm-256color will cause problems.

# TODO Do not necessarily source profile
# To make commands faster

SETUP="export TERM=screen-256color;"

: ${CWD:="$(pwd)"}

SSH_FROM_PEN=y

# List all the ENVS I would like exported here (to the host)
SSH_EXPORTS="$(envq -j DEBUG SSH_FROM_PEN) $SSH_EXPORTS"

if test -n "$SSH_EXPORTS"; then
    SETUP="export $SSH_EXPORTS;$SETUP"
fi

# OH Wow pen-cterm-ssh is being caled all the time!
# Because of git in zsh

ns pen-cterm-ssh "$@" &>/dev/null

if test "$VERBOSE" = "y"; then
    set -xv
fi

if ! test -n "$SSH_HOST_ALLOWED" && pen-rc-test host-ssh-master; then
    : "${SSH_HOST_ALLOWED:="y"}"
else
    : "${SSH_HOST_ALLOWED:="n"}"
fi
export SSH_HOST_ALLOWED

if test "$SSH_TO_HOST" = "y"; then
    if test "$SSH_HOST_ALLOWED" = n; then
        echo ssh to host not enabled in pen.yaml | hls red 1>&2
        exit 1
    fi

    if test "$DEBUG" = "y"; then
        SETUP="set -xv; $SETUP"
    fi

    if test "$USE_PROFILE" = "y"; then
        SETUP=". ~/.profile; $SETUP"
    fi

    CWD="$(printf -- "%s" "$CWD" | sed 's=^/volumes==')"
    CWD="$(printf -- "%s" "$CWD" | sed 's=^/root/.emacs.d/host=$HOME/.emacs.d=')"
    CWD="$(printf -- "%s" "$CWD" | sed 's=^/root=$HOME=')"
    SETUP="cd $(cmd-nice-posix "$CWD"); $SETUP"

    if test "$SSH_HOST_CHOWN" = "y" && test -n "$PEN_USER"; then
        # If is git then chown
        # SETUP="cd $(cmd-nice-posix "$CWD"); [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1 && sudo chown -R $PEN_USER:$PEN_USER .;$SETUP"
        SETUP="cd $(cmd-nice-posix "$CWD"); [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1;$SETUP"
    fi

    CMD="$(printf -- "%s" "$CMD" | sed 's=/volumes==')"
    CMD="$(printf -- "%s" "$CMD" | sed 's=/root/.emacs.d/host=$HOME/.emacs.d=')"
    CMD="$(printf -- "%s" "$CMD" | sed 's=/root=$HOME=')"

    ssh \
        -i "~/.pen/host_key" \
        -o ControlMaster=auto \
        -o ControlPath="~/ssh-controlpath-%r@%h:%p" \
        -o UserKnownHostsFile=/dev/null \
        -o StrictHostKeyChecking=no \
        "${sshargs[@]}" \
         $PEN_USER@$hn \
        "bash -l -c $(cmd-nice-posix "$SETUP $CMD")"
else
    cd "$CWD"
    eval "$SETUP $CMD"
fi
