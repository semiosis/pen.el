#!/bin/bash
export TTY

# exec 2>/dev/null

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -fn) {
        runfn="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

colorize() { lolcat -f; }
makebluebg() { printf -- "%s" "[44m"; sed -u "s=\(.\)\(\[38\)=\1[44m\1\2=g"; }
fontify() { smbraille; }

if test -n "$runfn"; then
    "$runfn" "$@"
    exit "$?"
fi

rainbow=y
bluebg=y
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -b) {
        big=y
        shift
    }
    ;;

    -bgb) {
        bluebg=y
        # writing backgrounded spaces is effectively clearing
        # so we don't need to clear completely
        fastclear=y
        shift
    }
    ;;

    -nobgb) {
        bluebg=
        shift
    }
    ;;

    -fastclear) {
        fastclear=y
        shift
    }
    ;;

    -rb) {
        rainbow=y
        shift
    }
    ;;

    -norb) {
        rainbow=
        shift
    }
    ;;

    *) break;
esac; done

# ( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

# 314 seems to be the number to make lolcat wheel around modulo
# for i in $(seq 1 314); do echo "$message"; done | lolcat -f

tput civis
message="$@"
: "${message:="Â» Loading Â»Â»Â»Â»Â»Â»Â»Â»Â»"}"

# colourwheel="$(for i in $(seq 1 314); do echo "$message"; done | lolcat -f)"
# colourwheel="$(for i in $(seq 1 314); do echo "$message" | sed "s/.....\$/...../"; done | lolcat -f)"

# Caching scripts:
# Firstly the variables I want must be included as such.
# script='for i in $(seq 1 314); do pattern="$(echo -n . | rps "$(( i % 10 ))")"; echo "$message" | sed "s/$pattern\$/$pattern/"; done | lolcat -f'
# script='for i in $(seq 1 314); do pattern="$(echo -n . | rps "$(( i % 10 ))")"; replacement="$(printf -- "%s" "$pattern" | sed "s=\.= =g")"; echo "$message" | sed "s/$pattern\$/$replacement/"; done | lolcat -f'
# script='for i in $(seq 1 314); do pattern="$(echo -n . | rps "$(( i % 10 ))")"; replacement="$(printf -- "%s" "$pattern" | sed "s=\.= =g")"; echo "$message" | sed "s/^$pattern/$replacement/"; done | lolcat -f'
# script='for i in $(seq 314 -1 1); do pattern="$(echo -n . | rps "$(( i % 10 ))")"; replacement="$(printf -- "%s" "$pattern" | sed "s=\.= =g")"; echo "$message" | sed "s/^$pattern/$replacement/"; done | lolcat -f'

IFS= read -r -d '' script <<'HEREDOC'
for i in $(seq 314 -1 1); do
    pattern="$(echo -n . | rps "$(( i % 10 ))")";
    replacement="$(printf -- "%s" "$pattern" | sed "s=\.= =g")";
    echo "$message" | sed "s/$pattern\$/$replacement/" | ( if test "$big" = y; then fontify; else cat; fi; );
done |
    ( if test "$rainbow" = y; then spinner -fn colorize; else cat; fi; ) |
    ( if test "$bluebg" = y; then spinner -fn makebluebg; else cat; fi; )
HEREDOC
script="$(printf -- "%s" "$script" | sed -z "s/\n */ /g")"

# cmd ocif bash -c "bluebg=\"$bluebg\"; rainbow=\"$rainbow\"; big=\"$big\"; message=\"$message\"; $script"
# exit
colourwheel="$(ocif bash -c "bluebg=\"$bluebg\"; rainbow=\"$rainbow\"; big=\"$big\"; message=\"$message\"; $script")"

trap func_trap INT
func_trap() {
    tput cnorm
    kill "$$"
}

clear

if test "$fastclear" = "y"; then
    clear_sequence="[H"
else
    clear_sequence="[H[J"
fi

if test "$big" = "y"; then
    while :; do
        printf -- "%s\n" "$colourwheel" | while read line; do
            read line2
            printf -- "%s" "$clear_sequence"
            printf -- "%s\n" "$line"
            printf -- "%s" "$line2"
            sleep 0.1
        done
    done
else
    while :; do
        printf -- "%s\n" "$colourwheel" | while read line; do
            printf -- "%s" "$clear_sequence"
            printf -- "%s" "$line"
            sleep 0.1
        done
    done
fi

# i=1
# while :; do
#     colored="$(echo "$colourwheel" | awk 1 | sed -n "${i}p" )"
#     # clear
#     printf -- "%s" "[H"
#     printf -- "%s" "[44m"
#     printf -- "%s" "$colored" | sed -u 's=\(.\)\(\[38\)=\1[44m\1\2=g'
#     # printf -- "%s" "$colored"
# 
#     i=$(( (i + 1) % 314 ))
#     if test "$i" = 0; then
#         i=1
#     fi
#     sleep 0.1
#     # sleep 0.05
#     # sleep 0.03
#     # sleep 0.3
# done
tput cnorm
