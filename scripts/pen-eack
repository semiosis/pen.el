#!/bin/bash

# If stdin is not pregrepped, it serves as the list of files to search

origcmd="$(cmd "$@")"

UPDATE=y

unset CWD

export DO_FILTER=y

export PENCONF="$HOME/.pen"
export GLOSSARIES="$PENCONF/glossaries"

if test "$(pwd)" = "$GLOSSARIES"; then
    FOLLOW=y
fi

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -U|-noupdatecache) {
        UPDATE=n
        shift
    }
    ;;

    -nm) {
        NO_MINIMISE=y
        shift
    }
    ;;

    -j) {
        PREGREPPED=y
        shift
    }
    ;;

    -w) {
        SHOW_FULL_PATH=y
        shift
    }
    ;;

    *) break;
esac; done

sn="$(basename "$0")"
case "$sn" in
    pen-ea) { # deep ack from top
        PARSE_OPTIONS=n
        DEPTH=10
    }
    ;;

    pen-dack) { # deep ack from top
        TOP=y
        DEPTH=10
    }
    ;;

    pen-eat) {
        WORD_BOUNDARIES=y
        DEPTH=10
    }
    ;;

    pen-dac|pen-ead|pen-eackd) { # deep ack
        DEPTH=10
    }
    ;;

    pen-eaf) { # deep ack
        DEPTH=10
        FOLLOW=y
    }
    ;;

    pen-zad|pen-zead) { # deep ack
        DEPTH=10
        USE_ZGREP=y
        FOLLOW=y
    }
    ;;

    pen-iad|pen-eai) { # deep ack, insensitive
        DEPTH=10
        CASE_INSENSITIVE=y
    }
    ;;

    pen-lack) { # literal ack
        TOP=y
        LITERAL=y
        DEPTH=10
    }
    ;;
esac

: ${PARSE_OPTIONS:="y"}

export PARSE_OPTIONS
export UPDATE
export SHOW_FULL_PATH
export DEPTH
export WORD_BOUNDARIES
export CASE_INSENSITIVE
export TOP
export LITERAL
export FOLLOW
export USE_ZGREP

is_tty() {
    # If stout is a tty
    [[ -t 1 ]]
}

#export EXCLUDE_VENDOR
#export EXCLUDE_GIT
#export OCCUR
#export PCRE
#export CASE_INSENSITIVE
#export LITERAL
#export TOP
#export KNOWN_TEXT_FILES_ONLY
#export SYMLINK_RESULTS
#export UPDATE

# (define-key compilation-button-map (kbd "C-m") 'grep-go-vim)
read -r -d '' maps <<- 'HEREDOC'
	(define-key compilation-button-map (kbd "C-m") 'compile-goto-error)
	(define-key compilation-button-map (kbd "RET") 'compile-goto-error)
	HEREDOC

if test "$PREGREPPED" = "y"; then
    # This is for gli
    cd /
fi

CWD="$(pwd)"

ecmd="(cd $(cmd-nice-posix "$CWD"))(grep-mode)"
ecmd="(ignore-errors $ecmd)"

stdin_exists() {
    ! [ -t 0 ] && ! test "$(readlink /proc/$$/fd/0)" = /dev/null
}

grep() {
    if test "$PARSE_OPTIONS" = "y"; then
        command grep -Hn "$@"
    else
        command grep -Hn -- "$@"
    fi
}

filter() {
    if test "$DO_FILTER" = "n"; then
        cat
    else
        sed -e "/log\/build_/d" -e "/\/tags:/d" | sed 's/(standard input):\s*[0-9]\+://'
    fi
}

if stdin_exists; then
    if test "$PREGREPPED" = "y"; then
        IFS= read -rd '' input < <(awk 1 | filter)
    else
        IFS= read -rd '' input < <(awk 1 | cut -d : -f 1 | filter | xargs grep -Hn "$@" -- 2>/dev/null; )
    fi
else
    IFS= read -rd '' input < <(export UPDATE; 0</dev/null pen-ci -t 300 pen-find-and-grep "$@" | filter)
fi

maybe_mnm() {
    if test "$NO_MINIMISE" = "y"; then
        cat
    else
        pen-mnm
    fi
}

if [ -n "$input" ]; then
    {
        if test "$PREGREPPED" = "y"; then
            echo "pregrepped input"
        else
            echo "cd $(cmd-nice-posix $CWD); $0 $origcmd" | maybe_mnm
        fi
        echo These extra lines are needed for the compilation-mode issue
        echo See "wgrep-prepare-header/footer"
        echo
        printf -- "%s" "$input" |
        {
            if test "$PREGREPPED" = "y" && printf -- "%s" "$input" | pen-empty-line-exists; then
                # awk 1 | sed "0,/^$/d"
                awk 1 | sed -z 's/^\n*//'
            else
                cat
            fi
        }
    } | pen-dos2unix | {
        if is_tty; then
            # maybe_mnm | orspe -noonly -e "$ecmd"
            # Sadly, pen-mnm appears to break wgrep-mode
            # grep-mode is fine.
            # echo "maybe_mnm | pen-e -D DEFAULT -e $ecmd" | tv &>/dev/null
            maybe_mnm | pen-e -D DEFAULT -e "$ecmd"
            result="$?"
            if ! test "$result" -eq 0; then
                printf -- "%s\n" "$input" | pen-pager
            fi
        else
            cat
        fi
    }
else
    printf -- "%s\n" "No results" 1>&2
    exit 1
fi
