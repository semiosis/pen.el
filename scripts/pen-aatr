#!/bin/bash
export TTY

# awk apply to record

# Only apply to certain records
# cat "$(which pen-aatr)" | pen-aatr -k -ids 1,3,5,7,9,11 '#' "sed -u -z 's/[a-z]/\\\U&/g'" | v

exec 2>/dev/null
# set -xv

esc() {
    # escapes \ and the chars of choice

    chars="$1"
    : ${chars:=" "}
    chars="$(printf -- "%s" "$chars" | sed -e "s/\\\/&&/g" -e "s/\"/\\\&/g")"

    sed "s_\\([$chars]\\)_\\\\\\1_g"
}

# POSIX-compliant
p () {
    # This is not exactly literal. It evaluates \n
    {
        i=1
        while [ "$i" -lt "$#" ]; do
            eval ARG=\${$i}
            printf -- "%s " "$ARG"
            i=$((i + 1))
        done
        eval ARG=\${$i}
        printf -- "%s" "$ARG"
    } | sed 's/\\n/\n/g'
}

fargs=()
SELECTED_RECORD_ID=
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -R) {
        SELECTED_RECORD_ID="$2"
        shift
        shift
    }
    ;;

    -k|-irs) {
        # Do not put RS into the filter
        IGNORE_RS=y
        shift
    }
    ;;

    -r|-rrs) {
        # Remove the RS at the end
        REMOVE_RS=y
        shift
    }
    ;;

    -ids) {
        # Remove the RS at the end
        RECORD_IDS="$2"
        fargs+=(-v record_ids="$RECORD_IDS")
        shift
        shift
    }
    ;;

    *) break;
esac; done

# RSEP is interpreted as the string verbatim without escape characters
# unless it is read from the first argument. p will interpret \n
if ! test -n "$RSEP"; then
    IFS= read -rd '' RSEP < <(p "$1");typeset -p RSEP &>/dev/null
fi

IFS= read -rd '' RSEP < <(printf -- "%s" "$RSEP" | qne);typeset -p RSEP &>/dev/null
IFS= read -rd '' rsep_escaped < <(printf -- "%s" "$RSEP" | esc "\\");typeset -p rsep_escaped &>/dev/null

filter_cmd="$2"

read -r -d '' awkscript <<'HEREDOC'
BEGIN {
    if (length(record_ids) != 0) {
        split(record_ids,record_ids_vals,",")
        for (i in record_ids_vals) record_ids_keys[record_ids_vals[i]] = ""
    }
}

function transform_record_Q(id) {
    if (length(record_ids) == 0) {
        # true - default is to transform all records
        return 1
    } else if (NR in record_ids_keys) {
        # true - transform this record
        return 1
    } else {
        # false - do not transform this record
        return 0
    }
}

function print_transformed_or_raw_record(id) {
    if (transform_record_Q(id)) {
        printf "%s", $0 |& cmd;
    } else {
        printf "%s", $0
    }
}

function print_transformed_or_raw_record_with_irs(id) {
    # printf "%s%s", rs_unesc, $0 |& cmd;
    if (transform_record_Q(id)) {
        printf "%s%s", rs_unesc, $0 |& cmd;
    } else {
        printf "%s%s", rs_unesc, $0
    }
}

{
    # print NR
    if (r == "" || NR == r) {
        if (NR == 1) {
            print_transformed_or_raw_record(NR)
            # printf "%s", $0 |& cmd;
        } else {
            if (irs == "y") {
                printf "%s", rs_unesc
                print_transformed_or_raw_record(NR)
                # printf "%s", $0 |& cmd;
            } else {
                print_transformed_or_raw_record_with_irs(NR)
                # printf "%s%s", RS, $0 |& cmd;
            }
        }
        $0 = "";

        if (transform_record_Q(NR)) {
            close(cmd, "to");

            # This is needed because getline will not overwrite if nothing is read
            $0 = "";

            cmd |& getline $0;

            fflush(cmd);
            close(cmd);
        }

    } else {
        if (NR > 1) {
            print RS
        }
    }

    print; system("");
}
HEREDOC

f="$filter_cmd | sed -z \"s/${rsep_escaped}/__RS_PLACEHOLDER__/\""
# echo "$f" | tv &>/dev/null
f="$(cmd-b64 -mk eval "$f")"
# f="$(p "$f" | s field 2)"
# f="$(run-b64 -show "$f")"
# echo "$f" | tv &>/dev/null
# exit

# echo "$f" | tv &>/dev/null

fargs+=("$awkscript")
# fargs+=(-f "/root/.emacs.d/host/pen.el/scripts/pen-aatr.awk")

# printf -- "%s\n" "$RSEP" | tv &>/dev/null
# cmd sed -z "s/$RSEP//g" | tv &>/dev/null
# cmd sed -z "s/$rsep_escaped//g" | tv &>/dev/null

gawk -v irs="$IGNORE_RS" -v r="$SELECTED_RECORD_ID" -v rs_unesc="$RSEP" -v RS="$rsep_escaped" -v ORS="" -v cmd="$f" -v FS=" " -v OFS=" " "${fargs[@]}" | sed -z "s/__RS_PLACEHOLDER__/$RSEP/g" | {
    if test "$REMOVE_RS" = "y"; then
        sed -z "s/$rsep_escaped//g"
    else
        cat
    fi
}