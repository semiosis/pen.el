#!/bin/bash

# ( hs "$(basename -- "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

# toggle-tmux-popup -x M -y M -w 50% -h 50% bash -c "list-bible-books | mfz -nv"
# toggle-tmux-popup -x M+10 -y M+5 -w 50% -h 50% bash -c "list-bible-books | mfz"

: "${CALLER_TMUX_SESSION:="$(tmux display -pF '#{session_id}')"}"

is_stdout_pipe() {
    # If stout is a pipe
    [[ -p /dev/stdout ]]
}
is_stdout_pipe
ispipe="$?"

tm_getvar() {
    name="$1"
    tmux display-message -pF "#{$name}"
}

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -E) {
        shcmd="$2"
        shift
        shift
    }
    ;;

    -nostdin) {
        no_stdin=y
        shift
    }
    ;;

    -nos) {
        hide_status=y
        shift
    }
    ;;

    -b) {
        border_style="$2"
        shift
        shift
    }
    ;;

    -bg) {
        bgc="colour$2"
        shift
        shift
    }
    ;;

    -fg) {
        fgc="colour$2"
        shift
        shift
    }
    ;;

    -d) {
        detach=y
        shift
    }
    ;;

    -delay) {
        delay="$2"
        shift
        shift
    }
    ;;

    -time) {
        display_time="$2"
        shift
        shift
    }
    ;;

    -nob) {
        no_border=y
        shift
    }
    ;;

    -c) {
        position=center
        shift
    }
    ;;

    -w) {
        width="$2"
        shift
        shift
    }
    ;;

    -h) {
        height="$2"
        shift
        shift
    }
    ;;

    -x) {
        x="$2"
        shift
        shift
    }
    ;;

    -y) {
        y="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

if test "$detach" = "y"; then
    ispipe=1
fi

: ${CMD:="$shcmd"}
: ${CMD:="$(cmd-nice "$@")"}

# may be a percentage or a fixed integer number of characters
: "${width:="80%"}"
: "${height:="75%"}"
: "${x:="C"}"
: "${y:="C"}"

: "${client_width:="$(tm_getvar client_width)"}"
: "${client_height:="$(tm_getvar client_height)"}"

pl() {
    printf -- "%s\n" "$@"
}

if pl "$width" | grep -q '%'; then
    width="$(pl "$width" | grep -o -P '[0-9]+')"
    width="$(awk-calc "($width/100) * $client_width" | sed 's/\..*//')"
fi

if pl "$height" | grep -q '%'; then
    height="$(pl "$height" | grep -o -P '[0-9]+')"
    height="$(awk-calc "($height/100) * $client_height" | sed 's/\..*//')"
fi

# half_height="$(awk-calc "0.5 * $height" | sed 's/\..*//')"
# y="$((y + half_height))"

if printf -- "%s\n" "$x$y" | grep -q -P 'M'; then
    eval `tm-get-client-pos`
fi

case "$x" in
    M) { x="$CURSOR_X"; } ;;
    M-[0-9]*) {
        n="$(printf -- "%s\n" "$x" | grep -oP "[0-9]+")"
        x="$(( CURSOR_X - n ))";
    } ;;
    M+[0-9]*) {
        n="$(printf -- "%s\n" "$x" | grep -oP "[0-9]+")"
        x="$(( CURSOR_X + n ))";
    } ;;

    *)
esac

case "$y" in
    M) { y="$CURSOR_Y"; } ;;
    H-[0-9]*) {
        n="$(printf -- "%s\n" "$y" | grep -oP "[0-9]+")"
        y="$(( client_height - height - n ))";
    } ;;
    M-[0-9]*) {
        n="$(printf -- "%s\n" "$y" | grep -oP "[0-9]+")"
        y="$(( CURSOR_Y - n ))";
    } ;;
    M+[0-9]*) {
        n="$(printf -- "%s\n" "$y" | grep -oP "[0-9]+")"
        y="$(( CURSOR_Y + n ))";
    } ;;

    *)
esac

if pl "$y" | grep -q -P '^[0-9]+$'; then
    y="$((y + height))"
fi

# This isn't accurate.
# It only really tests if fd0 is not a tty
stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

tf_returncode="$(mktemp -t tf_returncodeXXXXXX || echo /dev/null)"
trap "rm $(cmd-nice-posix "$tf_returncode") 2>/dev/null" 0

CMD="bash -c $(cmd "set -o pipefail; $CMD ; echo \$? > $tf_returncode")"

if stdin_exists && ! test "$no_stdin" = y; then
    input_fp="$(cat | tf txt)"
    CMD="cat \"$input_fp\" | $CMD"
fi

if test "$hide_status" = "y"; then
    # CMD="tmux set-option -t popup: status off; $CMD"
    PRE_CMD="tmux set-option -t popup: status off;"
fi

: "${bgc:="default"}"
: "${fgc:="colour025"}"

tmux set-option -g popup-border-style "bg=$bgc,fg=$fgc";

if test "$no_border" = "y"; then
    border_style=none
else
    : "${border_style:="rounded"}"
fi
sentinal_string="tm_sentinal_${RANDOM}_$$"

if test "$ispipe" = 0; then
    output_fp="$(0</dev/null tf txt)"
    CMD="$CMD > \"$output_fp\""
    CMD="$CMD; tmux wait-for -S $sentinal_string"
fi

tmuxdetach() {
    if test "$detach" = "y"; then
        command tmux "$@" &
        disown
    else
        command tmux "$@" &
    fi
}

if test -n "$display_time"; then
    ( sleep "$display_time"; tmux popup -C; tmux kill-session -t popup: ; ) &

    if test "$detach" = "y"; then
        disown
    fi
fi

if test "$(tm_getvar session_name)" = "popup"; then
    # Detaching isn't actually good behaviour. Just ignore it.
    # tmux detach-client
    exit 1
else
    # This speeds it up if the status needs to be hidden in advance of appearing
    tmux has-session -t popup 2>/dev/null || tmux new -d -s popup env "CALLER_TMUX_SESSION=$CALLER_TMUX_SESSION" \
        bash -c "${PRE_CMD}. ~/.profile; $CMD"

    if test -n "$delay"; then
        sleep "$delay"
    fi

    tmuxdetach popup -d '#{pane_current_path}' \
        -b "$border_style" \
        "-x$x" "-y$y" "-w$width" "-h$height" \
        -E "tmux attach -t popup 2>/dev/null || \
        tmux new -s popup env \"CALLER_TMUX_SESSION=$CALLER_TMUX_SESSION\" \
        bash -c $(cmd "${PRE_CMD}. ~/.profile; $CMD")"
fi

wait

if test "$ispipe" = 0; then
    tmux wait-for "$sentinal_string"
    cat "$output_fp"
fi

code="$(cat "$tf_returncode")"

set -o pipefail
test -n "$code" && exit "$code"
