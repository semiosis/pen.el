#!/bin/bash

sn="$(basename -- "$0")"

. $PENELD/scripts/utils.sh

: "${FAST:="y"}"

if ! in-pen-p; then
    # in-pen "$sn" "$@"
    pin "$@"
    exit "$?"
fi

test -d "/root/.pen/tmp" && : "${TMPDIR:="/root/.pen/tmp"}"
test -d "/tmp" && : "${TMPDIR:="/tmp"}"
export TMPDIR

unset EMACSD_BUILTIN
test -d "/root/.emacs.d" && : "${EMACSD_BUILTIN:="/root/.emacs.d"}"
export EMACSD_BUILTIN

# Must be posix compliant. Because docker exec sources setup-term.sh from the pen script:
test_nonemptydir() {
  dir="$1"
  test -n "$(ls -A "$dir")"
}

unset EMACSD
test -d "/root/.emacs.d/host" && test_nonemptydir "/root/.emacs.d/host" && : "${EMACSD:="/root/.emacs.d/host"}"
test -d "/root/.emacs.d" && test_nonemptydir "/root/.emacs.d" && : "${EMACSD:="/root/.emacs.d"}"
export EMACSD

export PENELD="$EMACSD/pen.el"

unset VIMCONFIG
test -d "/root/.vim/host" && : "${VIMCONFIG:="/root/.vim/host"}"
test -d "/root/.vim" && : "${VIMCONFIG:="/root/.vim"}"
export VIMCONFIG

unset VIMSNIPPETS
test -d "$EMACSD/pen.el/config/vim-bundles/vim-snippets/snippets" && : "${VIMSNIPPETS:="$EMACSD/pen.el/config/vim-bundles/vim-snippets/snippets"}"
export VIMSNIPPETS

unset YAMLMOD_PATH
test -d "$EMACSD/emacs-yamlmod" && : "${YAMLMOD_PATH:="$EMACSD/emacs-yamlmod"}"
test -d "$EMACSD_BUILTIN/emacs-yamlmod" && : "${YAMLMOD_PATH:="$EMACSD_BUILTIN/emacs-yamlmod"}"
export YAMLMOD_PATH

sn="$(basename "$0")"

# : ${EMACS_TERM_TYPE:="xterm-24bit"}
: ${EMACS_TERM_TYPE:="screen-256color"}

# Force emacs to believe the terminal supports truecolor

shopt -s nullglob

# Where are sockets created since emacs29 ?
mkdir -p $EMACSD/server

eval "set -- $(cmd "$@" | sed 's/--init-debug/--debug-init/')"

. $HOME/.shellrc

# export COLORTERM=truecolor
export EMACS_TERM_TYPE
export TERM="$EMACS_TERM_TYPE"

# These were not making it all the way to emacsclient so I override them inside the emacsclient script
# vim +/"export COLORTERM=truecolor" "$EMACSD/host/pen.el/scripts/pen-emacsclient"

find_file_command=find-file

if printf -- "%s\n" "$sn" | grep -q 'x$'; then
    sn="$(printf -- "%s" "$sn" | sed 's/.$//')"
    : "${PEN_USE_GUI:="y"}"
fi

apply() {
    f="$1"
    shift

    for (( i = 1; i <= $#; i++ )); do
        eval ARG=\${$i}
        printf -- "%s" "$ARG" | eval "$f"
    done
}

case "$sn" in
    vlf) {
        find_file_command=vlf
    }
    ;;

esac

QUIET=y

: "${EMACS_VERSION:="28"}"
: "${EMACS_BIN:="$(command -v emacs)"}"
: "${EMACSCLIENT_BIN:="$(command -v emacsclient)"}"
: "${EMACS_USER_DIRECTORY:="/root/.emacs.d"}"


if test -f $EMACSD/host/pen.el/config/emacs-packages.txt; then
    PACKAGES_TXT=$EMACSD/host/pen.el/config/emacs-packages.txt
else
    PACKAGES_TXT=$EMACSD/pen.el/config/emacs-packages.txt
    # PACKAGES_TXT=$EMACSD/packages.txt
fi

if test "$1" = "-v"; then
    QUIET=n
    shift
fi

if test "$1" = "-vv"; then
    QUIET=n

    invocation="$0 $@"
    printf -- "%s\n" "invocation: $invocation" 1>&2

    set -xv

    shift
fi

export QUIET

stdin_exists() {
    ! [ -t 0 ] && ! test "$(readlink /proc/$$/fd/0)" = /dev/null
}

: ${ONLY_WINDOW:="n"}

NEW_FILE=n

: "${NO_AUTO_START:="y"}"
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    --) {
        shift
        break
    }
    ;;

    "") { shift; }; ;;
    -2|-vt100) {
        MONOCHROME=y
        shift
    }
    ;;

    -nosettty) { # Make the window that appears the only window
        export NO_SET_TTY=y
        shift
    }
    ;;

    -o|-only) { # Make the window that appears the only window
        export ONLY_WINDOW=y
        shift
    }
    ;;

    -gui) {
        export PEN_USE_GUI=y
        shift
    }
    ;;

    -tui) {
        export PEN_USE_GUI=n
        shift
    }
    ;;

    -noonly) {
        export ONLY_WINDOW=n
        shift
    }
    ;;

    -autostart|-as|-das) {
        export NO_AUTO_START=n
        shift
    }
    ;;

    -noautostart|-nas) {
        export NO_AUTO_START=y
        shift
    }
    ;;

    -nf) {
        NEW_FILE=y

        last_arg="${@: -1}"
        nf_dn="$(printf -- "%s" "$last_arg" | sed -n 's=\(.*/\).*=\1=p')"
        nf_fp="$last_arg"

        test -n "$nf_dn" && mkdir -p "$nf_dn"
        touch "$nf_fp"

        shift
    }
    ;;

    +*:*) {
        GOTO_LINE="$(p "$opt" | pen-mcut -d'[+:]' -f2)"
        GOTO_COLUMN="$(p "$opt" | pen-mcut -d'[+:]' -f3)"

        shift
    }
    ;;

    +[0-9]*) {
        GOTO_LINE="$(p "$opt" | pen-mcut -d+ -f2)"
        shift
    }
    ;;

    +/*) { # pattern
        pattern="$(p "$opt" | sed 's=^+/==' | chomp | qne)"

        shift
    }
    ;;

    -cols) {
        n_columns="$2"
        shift
        shift
    }
    ;;

    -s|-scratch) {
        export GOTO_BUFFER="*scratch*"
        shift
    }
    ;;

    -ac) {

        n_columns="$(pen-calc-best-n-columns)"
        shift
    }
    ;;

    *) break;
esac; done

export NO_AUTO_START="$NO_AUTO_START"

if test "$MONOCHROME" = "y"; then
    export EMACS_TERM_TYPE=screen-2color
fi

if test "$ONLY_WINDOW" = "y"; then
    elisp+="(delete-other-windows)(recenter)"
fi

print_err() {
    ! test "$QUIET" = "y" && printf -- "%s" "$@" 1>&2

    return 0
}

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    sa|-sa|-startall|-start-all) {
        # This should start n workers
        # set -x

        : "${n:="$(pen-rc-get n-workers)"}"
        : "${n:="5"}"

        mkdir -p ~/.pen/pool/available

        # for each
        for i in $(seq 1 $n); do
            pool_socket="pen-emacsd-$i"
            cmd1 pen-e -D "$pool_socket" sd 1>&2
            # Use gnu parallel  to start all workers at once
            pen-e -D "$pool_socket" sd
            if pen-e -D "$pool_socket" running; then
                touch ~/".pen/pool/available/$pool_socket"
            fi
        done
        shift

        exit 0
    }
    ;;

    ka|-ka|-killall|-kill-all) {
        # This should kill all n workers
        shift

        signal="$1"; : ${signal:="INT"}
        set -xv

        # for each
        pen-e fa k "$signal"
        shift

        rm -f ~/.pen/pool/available/*

        exit 0
    }
    ;;

    fa|-fa|-forall) {
        shift

        config_fp=~/.pen/pen.yaml
        if test -f "$config_fp"; then
            # IFS= read -rd '' n < <(cat "$config_fp" | yq -r '.["n-workers"] // empty' 2>/dev/null);typeset -p n &>/dev/null
            n="$(cat "$config_fp" | yq -r '.["n-workers"] // empty' 2>/dev/null)"
        fi
        : "${n:="5"}"

        for i in $(seq 1 $n); do
            pool_socket="pen-emacsd-$i"
            pen-e -D "$pool_socket" "$@"
        done

        # for d in pen-e; do
        #     "$d" "$@"
        # done

        exit 0
    }
    ;;

    rla|-rla|--reload-all) {
        pen-e fa-p -e "(progn (pen-reload)(delete-frame))"
        shift
        exit
    }
    ;;

    fa-p|-fa-p|-fa-parallel) {
        shift

        config_fp=$HOME/.pen/pen.yaml
        if test -f "$config_fp"; then
            # IFS= read -rd '' n < <(cat "$config_fp" | yq -r '.["n-workers"] // empty' 2>/dev/null);typeset -p n &>/dev/null
            n="$(cat "$config_fp" | yq -r '.["n-workers"] // empty' 2>/dev/null)"
        fi
        : "${n:="5"}"

        for i in $(seq 1 $n); do
            pool_socket="pen-emacsd-$i"
            cmd1 unbuffer pen-e -D "$pool_socket" "$@"
        done | parallel -j 5

        # for d in pen-e; do
        #     "$d" "$@"
        # done

        exit 0
    }
    ;;

    qa|-qa|-quitall) {
        # For each
        # {
        # unbuffer pen-e -D pen-emacsd q

        # pgrep emacs | xargs kill
        # } &>/dev/null
        # shift

        config_fp=~/.pen/pen.yaml
        if test -f "$config_fp"; then
            # IFS= read -rd '' n < <(cat "$config_fp" | yq -r '.["n-workers"] // empty' 2>/dev/null);typeset -p n &>/dev/null
            n="$(cat "$config_fp" | yq -r '.["n-workers"] // empty' 2>/dev/null)"
        fi
        : "${n:="5"}"

        mkdir -p ~/.pen/pool/available

        # for each
        for fp in ~/.pen/pool/available/*; do
            bn="$(basename "$fp")"
            pool_socket="$bn"

            cmd1 pen-e -D "$pool_socket" q 1>&2
            pen-e -D "$pool_socket" q
            if ! pen-e -D "$pool_socket" running; then
                rm -f ~/".pen/pool/available/$pool_socket"
            fi
        done

        # rm -f ~/.pen/pool/available/*

        exit 0
    }
    ;;

    ra|-ra|-restart-all) {
        pen-e -qa
        pen-e -sa
    }
    ;;

    *) break;
esac; done

: "${SOCKET:="DEFAULT"}"
: "${EMACS_USER_DIRECTORY:="$REPOS/pen-emacsd"}"
: "${EMACS_VERSION:="28"}"
: "${EMACS_VARIANT:="pen-emacsd"}"

eclog() {

    pen-pl "$1: $2" >> $TMPDIR/ec.txt
    return 0
}

eclog EMACS_VERSION "$EMACS_VERSION"
eclog EMACS_VARIANT "$EMACS_VARIANT"
eclog INVOCATION "$0 $@"

EMACS_BIN=emacs
EMACSCLIENT_BIN=emacsclient

export EMACS_VARIANT
export EMACS_VERSION

export EMACS_USER_DIRECTORY
export EMACS_BIN
export EMACSCLIENT_BIN

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -D) {
        SOCKET="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

FT_DETECT=n

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -nofile) {
        export NOFILE=y
        shift
    }
    ;;

    --script) {
        shift
        # The emacsclient should run in the background
        test -f "$1" || exit 1
        script_path="$1"
        shift

        # Test with e:emacs-script-test4

        : ${TTY:="$(tty)"}

        CMD="$(cmd-cip "$@")"
        : ${CMD:="$(cmd-cip "$@")"}

        elisp="(runscript \"$script_path\" \"$TTY\" $CMD)$elisp(delete-frame)"

        export run_as_script_with_tmux=y
        shift "$#"
    }
    ;;

    -e) {
        elisp="$2$elisp"
        shift
        shift
    }
    ;;

    +e|-a) {
        elisp+="$2"
        shift
        shift
    }
    ;;

    -ed) {
        elisp="$2$elisp(delete-frame)"
        shift
        shift
    }
    ;;

    -f) {
        elisp="($2)$elisp"
        shift
        shift
    }
    ;;

    +f) {
        elisp+="($2)"
        shift
        shift
    }
    ;;

    -eval) {
        export EVAL_DO_STDOUT=y
        elisp="(write-to-file (str $2) \"/tmp/pen-e-stdout.txt\")"
        shift
        shift
    }
    ;;

    -ci|-ic|-fi|-ei|-if) {

        # elisp="(call-interactively '$2)$elisp"

        # This is more reliable for stdout
        elisp="(pen-switch-to-buffer-for-pen-e (call-interactively '$2))(let ((ret $elisp)) (ignore (refresh-frame)) ret)"

        CLEAR=y
        shift
        shift
    }
    ;;

    -cipsh) {

        shift
        fun="$1"
        shift

        CMD="$(cmd-nice-posix "$@")"
        : ${CMD:="$(cmd-nice-posix "$@")"}

        elisp="(funcall-interactively '$fun $CMD)$elisp"

        shift "$#"

        CLEAR=y
    }
    ;;

    -cia|-cip) {
        shift
        fun="$1"
        shift

        CMD="$(cmd-cip "$@")"
        : ${CMD:="$(cmd-cip "$@")"}

        elisp="(funcall-interactively '$fun $CMD)(let ((ret $elisp)) (ignore (refresh-frame)) ret)"

        shift "$#"

        CLEAR=y
    }
    ;;

    +cia|+cip) {
        shift
        fun="$1"
        shift

        elisp+="(funcall-interactively '$fun $@)"
        CLEAR=y
    }
    ;;

    -ef) {
        shift
        fname="$1"
        shift
        CMD="$(cmd-nice-posix "$@")"
        shift "$#" # shift everything

        elisp="($fname $CMD)$elisp"
    }
    ;;

    +ef) {
        shift
        fname="$1"
        shift
        CMD="$(cmd-nice-posix "$@")"
        shift "$#" # shift everything

        elisp+="($fname $CMD)"
    }
    ;;

    -mn|-modename) {
        shift
        test -n "$1" || exit 1
        modename="$1"
        shift
    }
    ;;

    -sht) {
        shift
        : ${modename:="$1"}
        modename=" \"$modename\""
        script="$(pen-nsfa "$@")"
        elisp="(pen-term \"$script\" t $modename)$elisp"
        shift "$#"
    }
    ;;

    -shE|-E) {
        shift
        test -n "$1" || exit 1
        script="$(pen-nsfa -E "$1" t)"
        : ${modename:="$1"}
        shift
        modename=" \"$modename\""

        bufname="$(printf -- "%s" "term $script" | slugify)"

        elisp="(pen-term \"$script\" t $modename)$elisp"
    }
    ;;

    -sh) {
        shift
        : ${modename:="$1"}
        modename=" \"$modename\""
        script="$(pen-nsfa "$@")"
        bufname="$(p term "$@" | slugify)"

        elisp="(pen-term \"$script\" t $modename)$elisp"
        shift "$#"
    }
    ;;

    -she) {
        shift
        : ${modename:="$1"}
        modename=" \"$modename\""
        shift
        elisp="(pen-term $modename t $modename)$elisp"
    }
    ;;

    +sb) {
        elisp="(switch-to-buffer $(cmd-nice-posix "$2"))$elisp"
        shift
        shift
    }
    ;;

    -eid) {
        elisp="(call-interactively '$2)$elisp(delete-frame)"
        shift
        shift
    }
    ;;

    +eid) {
        elisp+="(call-interactively '$2)(delete-frame)"
        shift
        shift
    }
    ;;

    -df|+df) {
        elisp+="(delete-frame)"
        shift
    }
    ;;

    -h) {
        elisp="(describe-function '$2)$elisp"
        shift
        shift
    }
    ;;

    +h) {
        elisp="(describe-function '$2)"
        shift
        shift
    }
    ;;

    +wbdf) {
        ON_BUFKILL_DELFRAME_BUTTER_TO_STDOUT=y
        tf_buffer_path="$(0</dev/null pen-ux tf path || echo /dev/null)"
        elisp+="(on-kill-write-and-close-frame $(cmd-nice-posix "$tf_buffer_path"))"
        shift
    }
    ;;

    +ofq) {
        ON_DELFRAME_EVAL_TO_STDOUT="$2"
        tf_buffer_path="$(0</dev/null pen-ux tf path | pen-ds ofq || echo /dev/null)"
        elisp+="(on-frame-quit-write $(cmd-nice-posix "$tf_buffer_path" "$ON_DELFRAME_EVAL_TO_STDOUT"))"
        shift
        shift
    }
    ;;

    +ooq) {

        ON_DELFRAME_EVAL_TO_STDOUT="$2"
        tf_buffer_path="$(0</dev/null pen-ux tf path || echo /dev/null)"
        elisp+="(on-kill-write-and-close-frame $(cmd-nice-posix "$tf_buffer_path" "$ON_DELFRAME_EVAL_TO_STDOUT"))"
        shift
        shift
    }
    ;;

    -gd) {
        elisp="(find-function '$2)$elisp"
        shift
        shift
    }
    ;;

    +gd) {
        elisp+="(find-function '$2)"
        shift
        shift
    }
    ;;

    -aft) {
        elisp="(detect-language-set-mode)$elisp"
        shift
    }
    ;;

    +aft) {
        elisp+="(detect-language-set-mode)"
        shift
    }
    ;;

    -noaft) {
        FT_DETECT=n
        shift
    }
    ;;

    *) break;
esac; done

test "$#" -gt 0 && last_arg="${@: -1}"
if test "$#" -gt 0 && test -e "$last_arg"; then
    last_arg_path="$last_arg"
fi

if test -n "$elisp"; then
    elisp="(message (str (frame-terminal)))$elisp"
fi

if test -n "$elisp"; then
    printf -- "%s" "$elisp" | pen-ds -s elast
fi

debug_mode_enabled() {
    case "$-" in
        *x*) true;;
        *v*) true;;
        *) false;;
    esac
}

export SERVER_NAME="$SOCKET"

export SOCKET

if test "$CLEAR" = "y"; then
    elisp+="(ignore-errors (recenter-top-bottom))"
fi

if test "$FT_DETECT" = "y"; then
    elisp+="(detect-language-set-mode)"
fi

if ! test "$NO_SET_TTY" = "y"; then
    : ${TTY:="$(pen-tm-tty)"}
fi

export TTY

if ! test "$FAST" = "y"; then
    # I think this was probably meant to make it more reliable

    if ( printf -- "%s\n" "$elisp" | grep -q -P "call-interactively"; ); then
        if test "$#" -gt 0 && test -e "$last_arg_path"; then
            {
                unbuffer pen-x -ub -sh "$(cmd pen-emacsclient -a "" -t -s $SOCKET -e "(progn (read-string \"KILL_FRAME\")(kill-frame))" \"$last_arg_path\")" -e KILL_FRAME -c m
            } &>/dev/null
        else
            :
            # This was hanging
            # pen-x -ub -sh "$(cmd pen-emacsclient -a "" -t -s $SOCKET -e "(progn (read-string \"KILL_FRAME\")(kill-frame))")" -e KILL_FRAME -c m &>/dev/null &

            # What is the point of running this?
            {
                unbuffer pen-x -ub -sh "$(cmd pen-emacsclient -a "" -t -s $SOCKET -e "(progn (read-string \"KILL_FRAME\")(kill-frame))")" -e KILL_FRAME -c m
            } &>/dev/null
        fi
    fi
fi


if stdin_exists; then
    if test -n "$n_columns"; then
        n_columns=$((n_columns-1))

        if test "$n_columns" -gt "0"; then
            elisp="$elisp(delete-other-windows)(dotimes (i $n_columns)(split-window-right))(balance-windows)(follow-mode)"
        fi
    fi

    tempfile="$(0</dev/null mktemp emacs-stdin-$USER.XXXXXXX --tmpdir | pen-ds e-stdin-file)"
    cat > "$tempfile"

    if [ -n "$GOTO_LINE" ] && [ -n "$GOTO_COLUMN" ]; then
        elisp+="(goto-line $GOTO_LINE)(move-to-column $GOTO_COLUMN)"
    elif [ -n "$GOTO_LINE" ] && ! [ -n "$GOTO_COLUMN" ]; then
        elisp+="(goto-line $GOTO_LINE)"
    fi

    new_arg_string="--eval $(apply q "(progn ($find_file_command $(apply qf "$tempfile"))(set-visited-file-name nil)(rename-buffer $(apply qf "*stdin*") t)$elisp)")"

    exec <"$TTY"

    exec 3>&1
    exec 4>&2
    exec 1>&0
    exec 2>&0

    eval "pen-e --runclient $new_arg_string"
    ret="$?"
    exec 1>&3
    exec 2>&4

    if test -f "$tf_buffer_path"; then
        cat "$tf_buffer_path"
    fi

    exit "$ret"
else
    :
fi

. `which pen-bash-library.sh`

if test "$sn" = "ec"; then
    f=--runclient
elif test "$sn" = "ecn"; then
    f=--runclient
elif [ -n "$1" ] && [ -e "$1" ] && ! [ "$1" == --runclient ]; then
    case "$1" in
        --runclient|running) {
            echo "$1" is a file. opening 1>&2
        }
        ;;
    esac

    f=--runclient
elif [ -z "$f" ]; then
    f="$1"
    shift
fi

eclog OP "$f"

eclog EMACS_USER_DIRECTORY "$EMACS_USER_DIRECTORY"
eclog SERVER_NAME "$SERVER_NAME"

export EMACS_USER_DIRECTORY
export SERVER_NAME

case "$f" in
    sdd) {
        pen-e sd -d "$@"
        exit 0
    }
    ;;

    sd|start-worker) # start worker
        {
            while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
                "") { shift; }; ;;
                -d) {
                    QUIET=n
                    DEBUG_WORKER=y
                    shift
                    shift
                }
                ;;

                *) break;
            esac; done

        CMD="$(cmd "$@")"

        : ${SOCKET:="DEFAULT"}

        ! test "$QUIET" = "y" && print_err "Boostrapping emacs worker $SOCKET... "

        (

            test "$QUIET" = "y" && exec &>/dev/null

            export EMACS_VERSION
            export SHELL=sh

            if [ -n "$SOCKET" ]; then
                pen-e running && exit 0

                # ( test "$SOCKET" = DEFAULT && spinner-start -b; ) & disown
                if test "$DEBUG_WORKER" = "y"; then
                    eval "TERM=$EMACS_TERM_TYPE $EMACSCLIENT_BIN -ta '' -s $SOCKET $CMD"
                else
                    eval "TERM=$EMACS_TERM_TYPE $EMACSCLIENT_BIN -nta '' -s $SOCKET $CMD"
                fi
            else
                pen-e running && exit 0

                if test "$DEBUG_WORKER" = "y"; then
                    eval "TERM=$EMACS_TERM_TYPE $EMACSCLIENT_BIN -ta '' $CMD"
                else
                    eval "TERM=$EMACS_TERM_TYPE $EMACSCLIENT_BIN -nta '' $CMD"
                fi
            fi
        )

        # unbuffer pen-e -e "(progn (try (run-hooks 'my-worker-start-hook))(try (delete-frame)))" &>/dev/null
        unbuffer pen-e -e "(progn (try (delete-frame)))" &>/dev/null

        ! test "$QUIET" = "y" && print_err "server now running."
        exit 0
    }
    ;;

    fs|-fs|-fixscratch|fixscratch) {
        $EMACSCLIENT_BIN -nta '' -s $SOCKET -e "(get-buffer-create $(cmd-nice-posix "*scratch*"))"
        pen-e -s
        exit 0
    }
    ;;

    kaf|kof|-kof|-kill-other-frames|-kill-all-frames) {
        $EMACSCLIENT_BIN -nta '' -s $SOCKET -e "(progn (kill-other-clients t))"
        pen-e -s
        exit 0
    }
    ;;

    running) { # test running
        if [ -n "$SOCKET" ]; then
            $EMACSCLIENT_BIN -a false -e 't' -s $SOCKET &>/dev/null
        else
            $EMACSCLIENT_BIN -a false -e 't' &>/dev/null
        fi

        exit $?

    }
    ;;

    byte-compile) {
        dir="$1"; : ${dir:="~/.emacs.d"}
        dir="$(eval pen-pl "$dir")" # expand

        $EMACS_BIN -batch -eval "(byte-recompile-directory (expand-file-name $(apply qf "$dir")) 0)"
        exit $?
    }
    ;;

    byte-compile-force) {
        dir="$1"; : ${dir:="~/.emacs.d"}
        dir="$(eval pen-pl "$dir")" # expand

        cd "$dir"
        find . -path '*.el' | while read line; do { cd `dirname "$line"`; emacs -Q --batch -L . -f batch-byte-compile "$line"; } done
        exit $?
    }
    ;;

    -arf|arf|rfa|-rfa|-refresh-all) {
        for d in pen-e; do
            $d --runclient -e "(package-refresh-contents)(pen-revert-and-quit-emacsclient-without-killing-server)"
        done

        exit $?
    }
    ;;

    -ua|ua|-uninstall-all) {
        for d in pen-e; do
            (
            while [ $# -gt 0 ]; do pkg_name=$1
                echo "$d (my-delete-package ...) $pkg_name" 1>&2

                $d --runclient -e "$pre_cmd(ignore-errors (my-delete-package '$pkg_name))(pen-revert-and-quit-emacsclient-without-killing-server)"

                cat1 $PACKAGES_TXT | sed "/$pkg_name/d" | pen-sponge $PACKAGES_TXT

                shift
            done
            )
        done

        exit $?
    }
    ;;

    -ria|ria|-reinstall-all) {
        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -r) {
                pre_cmd="(package-refresh-contents)"
                shift
            }
            ;;

            *) break;
        esac; done

        for d in pen-e; do
            (
            while [ $# -gt 0 ]; do pkg_name=$1
                echo "$d (package-install ...) $pkg_name" 1>&2

                $d --runclient -e "$pre_cmd(ignore-errors (package-reinstall '$pkg_name))(pen-revert-and-quit-emacsclient-without-killing-server)"

                echo "$pkg_name" | pen-append-uniq $PACKAGES_TXT

                shift
            done
            )
        done

        exit $?
    }
    ;;

    ial) {
        for d in pen-e; do
            while [ $# -gt 0 ]; do pkg_name=$1
                echo "$d (lsp-install-server ...) $pkg_name" 1>&2
                $d --runclient -e "$pre_cmd(ignore-errors (lsp--install-server-internal (lsp-get-server-for-install $(cmd-nice-posix "$pkg_name"))))(pen-revert-and-quit-emacsclient-without-killing-server)"
                shift
            done
        done

        echo "$pkg_name" | pen-append-uniq $EMACSD/lsp-servers.txt
    }
    ;;

    -ai|ai|ia|-ia|-install-all) {

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -r) {
            pre_cmd="(ignore-errors (package-refresh-contents))"
                shift
            }
            ;;

            *) break;
        esac; done

        for d in pen-e; do
            (
            while [ $# -gt 0 ]; do pkg_name=$1
                echo "$d (package-install ...) $pkg_name" 1>&2

                $d --runclient -e "$pre_cmd(ignore-errors (package-install '$pkg_name))(pen-revert-and-quit-emacsclient-without-killing-server)"

                echo "$pkg_name" | pen-append-uniq $PACKAGES_TXT

                shift
            done
            )
        done

        exit $?
    }
    ;;

    fi|-fi|fast-install) {

        if yn "refresh contents?"; then
            pen-e --runclient -e "(ignore-errors (package-refresh-contents))"
        fi

        while [ $# -gt 0 ]; do pkg_name=$1

            pen-e --runclient -e "(ignore-errors (package-install '$pkg_name))(pen-revert-and-quit-emacsclient-without-killing-server)"

            echo "$pkg_name" | pen-append-uniq $PACKAGES_TXT

            shift
        done

        exit $?
    }
    ;;

    i|-i|package-install) {

        pkg_name=$1

        elisp_script_name=$(mktemp $TMPDIR/emacs-pkg-install-el.XXXXXX)
        elisp_code="
;; Install package from command line. Example:
;;
;;   $ emacs --batch --expr \"(define pkg-to-install 'smex)\" -l emacs-pkg-install.el
;;
(require 'package)
(package-initialize)
(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\"))
(add-to-list 'package-archives '(\"marmalade\" . \"https://marmalade-repo.org/packages/\"))
(add-to-list 'package-archives '(\"melpa-stable\" . \"http://stable.melpa.org/packages/\") t)
(add-to-list 'package-pinned-packages '(cider . \"melpa-stable\") t)

;; Fix HTTP1/1.1 problems
(setq url-http-attempt-keepalives nil)

(package-refresh-contents)

(package-install pkg-to-install)"

        echo "$elisp_code" > $elisp_script_name

        $EMACS_BIN --batch --eval "(defconst pkg-to-install '$pkg_name)" -l $elisp_script_name

        rm "$elisp_script_name"

        exit $?
    }
    ;;

    p|packages) {
        pen-e --runclient -e "(list-packages)"
        exit $?
    }
    ;;

    -getval) {
        val="$1"
        shift

        unset TTY
        export NO_SET_TTY=y

        tf_thing="$(pen-ux tf thing || echo /dev/null)"
        trap "rm \"$tf_thing\" 2>/dev/null" 0

        unbuffer pen-e -nosettty --runclient -n -e "(write-string-to-file (str $val) $(cmd-nice-posix "$tf_thing"))" &>/dev/null

        cat "$tf_thing"
        exit $?
    }
    ;;

    -flash) {
        pen-e --runclient -n -e "(mode-line-bell-flash)"
        exit $?
    }
    ;;

    q|quit) {

        if pen-e running; then
            pen-e --runclient -e "(pen-kill-emacs t)"
            printf -- "%s\n" "$SOCKET is dead" 1>&2
        else
            printf -- "%s\n" "$SOCKET not running" 1>&2
        fi

    }
    ;;

    r|restart) {
        pen-timeout 5 unbuffer pen-e q
        pen-e k
        pen-e sd
    }
    ;;

    st|stack-trace) {
        pen-e k SIGUSR2

    }
    ;;

    k|kill) {
        signal="$1"; : ${signal:="INT"}

        exec 3>&2
        exec 1>/dev/null
        exec 2>/dev/null

        (
        : "${SOCKET:="DEFAULT"}"
        if test -n "$SOCKET"; then
            {
                lc_socket="$(pen-pl "$SOCKET" | sed 's/_.*$//' | pen-c lc)"
                COLUMNS=10000 ps -ef |grep "pen-e -D $lc_socket"

                COLUMNS=10000 ps -ef | grep emacs | sed -n "/emacs --daemon=${SOCKET}\$/p" | tv
            } | pen-str field 2 | {
                pids="$(cat)"
                pen-pl "$pids" | xargs kill -"$signal"
            }
        fi
        )

        exec 2>&3

        print_err "$SOCKET is dead"
    }
    ;;

    x-gui-disabled) { # x|gui) { # start x11 gui version
        if test "$1" = "-e"; then
            set -- "--exec" "${@:2}"
        fi

        CMD="$(cmd "$@")"

        case $1 in
            n) {
                $EMACS_BIN $NOTES
                exit $?
            }
            ;;

            *)  {
                print_err "$EMACS_BIN $CMD"
                eval "$EMACS_BIN $CMD"
                exit $?
            }
            ;;
        esac

        eval "$EMACS_BIN $CMD"
        exit $?
    }
    ;;

    # --runclient|-x|x|e|client) { # start emacs client
    --runclient) { # start emacs client
        pen-e running
        ret="$?"
        if ! test "$ret" = 0; then
            if test "$NO_AUTO_START" = "y"; then
                echo "$SOCKET not started yet. Not starting worker." 1>&2
                exit "$ret"
            else
                echo "$SOCKET not started yet. Starting worker." 1>&2
                pen-e sd
                # exit $?
            fi
        fi

        if test "$PEN_USE_GUI" = "y"; then
            f=x
        fi

        if test "$f" = "x" || test "$f" = "-x"; then
            client_ops="-c " # gui -x
        else
            client_ops="-t "
        fi

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -l|-line) {
                GOTO_LINE="$2"
                shift
                shift
            }
            ;;

            -c|-col|-column) {
                GOTO_COLUMN="$2"
                shift
                shift
            }
            ;;

            +*:*) {
                GOTO_LINE="$(p "$opt" | pen-mcut -d'[+:]' -f2)"
                GOTO_COLUMN="$(p "$opt" | pen-mcut -d'[+:]' -f3)"

                shift
            }
            ;;

            +[0-9]*) {
                GOTO_LINE="$(p "$opt" | pen-mcut -d+ -f2)"
                shift
            }
            ;;

            +/*) { # pattern
                pattern="$(p "$opt" | sed 's=^+/==' | chomp | qne)"

                shift
            }
            ;;

            -x) {
                client_ops+="-c "
                shift
            }
            ;;

            -e|--eval) {
                elisp="$2$elisp"
                shift
                shift
            }
            ;;

            -cols) {
                n_columns="$2"
                shift
                shift
            }
            ;;

            -ac|-colmacs) {
                if test -z "$COLUMNS"; then
                    eval `resize`
                fi

                n_columns="$(bc <<< "scale=0;$COLUMNS / 80 + 1")"
                n_columns=$((n_columns-1))

                shift
            }
            ;;

            -eid) {
                elisp="(call-interactively '$2)$elisp(delete-frame)"
                shift
                shift
            }
            ;;

            -ei) {
                elisp="(call-interactively '$2)$elisp"
                shift
                shift
            }
            ;;

            -ef) {
                shift
                fname="$1"
                shift
                CMD="$(cmd-nice-posix "$@")"
                shift "$#" # shift everything

                elisp="($fname $CMD)$elisp"
            }
            ;;

            -sh) {
                shift
                elisp="(pen-term \"$(pen-nsfa "$@")\" t)$elisp"
                shift "$#"
            }
            ;;

            -df) {
                elisp+="(delete-frame)"
                shift
                shift
            }
            ;;

            *) break;
        esac; done

        if test -n "$n_columns"; then
            n_columns=$((n_columns-1))

            if test "$n_columns" -gt "0"; then
                elisp="$elisp(delete-other-windows)(dotimes (i $n_columns)(split-window-right))(balance-windows)(follow-mode)"
            fi
        fi

        if test "$1" = "-s"; then
            SOCKET="${SOCKET}_$2"

            shift
            shift
        fi

        if test "$PEN_USE_GUI" = "y"; then
            elisp="(toggle-scroll-bar -1)$elisp"
        fi

        if [ -n "$1" ] && [ -f "$1" ] && [ "$#" -eq 1 ]; then # one file argument
            file_path="$1"
            file_path="$(realpath "$file_path")"

            elisp="($find_file_command $(cmd-nice-posix "$file_path"))(sit-for 0.2)(run-mode-hooks major-mode)$elisp"
            shift

        elif [ -n "$1" ] && [ "$#" -eq 1 ] && [ -d "$1" ]; then # one directory argument
            file_path="$1"
            file_path="$(realpath "$file_path")"
            elisp="(dired $(cmd-nice-posix "$file_path"))(sit-for 0.2)(run-mode-hooks major-mode)$elisp"
            shift

        elif [ -n "$1" ] && [ -f "$1" ] && [ "$#" -eq 3 ] && tt -i "$2" && tt -i "$3"; then # one file argument and 2 int arguments
            file_path="$1"
            file_path="$(realpath "$file_path")"
            elisp="($find_file_command $(cmd-nice-posix "$file_path"))(sit-for 0.2)(run-mode-hooks major-mode)$elisp"

            GOTO_LINE="$2"
            GOTO_COLUMN="$3"
            shift
            shift
            shift

        elif pen-pl "$1" | grep -q -P '^[a-zA-Z0-9_.-]+\.[a-zA-Z0-9_-]+$' && ! [ -f "$1" ]; then # one argument that looks like a file name (because it has an extension)

            file_path="$1"
            file_path="$(realpath "$file_path")"
            elisp="($find_file_command $(cmd-nice-posix "$file_path"))(sit-for 0.2)(run-mode-hooks major-mode)$elisp"
            shift

        elif test -n "$1"; then # one argument
            :
        fi

        # This just fixes scratch everytime if it may have been closed,
        # but doesn't actually switch to scratch
        elisp+="(get-buffer-create $(cmd-nice-posix "*scratch*"))"

        if [ -n "$GOTO_BUFFER" ]; then
            elisp+="(switch-to-buffer $(cmd-nice-posix "$GOTO_BUFFER"))"
        fi

        if [ -n "$pattern" ]; then
            elisp+="(goto-char (point-min))(search-forward $(cmd-nice-posix "$pattern"))"
        elif [ -n "$GOTO_LINE" ] && [ -n "$GOTO_COLUMN" ]; then
            elisp+="(goto-line $GOTO_LINE)(move-to-column $GOTO_COLUMN)"
        elif [ -n "$GOTO_LINE" ] && ! [ -n "$GOTO_COLUMN" ]; then
            elisp+="(goto-line $GOTO_LINE)"
        fi

        if test "$EVAL_DO_STDOUT" = y; then
            tf_buffer_path=/tmp/pen-e-stdout.txt
            rm -f /tmp/pen-e-stdout.txt
            elisp+="(delete-frame)"
        elif test "$ispipe" = 0; then
            if ! test -n "$tf_buffer_path"; then
                tf_buffer_path=/tmp/pen-e-stdout.txt
                rm -f /tmp/pen-e-stdout.txt
                elisp="(ignore-errors $elisp)"
                elisp+="(write-to-file (buffer-string) \"$tf_buffer_path\")(delete-frame)"
            fi
        fi

        if [ -n "$elisp" ]; then
            elispsh="-e $(cmd-nice-posix "(progn (ignore-errors $elisp))")"
        fi

        pen-pl "$elispsh" | pen-ds -s elispsh

        CMD="$(cmd "$@")"

        export EMACS_USER_DIRECTORY

        if test "$DEBUG" = "y"; then
            printf -- "%s\n" "$elispsh $CMD" 1>&2
        fi

        # printf -- "%s\n" "$elispsh $CMD" | tv &>/dev/null

        if [ -n "$SOCKET" ]; then
            ! pen-e running && ( pen-pl "emacs ~ Starting $SOCKET server" 1>&2; pen-e sd )

            new_cmd="TERM=$EMACS_TERM_TYPE $UNBUFFER_MAYBE $EMACSCLIENT_BIN -a '' $client_ops -s $SOCKET $elispsh $CMD"

            exec 3>&1
            exec 4>&2
            exec 1>"$TTY"
            exec 2>"$TTY"
            eval "$new_cmd"
            exec 1>&3
            exec 2>&4

            if test -f "$tf_buffer_path"; then
                cat "$tf_buffer_path"
            fi

            exit 0

        else
            ! pen-e running && pen-e sd

            exec 3>&1
            exec 4>&2
            exec 1>"$TTY"
            exec 2>"$TTY"
            eval "TERM=$EMACS_TERM_TYPE $UNBUFFER_MAYBE $EMACSCLIENT_BIN $client_ops $elispsh $CMD"
            exec 1>&3
            exec 2>&4
        fi

        stty sane
        tput rs1

        if test -f "$tf_buffer_path"; then
            cat "$tf_buffer_path"
        fi

        exit $?
    }
    ;;

    clean-byte-compiled|clean-elc-files) {
        set -xv
        (
            cd "$EMACSD"
            find . -name "*.elc" -type f | xargs rm -f
            cd "$REPOS/pen-emacsd"
            find . -name "*.elc" -type f | xargs rm -f
            cd "$REPOS/bbatsov/prelude"
            find . -name "*.elc" -type f | xargs rm -f
            cd "$REPOS/jkitchin/scimax"
            find . -name "*.elc" -type f | xargs rm -f
            cd "$REPOS/philippe-grenet/exordium"
            find . -name "*.elc" -type f | xargs rm -f
        )
        exit $?
    }
    ;;

    -nw|nw|standalone) {
        debug_init=n
        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -d) {
                debug_init=y
                shift
            }
            ;;

            *) break;
        esac; done

        if test "$DEBUG_INIT" = "y"; then
            eval "$EMACS_BIN" -nw --debug-init "$@"
        else
            eval "$EMACS_BIN" -nw "$@"
        fi
        exit $?
    }
    ;;

    tf|-tf) {
        tf_scratch="$(pen-ux tf scratch || echo /dev/null)"

        pen-e --runclient "$tf_scratch" "$@"
    }
    ;;

    -|*) # normal emacs parameters
        {

        # if test "$f" = "-"; then
        #     # shift
        #     f="$1"
        #     echo "$@"
        #     exit
        #     if test -z "$f"; then
        #         exit 1
        #     fi
        # fi

        if test -n "$f"; then
            set -- "$f" "$@"
        fi

        CMD="$(cmd "$@")"

        if [ -n "$elisp" ]; then
            CMD="-e $(cmd-nice-posix "$elisp")"
        fi

        if ! test "$NOFILE" = "y"; then
            if [ $# -eq 1 ]; then
                if ! [ -f "$1" ]; then
                    w="$(which "$1")"
                    r="$?"
                    bn="pen-$(basename -- "$w")"
                    w2="$(which "$bn")"
                    if test -f "$w2"; then
                        w="$w2"
                    fi

                    if test "$r" -eq 0; then
                        shift
                        set -- "$w" "$@"
                        CMD="$(cmd "$@")"
                    elif pen-pl "$1" | grep -q -P '^http:'; then
                        eww -em "$sn" "$1"
                        exit $?
                    fi
                fi
            fi
        fi

        if test "$run_as_script_with_tmux" = "y"; then
            # hmm.. with unbuffer it's still using the terminal
            # so i'll run it in a hidden tmux window.
            # for the best anyway, in case something goes wrong.
            tmux neww -d "pen-e --runclient $CMD"
            # Now I still need to capture stdin, stdout, etc
        else
            eval "pen-e --runclient $CMD"
        fi
        exit $?

    }
    ;;
esac

if test -f "$tf_buffer_path"; then
    cat "$tf_buffer_path"
fi
