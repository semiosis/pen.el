#!/bin/bash
export TTY

# ( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

sn="$(basename -- "$0")"

stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

if test "$#" = 0 && ! stdin_exists; then
    set -- repl "$@"
fi

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;

    -van|-vanilla) {
        shift
        export VANILLA=y
    }
    ;;

    -norl) {
        shift
        export NO_RL=y
    }
    ;;

    -h|--help) {
        shift
        do_help=y
    }
    ;;

    *) break;
esac; done

opt="$1"
case "$opt" in
    nrepl-server) {
        FIND_CLASSPATH=y
    }
    ;;

    print-deps) {
        USE_PAGER=y
    }
    ;;

    repl) {
        while [ $# -gt 0 ]; do opt="$2"; case "$opt" in
            -van|-vanilla) {
                shift
                shift
                set -- repl "$@"
                export VANILLA=y
            }
            ;;

            -norl) {
                shift
                shift
                set -- repl "$@"
                export NO_RL=y
            }
            ;;

            *) break;
        esac; done

        if ! test "$VANILLA" = "y"; then
            if ! test "$INSIDE_NEOVIM" = y; then
                # echo putting inside nvt 1>&2

                # TODO Maybe at some stage pass- forward the NO_RL here

                nvt "$sn" "$@"
                exit "$?"
            fi

            if ! test -n "$RLWRAP_EDITOR"; then
                # echo putting inside rlwrap 1>&2
                rlwrap "$sn" "$@"
                exit "$?"
            fi
        fi
        FIND_CLASSPATH=y
    }
    ;;

    *)
esac

# This means that the cider repl works in emacs
# e:/root/.emacs.d/host/pen.el/scripts/babashka/basic_cli_tool/core.bb
if test "$FIND_CLASSPATH" = "y"; then
    df="$(dominating-file bb.edn)"
    if test -f "$df"; then
        dn="$(dirname "$df")"
        cd "$dn"
    fi
fi

if test "$do_help" = "y"; then
    /usr/local/bin/bb --help "$@" | pavs
else
    if test "$USE_PAGER" = "y"; then
        /usr/local/bin/bb "$@" | pavs
    else
        /usr/local/bin/bb "$@"
    fi
fi

# Since babashka scripts ofter use the TTY for things like reading input from the user,
# I should not use pavs

# is_tty() { [ -t 1 ] && ! test "$TERM" = "dumb"; }
# 
# if is_tty && ! test "$opt" = "repl"; then
#     set -o pipefail
# 
#     /usr/local/bin/bb "$@" | pavs
# else
#     /usr/local/bin/bb "$@"
# fi
