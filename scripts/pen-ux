#!/bin/bash

test -d "/root/.pen/tmp" && : "${TMPDIR:="/root/.pen/tmp"}"
test -d "/tmp" && : "${TMPDIR:="/tmp"}"
export TMPDIR

# ( echo "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null >> /tmp/pen-ux.log ) &>/dev/null

# must be bash and not zsh
# source /home/shane/scripts/u.f.sh
longest_common_prefix() {
    declare -a names
    declare -a parts
    declare i=0

    names=("$@")
    name="$1"
    while x=$(dirname "$name"); [ "$x" != "/" ]
    do
        parts[$i]="$x"
        i=$(($i + 1))
        name="$x"
    done

    for prefix in "${parts[@]}" /
    do
        for name in "${names[@]}"
        do
            if [ "${name#$prefix/}" = "${name}" ]
            then continue 2
            fi
        done
        echo "$prefix"
        break
    done
}

path_without_prefix() {
    local prefix="$1/"
    shift
    local arg
    for arg in "$@"
    do
        echo "${arg#$prefix}"
    done
}

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -f) {
        FAST=y
        shift
    }
    ;;

    *) break;
esac; done
export FAST

while getopts -- tv name &>/dev/null; do
case $name in
    t)  TIMESTAMP=y;;
    v)  set -xv;;
    *)  ((OPTIND--)); break ;;
esac
done
shift "$((OPTIND-1))"
OPTIND=1

stdin_exists() {
    ! [ -t 0 ] && ! test "$(readlink /proc/$$/fd/0)" = /dev/null
}

cmd="$1"
shift

filter() {
    if test "$TIMESTAMP" = "y"; then
        ts
    else
        cat
    fi

    return 0
}

case "$cmd" in
    p) # print
        printf -- "%s" "$1"
    ;;

    delete-temp-files|free-space) {
        set -v
        # Delete temporary files

        rm -rf ~/.cache/bazel/_bazel_shane
    }
    ;;

    mt|mimetype) #
        mt "$@"
    ;;

    lx|list-executables)
        list-executables "$1"

        # Examples
        # pen-ux lx $HOME/scripts:$HOME/local/bin
        # pen-ux lx $HOME/scripts:$HOME/local/bin
    ;;

    rp)
        if ! stdin_exists ; then
            exec < <(printf -- "%s\n" "$@")
        fi

        pen-ux nodirsuffix | awk 1 | while read -r line; do
            realpath "$line"
        done | pen-ux dirsuffix
    ;;

    ext)
        if test "$FAST" = "y"; then
            sed -n 's/.*\(\.[^.]\+\)$/\1/p'
        else
            pen-ux bn | sed -n 's/.*\(\.[^.]\+\)$/\1/p'
        fi
    ;;

    find-latest-files) {
        find . -type f -printf "%C@ %p\n" | sort -rn | head -n 10
    }
    ;;

    tf|mktemp|nf|new-file|nt|ntf|named-tf) { # Named temporary file
        template="$1"; : ${template:="tmp"}
        ext="$2"; : ${ext:="bin"}
        dir="$3"
        test -n "$dir" && export TMPDIR="$dir"

        # pen-ns hi 1>&2

        mktemp -t "file_${template}_XXXXXX_rand-${RANDOM}_pid-$$.$ext"
    }
    ;;

    ff|mkfifo) {
        template=$1; : ${template:="tmp"}
        tmpfifo_name="$(mktemp -u -t "fifo_${template}_XXXXXX_rand-${RANDOM}_pid-$$")";
        mkfifo "$tmpfifo_name"
        pen-pl "$tmpfifo_name"
    }
    ;;

    logtee) {
        name="$1"

        if [ -z "$name" ]; then
            name=tmp
        fi

        slogdir="$LOGDIR/$name"
        mkdir -p  "$slogdir"

        fp="$slogdir/$(date-ts).log"

        tee >(filter >> "$fp")
    }
    ;;

    is-executable|isx) {
        fp="$1"
        getfacl "$1" 2>/dev/null | grep user:: | grep -q x
        exit $?
    }
    ;;

    # It casts, so call it that
    dn|drn|dirname|cast-dirname) {
        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -f) {
                FORCE_DIRNAME=y
                shift
            }
            ;;

            *) break;
        esac; done

        awk 1 | pen-ux nodirsuffix | while read -r line; do
            dirtest="$(p "$line" | pen-umn)"

            if test -d "$dirtest" && ! test "$FORCE_DIRNAME" = "y"; then
                pen-pl "$line"
            else
                newpath="$(dirname "$dirtest")"
                if [ -d "$newpath" ]; then
                    pen-pl "$newpath"
                fi
            fi
        done
        exit 0
    }
    ;;

    mkimmutable) {
        sudo chattr +i -V "$@"
    }
    ;;

    ummkimmutable) {
        sudo chattr -i -V "$@"
    }
    ;;

    fn|bn) {
        awk 1 | while read -r line; do
            basename "$line"
        done
    }
    ;;

    wn|wrn|whichname) {
        awk 1 | while read -r line; do
            newpath="$(which "$line")"
            if test $? -eq 0; then
                pen-pl "$newpath"
            else
                pen-pl "$line"
            fi
        done
    }
    ;;

    ks|kill-string) {
        string="$1"
        ps -ef | grep "$string" | grep -v grep | pen-str c 2 | xargs --no-run-if-empty kill
    }
    ;;

    nodirsuffix) { # Ensures final / is removed but not if it's /
        awk 1 | sed 's/\(.\)\/\+$/\1/'
    }
    ;;

    lgpe|list-grep-process-environments) { # Can search through all processes' environments.
        COLUMNS=10000 ps -ef e |grep -i "$1"
    }
    ;;

    ps) { # ps needs some defaults
        COLUMNS=10000 ps "$@"
        exit 0
    }
    ;;

    append-histfile) {
        input="$(cat)"
    }
    ;;

    lgpe-fzf-vim) {
        pen-tm nw "pen-pl \"$(u list-grep-process-environments $(:) | pen-mfz -m)\" | vim -"
    }
    ;;

    dirsuffix) { # Ensures directories and only directories (excluding symbolic links) show a slash at the end
        awk 1 | sed 's/\/\+$//' | while read -r line; do
            testline="$(pen-pl "$line" | pen-umn)"
            if ! [ -h "$testline" ] && [ -d "$testline" ]; then
                pen-pl "$line/"
            else
                pen-pl "$line"
            fi
        done
    }
    ;;

    rmdirsuffix) {
        sed 's/\/$//'
    }
    ;;

    dp|delete-paths) {
        # This is a simply alias. Put terminal programs into tp
        tp dp
    }
    ;;

    when-cd) {
        :
        # . $HOME/scripts/libraries/when-cd.sh
    }
    ;;

    dirinfo) {
        pen-dirinfo
    }
    ;;

    getprefix) {
        if stdin_exists; then
            args="$(qargs)"
            export -f longest_common_prefix

            printf -- "%s\n" $args | xargs longest-common-prefix
        else
            longest-common-prefix "$@"
        fi
    }
    ;;

    *)
        cat
esac
