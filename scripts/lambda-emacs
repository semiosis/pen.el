#!/bin/bash
export TTY

# e:$MYGIT/mullikine/lambda-emacs/README.org

. $SCRIPTS/lib/hs

. $SCRIPTS/lib/stdin_exists

if stdin_exists; then
    has_stdin=y
    input_fp="$(cat | tf txt)"
    exec 0<&2
fi

is_stdout_pipe() {
    # If stout is a pipe
    [[ -p /dev/stdout ]]
}

if is_stdout_pipe; then
    has_stdout=y
    output_fp="$(0</dev/null tf txt)"
    exec 1>&2
fi

IFS= read -r -d '' elisp_stdin <<HEREDOC
(with-current-buffer (find-file "$input_fp")
  (local-set-key "q" 'save-buffers-kill-terminal)
  (read-only-mode 1))
(message "")
HEREDOC

IFS= read -r -d '' elisp_default <<HEREDOC
(with-current-buffer (nbfs (cat "/root/.emacs.d/host/pen.el/scripts/lambda-emacs"))
  (local-set-key "q" 'save-buffers-kill-terminal)
  (read-only-mode 1))
(message "")
HEREDOC

IFS= read -r -d '' elisp_stdout <<HEREDOC
(local-set-key "q" 'save-buffers-kill-terminal)
HEREDOC

read -r -d '' elisp_command <<HEREDOC
$(cat "$(which lambda-emacs.el)" | awk 1)
$(
if test "$has_stdin" = "y"; then
    printf -- "%s\n" "$elisp_stdin"
else
    printf -- "%s\n" "$elisp_default"
fi
)
HEREDOC

: "${elisp_command:="t"}"

elisp_command="(progn $elisp_command)"

nvc -2 emacs -nw -q --eval "$elisp_command"

if test "$has_stdout" = "y"; then
    cat "$output_fp"
fi
