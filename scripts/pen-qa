#!/bin/bash
export TTY

# The test needs to be fd 2, not 1, because we are using the output
is_tty() { [ -t 2 ] && ! test "$TERM" = "dumb"; }

if ! is_tty; then
    exit 1
fi

declare -A MYMAP

# Find control char
# echo -n  | od -c
# echo -n  | od -c
# printf '%b' '\004' | od -c

# default bindings.
# MYMAP["$(printf -- '\003')"]="" # C-c # Doesn't work
MYMAP["$(printf -- '\004')"]="" # C-d
MYMAP["$(printf -- '\033')"]="" # ESC
MYMAP["q"]=""                   # q

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -message) {
        message="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

: ${message:="Make a selection"}
message="$(printf -- "%s" "$message" | sed 's/:$//'):"

# echo
message="$(printf -- "%s" "$message" | his -f lgreen '.*')"
# echo -e " $message"
# echo
echo -e "$message" 1>&2

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -*) {
        key="$(p "$opt" | pen-mcut -d- -f2)"
        # echo "$key"

        # for each char in string
        while read -n1 c; do
            MYMAP[$c]="$2"
        done < <(printf -- "%s" "$key")

        # This works
        printf -- "%s\n" "[$key] $2" | general-term-pipe-highlighting 1>&2

        shift
        shift
    }
    ;;

    *) break;
esac; done

#settings=$(stty -g)
#stty stop undef
#stty raw
while :; do
    # tput civis
    printf -- "%s" ": " 1>&2
    read -n1 c
    echo 1>&2
    # tput cnorm

    test "${MYMAP[$c]+abc}" && break # if is set then break
done
# stty "$settings"

printf -- "%s" "${MYMAP[$c]}"
