#!/bin/bash
export TTY

inside-docker-p() {
    test -f /.dockerenv
}

use_comint=y
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
        -nd) {
        export NO_DOCKER=y
        shift
    }
    ;;

    *) break;
esac; done

if { ! test "$NO_DOCKER" = y; } && { ! inside-docker-p; }; then
    # pen sh pen-lsp "$@"
    # docker exec pen pen-lsp "$@"
    docker exec -i pen sh -c ". /root/.emacs.d/pen.el/scripts/setup-term.sh; pen-lsp"
    exit "$?"
fi

test -f "/root/.pen/efm-langserver-config.yaml" && : "${efm_config:="/root/.pen/efm-langserver-config.yaml"}"
test -f "/root/.emacs.d/host/pen.el/config/efm-langserver-config.yaml" && : "${efm_config:="/root/.emacs.d/host/pen.el/config/efm-langserver-config.yaml"}"
test -f "/root/.emacs.d/pen.el/config/efm-langserver-config.yaml" && : "${efm_config:="/root/.emacs.d/pen.el/config/efm-langserver-config.yaml"}"

ln -sf "$efm_config" $HOME/.config/efm-langserver/config.yaml

# set -m
# unbuffer pen-e sa &>/dev/null # &>/dev/null &
# wait
pen-tm -te nw -d -fa pen-e sa

# I want EFM to find commands in the host PATH
. `which setup-term.sh`

if pen-rc-test ask_view_lsp; then
    pen-tm yn "view stdin?" && exec < <(tmicat)
    pen-tm yn "view stdout?" && exec 1> >(tmicat)
elif pen-rc-test ask_log_lsp; then
    pen-tm yn "log stdin?" && {
        tf_in="$(pen-ux tf in || echo /dev/null)"
        exec < <(tee "$tf_in")
        0</dev/null pen-sps -E "$(cmd-nice-posix v "$tf_in")"
    }
    pen-tm yn "log stdout?" && {
        tf_out="$(pen-ux tf out || echo /dev/null)"
        exec 1> >(tee "$tf_out")
        0</dev/null pen-sps -E "$(cmd-nice-posix v "$tf_out")"
    }
elif pen-rc-test ask_arbitrate_lsp; then
    pen-tm yn "arbitrate stdin?" && exec < <(tmi)
    pen-tm yn "arbitrate stdout?" && exec 1> >(tmi)
fi

# I think efm-langserver is REPL-based

efm-langserver "$@"
