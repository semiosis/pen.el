#!/bin/bash
export TTY

sn="$(basename -- "$0")"

# For debugging
export PS4='+	"$(basename $0)"	${LINENO}	 '
# set -xv

# # Automatically cache
# if ! test "$INSIDE_CI" = "y"; then cif "$sn" "$@"; exit "$?"; fi

# Instead of caching canonicalise-bible-book-title, cache canonicalise-bible-book-title
# It's better to do that.

( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

ref="$@"

if ! inside-docker-p; then
    in-pen "$sn" "$@"
    exit "$?"
fi

stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

if stdin_exists; then
    awk 1 | while read line; do
        if printf -- "%s\n" "$line" | grep -q -P '[0-9]$'; then
            # separate book title from chapter:verse
            booktitle="$(printf -- "%s" "$line" | sed 's/[. ][0-9].*//')"
            chapverse="$(printf -- "%s" "$line" | sed -n 's/.*[. ]\([0-9].*\)/\1/p')"
            {
                ocif canonicalise-bible-book-title "$booktitle"
                if test -n "$chapverse"; then
                    echo -n " $chapverse"
                fi
            } | awk 1
        else
            ocif canonicalise-bible-book-title "$line" | awk 1
        fi
    done
else
    test -n "$ref" || { echo "canonicalise-bible-ref: No ref" | hls red 1>&2; exit 1; }
    ocif canonicalise-bible-book-title "$ref"
fi
