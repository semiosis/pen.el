#!/bin/bash
export TTY

sn="$(basename -- "$0")"

# echo hi | tv &>/dev/null

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -b) {
        books_only=y
        shift
    }
    ;;

    -vc) {
        verses_or_chapters_only=y
        shift
    }
    ;;

    -c) {
        chapters_only=y
        shift
    }
    ;;

    -cc) {
        chapters_only=yy
        shift
    }
    ;;

    -v) {
        verses_only=y
        shift
    }
    ;;

    *) break;
esac; done

# I don't want to canonicalise them in this script,
# because it may be used for avy

# TODO Start by generating all the desired regexes for all
# bible references.

# $EMACSD/config/my-bible-mode.el
# $DUMP/tmp/scratch0Ppvf4.txt

# sed -n 's/.*\(Psalms\?\)\( [0-9]\+\)\?\(:[0-9]\+\)\?.*/\1\2\3/p' | uniqnosort

# cat $PENEL_DIR/src/pen-avy.el | scrape-bible-references

# I need to combine a lot of seds
# use sed's -f script.sed

# The most efficient way to do this is probably with perl, but oh well.
# I have to make this very efficient

# Thankfully there is a multiple of 10 number of books

input_fp="$(cat | c ascify | tf txt)"
# spinner-start "$sn"

# I need to list all the many different possible book
# titles in all formats
# list-bible-books

# TODO this pipeline run in parallel
# list-bible-book-titles | while IFS=$'\n' read -r title; do
# list-bible-books | while IFS=$'\n' read -r title; do

# Mark 6:1-13Psalms 119:73-80Proverbs 17:27-28
# SoulFood: Heb 11:17-13:25, Mark 10:1-12, Ps 88:1-9a, Pr 11:24-26
# Ps.33.6
# Ps.136.5-Ps.136.8

# I need a non-greedy .* at the start.
# Sadly, sed doesn't have a non-greedy
# https://stackoverflow.com/questions/1103149/non-greedy-reluctant-regex-matching-in-sed
# Therefore, I might need 2 sed passes with different sets of patterns in order to achieve what I want.

# or use perl instead of sed - this is probably the best option
# perl -pe 's|(http://.*?/).*|\1|'

# https://gist.github.com/apetkau/a93ea4d4bf8b10e65089
# e:/var/smulliga/source/gist/apetkau/a93ea4d4bf8b10e65089/gistfile1.txt

# TODO Make it longest to shortest
# cat "$input_fp" | awk 1 |
#     sed 's/\(.\)\([0-9]\)\([A-Za-z]\)/\1\2\r\3/g' |
#     sed -n "s/.*\\b\\($bookre\\)\\b\\(\\.\\)\\?\\( \\?[0-9][0-9-]*\\)\\([:.][0-9][0-9-]*\\)\\?.*/\\1\\2\\3\\4/p" |
#     sed '/^$/d'

# Make this consume the args and generate a regex

# bookre="$(oci pen-els list-bible-book-titles-lines | pen-sort line-length-desc | s join "\\\|")"
# bookre="$(oci pen-els list-bible-book-titles-lines | pen-sort line-length | s join "\\\|")"
perlbookre="$(oci pen-els list-bible-book-titles-lines | pen-sort line-length | s join "|")"

{
    # *? is the non-greedy *
    # https://www.oreilly.com/library/view/perl-cookbook/1565922433/ch06s16.html
    cat "$input_fp" | awk 1 |
        sed 's/ - /\n/g' |
        perl -ne "print $_ if s/.*?\\b($perlbookre)\\b(\\.)?( ?[0-9][0-9-]*)([:.][0-9][0-9-]*)?.*/\\1\\2\\3\\4/i;" |
        sed '/^$/d'
} | sed -e 's/\.$//' | {
    if test "$verses_only" = "y"; then
        grep -P '[:.]'
    else
        cat
    fi
} | {
    if test "$verses_or_chapters_only" = "y"; then
        grep -P "[0-9]$"
    else
        cat
    fi
} | {
    if test "$chapters_only" = "y"; then
        grep -P "[0-9]$" | sed 's/[:\.][0-9].*$//'
    elif test "$chapters_only" = "yy"; then
        grep -Pv ":"
    else
        cat
    fi
} | {
    if test "$books_only" = "y"; then
        sed 's/ \?[0-9].*//'
    else
        cat
    fi
} | uniqnosort | sed '/^..$/d' | pen-sort line-length-desc | {
    # # Interesting. I can't use spinner-stop here because
    # # pipelines start all chained subshells immediately.
    # # Even using 'soak' won't delay it if it's in a preceedingly chained
    # # subshell
    # spinner-stop

    # Therefore I must soak in the same subshell.
    input="$(cat)"
    # spinner-stop
    printf -- "%s" "$input" | pavs
}

# I don't want to canonicalise them in this script,
# because it may be used for avy
# sed -e 's/\([a-z]\)\.\([0-9]\)/\1 \2/g' -e 's/\./:/g' # | canonicalise-bible-ref
