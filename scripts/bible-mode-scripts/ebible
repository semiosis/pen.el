#!/bin/bash
export TTY

default_bible_version="$(pen-rc-get default_bible_module)"

# export PS4='+	"$(basename $0)"	${LINENO}	 '
# set -xv

test -d "/root/.pen/tmp" && : "${TMPDIR:="/root/.pen/tmp"}"
test -d "/tmp" && : "${TMPDIR:="/tmp"}"
export TMPDIR

( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

sn="$(basename -- "$0")"

# set -a # export the functions and variables

if ! test -n "$BORDER"; then
    if test "$EMACS_BABEL" = "y"; then
        set -- -nbd "$@"
    else
        set -- -bd "$@"
    fi
fi

. $PENEL_DIR/scripts/utils.sh

# if test "$isstdoutpipe" = 0 && ! test "$NO_CI" = y  && ! test "$INSIDE_CI" = y; then
#     ocif "$sn" "$@"
#     exit "$?"
# fi

ebible_pager() {
    while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
        "") { shift; }; ;;
        -s) {
            slug="$2"
            shift
            shift
        }
        ;;

        *) break;
    esac; done

    if test "$COLUMNATED" = "y"; then
        vim_cmd="colvs -nls -num"
    else
        vim_cmd="vs -nls -num"
    fi

    if test -n "$slug"; then
        pa -E "tf -sha -X $slug txt | xa $vim_cmd"
    else
        pa -E "tf txt | xa $vim_cmd"
    fi
}

if { ! test "$istty" = 0; } && { ! test "$isstdoutpipe" = 0; }; then
    # e.g. (pen-snc "1John")
    in-pen unbuffer xt in-tm "$sn" "$@" & disown
    exit "$?"
fi

if ! inside-docker-p && docker-running-p; then
    # Testing against the output pipe is necessary
    # Or this on host would not work: Romans 3:21-26 | cat
    if test "$istty" = 0 && { ! test "$isstdoutpipe" = 0; }; then
        in-pen in-tm "$sn" "$@"
    # elif test "$istty" = 0 && test "$isstdoutpipe" = 0; then
        # in-pen in-tm "$sn" "$@"
    elif test "$istty" = 0 && test "$NOEMACS" = y; then
        ocif -nd in-pen "$sn" "$@" | ebible_pager
    else
        ocif -nd in-pen "$sn" "$@"
    fi

    exit "$?"
fi

if test "$FAST" = "y"; then
    if test "$sn" = ebible; then
        module="$default_bible_version"
    fi
    : "${module:="$default_bible_version"}"
else
    module="$(0</dev/null ocif -nd canonicalise-bible-module "$sn")"
    : "${module:="$default_bible_version"}"
fi

format=plain

: "${BORDER:="y"}"
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -ttp) {
        USE_TTP=y
        shift
    }
    ;;

    -s) {
        SEARCH=y
        shift
    }
    ;;

    -bd) {
        BORDER=y
        shift
    }
    ;;

    -nbd) {
        BORDER=
        shift
    }
    ;;

    -cac) {
        format=internal
        CONCORDANCE=all
        CODES=y
        shift
    }
    ;;

    -codes) {
        : "${CONCORDANCE:="y"}"
        CODES=y
        shift
    }
    ;;

    -n) {
        VERSE_NUMBERS=y
        shift
    }
    ;;

    -c) {
        format=internal
        CONCORDANCE=y
        shift
    }
    ;;

    -ca) {
        format=internal
        CONCORDANCE=all
        shift
    }
    ;;

    -nem) {
        NOEMACS=y
        shift
    }
    ;;

    -E) {
        CMD="$2"
        shift
        shift
    }
    ;;

    -m) {
        module="$2"
        shift
        shift
    }
    ;;

    -nottp) {
        USE_TTP=n
        shift
    }
    ;;

    *) break;
esac; done

if test "$ANNOTATED" = n; then
    format=plain
    CONCORDANCE=
elif test -n "$ANNOTATED"; then
    format=internal
    CONCORDANCE="$ANNOTATED"
fi

: "${USE_TTP:="y"}"

if test "$ONELINED" = "y"; then
    USE_TTP=n
    BORDER=
    no_udl=y
fi

doublespacemax () {
    sed 's/\s\+$//' | sed ':a;N;$!ba;s/\n\n\+/\n\n/g'
}

if test "$SEARCH" = "y"; then
    bible-search -m "$module" -g "$@"
    exit "$?"
fi

# Remove quotes (don't use cmd)
: ${CMD:="$@"}

ref="$CMD"
: "${ref:="Genesis 1"}"

if ! test "$FAST" = "y"; then
    ref="$(echo "$ref" | cif canonicalise-bible-ref)"
fi
# echo "$ref" | hls red 1>&2

: "${maybemod:="$(printf -- "%s\n" "$ref" | sed -n '/(.*)/s/.*(\([^)]\+\)).*/\1/p')"}"
if test -n "$maybemod"; then
    module="$maybemod"
    ref="$(printf -- "%s\n" "$ref" | sed 's/ *(.*//')"
else
    : "${maybemod:="$(printf -- "%s\n" "$ref" | sed -n '/[0-9] [a-zA-Z]\+$/s/.* \([a-zA-Z]\+\)$/\1/p')"}"
    if test -n "$maybemod"; then
        module="$maybemod"
        ref="$(printf -- "%s\n" "$ref" | sed 's/ *[a-zA-Z]\+$//')"
    fi
fi

strongs_cmd=strongs-get-word
if test "$CONCORDANCE" = "all"; then
    strongs_cmd="strongs-get-word -f"
fi

iforcat() {
    fargs=()
    while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
        --) {
            shift
            break;
        }
        ;;

        *) {
            fargs+=("$1")
            shift
        }
        ;;
    esac; done

    if "${fargs[@]}"; then
        "$@"
    else
        cat
    fi
}

export -f iforcat

IFS= read -r -d '' pipeline <<'HEREDOC'
    {
        {
            if test "$no_udl" = "y"; then
                if test "$DECORATED" = "y"; then
                    echo "*${ref}* - "
                else
                    echo "$ref - "
                fi
            else
                if test "$FAST" = "y"; then
                    echo "$ref" | udl
                else
                    echo "$ref" | openbible-canonicalise-ref | udl
                fi
            fi
        }
        {
            0</dev/null in-pen "diatheke" "-b" "$module" "-o" "w" "-f" "$format" "-k" "$ref"
        } | {
            # TODO Make it so here I can have the verse numbers inline and not actually remove the verse refereces
            # But I also want them to actually be formatted into the margin / border
            # sed 's/^.* \([0-9]\+:[0-9]\+\): */\1 /'
            cat
        } | { 
            # Remove the verse references from the start of each line
            sed 's/^.* [0-9]\+:[0-9]\+: *//' | pen-s remove-trailing-whitespace | sed '/^$/d'
        } | {
            # Using patm is quite slow.
            # ebible -cac Revelation 22 | cat
            # ebible -c Revelation 22 | cat
            # Consider a faster solution.
            # Running diatheke many times for the strongs definitions is quite slow.
            # Maybe reformat the strongs codes too.
            if test "$CONCORDANCE" = "y" || test "$CONCORDANCE" = "all"; then
                sed -e 's/<w savlm="strong:\([^"]*\)">\([^<]*\)<\/w>/\2 \1/g' -e 's/\bstrong://g' |
                sed 's/<[^>]*>//g' |
                patm -r "[HG][0-9]+[a-z]?" "echo -n ✓; $strongs_cmd | tr '[:lower:]' '[:upper:]'" |
                sed 's/\( ✓\)\+\([^(]\)/\2/g' | sed 's/✓//g'
            else
                cat
            fi
        } | {
            iforcat test "$USE_TTP" = "y" -- ttp
        } | {
            sed '$s/\( *\)\(([^)]\+)\)$/\n\n\n\2/' | doublespacemax
        }
    } | {
        iforcat test "$BORDER" = "y" -- sed 's/^/| /'
    } | {
        iforcat test "$no_udl" = "y" -- s join ' ' | sed 's/ \+/ /g'
    }
    # | pen-s remove-trailing-whitespace | pen-s join ' ' | sed 's/[0-9]: /&\n/g' | sed '/^$/d' | awk 'NR%2==0' | pavs
HEREDOC

# TODO Cache this pipeline
# I can also cache pipelines with the new pipe utility pipexec (for certain cases, anyway)
if test "$istty" = 0 && ! test "$NOEMACS" = y; then
    if test "$1"; then
        sp -cip bible-open =nil =nil "$module" "$ref"
    else
        sp -cip bible-open =nil =nil "$module"
    fi
else 
    assignments="$(printf -- "%s\n" "$pipeline" | getvars -eval-pp)"
    assignments="$(eval "$assignments" | s join " ")"
    export -f doublespacemax
    output="$(ocif -nd bash -c "$assignments $pipeline")"
    slug="$(printf -- "%s\n" "$output" | head -n 1 | slugify)"
    printf -- "%s\n" "$output" | ebible_pager -s "$slug"
    # printf -- "%s\n" "$output" | pavs
fi
