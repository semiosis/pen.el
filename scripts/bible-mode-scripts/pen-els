#!/bin/bash
export TTY

# This script runs a standalone vanilla emacs to run code

# . $SCRIPTS/lib/hs

sn="$(basename -- "$0")"

case "$sn" in
    canonicalise-bible-book-title|canonicalise-bible-book-title-els) {
        fun_name=bible-canonicalise-ref
    }
    ;;

    list-bible-book-titles-els) {
        fun_name=list-bible-book-titles-lines
    }
    ;;

    get-haystacks-and-findstrs-from-rosie-grep-sexp-els) {
        fun_name=get-haystacks-and-findstrs-from-rosie-grep-sexp
    };;

    pen-els) {
        fun_name="$1"
        shift
    }
    ;;

    *) {
        fun_name="$sn"
    }
    ;;
esac

. $SCRIPTS/lib/stdin_exists

if stdin_exists; then
    input_fp="$(cat | tf -X input txt)"
else
    input_fp="$(0</dev/null tf -X input txt)"
    if test "$#" -gt 0; then
        printf -- "%s" "$1" > "$input_fp"
        shift
    fi
fi

output_fp="$(0</dev/null tf -X output txt)"

# By default the stdin is the first arg to the emacs function?
# Yes. And the stdin can be large because the first parameter
# will be passed in as a file path.

# OK, therefore, the arguments go:
# - fun_name input_fp output_fp [&rest]
pen.els "$fun_name" "$input_fp" "$output_fp" "$@" 2>/dev/null
ret="$?"

# Do I remove the temp files?
# I think I should.
{
printf -- "%s" "$(cat "$output_fp")"
# rm -f "$input_fp"
# rm -f "$output_fp"
}

exit "$ret"
