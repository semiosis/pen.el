#!/usr/bin/env -S emacs --quick --script
;; #!sbcl --script

;; canonicalise-bible-book-title-els 'I Thessalonians' | v

;; The input file path is used to write the output
;; input_fp="$(cat | tf txt)"
;; canonicalise-bible-book-title-els =(echo 'I Thessalonians') 2>/dev/null

(defmacro comment (&rest body) nil)

;; echo 'Rev 2:1' | canonicalise-bible-book-title

(defun maybe-load (path)
  (ignore-errors (load path)))

(defun variable-p (s)
  (and (not (eq s nil))
       (boundp s)))

(defun pen-q (&rest strings)
  (let ((print-escape-newlines t))
    (mapconcat 'identity (mapcar 'prin1-to-string-safe strings) " ")))

(defmacro shut-up-c (&rest body)
  "This works for c functions where shut-up does not."
  `(progn (let* ((inhibit-message t))
            ,@body)))

(defun slurp-file (filePath)
  "Return filePath's file content."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))

(defun prin1-to-string-safe (s)
  (if s
      (prin1-to-string s)
    "\"\""))

(defalias 's-replace-regexp 'replace-regexp-in-string)
(defalias 'esed 'replace-regexp-in-string)

(defun member-similar (elt lst &optional comparator)
  "works between floats and ints. and compares strings insensitively"

  (setq comparator (or comparator 'cl-equalp))

  (catch 'foo
    (dolist (x lst)
      (when (funcall comparator x elt)
        (throw 'foo x))))

  ;; (cl-member elt lst)
  ;; (member elt lst)
  )

(defun test-n (s)
  (not (string-empty-p s)))

(defun test-f (filename)
  (file-exists-p (umn filename)))

(defun tv-basic (s)
  (let ((output-file
         (make-temp-file "tv-basic-output" nil ".txt")))
    (write-to-file s output-file)
    (call-process-shell-command
     "tv" output-file "*pen-sn-stderr*")
    (delete-file output-file))
  s)
(defalias 'tv 'tv-basic)

(maybe-load "/root/.emacs.d/elpa/shut-up-20210403.1249/shut-up.el")
(maybe-load "/root/.emacs.d/elpa/s-20210616.619/s.el")
(maybe-load "/usr/local/share/emacs/29.1.50/lisp/emacs-lisp/cl-extra.el.gz")
(maybe-load "/usr/local/share/emacs/29.1.50/lisp/emacs-lisp/pp.el.gz")

(maybe-load "/root/.emacs.d/elpa/dash-20230714.723/dash.el")

(defvar bible-book-map-names
  ;; Used to translate any of the latter elements into the first element of each tuple.
  ;; I should also make I, 1, First, 2, 3, etc part of the generic regex.
  ;; I still need to be able to translate them. So I still need this.

  ;; DISCARD Add keyword names into each list too, etc.
  ;; Is this possible?
  ;; ("Genesis" "Gen" "Ge" "Gn" :shortname "Genesis")

  ;; ("Revelation of John" "Revelation" "Rev" "Re" :shortname "Revelation")

  ;; TODO Otherwise, just use a function to select the shortname

  '(("Genesis" "Gen" "Ge" "Gn")
    ("Exodus" "Ex" "Exod" "Exo")
    ("Leviticus" "Lev" "Le" "Lv")
    ("Numbers" "Num" "Nu" "Nm" "Nb")
    ("Deuteronomy" "Deut" "De" "Dt")
    ("Joshua" "Josh" "Jos" "Jsh")
    ("Judges" "Judg" "Jdg" "Jg" "Jdgs")
    ("Ruth" "Rth" "Ru")
    ("I Samuel" "1 Samuel" "1 Sam" "1 Sm" "1 Sa" "I Sam" "I Sa" "1Sam" "1Sa" "1S" "1st Samuel" "1st Sam" "First Samuel" "First Sam")
    ("II Samuel" "2 Samuel" "2 Sam" "2 Sm" "2 Sa" "II Sam" "II Sa" "2Sam" "2Sa" "2S" "2nd Samuel" "2nd Sam" "First Samuel" "First Sam")
    ("I Kings" "1 Kings" "1 Kgs" "1 Ki" "1Kgs" "1Kin" "1Ki" "1K" "1st Kings" "1st Kgs" "First Kings" "First Kgs")
    ("II Kings" "2 Kings" "2 Kgs" "2 Ki" "2Kgs" "2Kin" "2Ki" "2K" "2nd Kings" "2nd Kgs" "Second Kings" "Second Kgs")
    ("I Chronicles" "1 Chronicles" "1 Chron" "1 Chr" "1 Ch" "1Chron" "1Chr" "I Chron" "I Chr" "I Ch" "1st Chronicles" "1st Chron" "First Chronicles" "First Chron")
    ("II Chronicles" "2 Chronicles" "2 Chron" "2 Chr" "2 Ch" "2Chron" "2Chr" "II Chron" "II Chr" "II Ch" "2nd Chronicles" "2nd Chron" "Second Chronicles" "Second Chron")
    ("Ezra" "Ezr" "Ez")
    ("Nehemiah" "Neh" "Ne")
    ("Esther" "Est" "Esth" "Es")
    ("Job" "Jb")
    ("Psalms" "Ps" "psalm" "Psalm" "Pslm" "Psa" "Psm" "Pss")
    ("Proverbs" "Prov" "Pro" "Prv" "Pr")
    ("Ecclesiastes" "Eccl" "Eccles" "Eccle" "Ecc" "Ec" "Qoh")
    ("Song of Solomon" "Song" "Song of Songs" "SOS" "So" "Canticle of Canticles" "Canticles" "Cant")
    ("Isaiah" "Isa" "Is")
    ("Jeremiah" "Jer" "Je" "Jr")
    ("Lamentations" "Lam" "La")
    ("Ezekiel" "Ezek" "Eze" "Ezk")
    ("Daniel" "Dan" "Da" "Dn")
    ("Hosea" "Hos" "Ho")
    ("Joel" "Jl")
    ("Amos" "Am")
    ("Obadiah" "Obad" "Ob")
    ("Jonah" "Jnh" "Jon")
    ("Micah" "Mic" "Mc")
    ("Nahum" "Nah" "Na")
    ("Habakkuk" "Hab" "Hb")
    ("Zephaniah" "Zeph" "Zep" "Zp")
    ("Haggai" "Hag" "Hg")
    ("Zechariah" "Zech" "Zec" "Zc")
    ("Malachi" "Mal" "Ml")
    ("Matthew" "Matt" "Mt")
    ("Mark" "Mrk" "Mar" "Mk" "Mr")
    ("Luke" "Luk" "Lk")
    ("John" "Joh" "Jhn" "Jn")
    ("Acts" "Act" "Ac")
    ("Romans" "Rom" "Ro" "Rm")
    ("I Corinthians" "1 Corinthians" "1 Cor" "1 Co" "I Cor" "I Co" "1Cor" "1Co" "1Corinthians" "1st Corinthians" "First Corinthians")
    ("II Corinthians" "2 Corinthians" "2 Cor" "2 Co" "II Cor" "II Co" "2Cor" "2Co" "2Corinthians" "2nd Corinthians" "Second Corinthians")
    ("Galatians" "Gal" "Ga")
    ("Ephesians" "Eph" "Ephes")
    ("Philippians" "Phil" "Php" "Pp")
    ("Colossians" "Col" "Co")
    ("I Thessalonians" "1 Thess" "1 Thes" "1 Th" "1 Thessalonians" "I Thess" "I Thes" "I Th" "1Thessalonians" "1Thess" "1Thes" "1Th" "1st Thessalonians" "1st Thess" "First Thessalonians" "First Thess")
    ("II Thessalonians" "2 Thess" "2 Thes" "2 Th" "2 Thessalonians" "II Thess" "II Thes" "II Th" "2Thessalonians" "2Thess" "2Thes" "2Th" "2nd Thessalonians" "2nd Thess" "Second Thessalonians" "Second Thess")
    ("I Timothy" "1 Timothy" "1 Tim" "1 Ti" "I Timothy" "I Tim" "I Ti" "1Timothy" "1Tim" "1Ti" "1st Timothy" "1st Tim" "First Timothy" "First Time")
    ("II Timothy" "2 Timothy" "2 Tim" "2 Ti" "II Timothy" "II Tim" "II Ti" "2Timothy" "2Tim" "2Ti" "2nd Timothy" "2nd Tim" "Second Timothy" "Second Time")
    ("Titus" "Tit"
     ;; "ti"
     )
    ("Philemon" "Philem" "Phlm" "Phm" "Pm")
    ("Hebrews" "Heb")
    ("James" "Jas" "Jm")
    ("I Peter" "1 Peter" "1 Pet" "1 Pe" "1 Pt" "1 P" "I Pet" "I Pt" "I Pe" "1Peter" "1Pet" "1Pe" "1Pt" "1P" "I Peter" "1st Peter" "First Peter")
    ("II Peter" "2 Peter" "2 Pet" "2 Pe" "2 Pt" "2 P" "II Pet" "II Pt" "II Pe" "2Peter" "2Pet" "2Pe" "2Pt" "2P" "II Peter" "2nd Peter" "Second Peter")
    ("I John" "1 John" "1 Jhn" "1 Jn" "1 J" "1John" "1Jhn" "1Joh" "1Jn" "1Jo" "1st John" "First John")
    ("II John" "2 John" "2 Jhn" "2 Jn" "2 J" "2John" "2Jhn" "2Joh" "2Jn" "2Jo" "2nd John" "Second John")
    ("III John" "3 John" "3 Jhn" "3 Jn" "3 J" "3John" "3Jhn" "3Joh" "3Jn" "3Jo" "3rd John" "Third John")
    ("Jude" "Jud" "Jd")
    ("Revelation of John" "Revelation" "Rev" "Re")))

(defun str (thing)
  "Converts object or string to an unformatted string."

  (if thing
      (if (stringp thing)
          (substring-no-properties thing)
        (progn
          (setq thing (format "%s" thing))
          (set-text-properties 0 (length thing) nil thing)
          thing))
      ""))

;; todo alias
;; cl-ppcre:regex-replace-all -> esed

(defun pen-sn-basic (cmd &optional stdin dir)
  (interactive)

  (shut-up
    (let ((output))
      (if (not cmd)
          (setq cmd "false"))

      (if (not dir)
          (setq dir default-directory))

      (let ((default-directory dir))
        (if (or
             (and (variable-p 'pen-sh-update)
                  (eval 'pen-sh-update))
             (>= (prefix-numeric-value current-prefix-arg) 16))
            (setq cmd (concat "export UPDATE=y; " cmd)))

        (setq tf (make-temp-file "elisp_bash"))
        (setq tf_exit_code (make-temp-file "elisp_bash_exit_code"))

        (setq final_cmd (concat "( cd " (pen-q dir) "; " cmd " ) > " tf))

        (shut-up-c
         (with-temp-buffer
           (insert (or stdin ""))
           (shell-command-on-region (point-min) (point-max) final_cmd)))
        (setq output (slurp-file tf))
        (ignore-errors
          (progn (f-delete tf)
                 (f-delete tf_exit_code)))
        output))))

(defun bible-canonicalise-book-title (ref &optional nilfailure)
  (setq ref (s-replace-regexp "\\(\\. \\?\\|\\.\\)" " " ref))
  (setq ref (esed "\\.$" "" ref))
  (cl-loop for tp in bible-book-map-names
           until ;; (member ref (cdr tp))
           (member-similar ref tp)
           ;; (member ref tp)
           finally return
           (if ;; (member ref (cdr tp))
               (member-similar ref tp)
               ;; (member ref tp)
               (car tp)
             (if nilfailure
                 nil
               ref))))

(defun bible-canonicalise-ref (ref &optional nilfailure)
  (let* ((booktitle (s-replace-regexp "[. ][0-9].*" "" ref))
         (chapverse (pen-sn-basic "sed -n 's/.*[. ]\\([0-9].*\\)/\\1/p'" ref))
         (booktitle (bible-canonicalise-book-title booktitle nilfailure)))
    (if (test-n chapverse)
        (concat booktitle " " chapverse)
      booktitle)))

;; (message "%s" (bible-canonicalise-ref (car argv) (cadr argv)))

(defun cat-to-file (stdin file_path)
  ;; The ignore-errors is needed for babel for some reason
  (ignore-errors (with-temp-buffer
                   (insert stdin)
                   (delete-file file_path)
                   (write-file file_path))))
(defalias 'write-string-to-file 'cat-to-file)
(defalias 'write-to-file 'cat-to-file)

(defalias 'umn 'identity)
(defalias 'pen-umn 'identity)

(defun e/cat (&optional path input no_unminimise)
  "cat out a file, or write to one"
  (if (not no_unminimise)
      (setq path (pen-umn path)))
  (cond
   ((and (test-f path) input) (write-to-file input path))
   ((test-f path) (with-temp-buffer
                    (insert-file-contents path)
                    (buffer-string)))
   (t (error "Bad path"))))

(defun pen-list2str (&rest l)
  "join the string representation of elements of a given list into a single string with newline delimiters"
  (if (cl-equalp 1 (length l))
      (setq l (car l)))
  (mapconcat 'identity (mapcar 'str l) "\n"))

(defun list-bible-book-titles ()
  (-flatten bible-book-map-names))

(defun list-bible-book-titles-lines ()
  (pen-list2str (-flatten bible-book-map-names)))

(defalias 'pps 'pp-to-string)

(defun string-empty-or-nil-p (s)
  (or (not s)
      (string-empty-p s)))

(defun string-not-empty-nor-nil-p (s)
  (not (string-empty-or-nil-p s)))

(defun string-first-nonnil-nonempty-string (&rest ss)
  "Get the first non-nil string."
  (let ((result))
    (catch 'bbb
      (dolist (p ss)
        (if (string-not-empty-nor-nil-p p)
            (progn
              (setq result p)
              (throw 'bbb result)))))
    result))
(defalias 'sor 'string-first-nonnil-nonempty-string)

(defun chomp (str)
  "Chomp (remove tailing newline from) STR."
  (replace-regexp-in-string "\n\\'" "" str))

;; With these functions, the first argument should always be a file path which:
;; may contain the stdin, or alternatively it should contain the value of the first argument,
;; if it exists.
;; The input may also simply be empty, and unused.

;; Take the function name as the first argument
(let* ((fun_name (car argv))
       ;; output_fp functions as stdin and stdout
       ;; the temp file will always exist
       (input_fp (cadr argv))
       (output_fp (caddr argv))
       (input (chomp (e/cat input_fp)))
       ;; (matches-fp (cadr argv))
       ;; (bytepos-fp (caddr argv))
       ;; (transformed-fp (cadddr argv))
       )

  (write-to-file
   ;; ditch the first 3 arguments
   (apply (intern fun_name)
          (if (sor input)
              (cons input (cdddr argv))
            (cdddr argv)))
   output_fp))
