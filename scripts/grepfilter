#!/bin/bash
export TTY

# . $SCRIPTS/lib/hs

# e.g.
# ifconfig | grepfilter slugify "rosie grep -o subs net.ipv4"
# ifconfig | grepfilter "wrlp pen-sha" "rosie grep -o subs net.ipv4" | v


input_fp="$(cat | tf txt)"

transformer="$1"
test -n "$transformer" || exit 1
shift

matcher="$1"
test -n "$matcher" || exit 1
shift

matches_fp="$(cat "$input_fp" | eval "$matcher" | uniqnosort | tf txt)"
transformed_fp="$(cat "$matches_fp" | eval "$transformer" | tf txt)"
bytepos_fp="$(grep -F -f "$matches_fp" -Hnob "$input_fp" | tf txt)"

# The matches should result in simply a list of matching tokens
# Future passes should not work on the results of previous passes

# Therefore, matches should not overlap.
# I think I need to manually remove the overlaps.
# - Find all matching tokens
# - Scan the file again, looking for the matching tokens, but return byte positions and lengths
#   - grep -f "$matches_FILE" -Hnob "$input_fp"
# - Run the transformation script on the bytepos_fp matches, and add to the bytepos_fp file
# - Remove matches which overlap with previous matches

# Then make the literal replacements to the original file with an elisp algorithm
# pid="$$"
# pty="$(pid2tty "$pid")"
# output_fp="$(grepfilter-transform -toppid "$pid" "$input_fp" "$matches_fp" "$bytepos_fp" "$transformed_fp" 2>/dev/null | tf txt)"

grepfilter-transform.els "$input_fp" "$matches_fp" "$bytepos_fp" "$transformed_fp" 2>/dev/null

# cat "$output_fp" | pavs

cat "$input_fp" | pavs
