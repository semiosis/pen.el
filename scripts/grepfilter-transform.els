#!/usr/bin/env -S emacs --quick --script

(load "/root/.emacs.d/elpa/s-20210616.619/s.el")

;; https://gist.github.com/Kreyren/a12e3618525477c3dd5fb16c3de45bf3

;; grepfilter-transform "$bytepos_fp" "$input_fp"

;; Run the transform once per match
;; Run the transform ON the byteps_fp
;; Generate a sed replacement script?

(defun str (thing)
  "Converts object or string to an unformatted string."

  (if thing
      (if (stringp thing)
          (substring-no-properties thing)
        (progn
          (setq thing (format "%s" thing))
          (set-text-properties 0 (length thing) nil thing)
          thing))
    ""))

(defalias 'umn 'identity)
(defalias 'pen-umn 'identity)

(defun test-f (filename)
  (file-exists-p (umn filename)))

(defun e/cat (&optional path input no_unminimise)
  "cat out a file, or write to one"
  (if (not no_unminimise)
      (setq path (pen-umn path)))
  (cond
   ((and (test-f path) input) (write-to-file input path))
   ((test-f path) (with-temp-buffer
                    (insert-file-contents path)
                    (buffer-string)))
   (t (error "Bad path"))))

(defmacro comment (&rest body) nil)

(defun cat-to-file (stdin file_path)
  ;; The ignore-errors is needed for babel for some reason
  (ignore-errors (with-temp-buffer
                   (insert stdin)
                   (delete-file file_path)
                   (write-file file_path))))
(defalias 'write-string-to-file 'cat-to-file)
(defalias 'write-to-file 'cat-to-file)

(defun print-output (s)
  ;; Can I speed up pen-sn with call-process-shell-command ?
  (let ((output-file
         (make-temp-file "grepfilter-transform-output" nil ".txt")))
    (write-to-file s output-file)
    (call-process-shell-command
     ;; Sadly, this still doesn't make it to stdout / stderr
     ;; Emacs has completely taken stderr / stdout
     "cat | tv >> /dev/stdout" output-file "*pen-sn-stderr*"))
  ;; Do not do this!
  ;; (write-to-file s "/dev/stdout")
  )

(defun grepfilter-transform (input-fp matches-fp bytepos-fp transformed-fp)
  (interactive (list (read-string "Input fp: ")
                     (read-string "Matches fp: ")
                     (read-string "Bytepos fp: ")
                     (read-string "Transformed fp: ")))

  (let* ((inputlist (s-lines (e/cat input-fp)))
         (matcheslist (s-lines (e/cat matches-fp)))
         (byteposlist (s-lines (e/cat bytepos-fp)))
         (transformedlist (s-lines (e/cat transformed-fp))))

    (print-output (e/cat input-fp)))

  (comment
   (with-temp-buffer
     (ignore-errors (insert-file-contents input-fp))
     (search-forward-regexp (concat "^" book))
     (search-forward-regexp (concat "\\b" (str chapter) "[,.]"))
     (beginning-of-line)
     (search-forward-regexp "\\. ")
     (let ((start (point))
           (end (progn
                  (end-of-line)
                  (point))))
       (buffer-substring start end)))))

(let ((fds (car argv))
      (input-fp (cadr argv))
      (matches-fp (caddr argv))
      (bytepos-fp (cadddr argv))
      (transformed-fp (caddddr argv)))

  ;; Output
  (print-output
   (grepfilter-transform
    input-fp
    matches-fp
    bytepos-fp
    transformed-fp)))
