#!/bin/bash
export TTY

# export "CALLER_TMUX_SESSION=$CALLER_TMUX_SESSION"

aqf() { apply q "$@" | bs '`'; }

# aqf() {
#     cmd-nice-without-bs "$@"
# }

pl() {
    printf -- "%s\n" "$@"
}

# This script is misnamed

# nvt -2 man less
# nvt -2 elinks "http://news.ycombinator.com"

EVAL=n
precmd=
postcmd=
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -2) {
        precmd="export TERM=screen-2color; "
        shift
    }
    ;;

    -22) {
        shift
        set -- vt100 -tm "$@"
    }
    ;;

    -pak|-w) {
        postcmd="; pak"
        shift
    }
    ;;

    -E) {
        EVAL=y
        shift
    }
    ;;

    *) break;
esac; done

if test "$NO_NVC" = "y"; then
    "$@"
    exit "$?"
fi

CMD="$(cmd "$@")"

if test "$#" -eq 0; then
    CMD="\"zsh\""
fi

stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

if test "$EVAL" = "y"; then
    CMD="eval $CMD"
fi

if stdin_exists; then
    input_fp="$(cat | tf txt)"
    CMD="cat $(cmd "$input_fp") | $CMD"
    exec <&2
fi

is_stdout_pipe() {
    # If stdout is a pipe
    [[ -p /dev/stdout ]]
}

is_stdout_pipe
ispipe="$?"

# just run the command without nvim
if inside-emacs-p; then
    eval "$CMD"
    exit "$?"
fi

# This must come *after* insite-emacs-p
if test "$ispipe" -eq 0; then
    output_fp="$(0</dev/null tf txt)"
    CMD="$CMD > $(cmd "$output_fp")"
    
    exec 3>&1
    exec 1>&2
fi

if test "$INSIDE_NEOVIM" = y; then
    eval "$CMD"
    exit "$?"
fi

export INSIDE_NEOVIM=y
export NO_DEFAULT_BG=y # This is so any script that uses colorize-build looks better inside neovim

# I have a wrapper script now, so this will always happen
if which -a nvim &>/dev/null; then
    cmd="nvim -u $HOME/.nvimrc -c $(aqf "call TermAndQuit($(aqf "$precmd $CMD$postcmd"))") -c $(aqf "call GeneralSyntax()") -c $(aqf "call NumberSyntax()") -c $(aqf "normal! i")"
    eval "$cmd"
else
    eval "$CMD"
fi

if test "$ispipe" -eq 0; then
    exec 1>&3
    cat "$output_fp"
    # exit "$?"
fi
