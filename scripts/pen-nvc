#!/bin/bash
export TTY

# eval 'echo -e -n "export PS4=\"+\t\\\"$(basename $0)\\\"\t${LINENO}\t\""'
# set -xv

# Test the speed of nvim:
# nvim -c "call TermAndQuit(\"bash\")" -c "call GeneralSyntax()" -c "call NumberSyntax()" -c "normal! i"

# export "CALLER_TMUX_SESSION=$CALLER_TMUX_SESSION"

# aqf() {
#     cmd-nice-without-bs "$@"
# }

. $PENELD/scripts/utils.sh

# Sadly, these are not the same:
# aqf() { cmd-nice-posix "$@"; }
aqf() { apply q "$@" | bs '`'; }

# test aqf for nvc (because fzf uses nvc):
# echo hi | fzf

# This script is misnamed

# nvt -2 man less
# nvt -2 elinks "http://news.ycombinator.com"

DO_EXEC=n
precmd=
postcmd=
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -2) {
        precmd="export TERM=screen-2color; "
        shift
    }
    ;;

    -22) {
        shift
        set -- vt100 -tm "$@"
    }
    ;;

    -pak|-w) {
        postcmd="; pak"
        shift
    }
    ;;

    -E) {
        DO_EXEC=y
        CMD="$2"
        shift
        shift
    }
    ;;

    -doeval) {
        DO_EVAL=y
        shift
    }
    ;;

    -f) {
        force_nvc_on=y
        shift
    }
    ;;

    *) break;
esac; done

: "${CMD:="$(cmd "$@")"}"

if test "$INSIDE_X" = "y"; then
    export NO_NVC=y
fi

if test "$NO_NVC" = "y" || pen-rc-test -f black_and_white; then
    eval "$CMD"
    exit "$?"
fi

if test "$#" -eq 0; then
    : "${CMD:="zsh"}"
fi

if test "$DO_EVAL" = "y"; then
    CMD="eval $CMD"
fi

if test "$has_stdin" = y; then
    input_fp="$(cat | tf txt)"
    CMD="cat $(cmd "$input_fp") | $CMD"
    exec <&2
fi

# just run the command without nvim
if inside-emacs-p && ! test "$force_nvc_on" = y; then
    eval "$CMD"
    exit "$?"
fi

# This must come *BEFORE* output_fp=
if test "$INSIDE_NEOVIM" = y || test "$NO_NVC" = y; then
    if test "$isstdoutpipe" -eq 0; then
        eval "$CMD | cat"
    else
        eval "$CMD"
    fi
    exit "$?"
fi

# This must come *AFTER* inside-emacs-p
if test "$isstdoutpipe" -eq 0; then
    output_fp="$(0</dev/null tf txt)"
    CMD="$CMD > $(cmd "$output_fp")"
    
    exec 3>&1
    exec 1>&2
fi

export INSIDE_NEOVIM=y
export NO_DEFAULT_BG=y # This is so any script that uses colorize-build looks better inside neovim

# I have a wrapper script now, so this will always happen
if which -a nvim &>/dev/null; then

    # cmd="nvim -c $(aqf "call TermAndQuit($(aqf "$precmd $CMD$postcmd"))") -c $(aqf "call GeneralSyntax()") -c $(aqf "call NumberSyntax()") -c $(aqf "normal! i")"

    # For speed, eliminate aqfs
    cmd="nvim -c $(aqf "call TermAndQuit($(aqf "$precmd $CMD$postcmd"))") -c \"call GeneralSyntax()\" -c \"call NumberSyntax()\" -c \"normal! i\""
    eval "$cmd"
else
    eval "$CMD"
fi

if test "$isstdoutpipe" -eq 0; then
    exec 1>&3
    cat "$output_fp"
    # exit "$?"
fi
