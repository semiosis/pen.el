#!/bin/bash

MESSAGE=
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -h) {
        HIDDEN=y
        shift
    }
    ;;

    -k) {
        key="$2"
        shift
        shift
    }
    ;;

    -m) {
        MESSAGE="$2. "
        shift
        shift
    }
    ;;

    *) break;
esac; done

if test "$NOPAK" = "y"; then
    exit 0
fi

trap func_trap INT
func_trap() {
    :
}

key="$(p "$key" | sed -z 's/\(.\).*/\1/')"

is_tty() {
    # If stout is a tty
    [[ -t 1 ]]
}

ns() {
    printf -- "%s\n" "$@" 2>&1
}

if ! is_tty; then
    ns "pak can't read. continuing"
    exit 0
fi


(  exec <`pen-tm-tty`  ) &>/dev/null

if test "$#" -gt 0; then
    CMD="$(cmd "$@")"
    : ${CMD:="$(cmd "$@")"}
fi

if [ -n "$key" ]; then
    if ! test "$HIDDEN" = "y"; then
        if test -n "$CMD"; then
            printf -- "%s\n" "${MESSAGE}Press '$key' to run: $CMD" | lolcat
        else
            printf -- "%s\n" "${MESSAGE}Press '$key' to continue..." | lolcat
        fi
    else
        tput civis
    fi
    read -n 1 -s ret
    code="$?" # if this is not 0 then pak must not be working. Don't want an infinite loop
    while test "$code" = "0" && ! [[ "$ret" == "$key" ]]; do
        read -n 1 -s ret
    done

    if test "$HIDDEN" = "y"; then
        tput cnorm
    fi

    if ! test "$code" = "0"; then
        ns "pak can't read. quitting"
    fi
else
    if test -n "$CMD"; then
        printf -- "%s\n" "${MESSAGE}Press any key to run $CMD" | lolcat
    else
        printf -- "%s\n" "${MESSAGE}Press any key..." | lolcat
    fi
    read -n 1 -s
fi

# Run after pak
if test "$#" -gt 0; then
    "$@"
fi

# This doesn't work
# Sleep a little so loak up spurrious key bidings
# Such as: [1;3P
# sleep 1
