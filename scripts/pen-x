#!/bin/bash

# x/pen-x v1.0
# A domain-specific language in bash for generating tcl/expect

: ${TTY:="$(pen-tm-tty)"}
export TTY

. $SCRIPTS/lib/stdin_exists

if stdin_exists; then
    tfstdin="$(pen-tf txt)"
    exec <`pen-tm-tty`
fi

PANE_ID="$(tmux display-message -p -t $TMUX_PANE '#{pane_id}' 2>/dev/null)"
WIN_ID="$(tmux display-message -p -t $TMUX_PANE '#{window_id}' 2>/dev/null)"

SHELL=zsh

input_filter() {
    sed 's/\([[`;$"]\)/\\\1/g'

    return 0
}

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -allowtm) {
        allow_tmux=y
        shift
    }
    ;;

    *) break;
esac; done

if ! test "$allow_tmux" = "y"; then
    export TMUX=
fi

tf_script="$(pen-tf script exp || echo /dev/null)"
chmod a+x "$tf_script"

script_append_nonliteral() {
    printf -- "$1\n" >> "$tf_script"

    return 0
}

# print literally
lit() {
    NEWLINE=y
    SPACES=n

    while [ $# -gt 0 ]; do opt="$1";
        case "$opt" in
            -n) {
                NEWLINE=n
                shift
            }
            ;;

            -s) {
                SPACES=y
                NEWLINE=n
                shift
            }
            ;;

            *) break;
        esac
    done

    if test "$NEWLINE" = "y"; then
        printf -- "%s\n" "$@"
    else
        if test "$SPACES" = "y"; then
            printf -- "%s\n" "$@" | tr -s '\n' ' ' | sed 's/ $//'
        else
            printf -- "%s" "$@"
        fi
    fi
}

script_append() {

    lit "$1" >> "$tf_script"

    return 0
}

script_append "#!/usr/bin/expect -f"

timeout=3600
uses_tmux=n
debug_mode=n
tmux_command=
attach_tmux=n
print_output=n
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -d) {
        debug_mode=y
        shift
    }
    ;;

    -ub) {
        do_unbuffer=y
        do_ansi2txt=y
        shift
    }
    ;;

    -D) {
        debug_mode=n
        shift
    }
    ;;

    -vt|-vt100) {
        export TERM=vt100
        shift
    }
    ;;

    -xt) {
        export TERM=xterm
        shift
    }
    ;;

    -n|-g|-dr) { #gen
        DRY_RUN=y
        shift
    }
    ;;

    -shell) {
        SHELL="$2"
        shift
        shift
    }
    ;;

    -E|-shE|-sh|-is) {
        INIT_SPAWN="$2"
        shift
        shift
    }
    ;;

    -sh-) {
        shift

        args=("$@")

        eval "set -- $(cmd-nice-posix "$@" | sed -e "s/^-- .*//"  -e "s/ -- .*//" -e "s/ --$//")"
        command_terms=("$@")
        INIT_SPAWN="$(cmd-nice-posix "$@")"

        set -- "${args[@]}"

        eval "set -- $(cmd-nice-posix "$@" | sed -e "s/.*-- //")"

    }
    ;;

    -cd ) {
        cd "$2"
        export CWD="$2"
        shift
        shift
    }
    ;;

    -h) { # hide output until interactive
        script_append "log_user 0"
        shift
    }
    ;;

    # Attach an existing tmux session
    -tma) {
        uses_tmux=y
        target="$2"
        shift
        if test -z "$target"; then
            echo "No tmux target given."
            exit 1
        fi

        x="$(tmux display-message -p -t "$target" '#{window_width}')"
        y="$(tmux display-message -p -t "$target" '#{window_height}')"
        y="$(( y + 1 ))"
        : ${x:="2000"}
        : ${y:="1000"}

        tmux_attached_init=y
        script_append "log_user 0"
        shift
    }
    ;;

    # Do the work inside of a tmux session mirroring the current window
    -tmw) {
        uses_tmux=y
        tmux_session="$(pen-tm-new-hidden-link-window "$WIN_ID")"
        tmux_session_qne="$(p "$tmux_session" | input_filter)"
        tmux_attached_init=y
        shift
    }
    ;;

    # Do the work inside of a tmux session
    -tm) {
        uses_tmux=y
        if test -z "$PANE_ID"; then
            echo "No tmux pane. Can't swap pane so not trying."
            exit 1
        fi
        tmux_session="$(TMUX= tmux new -F "#{session_id}" -P -d)"
        tmux_session_qne="$(p "$tmux_session" | input_filter)"
        shift
    }
    ;;

    -tmc) {
        uses_tmux=y
        tmux_session="$(TMUX= tmux new -F "#{session_id}" -P -d)"
        tmux_session_qne="$(p "$tmux_session" | input_filter)"
        tmux_command="$2"
        shift
        shift
    }
    ;;

    -to) {
        timeout="$2"
        shift
        shift
    }
    ;;

    -nto|-notimeout) { # No timeout
        timeout=-1
        shift
    }
    ;;

    -zsh) {
        SHELL="zsh"
        shift
    }
    ;;

    *) break;
esac; done

if ! test "$debug_mode" = "y"; then
    exec 2>/dev/null
fi

read -r -d '' expect_script <<'HEREDOC'

trap {
    set rows [stty rows]
    set cols [stty columns]
    stty rows $rows columns $cols < $spawn_out(slave,name)
} WINCH

proc getctrl {char} {
    set ctrl [expr ("$char" & 01xF)]
    return $ctrl
}

set force_conservative 0
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- $arg
    }
}

set send_human {.4 .4 .2 .5 100}
HEREDOC
script_append "$expect_script"

read -r -d '' expect_script <<HEREDOC
set ::env(PATH) "$PATH"
unset ::env(TTY)
HEREDOC
script_append "$expect_script"

read -r -d '' expect_script <<'HEREDOC'
set timeout -1
match_max 100000
HEREDOC
script_append "$expect_script"

script_append "set SHELL $(cmd-nice-posix "$SHELL")"

if test -z "$INIT_SPAWN"; then
    INIT_SPAWN="$SHELL"
    SHELL=sh
fi

is_stdout_pipe() {
    ! test "$do_unbuffer" = "y" && [[ -p /dev/stdout ]]
}

script_append "log_user 0"
if test "$uses_tmux" = "y"; then
    if test "$tmux_attached_init" = y; then

        script_append "set win [exec pen-tm-new-hidden-link-window \"$target\"]"
        script_append "spawn \"clear-tm\" \"tmux\" \"attach\" \"-t\" '\$win'"
        script_append "sleep 0.1"
    elif [ -n "$tmux_command" ]; then

        script_append "sleep 0.2"

        script_append "spawn \"clear-tm\" \"tmux\" \"respawn-pane\" \"-t\" '$tmux_session_qne' \"-k\" $(cmd-nice-posix "$tmux_command" | pen-bs '][')"

        script_append "spawn \"clear-tm\" \"tmux\" \"attach\" \"-t\" '$tmux_session_qne'"

    else
        script_append "spawn \"clear-tm\" \"tmux\" \"attach\" \"-t\" '$tmux_session_qne'"
        script_append "expect -exact \"sh\""
    fi
elif test "$INIT_SPAWN" = "zsh"; then
    # Backslashed "\$INIT_SPAWN" to substitute it at the end of the x script
    # to add extra arguments to x script to INIT_SPAWN

    script_append "spawn $(cmd-nice-posix "\$INIT_SPAWN")"
    # script_append "expect -exact \"Â»\""
else
    if test -n "$tfstdin" && test -n "$INIT_SPAWN"; then
        INIT_SPAWN="cat $tfstdin | $INIT_SPAWN"
    fi

    if is_stdout_pipe; then
        tfstdout="$(0</dev/null pen-tf txt)"
        INIT_SPAWN="$INIT_SPAWN > $tfstdout"
    fi

    # Backslashed "\$INIT_SPAWN" to substitute it at the end of the x script
    # to add extra arguments to x script to INIT_SPAWN

    script_append "spawn $(cmd-nice-posix "\$INIT_SPAWN")"

fi
script_append "log_user 1"

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -e|--expect) { # Expect something
        input="$(p "$2" | input_filter)"

        script_append "expect -exact \"$input\""
        shift
        shift
    }
    ;;

    -ls) { # loop
        expect_a="$(p "$2" | input_filter)"; shift
        send_a="$2"; shift

        expect_b="$(p "$2" | input_filter)"; shift

        script_append "expect {"
        script_append " $(cmd-nice-posix "$expect_a") { send -- \"$send_a\"; exp_continue }; $(cmd-nice-posix "$expect_b") { } }"

        shift
    }
    ;;

    -y) { # loop
        expect_a="$(p "$2" | input_filter)"; shift

        expect_yn="y/N"

        script_append "expect {"
        script_append " $(cmd-nice-posix "$expect_yn") { send $(cmd-nice-posix "y"); exp_continue }; $(cmd-nice-posix "$expect_a") { } }"

        shift
    }
    ;;

    -erec) { # conditional with raw
        expect_a="$(p "$2" | input_filter)"; shift
        raw="$2"; shift

        expect_b="$(p "$2" | input_filter)"; shift

        script_append "expect {"
        script_append " $(cmd-nice-posix "$expect_b") { }; $(cmd-nice-posix "$expect_a") { $raw } }"

        shift
    }
    ;;

    -esec) { # conditional with send
        expect_a="$(p "$2" | input_filter)"; shift
        raw="$(p "$2" | input_filter)"; shift

        expect_b="$(p "$2" | input_filter)"; shift

        script_append "expect {"
        script_append " $(cmd-nice-posix "$expect_b") { }; $(cmd-nice-posix "$expect_a") { send $(cmd-nice-posix "$raw") } }"

        shift
    }
    ;;

    -z) { # Expect something fuzzy
        input="$(p "$2" | pen-fuzzify-regex | input_filter)"

        script_append "expect -re \"$input\""
        shift
        shift
    }
    ;;

    -raw|-w) {
        script_append_nonliteral "$2"
        shift
        shift
    }
    ;;

    -r) { # Expect a pattern / regex
        input="$(p "$2" | input_filter)"

        script_append "expect -re \"$input\""
        shift
        shift
    }
    ;;

    -u) { # Expect user input
        input="$(p "$2" | input_filter)"

        script_append "expect_user -timeout $timeout \"$input\";"
        script_append "set user_input \"\$expect_out(0,string)\""
        script_append "send -- \"\$user_input\\r\""
        shift
        shift
    }
    ;;

    -ur) { # Expect user input matching regex
        input="$(p "$2" | input_filter)"

        script_append "expect_user -timeout $timeout -re \"$input\";"
        script_append "set user_input \"\$expect_out(1,string)\"" # 1 must be capture group 1. 0 is entire string
        script_append "send -- \"\$user_input\\r\""
        shift
        shift
    }
    ;;

    -p) { # Expect user input password
        input="$(p "$2" | input_filter)"

        script_append "stty -echo"
        script_append "expect_user -timeout $timeout \"$input\""
        script_append "set user_input \"\$expect_out(1,string)\"" # 1 must be capture group 1. 0 is entire string
        script_append "send -- \"\$user_input\\r\""
        script_append "stty echo"
        shift
        shift
    }
    ;;

    -f1) {
        script_append "send -- \\033OP"
        shift
    }
    ;;

    -f2) {
        script_append "send -- \\033OQ"
        shift
    }
    ;;

    -f3) {
        script_append "send -- \\033OR"
        shift
    }
    ;;

    -f4) {
        script_append "send -- \\033OS"
        shift
    }
    ;;

    -up) {
        script_append "send -- \\033OA"
        shift
    }
    ;;

    -down) {
        script_append "send -- \\033OB"
        shift
    }
    ;;

    -right) {
        script_append "send -- \\033OC"
        shift
    }
    ;;

    -left) {
        script_append "send -- \\033OD"
        shift
    }
    ;;

    -pr) { # Expect user input password matching regex

        input="$2"

        script_append "stty -echo"
        script_append "expect_user -timeout $timeout -re \"$input\""
        script_append "set user_input \"\$expect_out(1,string)\"" # 1 must be capture group 1. 0 is entire string
        script_append "send -- \"\$user_input\\r\""
        script_append "stty echo"
        shift
        shift
    }
    ;;

    -c|-scc) { # Send control character
        if test "$2" = "g"; then
            echo "C-g breaks x" 1>&2
        fi

        printf -- "%s" "$2" | grep -o . | awk 1 | while IFS=$'\n' read -r char; do
            (
            exec 0</dev/null
            script_append "send -- $(pen-cchar $char)"
            )
        done

        shift
        shift
    }
    ;;

    -0|-l0|-off) {
        script_append "log_user 0"
        shift
    }
    ;;

    -1|-l1|-on) {
        script_append "log_user 1"
        shift
    }
    ;;

    -m) { # Send meta
        char="$(p "$2" | input_filter)"
        script_append "send -- \\033$char"
        shift
        shift
    }
    ;;

    -cm) { # Send control-meta
        script_append "send -- \\033$(pen-cchar $2)"
        shift
        shift
    }
    ;;

    -sec) { # Send escape char
        script_append "send -- \\033$2"
        shift
        shift
    }
    ;;

    -x) { # system call
        script_append "exec $2"
        shift
        shift
    }
    ;;

    -cl) { # use tmux to clear
        script_append "exec tmux send-keys C-l"
        shift
    }
    ;;

    -esc) { # Send escape char
        script_append "send -- \\033"
        shift
    }
    ;;

    -sl) {
        script_append "sleep $2"
        shift
        shift
    }
    ;;

    -s.2) {
        script_append "sleep 0.2"
        shift
    }
    ;;

    -s1) {
        script_append "sleep 1"
        shift
    }
    ;;

    -sf|-send-file) { # Send contents of file
        input_fp="$2"
        input_fp="$(printf -- "%s" "$input_fp" | pen-bs "\\" | pen-bs "[" | pen-bs "]")"

        script_append "set fp [ exec cat $(cmd-nice-posix "$input_fp") ]"
        script_append "send -- \$fp"
        shift
        shift
    }
    ;;

    -se) { # Send a string and expect a change for each letter
        input="$2"
        printf -- "%s" "$input" | grep -o . | while IFS=$'\n' read -r char; do
            char="$(p "$char" | pen-bs "\\" | pen-bs "[" | pen-bs "]")"
            script_append "send -- $(cmd-nice-posix "$char")"
            script_append "expect \".\""
            script_append "sleep 0.2"
        done
        shift
        shift
    }
    ;;

    -s|-send) { # Send something
        input="$2"

        if test -n "$input"; then
            if test "$input" = "\\"; then
                script_append "send -- \"\\\\\""
            else
                input="$(printf -- "%s" "$input" | pen-bs "\\")"
                # [] must be escaped only once
                script_append "send -- $(cmd-nice-posix "$input" | pen-bs "[" | pen-bs "]")"
            fi
        fi

        shift
        shift
    }
    ;;

    -see) { # Send and expect to see what was sent (slightly more reliable)
        input="$2"
        input="$(printf -- "%s" "$input" | pen-bs "\\" | pen-bs "[" | pen-bs "]")"

        script_append "send -- $(cmd-nice-posix "$input")"
        script_append "expect -exact $(cmd-nice-posix "$input")"
        shift
        shift
    }
    ;;

    -ss|-send-slow) { # Send something

        input="$2"
        input="$(printf -- "%s" "$input" | pen-bs "\\" | pen-bs "[" | pen-bs "]")"

        script_append "set send_slow {1 0.1}"
        script_append "send -s $(cmd-nice-posix "$input")"
        script_append "set send_slow {1 0}"
        shift
        shift
    }
    ;;

    -i) {
        if test "$uses_tmux" = "y"; then
            script_append "sleep 0.2"
            script_append "exit"
        else
            script_append "interact"
        fi
        shift
    }
    ;;

    -o) {
        if test "$uses_tmux" = "y"; then
            attach_tmux=n
            print_output=y
            script_append "sleep 0.2"
            script_append "exit"
        else
            script_append "interact"
        fi
        shift
    }
    ;;

    -a) {
        if test "$uses_tmux" = "y"; then
            attach_tmux=y
            print_output=n
            script_append "sleep 0.2"
            script_append "exit"
        else
            script_append "interact"
        fi
        shift
    }
    ;;

    -exit) {
        script_append "exit"
        shift
    }
    ;;

    -fc) {

        script_append "set force_conservative 0"
        shift
    }
    ;;

    -ts) {

        input="$(p "$2" | input_filter)"
        script_append "spawn \"tmux\" \"send\" \"-t\" \"${tmux_session_qne}\" \"$input\""

        shift
        shift
    }
    ;;

    -tsl) {

        input="$(p "$2" | input_filter)"
        script_append "spawn \"tmux\" \"send\" \"-t\" \"${tmux_session_qne}\" -l \"$input\""

        shift
        shift
    }
    ;;

    -tssl) {

        input="$(p "$2" | input_filter)"
        script_append "spawn \"pen-tm\" \"type\" \"$input\""

        shift
        shift
    }
    ;;

    *) break;
esac; done

if test "$tmux_attached_init" = y; then
    read -r -d '' expect_script <<'HEREDOC'
exec tmux kill-session -t $win
sleep 0.2
close
HEREDOC
else
    read -r -d '' expect_script <<'HEREDOC'
if {[catch {
        expect eof
        close
    } issue]} {
}
HEREDOC
fi

script_append "$expect_script"

# printf -- "%s" "$expect_script" | tv >> "$tf_script"

export SHELL

export WINDOWID

expect_cmd_run() {
    ret=0
    if test "$do_unbuffer" = "y"; then
        unbuffer expect "$@"
        ret="$?"
    else
        exec 3>&1
        exec 4>&2
        exec 1>"$TTY"
        exec 2>"$TTY"

        expect "$@"
        ret="$?"

        exec 1>&3
        exec 2>&4
    fi
    exit "$ret"
}

unansiify() {
    if test "$do_ansi2txt" = "y"; then
        "$@" | pen-ansi2txt
    else
        "$@"
    fi
}

# Now this works:
# echo hi | vipe $(odn nsfa x -E 'v -nls' -s A -i)

if test "$#" -gt 0; then
    CMD="$(cmd "$@")"
    : ${CMD:="$(cmd "$@")"}

    INIT_SPAWN="$INIT_SPAWN $CMD"
    shift "$#"
fi

if printf -- "%s\n" "$INIT_SPAWN" | grep -q -P ' '; then
    INIT_SPAWN="$(pen-nsfa -E "$INIT_SPAWN")"
fi

cat "$tf_script" | sed "s=\$INIT_SPAWN=$INIT_SPAWN=" | sponge "$tf_script"

ret=0
if test "$DRY_RUN" = "y"; then
    cat "$tf_script"
else
    if test "$tmux_attached_init" = y; then
        (
        stty cols $x
        stty rows $y
        LINES=$y COLUMNS=$x unansiify expect_cmd_run -f "$tf_script"
        )
    elif test "$print_output" = "y"; then
        unansiify expect_cmd_run -f "$tf_script" &>/dev/null
    else
        unansiify expect_cmd_run -f "$tf_script"
    fi
    ret="$?"
fi

if test -n "$tfstdout"; then
    cat "$tfstdout"
fi

if ! test "$DRY_RUN" = "y"; then
    if test "$tmux_attached_init" = y; then
        echo "$tmux_session" > /tmp/xx.txt
        test -n "$tmux_session" && tmux kill-session -t "$tmux_session"
    elif test "$attach_tmux" = "y"; then
        tmux attach -t "$tmux_session"
    elif test "$print_output" = "y"; then
        pen-tm catp "$tmux_session"
        tmux kill-session -t "$tmux_session"
    elif test "$uses_tmux" = "y"; then
        tmux swap-pane -s "$tmux_session:1.0" -t "$PANE_ID" \; kill-session -t "$tmux_session"
    fi
fi

if ! test "$debug_mode" = "y"; then
    :
else
    echo
    echo "$tf_script" 1>&2
fi

exit "$ret"
