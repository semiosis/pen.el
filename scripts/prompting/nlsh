#!/bin/bash
export TTY

# NLÂ·SH
# Version 2.0, bash
sn="$(basename "$0")"
: "${PEN_APPNAME:="$sn"}"
export PEN_APPNAME

pena() {
    command pena --pool "$@"
}

penf() {
    command penf --pool "$@"
}

inside-docker-p() {
    test -f /.dockerenv
}

export INSIDE_EMACS

: "${USE_COMINT:="y"}"
: "${USE_TERM:="n"}"

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -nd) {
        export NO_DOCKER=y
        shift
    }
    ;;

    -nt) {
        export NO_TERM=y
        shift
    }
    ;;

    -appname) {
        export PEN_APPNAME="$2"
        shift
        shift
    }
    ;;

    -com|-comint) {
        USE_COMINT=y
        USE_TERM=n
        shift
    }
    ;;

    -term) {
        USE_COMINT=n
        USE_TERM=y
        shift
    }
    ;;

    -nc|-nocomint) {
        USE_COMINT=n
        shift
    }
    ;;

    *) break;
esac; done

export USE_COMINT
export USE_TERM

: "${SHELL:="sh"}"

if { ! test "$NO_DOCKER" = y; } && { ! inside-docker-p; } && { test "$USE_COMINT" = y || test "$USE_TERM" = y; }; then
    if test -z "$OS_OR_LANG" && test "$arity" = 2; then
        if test "$#" -eq 0 && test -f /etc/issue; then
            OS_OR_LANG="$(cat /etc/issue | sed 's/\\.*//' | chomp) ($(basename $SHELL))"
        elif test "$#" -eq 0; then
            OS_OR_LANG="$(pen-readln "OS (and/or shell)")"
        else
            OS_OR_LANG="$@"
        fi
    fi

    if test "$USE_TERM" = y; then
        cterm-docker nlsh -appname "$PEN_APPNAME" -term -os-or-lang "$OS_OR_LANG" -shell "$SHELL" "$@"
    elif test "$USE_COMINT" = y; then
        export NORL=y
        pen sh nlsh -appname "$PEN_APPNAME" -nt -norl -os-or-lang "$OS_OR_LANG" -shell "$SHELL" "$@"
    fi
    # pen sh nvc nlsh "$@"
    exit "$?"
fi

CMD="$(cmd-nice-posix "$@")"

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -norl) {
        NORL=y
        shift
    }
    ;;

    -swapargs) {
        SWAP_ARGS=y
        shift
    }
    ;;

    -sh|-shell) {
        SHELL="$2"
        shift
        shift
    }
    ;;

    -os-or-lang) {
        OS_OR_LANG="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

case "$PEN_APPNAME" in
    nlsh) {
        prompt="pf-nlsh/2";
        header="Enter your commands in natural language.\\nOperating system: $OS_OR_LANG"
    } ;;
    
    nlsc) {
        prompt="pf-code-snippet-from-natural-language/2";
        header="Describe the coding problem that you need a snippet for:";
    } ;;
    
    nlsu|nlsx) {
        prompt="pf-get-an-example-of-the-usage-of-a-function/2";
        SWAP_ARGS="y";
        header="What would you like examples for?\nNL description or function name:";
    } ;;
    
    nlq) {
        prompt="pf-instruct-an-ai-to-do-something/1";
        OS_OR_LANG=nlq;
        header="Enter queries (e.g. 'latest version of node'):"
        template="Show <query>";
        maybe_cm=y;
    } ;;

    *)
esac

arity="$(printf -- "%s" "$prompt" | cut -d '/' -f 2)"

if test "$maybe_cm" = "y"; then
    cm="$@"
    if test "$arity" = 1 && test -n "$cm"; then
        # pena "$prompt" "$cm" | jq -r ".[]"
        penf "$prompt" "$cm"
        exit "$?"
    fi
fi

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
     -nv) {
         # Used by cterm-docker, not comint
         export USE_NVC=y
         USE_COMINT=n
         USE_TERM=y
         shift
     }
     ;;

     *) break;
esac; done

if test -z "$OS_OR_LANG"; then
    if test "$#" -eq 0 && test -f /etc/issue; then
        OS_OR_LANG="$(cat /etc/issue | sed 's/\\.*//' | chomp) ($(basename $SHELL))"
    elif test "$#" -eq 0; then
        OS_OR_LANG="$(pen-readln "OS (and/or shell)")"
    else
        OS_OR_LANG="$@"
    fi
fi

if ! test "$NORL" = "y"; then
    pen-rlwrap "$sn" -norl "$@"
    exit $?
fi

{
case "$PEN_APPNAME" in
    nlsh) {
        nlsh-logo
    }
    ;;

    *) {
        pen_appname_cap="$(p "$PEN_APPNAME" | pen-str uc)"
        echo
        generic-logo "$pen_appname_cap"
        echo
    }
    ;;
esac
} 1>&2

# pf-code-snippet-from-natural-language/2
# pf-nlsh/2

if inside-emacs-comint-p; then
    comint -p "$OS_OR_LANG: " -E "nlsh -appname $PEN_APPNAME -shell $SHELL $CMD"
    exit $?
fi

test -n "$OS_OR_LANG" || {
    echo "Requires 1 argument: OS or lang" 1>&2
    exit 2
}

: "${header:="Enter your commands in natural language.\\nOperating system: $OS_OR_LANG"}"
echo -e "$header"
echo

export USE_CONVERSATION_MODE=y

# rlwrap openai-complete.sh prompts/nlsh-2.prompt "$OS_OR_LANG"

while IFS=$'\n' read -p "${OS_OR_LANG}: " -r nlcommand; do
    if test "$nlcommand" = "!!"; then
        nlcommand="$lastcmd"
        UPDATE=y
    else
        UPDATE=
    fi

    export UPDATE

    if test -n "$template"; then
        nlcommand="$(echo "$template" | template -query "$nlcommand")"
    fi
    case "$arity" in
        1) {
            pena "$prompt" "$nlcommand" | jq -r ".[]"
        }
        ;;

        2) {
            if test "$SWAP_ARGS" = "y"; then
                pena "$prompt" "$nlcommand" "${OS_OR_LANG}" | jq -r ".[]"
            else
                pena "$prompt" "${OS_OR_LANG}" "$nlcommand" | jq -r ".[]"
                # pena "$prompt" "${OS_OR_LANG}" "$nlcommand" | jq -r ". | map(length)[]"
            fi
        }
        ;;

        *)
    esac

    lastcmd="$nlcommand"
done
