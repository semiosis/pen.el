#!/bin/bash

stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

stdin_exists
hasstdin="$?"

if test "$hasstdin" = 0; then
    export USING_STDIN=y

    tf_thing="$(0</dev/null pen-tf -sha thing || echo /dev/null)"
    # This chomp prevents hangs when piping a single space into a prompt function
    cat | sed -z 's/^\s*$//' > "$tf_thing"
    sha="$(sha1sum "$tf_thing" | awk '{print $1}')"
fi

: ${RETRY_TIMEOUT:="15"} # 15 seconds

# Just says that the command being run is run inside ci
export CI_CACHED=y

# ci means "cache it"

IGNORE_DIR=y
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -nd) {
        IGNORE_DIR=y
        shift
    }
    ;;

    -a) {
        asynchronous=y
        shift
    }
    ;;

    -m|-meta) {
        EXTRA_METADATA="_$2"

        # Great for environment variables
        # Otherwise, env vars are ingored
        # ci -meta "$BASENAME" org clink "$@"
        shift
        shift
    }
    ;;

    -dt|-date) {
        : "${date:="$2"}"
        : "${date:="$(date +%d.%m.%y)"}"
        EXTRA_METADATA="${EXTRA_METADATA}_${date}"
        shift
        shift
    }
    ;;

    -today) {
        : "${date:="$(date +%d.%m.%y)"}"
        EXTRA_METADATA="${EXTRA_METADATA}_${date}"
        shift
    }
    ;;

    -f) {
        force_on=y
        shift
    }
    ;;

    -v) {
        CI_VERBOSE=y
        shift
    }
    ;;

    -E) {
        CMD="$2"
        shift
        shift
    }
    ;;

    -t) {
        RETRY_TIMEOUT="$2"
        shift
        shift
    }
    ;;

    -u) {
        UPDATE=y
        shift
    }
    ;;

    -otf) {
        output_tf=y
        shift
    }
    ;;

    --enabled=) {
        PEN_CACHE="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

test "$#" -gt 0 || { echo "ci: no command" | hls red 1>&2; exit 1; }

getpwd() {
    test "$IGNORE_DIR" = "y" || pwd
}

test "$IGNORE_DIR" = "y" || EXTRA_METADATA="$(getpwd)$EXTRA_METADATA"

wdmd5="_$(printf -- "%s\n" "$EXTRA_METADATA" | md5sum | cut -d ' ' -f 1)"

# CMD="$(cmd "$@")"
: "${CMD:="$(cmd "$@")"}"

# This must come after the initial arguments
cache_file_path="/tmp/pen-${wdmd5}-$(printf -- "%s\n" "$CMD" | tr '\n' ' ' | sed 's/ $//' | slugify | hash-cap-string -l 100)$sha.txt"
# echo "$cache_file_path" 1>&2

# CMD="notty $CMD"

# output cat
o_cat() {
    local o_cat_last_arg=
    test "$#" -gt 0 && o_cat_last_arg="${@: -1}"

    if test "$output_tf" = "y" && { ! stdin_exists; } && test -f "$o_cat_last_arg"; then
        printf -- "%s" "$o_cat_last_arg"
    else
        command cat "$@"
    fi
}

# output tee
o_tee() {
    local o_cat_last_arg=
    test "$#" -gt 0 && o_cat_last_arg="${@: -1}"

    # stdin always exists

    if test "$output_tf" = "y" && ! test -f "$o_cat_last_arg"; then
        # stdin goes into tee
        command tee "$@" &>/dev/null
        printf -- "%s\n" "$o_cat_last_arg"
    else
        command tee "$@"
    fi
}

if test "$CI_VERBOSE" = "y"; then
    {
        echo "ci $CMD"
        echo "EXTRA_METADATA=$EXTRA_METADATA" 
        echo "cache_file_path=$cache_file_path" 
        echo
    } | hls blue 1>&2
fi

age() {
    fileMod="$(stat -c %Y -- "$1")"
    if test -n "$fileMod"; then
        echo $(( $(date +%s) - fileMod ))
    else
        return $?
    fi
}

if test "$force_on" = y || test "$PEN_CACHE" = "y"; then
    if test -f "$cache_file_path" && { ! test -s "$cache_file_path"; } && test "$(age "$cache_file_path")" -lt "$RETRY_TIMEOUT"; then
        exit 0
    elif test -f "$cache_file_path" && test -s "$cache_file_path" && ! test "$UPDATE" = y; then
        0</dev/null o_cat "$cache_file_path"
    else
        rm -f "$cache_file_path"
        if test "$asynchronous" = "y"; then
            # TODO Put a delay before this is allowed to run again

            if test "$USING_STDIN" = y; then
                # date
                # cmd1 sh -c "cat $tf_thing | $CMD > $cache_file_path"
                # cmd1 sh -c "cat $tf_thing | $CMD > $cache_file_path" >> /tmp/lsp2.log

                # Both nohup and & are necessary
                # nohup sh -c "cat $tf_thing | $CMD > $cache_file_path" 2>/dev/null &

                nohup tmux neww -n pen-ci -d "cat $tf_thing | $CMD > $cache_file_path" 2>/dev/null &
            else
                eval "$CMD" > "$cache_file_path" &
            fi
        else
            if test "$USING_STDIN" = y; then
                cat $tf_thing | eval "$CMD" | o_tee "$cache_file_path"
            else
                eval "$CMD" | o_tee "$cache_file_path"
            fi
        fi
    fi
else
    # Not caching
    if test "$USING_STDIN" = y; then
        cat $tf_thing | eval "$CMD"
    else
        eval "$CMD"
    fi
fi
