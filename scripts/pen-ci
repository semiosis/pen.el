#!/bin/bash

: "${TMPDIR:="/root/.pen/tmp"}"
: "${TMPDIR:="/tmp"}"

export PS4='+	"$(basename $0)"	${LINENO}	 '
# set -xv

# . $PENEL_DIR/scripts/utils.sh
. $PENELD/scripts/utils.sh

if test "$hasstdin" = 0; then
    USING_STDIN=y

    tf_stdin="$(cat | sed -z 's/^\s*$//' | pen-tf -sha pen-tf-stdin-sha.txt)"
    sha="$(sha1sum "$tf_stdin" | awk '{print $1}')"
fi

: ${RETRY_TIMEOUT:="15"} # 15 seconds

# Just says that the command being run is run inside ci
export INSIDE_CI=y

# ci means "cache it"

IGNORE_DIR=y
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -nd) {
        IGNORE_DIR=y
        shift
    }
    ;;

    -a) {
        asynchronous=y
        shift
    }
    ;;

    -m|-meta) {
        EXTRA_METADATA="_$2"

        # Great for environment variables
        # Otherwise, env vars are ingored
        # ci -meta "$BASENAME" org clink "$@"
        shift
        shift
    }
    ;;

    -dt|-date) {
        : "${date:="$2"}"
        : "${date:="$(date +%d.%m.%y)"}"
        EXTRA_METADATA="${EXTRA_METADATA}_${date}"
        shift
        shift
    }
    ;;

    -today) {
        : "${date:="$(date +%d.%m.%y)"}"
        EXTRA_METADATA="${EXTRA_METADATA}_${date}"
        shift
    }
    ;;

    -f) {
        force_on=y
        shift
    }
    ;;

    -fretry) {
        FORCE_RETRY=y
        shift
    }
    ;;

    -v) {
        CI_VERBOSE=y
        shift
    }
    ;;

    -E) {
        CMD="$2"
        shift
        shift
    }
    ;;

    -t) {
        RETRY_TIMEOUT="$2"
        shift
        shift
    }
    ;;

    -u) {
        UPDATE=y
        shift
    }
    ;;

    -otf) {
        output_tf=y
        shift
    }
    ;;

    --enabled=) {
        PEN_CACHE="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

{
    test "$#" -gt 0 || test -n "$CMD"
} || { echo "ci: no command" | hls red 1>&2; exit 1; }

if test "$NO_CI" = "y"; then
    "$@"
    exit "$?"
fi

getpwd() {
    test "$IGNORE_DIR" = "y" || pwd
}

test "$IGNORE_DIR" = "y" || EXTRA_METADATA="$(getpwd)$EXTRA_METADATA"

wdmd5="_$(printf -- "%s\n" "$EXTRA_METADATA" | md5sum | cut -d ' ' -f 1)"

# CMD="$(cmd "$@")"
: "${CMD:="$(cmd "$@")"}"

# This must come after the initial arguments
cache_file_path_mant="$TMPDIR/pen-${wdmd5}-$(printf -- "%s\n" "$CMD" | tr '\n' ' ' | sed 's/ $//' | slugify | hash-cap-string -l 100)$sha"
cache_file_path="${cache_file_path_mant}.txt"
cache_file_path_exitcode="${cache_file_path_mant}.code"
# echo "$cache_file_path" 1>&2

# output cat
o_cat() {
    local o_cat_last_arg=
    test "$#" -gt 0 && o_cat_last_arg="${@: -1}"

    if test "$output_tf" = "y" && { ! stdin_exists; } && test -f "$o_cat_last_arg"; then
        printf -- "%s" "$o_cat_last_arg"
    else
        command cat "$@"
    fi
}

# output tee
o_tee() {
    # set -xv
    local o_cat_last_arg=
    test "$#" -gt 0 && o_cat_last_arg="${@: -1}"

    # stdin always exists

    if test "$output_tf" = "y" && ! test -f "$o_cat_last_arg"; then
        # stdin goes into tee
        command tee "$@" &>/dev/null
        printf -- "%s\n" "$o_cat_last_arg"
    else
        command tee "$@"
    fi
}

if test "$CI_VERBOSE" = "y"; then
    {
        echo "ci $CMD"
        echo "EXTRA_METADATA=$EXTRA_METADATA" 
        echo "cache_file_path=$cache_file_path" 
        echo
    } | hls blue 1>&2
fi

# $PENELD/scripts/age
age() {
    fileMod="$(stat -c %Y -- "$1")"
    if test -n "$fileMod"; then
        echo $(( $(date +%s) - fileMod ))
    else
        return $?
    fi
}

CMD="$CMD; echo \"\$?\" > \"\$cache_file_path_exitcode\""

# Check whether there is a cache with this path and act accordingly
if test "$force_on" = y || test "$PEN_CACHE" = "y"; then
    if test -f "$cache_file_path" && { ! test -s "$cache_file_path"; } && test "$(age "$cache_file_path")" -lt "$RETRY_TIMEOUT" && ! test "$FORCE_RETRY" = y; then
        echo "Cache checked too soon: $cache_file_path" | hls blue 1>&2
        exit 0
    elif test -f "$cache_file_path" && test -s "$cache_file_path" && ! test "$UPDATE" = y; then
        0</dev/null o_cat "$cache_file_path"
    else
        rm -f "$cache_file_path"
        if test "$asynchronous" = "y"; then
            # TODO Put a delay before this is allowed to run again

            if test "$USING_STDIN" = y; then
                # Both nohup and & are necessary
                # /usr/bin/nohup sh -c "cat $tf_stdin | $CMD > $cache_file_path" 2>/dev/null &

                /usr/bin/nohup tmux neww -n running-pen-ci -d "cat $tf_stdin | $CMD > $cache_file_path" 2>/dev/null &
            else
                eval "$CMD" > "$cache_file_path" &
            fi
        else
            if test "$USING_STDIN" = y; then
                # cmd-nice bash -c "cat $tf_stdin | $CMD" | tv &>/dev/null
                # bash -c "cat $tf_stdin | $CMD" | o_tee "$cache_file_path"
                odn cat "$tf_stdin" | eval "$CMD" | o_tee "$cache_file_path"
            else
                eval "$CMD" | o_tee "$cache_file_path"
            fi
        fi
    fi
else
    # Not caching
    if test "$USING_STDIN" = y; then
        cat $tf_stdin | eval "$CMD"
    else
        eval "$CMD"
    fi
fi

exit_code="$(cat "$cache_file_path_exitcode")"
if test -n "$exit_code"; then
    exit "$exit_code"
fi
