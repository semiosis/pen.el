#!/bin/bash
export TTY

. $SCRIPTS/lib/hs

export MYGIT=~/.pen/documents

is_tty() { [ -t 1 ]; }

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;

    -drop) {
        dodrop=y
        shift
    }
    ;;

    -cd) {
        docd=y
        shift
    }
    ;;

    *) break;
esac; done

name="$1"
type="$2"

cd "$MYGIT"

if test -n "$name"; then
    project_name="$(p "$name" | slugify)"
fi

abortscript() {
    echo "<name> <type>" 1>&2
    exit 1
}

! test -n "$project_name" && abortscript
! test -n "$type" && abortscript

if test -d "$MYGIT/$project_name"; then
    already_exists=0
fi

mkdir -p "$project_name"
cd "$project_name" || abortscript

if ! test -d .git; then
    /usr/bin/git init &>/dev/null
fi

is_tty() { [ -t 1 ]; }

sp-open-main() {
    if is_tty; then
        command sp-open-main
    else
        echo "$(realpath ".")"
    fi
}

sp() {
    last_arg="${@: -1}"
    fp="$last_arg"
    rp="$(realpath "$fp")"
    if is_tty; then
        command sp "$rp"
    else
        echo "$rp"
    fi
}

test "$already_exists" = 0 && ns already exists &>/dev/null

# only run the case if the dir didn't already exist
test "$already_exists" = 0 || case "$type" in
    go) {
IFS= read -r -d '' goscript <<HEREDOC
package main

func main() {
}
HEREDOC
        test -f main.go || printf -- "%s\n" "$goscript" > main.go
        test -f go.mod || go mod init github.com/semiosis/$project_name/m/v2

        test -f main.go && {
            # sp -ic open-main
            sp-open-main
            # sp main.go
            exit "$?"
        }
    }
    ;;

    java) {
        ns "Implment gradle"
        # gradle init --type java-library
    }
    ;;

    hs) {
        # Not sure how to make it work on an existing project. Use rsync instead
        # stack new "$project_name" rio &>/dev/null
        cabal init
        cabal build

        # rsync -a "$project_name/" .
        # rm -rf "$project_name"
    }
    ;;

    py) {
        poetry new "$project_name" &>/dev/null
        rsync -a "$project_name/" .
        rm -rf "$project_name"

        if is_tty; then
            if test -n "$(open-main)"; then
                # sp -ic open-main
                sp-open-main
            else
                sp "${project_name}.py"
            fi
        fi
    }
    ;;

    clojure|clj) {
        # sp "project.clj"
        # ns "$project_name"
        # zcd .
        # eranger "$project_name"
        if test -d "$project_name"; then
            eranger "$project_name"
        else
            ans="$(qa -. edit \
                      -a app \
                      -l library \
                      -">" other)"

            case "$ans" in
                library) {
                    ans=default
                    # vim +/"\`default\` template" ""
                    # $HOME/local/bin/lein 'help' 'tutorial' | vs +/"\`default\` template"
                }
                ;;

                other) {
                    read -ep "clj template: " ans
                } ;;
                *) ;;
            esac
            lein new "$ans" "$project_name"
            p="$(ls)"
            if test -d "$p"; then
                rsync -rtlphx "$p/" .
                rm -rf "$p"
            fi
            zcd .
        fi
        exit $?
        :
    }
    ;;

    *)
esac

unset CWD

if ! is_tty; then
    printf -- "%s\n" "$(pwd)"
    exit 0
else
    if test "$dodrop" = "y"; then
        zcd "$(pwd)"
    elif test "$docd"; then
        # emacs doesn't work well inside of x.
        # Therefore, do a respawn pane
        # tm -S rsp -args vim /

        # zcd .
        # x -sh "zcd ." -e "»" -s "dired -g" -c m -a
        # x -sh "zcd ." -e "»" -s "tm -S rsp -args dired -g" -c m -a

        # mysh="$(nsfa -E "cd $(aqf-nice "$(pwd)"); dired")"
        # x -sh "zcd ." -e "»" -s "tm -S rsp $mysh" -c m -a
        dired
        # pak
    else
        # start-ide || x -sh "zcd ." -e "»" -s "tm -S rsp 'dired -g || ranger'" -c m -a
        # mysh="$(nsfa -E "cd $(aqf-nice "$(pwd)"); dired || ranger")"
        # start-ide || x -sh "zcd ." -e "»" -s "tm -S rsp $mysh" -c m -a
        start-ide || dired || ranger
        # pak
    fi
fi

exit $?
