#!/bin/bash
export TTY

exec 0</dev/null

sn="$(basename "$0")"
sn="$(p "$sn" | sed 's/^pen-//')"

CMD="$@"
bash-message "$sn $CMD"

# Add a sort -k to this

# This script creates logs of things
# Should be used to both record the history and to query the history

# TODO Enable 'hs' to record stdin using "exec < <(cat);"

topdir="$HOME/notes/programs/hs"
topdir="$(realpath "$topdir")"

mkdir -p "$topdir"

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -v) {
        echo_for_gy=y
        shift
    }
    ;;

    *) break;
esac; done

# This breaks fzf
# exec 2>/dev/null

if [ -z "$1" ]; then

    echo "$topdir"
    # help
    wfind "$topdir" | xargs -l1 basename

    exit 0
fi

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -q) {
        IS_QUERY=y
        shift
    }
    ;;

    *) break;
esac; done

category="$(printf -- "%s" "$1" | sed 's/^pen-//')"
shift
set -- "$category" "$@"

CMD="$(cmd-nice-posix "$@" | pen-esc '`!')"
parameters="$CMD"

category="$1"
case "$category" in
    etpb) { category=tpb; } ;;
    playground) { category=pg; } ;;

    *)
esac

dir="$topdir/$category"
shift

if test "$IS_QUERY" = "y"; then
    echo "$dir"
    exit 0
fi

is_tty() {
    # If stout is a tty
    [[ -t 1 ]]
}

case "$sn" in
    hsq) {
        if ! test -d "$dir"; then
            echo "$sn: $dir does not exist" 1>&1
            exit 1
        fi

        wfind "$dir" | sort -n -t . -k3,3 -k2,2 -k1,1 | {
            if is_tty; then
                ifilter
            else
                cat
                # sync
            fi
        }

        # query the history
        exit 0
    }
    ;;

    *)
esac

stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

if stdin_exists; then
    content="$(pen-tf txt)"
fi

mkdir -p "$dir"
wd="$(pwd)"

cd "$dir"
fp="$(date +%d.%m.%y).sh"

full_command="cd $(cmd-nice "$wd"); $(test -n "$content" && p "pen-pl $(cmd-nice "$content") | ") $parameters"

printf -- "%s\n" "$full_command" >> "$fp"

if test "$echo_for_gy" = "y"; then
    pen-pl "export GY_CMD=$(cmd-nice "sh -c $(cmd-nice "$full_command")")"
fi
