#!/bin/bash
export TTY

# nsfa needs to be created from within elisp

export USE_NVC
export USE_TERM

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -bufname) {
        bufname="$2"
        shift
        shift
    }
    ;;

    -e) {
        extra_elisp="$2"
        shift
        shift
    }
    ;;

    -elisp_out) {
        elisp_out=y
        shift
    }
    ;;

    *) break;
esac; done

# If already in emacs term, then start without it
if test -n "$INSIDE_EMACS" || test "$TERM" = dumb; then
    "$@"
    exit "$?"
fi

: ${modename:="$1"}
script="$(pen-nsfa "$@")"
: "${bufname:="$(p term "$@" | slugify | cut -c 1-30)"}"

# neovim cant be run inside emacs without compromising cursor position

if test -n "$extra_elisp"; then
    extra_elisp="$(cmd-nice-posix "$extra_elisp")"
fi

is_tty() { [ -t 1 ] && ! test "$TERM" = "dumb"; }

if is_tty && ! test "$elisp_out" = y; then
    # I need jqs here to force quotes if empty
    elisp="(progn (pen-term (pen-nsfa $(cmd-nice-posix "$(cmd-nice-posix "$@")")) t $(cmd-nice-jq "$modename") $(cmd-nice-jq "$bufname") nil $extra_elisp))"

    # the nsfa must be created on the docker side, so I can't use this
    # elisp="(progn (pen-term $(cmd-nice-posix "$script") t $(cmd-nice-posix "$modename") $(cmd-nice-posix "$bufname")))"

    pente "$elisp"
else
    # I need jqs here to force quotes if empty
    elisp="(progn (pen-term (pen-nsfa $(cmd-nice-posix "$(cmd-nice-posix "$@")")) nil $(cmd-nice-jq "$modename") $(cmd-nice-jq "$bufname") nil $extra_elisp))"

    printf -- "%s" "$elisp" | pavs
fi