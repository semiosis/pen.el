#!/bin/bash

: "${DISPLAY:=":0"}"
export DISPLAY

set -m

input=

tag=
NOTIFY=n
FORCE_OUT=n
MINIMISE_IT=n
UNMINIMISE_IT=n
APPEND=n
TRIM=n
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -p) {
        USE_PAGER=y
        shift
    }
    ;;

    -ub) {
        shift
        unbuffer $0 "$@"
        exit $?
    }
    ;;

    -i) {
        NOTIFY=y
        shift
    }
    ;;

    -P) {
        copy_full_path=y
        shift
    }
    ;;

    -ii) {
        NOTIFY=y
        FORCE_NOTIFY=y
        shift
    }
    ;;

    -t) {
        tag="$2"
        shift
        shift
    }
    ;;

    -a) {
        APPEND=y
        shift
    }
    ;;

    -) {
        FORCE_OUT=y
        shift
    }
    ;;

    -n) {
        # This should work for both when setting the clipboard and when
        # retrieving it
        TRIM=y
        shift
    }
    ;;

    -posix) {
        DO_POSIX=y
        shift
    }
    ;;

    -uq) {
        UNQUOTE_IT=y
        shift
    }
    ;;

    -m) {
        MINIMISE_IT=y
        shift
    }
    ;;

    -u) {
        UNMINIMISE_IT=y
        shift
    }
    ;;

    -s) {
        SILENT=y
        shift
    }
    ;;

    *) break;
esac; done

case "$sn" in
    xcp) {
        DO_POSIX=y
    }
    ;;

    *)
esac

. $SCRIPTS/lib/stdin_exists

copytoboth() {
    IFS= read -rd '' input < <(cat /dev/stdin);typeset -p input &>/dev/null

    printf -- "%s" "$input" | ( xclip -i -f &>/dev/null ) & disown
    printf -- "%s" "$input" | ( xsel -b -i &>/dev/null ) & disown
    printf -- "%s" "$input" | ( xclip -i -selection clipboard -f | tmux load-buffer - ) & disown

    if [ -n "$tag" ]; then
        mkdir -p "$NOTES/clipboard/"
        printf -- "%s" "$input" | awk 1 >> "$NOTES/clipboard/${tag}.txt"
    else
        printf -- "%s" "$input" | awk 1 >> $NOTES/clipboard.txt
    fi
}

is_tty() {
    # If stout is a tty
    [[ -t 1 ]]
}

is_stdout_pipe() {
    # If stout is a pipe
    [[ -p /dev/stdout ]]
}

if test "$1" = "min"; then
    MINIMISE_IT=y
fi

if test "$1" = "umn"; then
    UNMINIMISE_IT=y
fi

if test "$1" = "notify"; then
    NOTIFY=y
fi

if test "$SILENT" = "y"; then
    exec &>/dev/null
fi

# if test "$NOTIFY" = "y" && ! test "$FORCE_NOTIFY" = "y"; then
#     if grep -q -P '^notify_clipboard: off$' $HOME/.myrc.yaml; then
#         NOTIFY=n
#     fi
# fi

if ! stdin_exists && test "$#" -gt 0; then
    if test "$#" -eq 1 && test "$copy_full_path" = "y" && { { ! test -e "$1"; } && test -L "$1"; }; then
        set -- "$@" "$(realpath -s "$1")"
        shift
    elif test "$#" -eq 1 && test "$copy_full_path" = "y" && { test -e "$1" || test -L "$1"; }; then
        # Maybe this case should also have -s
        # i.e. do not resolve
        set -- "$@" "$(realpath "$1")"
        shift
    fi

    if test "$UNQUOTE_IT" = "y"; then
        exec < <(p "$@")
    elif test "$DO_POSIX" = "y"; then
        if test "$#" -eq 1; then
            exec < <(printf -- "%s" "$@")
        else
            exec < <(cmd "$@")
        fi
    else
        if test "$#" -eq 1; then
            exec < <(printf -- "%s" "$@")
        else
            exec < <(cmd-nice "$@")
        fi
    fi
fi

if stdin_exists; then
    # Read without losing trailing newlines
    IFS= read -rd '' input < <(cat /dev/stdin)

    if test "$APPEND" = "y"; then
        IFS= read -rd '' old < <(pen-xc)
        input="$old$input"
    fi

    if test "$TRIM" = "y"; then
        input="$(printf -- "%s" "$input" | chomp)"
    fi
    if test "$MINIMISE_IT" = "y"; then
        input="$(printf -- "%s" "$input" | mnm)"
    fi
    if test "$UNMINIMISE_IT" = "y"; then
        input="$(printf -- "%s" "$input" | umn)"
    fi
    if test "$NOTIFY" = "y"; then
        ns "xc: $input" &>/dev/null
    fi

    if test -n "$input"; then
        tmux display-message -t localhost: "$input"
    fi

    printf -- "%s" "$input" | copytoboth

    if test "$USE_PAGER" = "y" || test "$FORCE_OUT" = "y" || is_stdout_pipe; then
        if test "$USE_PAGER" = "y"; then
            printf -- "%s" "$input" | pager
        else
            printf -- "%s" "$input"
        fi
    fi
else
    if [ -n "$tag" ]; then
        mkdir -p "$NOTES/clipboard/"
        xclip -o -selection clipboard 2>/dev/null | awk 1 >> "$NOTES/clipboard/${tag}.txt"
    else
        xclip -o -selection clipboard 2>/dev/null | awk 1 >> $NOTES/clipboard.txt
    fi

    {
        if test "$TRIM" = "y"; then
            xclip -o -selection clipboard 2>/dev/null | soak | chomp
        else
            xclip -o -selection clipboard 2>/dev/null
        fi
    } | {
        if test "$UNMINIMISE_IT" = "y"; then
            umn
        else
            cat
        fi
    } | {
        if test "$USE_PAGER" = "y"; then
            pager
        else
            cat
        fi
    }
fi

# if target STRING not available
if [ $? -ne 0 ]; then
    printf -- "%s" "" | copytoboth
fi
