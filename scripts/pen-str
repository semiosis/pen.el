#!/bin/bash

# A string preprocessor/postprocessor library for pen.el
# With an emphasis on string transformations, rather than characters.

sn="$(basename "$0")"

stdin_exists() {
    {
    ! [ -t 0 ] && \
    ! test "$(readlink /proc/$$/fd/0)" = /dev/null  && \
    ! test "$(readlink /proc/$$/fd/0)" = "$(readlink /proc/$$/fd/1)"
    # stdin may be redirected to the tty, but  will continue to say false (due to a bash bug)
    # So test to make sure 0 does not point to 1
    } &>/dev/null
}

sn="$(p "$sn" | sed 's/^pen-//')"

case "$sn" in
    tine|tine|field|all-caps|caps|uppercase|uc|lc|wrl*|wrla|wrla1|awrl) {
        f="$sn"
    }
    ;;

    repeat-string) {
        f=rs
    }
    ;;

    *) {
        f="$1"
        shift
    }
esac

# Interpret newlines, etc
p_interpret () {
    {
        i=1
        while [ "$i" -lt "$#" ]; do
            eval ARG=\${$i}
            printf -- "%s " "$ARG"
            i=$((i + 1))
        done
        eval ARG=\${$i}
        printf -- "%s" "$ARG"
    } | sed 's/\\n/\n/g'
}

case "$f" in
    indent) {
        level="$1"; : ${level:="1"}
        # printf -- "%s\n" "$level"
        r="$(zsh -c "printf '\t%.0s' {1..$level}")"

        sed -u "s/^/${r}/"
    }
    ;;

    all-caps|caps|uppercase|uc) {
        tr '[:lower:]' '[:upper:]'
    }
    ;;

    split) {
        delim="$1"
        : ${delim:=" "}

        sed -e "s/./&$delim/g" -e "s/$delim\$//"
    }
    ;;

    join) {
        delim="$1"
        : ${delim:=" "}

        sed -z "s~\n~$delim~g" | sed "s/$delim\$//"
    }
    ;;

    lc) {
        tr '[:upper:]' '[:lower:]'
    }
    ;;

    # Number of characters ignoring double-width chars
    length|len|clen) {
        sed 's/./-/g' | wc -c
    }
    ;;

    chomp|chomp-last-line)
        perl -pe 'chomp if eof'
    ;;

    random-line) {
        awk 'BEGIN { "date +%N" | getline seed; srand(seed) } { l[NR]=$0 } END { print l[int(rand() * NR + 1)] }'
    }
    ;;

    rs|repeat-string) {
        count="$1"
        shift

        : ${count:="1"}

        if stdin_exists; then
            IFS= read -rd '' input < <(cat /dev/stdin)
        else
            input="$1"
        fi

        for (( i = 0; i < count; i++ )); do
            printf -- "%s" "${input}"
        done
    }
    ;;

    capfirst) {
        sed 's/[a-zA-Z]/\u&/'
    }
    ;;

    capveryfirst) {
        sed -z 's/[a-zA-Z]/\u&/'
    }
    ;;

    capsent|capitalize-sentences) {
        sed 's/[a-z]\+/\u&/'
    }
    ;;

    cap|capitalize) {
        sed 's/[^ _-]*/\u&/g'
    }
    ;;

    rl|repeat-lines) {
        n="$1"; : ${n:="1"}

        awk 1 | awk '{while (c++<'$n') printf $0}'
    }
    ;;

    q|quote) {
        q
    }
    ;;

    lf|last_field) {
        awk '{print $NF}'
    }
    ;;

    field|col|column) {
        delim='[ \t\n]+'

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -d) {
                delim="$2"
                shift
                shift
            }
            ;;

            *) break;
        esac; done

        field="$1"
        awk -F "$delim" '{print $'$field'}'
    }
    ;;

    sort-anum|sort-alphanumeric) {
        sort -b -d
    }
    ;;

    uniq) {
        awk '!seen[$0] {print} {++seen[$0]}'
    }
    ;;

    dedup) { # without reordering / sorting
        awk '{print(NR"\t"$0)}' | sort -t$'\t' -k2,2 | uniq -u --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'
    }
    ;;

    rf|remove_field) {
        field="$1"
        ofs=" \t "
        awk -F' *\t *' -v myofs="$ofs" 'BEGIN{OFS=myofs}{$'$field' = ""; print $0}'
    }
    ;;

    # onelineify and unonelineify are not entirely reversible. They're just meant for prompt design
    onelineify) {
        sed -z 's/\n/\\n/g'
    }
    ;;

    unonelineify) {
        sed -z 's/\\n/\n/g'
    }
    ;;

    # These are more reversible
    onelineify-safe) {
        pen-encode-string | sed -z 's/\n/\\n/g'
    }
    ;;

    unonelineify-safe) {
        sed -z 's/\\n/\n/g' | pen-decode-string
    }
    ;;

    commalist2list) {
        sed -z -e "s/^\\s*//" -e "s/\\s*$//" |
        sed -z -e "s/, /\\n/g" -e "s/,$//" |
            uniqnosort
    }
    ;;

    list2args) {
        sed -e 's/^/"/' -e 's/$/"/' |
        pen-str join ' '
    }
    ;;

    remove-trailing-whitespace) {
        sed -z -e "s/\s*\$//" -e "s/\n*\$//"
    }
    ;;

    generic-interpreter-tidy-result) {
        pen-str remove-trailing-whitespace | { awk 1; echo -n "Input: "; }
    }
    ;;

    ruby-gen-next-user-prompt) {
        IFS= read -rd '' in < <(cat | pen-log ruby-gen-next-user-prompt);typeset -p in &>/dev/null

        prompt_number="$(printf -- "%s" "$in" | awk 1 | tac | sed -n "/^2.7.0 :/{s/^2.7.0 :\\([0-9]*\\).*/\\1/p;q}")"
        new_prompt_number="$(printf "%03d" $(( prompt_number )))"

        printf -- "%s" "$in" | awk 1 | sed '$d'
        echo -n "2.7.0 :$new_prompt_number > "
    }
    ;;

    python-gen-next-user-prompt) {
        IFS= read -rd '' in < <(cat | tee /tmp/python-gen-next-user-prompt);typeset -p in &>/dev/null

        prompt_number="$(printf -- "%s" "$in" | awk 1 | tac | sed -n "/^Out\\[/{s/^Out\\[\\([0-9]*\\)\\]:.*/\\1/p;q}")"
        new_prompt_number="$(( prompt_number + 1 ))"

        printf -- "%s" "$in" | awk 1
        echo -n "In [$new_prompt_number]: "
    }
    ;;

    bash-scrape-last-prompt) {
        # shane@mele:~/var/smulliga/source/git/semiosis/pen.el/scripts$
        # [jonyive@remote.apple.com ~]$

        IFS= read -rd '' in < <(cat);typeset -p in &>/dev/null
        :
        # | tail -n 1
        last_prompt_user_host_dir_in_dir_type_1_and_2="$( p "$in" | grep -P "^\\[?[^@ ]+@[^$]+ *[\\]$]" | sed 's/\$.*//' | pen-scrape "[^[@ ]+@[^$\\]]+" | tr ' ' : | tail -n 1 )"

        p "$last_prompt_user_host_dir_in_dir_type_1_and_2"
    }
    ;;

    # I don't really want to generate the last user prompt
    bash-gen-next-user-prompt) {
        IFS= read -rd '' in < <(cat | tee /tmp/bash-gen-next-user-prompt);typeset -p in &>/dev/null

        full_context="$( p_interpret "$FINAL_PROMPT" | pen-str unonelineify-safe; printf -- "%s" "$in"; )"

        last_prompt_user_host_dir="$( printf -- "%s" "$full_context" | pen-str bash-scrape-last-prompt )"

        # Because the stop sequence is i.e. @mele, the user is the last thing, but not necessarily
        # Because it could be an extra bad gen or a human gen
        last_line="$(p "$full_context" | tail -n 1)"
        second_to_last_line="$(p "$full_context" | sed 'x;$!d')"

        # Changing user is not easy. Only do it if the last command was a
        # 'login'. But in that case, I should rather be using an alternative 'login' prompt
        if printf -- "%s\n" "$last_line" | grep -q -P "^[^@:$ ]+$" && printf -- "%s\n" "$second_to_last_line" | grep -qP "\\blogin\\b"; then
            new_user="$last_line"
            new_user="$(p "$new_user" | sed 's/^\[//')"
        else
            new_user="$(p "$last_prompt_user_host_dir" | sed -n "s/^[^a-z]*\\([^@ ]\\+\\)@.*/\\1/p")"
        fi
        # new_host="$(p "$last_prompt_user_host_dir" | pen-scrape "[^:$ ]+$")"
        new_host="$(p "$last_prompt_user_host_dir" | cut -d '@' -f 2 | cut -d : -f 1)"

        # TODO Also detect ssh hostname, so can change host based on that

        # prompt_number="$(printf -- "%s" "$in" | awk 1 | tac | sed -n "/^Out\\[/{s/^Out\\[\\([0-9]*\\)\\]:.*/\\1/p;q}")"
        # new_prompt_number="$(( prompt_number + 1 ))"

        printf -- "%s" "$in" | awk 1 | sed '$d'

        time="$(date +%T)"

        # TODO infer the directory -- scrape the last cd
        dir=""

        if printf -- "%s\n" "$second_to_last_line" | grep -q -P '\$ cd [^;&]+$'; then
            dir="$(p "$second_to_last_line" | sed -n "s/.*\\\$ cd \\(.*\\).*/\\1/p")"
        elif printf -- "%s\n" "$second_to_last_line" | grep -q -P '\$ cd$'; then
            dir="~"
        else
            dir="$(p "$last_prompt_user_host_dir" | cut -d : -f 2)"
        fi

        : "${dir:="."}"

        # echo -n "${last_prompt_user_host_dir}$ "
        echo -n "${new_user}@${new_host}:$dir\$ "
        # echo -n "In [$new_prompt_number]: "
    }
    ;;

    has-starting-specified-whitespace) {
        ws="$1"
        sed -n -z "/^$(pen-sqne "$ws")/p" | grep -qP .
    }
    ;;

    if-starts-with-whitespace) {
        ws="$1"
        sed -n -z "/^$(pen-sqne "$ws")/p"
    }
    ;;

    remove-starting-specified-whitespace) {
        ws="$1"
        sed -z "s/^$(pen-sqne "$ws")//"
    }
    ;;

    newline-if-empty) {
        IFS= read -rd '' in < <(cat);typeset -p in &>/dev/null
        if test -z "$in"; then
            echo
        else
            printf -- "%s" "$in"
        fi
    }
    ;;

    trailing-empty-line-if-not-empty) {
        IFS= read -rd '' in < <(cat);typeset -p in &>/dev/null
        if test -n "$in"; then
            printf -- "%s\n\n" "$in"
        fi
    }
    ;;

    remove-starting-and-trailing-whitespace) {
        sed -e 's/^\s*//' -e 's/\s*$//'
    }
    ;;

    tidy-prose-input) {
        pen-str join ' ' |
            pen-str remove-starting-and-trailing-whitespace |
            sed 's/ \+/ /g'
    }
    ;;

    maybe-delete-last-line) {
        IFS= read -rd '' in < <(cat);typeset -p in &>/dev/null
        lines="$(printf -- "%s" "$in" | wc -l)"
        if test "$lines" -gt 1; then
            printf -- "%s" "$in" | sed '$d'
        else
            printf -- "%s" "$in"
        fi
    }
    ;;

    remove-leading-and-trailing-newlines) {
        sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba'
    }
    ;;

    shell-commentify) {
        pen-str tidy-prose-input | sed "s/\\.\$//" | pen-wrap 50 | sed "s/^/# /"
    }
    ;;

    wrap) {
        width="$1"
        : "${width:="80"}"

        pen-c strip-unicode |
            sed 's/^\(\s\+\)//' |
            pen-str join ' ' |
            sed 's/ \+/ /g' |
            wrlp -E "pen-wrap $width; echo" |
            sed 's/^\s\+$//' |
            sed "s/\s\+/ /g" |
            sed '${/^$/d;}'
    }
    ;;

    nl) {
        # nl | sed 's/^\s*\([0-9]*\)	/\1: /'
        q -fl | nl | sed 's/^\s*//'
    }
    ;;

    last-word) {
        sed -z "s/.* \([a-zA-Z]\\+\\)[^a-zA-Z]*$/\\1/"
    }
    ;;

    unwhitespacify) {
        pen-str join ' ' | sed 's/ \+/ /g'
    }
    ;;

    clean-alephalpha) {
        sed -z 's/<\(The\|A\)\? *PERSON *>/ a person /g' |
            sed -z 's/PERSON>/ a person /g' |
            sed -z -e "s/''//g" -e 's/``//g' -e 's/ \././g' -e 's/ \,/,/g' |
            sed -z 's/ \+/ /g' |
            sed -z -e 's/< / /g' -e 's/ >/ /g' -e "s/ 's/'s/g"
    }
    ;;

    summary) {
        # TODO Use prompting to summarize
        cat
    }
    ;;

    remove-non-alphanumeric) {
        tr -cd '[:alnum:]._ -'
    }
    ;;

    garbify) {
        pen-c ascify | pen-str unwhitespacify | pen-str remove-non-alphanumeric | pen-str wrap 60 | sed -e 's/^\s*//'
    }
    ;;

    words) {
        n="$1"
        : "${n:="20"}"
        pen-str garbify | pen-str join ' ' | cut -d ' ' -f "1-$n"
    }
    ;;

    one-of) {
        input="$(cat)"
        finds="$1"

        matches="$(printf -- "%s\n" "$input" | sed -n "/^$finds\$/p")"
        [ -n "$matches" ]

        exit $?
    }
    ;;

    translate-to-english-1-json) {
        IFS= read -r original_language
        IFS= read -rd '' output < <(cat);typeset -p output &>/dev/null

        original_language="$(p "$original_language" | cut -d : -f 2)"
        output="$(p "$output" | sed 1d)"

        printf -- "%s" "$output" | jq --raw-input --slurp --arg original_language "$original_language" "{ \"original_language\": \$original_language, \"output\": . }"
    }
    ;;

    max-double-spaced-no-trailing) {
        # Only remove trailing, not leading
        sed 's/\s\+$//' | sed ':a;N;$!ba;s/\n\n\+/\n\n/g'
    }
    ;;

    trim-max-chars) {
        n="$1"
        : "${n:="100"}"
        head -c ${n}
    }
    ;;

    pen-tine) {
        # abbrev: tine

        # Use this in conjunction with commands such as sed so I can do powerful
        # "grep -v"-like commands

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            "") { shift; }; ;;
            -e) {
                ECHO=y
                shift
            }
            ;;

            *) break;
        esac; done

        if test "$ECHO" = "y"; then
            tee >(cat) | grep -q .
        else
            grep -q .
        fi
    }
    ;;

    *)
esac
