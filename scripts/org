#!/bin/bash
export TTY

. $SCRIPTS/libraries/bash-library.sh

# Organisational tools and org-mode related scripts


get_titles=y
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -no-titles) {
        get_titles=n
        shift
    }
    ;;

    *) break;
esac; done


get_link() {
    (
    exec 0</dev/null

    if test "$get_titles" = "y"; then
        # Timeout here was causing problems
        # I guess that a timeout of 10 is still not enough
        # timeout 10 ci web title "$@"
        # in-pen ci -nd apply-n tv web title "$@"
        # in-pen ci -nd apply-n tv env
        # in-pen apply-n tv which python
        oci -f -nd in-pen web title "$@"
    else
        # p "$@" | sed 's/^https\?:\/\///'

        p "$@" | xargs basename
    fi
    )
}


opt="$1"
shift

case "$opt" in

    # To debug it:
    # upd ci web title "https://www.youtube.com/watch?v=RKelBDsTae4"
    # upd wget -qO- "https://www.youtube.com/watch?v=RKelBDsTae4" | scrape-title-from-html | recode html.. | c ascify

    clink|create-link) {
        GOOGLE_LINK=n
        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -g) {
                GOOGLE_LINK=y
                shift
            }
            ;;

            -l) {
                # flush after each line
                LINEWISE=y
                shift
            }
            ;;

            -u) {
                export UPDATE=y
                shift
            }
            ;;

            *) break;
        esac; done

        uris="$1"

        {
            if test "$LINEWISE" = "y"; then
                cat
            else
                if [ -z "$uris" ] && stdin_exists; then
                    uris="$(cat)"
                fi

                test -n "$(lit "$uris" | xurls)"
                has_urls="$?"

                lit "$uris" | {
                    if test "$has_urls" -eq 0; then
                        xurls
                    else
                        # It might be file paths
                        cat
                    fi
                }  | awk 1 | {
                    cat
                    # unarchive-slack-message-url
                } 
            fi
        } | while read -r uri; do
            (
            exec 0</dev/null

            unminimised="$(p "$uri" | umn)"

            if test "$GOOGLE_LINK" = "y"; then
                printf -- "%s\n" "[[gr:$uri]]"
            elif lit "$uri" | grep -q -P '^https?://'; then
                # The : must be escaped so URLs can be placed in an org
                # definition
                time="$(printf -- "%s" "$uri" | sed -n '/&t=/{s/.*&t=\([0-9]\+\)/\1/p}')"
                if test -n "$time"; then
                    time="$(humantime "$time")"
                fi
                title="$(get_link "$uri" | c ascify | tr -d '\n' | sed 's/ \+/ /' | sed 's/\(\[\|\]\)/ /g' | tr ')' '}' | tr '(' '{' | sed 's/::/=::=/' | strip-unicode)"
                if [ -z "$title" ]; then
                    title="$(p "$uri" | sed 's/^https\?:\/\///')"
                fi
                dmn="$(0</dev/null xurls -d "$uri")"
                if test -n "$time"; then
                    title="$title @time: ${time}"
                fi
                title="$(printf -- "%s" "$title" | sed 's/ - YouTube//')"
                printf -- "%s\n" "[[$uri][$dmn: $title]]"
            elif test -e "$unminimised"; then
                bn="$(basename "$uri")"
                dn="$(dirname "$uri")"
                if ! test "$dn" = "."; then # if there is a dirname, use it
                    dn="$(basename "$dn")"
                    dbn="$dn/$bn"
                else
                    dbn="$bn"
                fi
                printf -- "%s\n" "[[$unminimised][$dbn]]"
            else
                printf -- "%s\n" "$uri"
            fi

            )
        done
        exit 0
    }
    ;;

    manual) {
        td_conv="$(mktemp -t -d td_convXXXXXX || echo /dev/null)"

        cd "$td_conv"

        fp="$(locate org.texi | head -n 1)"
        
        # texi2html org.texi org.html
        # pandoc -t org org.html -o org.org
    }
    ;;

    -e|e|edit|emacs) {
        CMD="$(
        for (( i = 1; i < $#; i++ )); do
            eval ARG=\${$i}
            printf -- "%s" "$ARG" | q
            printf ' '
        done
        eval ARG=\${$i}
        printf -- "%s" "$ARG" | q
        )"

        # echo "e -D default -s org c $CMD"
        # exit $?

        # This doesn't work anymore
        # eval "e -D default -s org c $CMD"

        eval "og $CMD"
        exit $?
    }
    ;;

    *)
esac

if [ -f "$opt" ]; then
    eval "$0 edit $CMD"
    exit $?
fi
