#!/bin/bash
export TTY

export PENCONF="$HOME/.pen"
export PENELD="$EMACSD/pen.el"

# See also: 'F' find commands

# Filter commands

# Need
# - Find non-binary files
# - Find binary files (binary != executable)

# If stout is a tty
is_stdout_tty() {
    [[ -t 1 ]]
}

stdin_exists() {
    ! [ -t 0 ]
}

sn="$(basename "$0")"
case "$sn" in
    ffzf) {
        opt=filter-with-fzf
    }
    ;;

    *) {
        opt="$1"
        shift
    };;
esac

HAS_STDIN=
if stdin_exists; then
    HAS_STDIN=y
    tf_input="$(pen-ux tf input || echo /dev/null)"
    trap "rm \"$tf_input\" 2>/dev/null" 0
fi

case "$opt" in
    cat|cat-file)
        file="$1"
        cat "$file"
    ;;

    filter-things) {
        fp="$1"

        if test "$HAS_STDIN" = "y"; then
            cat > "$tf_input"
        fi

        if ! [ -f "$fp" ] && [ -s "$tf_input" ]; then
            fp="$tf_input"
        fi

        set pipefail
        filter="filter-things.sh"

        ret="$?" # catches fzf cancel exit = 130

        if [ -n "$filter" ]; then
            cat "$fp" | eval "$filter" | {
                if is_stdout_tty; then
                    pen-v -nad
                else
                    cat
                fi
            }
        fi

        exit "$ret"
    }
    ;;

    filter-with-fzf) {
        fp="$1"

        if test "$HAS_STDIN" = "y"; then
            cat > "$tf_input"
        fi

        if ! [ -f "$fp" ] && [ -s "$tf_input" ]; then
            fp="$tf_input"
        fi

        set pipefail
        filter="$(cat "$PENELD/config/filters.sh" | pen-mfz -C -nm -p -pscript "true; eval 'cat $fp | ' pen-timeout 4 {}" -pcomplete)"
        ret="$?" # catches fzf cancel exit = 130

        if [ -n "$filter" ]; then
            cat "$fp" | eval "$filter" | {
                if is_stdout_tty; then
                    pen-v -nad
                else
                    cat
                fi
            }
        fi

        exit "$ret"
    }
    ;;

    urls|urls-only) {
        # Not implemented yet

        cat
    }
    ;;

    d|donly|dirs|dirs-only) {
        pen-scrape-dirs-fast.sh
    }
    ;;

    f|fonly|files|files-only) {
        pen-scrape-files-fast.sh
    }
    ;;

    xonly|executables|exes-only) {
        awk 1 | pen-str cc | pen-str uniq | while read -r line; do
            if which "$line" &>/dev/null; then
                printf "%s\n" "$line"
            fi
        done
    }
    ;;

    which) {
        if stdin_exists; then
            input="$(cat)"
        else
            input="$1"
        fi
        which -a "$input" | pen-v

        exit 0
    }
    ;;

    amp|awk-match-pipe) {
        pattern="$1"
        shift
        # annotation="$1"
        # shift

        p "$@" >> /tmp/cmd.sh

        # his -c 1 '.*'

        CMD="$(cmd-nice-posix "$@")"

        gawk -v cmd="$CMD" "/$pattern/ { print \$0 |& cmd; cmd |& getline; } { print; system(\"\") }"
    }
    ;;

    bind1-with-fzf) {
        file="$1"

        cat "$PENELD/config/filters.sh" | pen-f z

        exit 0
    }
    ;;

    # I should use this often
    z|fzf-if-tty) {
        # echo hi | pen-f z
        # echo hi | pen-f z | cat

        if is_stdout_tty; then
            fzf
        else
            cat
        fi
    }
    ;;

    *) { # If it doesn't work, try it in 'F' (find)
        F "$@"
    }
    ;;
esac
