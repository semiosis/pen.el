#!/bin/bash

( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

unset CWD

SHELL=bash

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -p) {
        prompt="$2"
        shift
        shift
    }
    ;;

    -vt|-vt100) {
        export TERM=vt100
        shift
    }
    ;;

    -xt) {
        export TERM=xterm
        shift
    }
    ;;

    -c) {
        CMD="$2"
        shift
        shift
    }
    ;;

    -shell|-sh) {
        SHELL="$2"
        shift
        shift
    }
    ;;

    -zsh) {
        SHELL=zsh
        shift
    }
    ;;

    -bash) {
        SHELL=bash
        shift
    }
    ;;

    -sh) {
        SHELL=sh
        shift
    }
    ;;

    -o) {
        # This only works if x also uses -tmc rather than -sh
        print_output=y
        shift
    }
    ;;

    -C) {
        shift
        CMD="$(cmd-nice-posix "$@")"
        shift "$#"
    }
    ;;

    *) break;
esac; done

stdin_exists() {
    ! [ -t 0 ] && ! test "$(readlink /proc/$$/fd/0)" = /dev/null
}

# ls -la /proc/$$/fd | tv &>/dev/null

# Lines. Expect '$' after running each

if stdin_exists; then
    input_fp="$(cat | pen-tf xsh)"
    exec <&1
else
    if test "$#" -gt 0 && test -f "$1"; then
        input_fp="$1"
    elif test -n "$CMD"; then
        input_fp="$(odn pen-tf xsh)"
        echo "$CMD" >> "$input_fp"
    elif test "$#" -gt 0; then
        CMD="$(cmd-nice-posix "$@")"
        input_fp="$(odn pen-tf xsh)"
        echo "$CMD" >> "$input_fp"
    else
        exit 1
    fi
fi

CMD="$(cmd "$@")"

# So it can run from a shebang
cat "$input_fp" | {
    sed -e "/^\s*$/d" -e "/^\s*#/d" |
    sed -z "s/\\s*\\\\\n\\s*/ /g"
} | sponge "$input_fp"

if test "$#" -gt 0; then
    cat "$input_fp" | sed "s=\"\$@\"=$CMD=g" | sponge "$input_fp"
fi

: ${prompt:="\\([#\$] \\|(»|>>>)\\)"}

# -tmc will respawn the outer tmux pane when the scripts ends
# This is not what I want

if test "$print_output" = "y"; then
    end_function=" -o "
else
    end_function=" -i "
fi

# -allowtm is needed for rustlings in pen

sponge "$input_fp" <<HEREDOC
x \\
    -allowtm \\
    -h -d \\
    -sh "$SHELL" \\
    -nto \\
$(
{
    cat "$input_fp" | awk1 | while IFS=$'\n' read -r line; do
        # Sadly this doesn't really do the full trick.
        if pl "$line" | grep -q -P '^\s*interact$'; then
            echo "    $end_function \\"
        else
            # >>> and ... are for python. No need for ...
            echo "    -r \"$prompt\" \\"
            echo "    -s $(cmd-nice-posix "$line") \\"
            echo "    -c m \\"
            # echo "    -e \"\$\" \\"
        fi
    done
    echo "    -r \"\\([#\$] \\|»\\)\" \\"
} | sed 's/\([`$]\)/\\\1/g' | awk1 | sed '$d'
)
    $end_function
HEREDOC

 # | sed '${/^$/d;}' | chomp

# exec <&1

echo "$input_fp" | pen-ds -s xshlast

bash "$input_fp"
