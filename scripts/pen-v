#!/bin/bash

test -d "/root/.pen/tmp" && : "${TMPDIR:="/root/.pen/tmp"}"
test -d "/tmp" && : "${TMPDIR:="/tmp"}"

# eval 'echo -e -n "export PS4=\"+\t\\\"$(basename $0)\\\"\t${LINENO}\t\""'
# set -xv

vimevalcmd() {
    cmd="$1"

    # debug
    echo "$cmd" | hls darkteal nearblack 1>&2

    eval "$cmd"
}

# env | tv &>/dev/null

export OPENAI_API_KEY
export GY_CMD
export SHELL=bash
export VIMRUNTIME=

. $PENELD/scripts/utils.sh

parent_sn="$(ps -o comm= $PPID)"

. `which pen-bash-library.sh`

bin="vim --not-a-term"

test "$#" -gt 0 && last_arg="${@: -1}"
if test "$last_arg" = "-"; then
    shift
fi

extra_commands="silent! echom"

ANSI=n
bn="$(basename "$0")"
case "$bn" in
    *avim|*ansivim) {
        ANSI=y
    }
    ;;

    *)
esac

fargs=()

NOCOLOR=
: ${NOAUTOCHDIR:=""}
LOCATE_IT=
GLOBAL_SYNTAX_HIGHLIGHTING=y
while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    --) {
        shift
        break
    }
    ;;

    "") { shift; }; ;;
    -p) {
        bin="vimpager"
        shift
    }
    ;;

    -2) {
        export TERM=screen-2color
        shift
    }
    ;;

    -u) {
        vimrc="$2"
        shift
        shift
    }
    ;;

    -cols) {
        n_columns="$2"
        shift
        shift
    }
    ;;

    -ac|-colvim) {
        n_columns="$(calc-best-n-columns)"
        shift
    }
    ;;

    -nsl|-nls) {
        extra_commands+="|set ls=0"
        shift
    }
    ;;

    -nf) {
        NEW_FILE=y

        last_arg="${@: -1}"
        nf_dn="$(printf -- "%s" "$last_arg" | sed -n 's=\(.*/\).*=\1=p')"
        nf_fp="$last_arg"

        test -n "$nf_dn" && mkdir -p "$nf_dn"
        touch "$nf_fp"

        shift
    }
    ;;

    -vimdir) {
        vimdir="$2"
        extra_commands+="|let &rtp = substitute(&rtp, \"$HOME/\.vim\", $(cmd-nice-posix "$vimdir"), \"g\")"
        shift
        shift
    }
    ;;

    -l) {
        LOCATE_IT=y
        shift
    }
    ;;

    -jl) {
        JUSTIFY_LEFT=y
        shift
    }
    ;;

    -ka|-kill-all) {
        {
            ps -ef | grep -P "[0-9][0-9]:[0-9][0-9]:[0-9][0-9] vim" | grep -v grep
            ps -ef | grep "/local/bin/vim$" | grep -v grep
            ps -ef | grep -P "\b/scripts/v\b" | grep -v grep
            ps -ef | grep "/local/bin/vim -c" | grep -v grep
        } | field 2 | xargs kill
        exit 0
    }
    ;;

    -d) { # vimdiff
        bin="vd"
        shift
    }
    ;;

    -compile) {
        cd $HOME/source/git/vim-ace

        ./configure --prefix=$HOME/local \
            --with-features=huge \
            --enable-cscope \
            --enable-multibyte \
            --with-x \
            --enable-rubyinterp=yes \
            --enable-perlinterp=yes \
            --enable-pythoninterp=yes

        make -j8
        sudo make install
        exit 0
    }
    ;;

    -nc) {
        NOCOLOR=y
        shift
    }
    ;;

    -c) {
        if ! test "$parent_sn" = "rtcmd"; then
            extra_commands+="|$2"
        fi
        shift
        shift
    }
    ;;

    -C) {
        # fargs+=("$1" "$2")
        fargs+=("-c" "$2")
        shift
        shift
    }
    ;;

    -pc) {
        extra_commands_prepend+="$2|"
        shift
        shift
    }
    ;;

    -ns|-noswap) {
        extra_commands+="|set noswapfile"
        shift
    }
    ;;

    -num) {
        extra_commands+="|silent! call ToggleOpt(\"number\")"
        shift
    }
    ;;

    -wrap) {
        extra_commands+="|silent! call ToggleOpt(\"wrap\") | silent! call ToggleOpt(\"number\")"
        shift
    }
    ;;

    -ft) {
        extra_commands+="|set ft=$2"
        shift
        shift
    }
    ;;

    -rt) {
        rt_cmd="$2"
        extra_commands+="|call RTCmdSetup($(cmd-nice-posix "$rt_cmd" | pen-bs '|'))"
        shift
        shift
    }
    ;;

    -nad|-noautochdir) {
        NOAUTOCHDIR=y
        shift
    }
    ;;

    -a|-A|-ansi) {
        ANSI=y
        shift
    }
    ;;

    -syn) {
        bin="/usr/bin/vim --not-a-term"
        shift
    }
    ;;

    -s) {
        GLOBAL_SYNTAX_HIGHLIGHTING=y
        shift
    }
    ;;

    -nsyn) {
        GLOBAL_SYNTAX_HIGHLIGHTING=n
        shift
    }
    ;;

    +/*) { # pattern
        pattern="$(printf -- "%s" "$opt" | sed 's=^+/==' | chomp)"

        shift
    }
    ;;

    +*:*) {
        GOTO_LINE="$(p "$opt" | pen-mcut -d'[+:]' -f2)"
        GOTO_COLUMN="$(p "$opt" | pen-mcut -d'[+:]' -f3)"

        shift
    }
    ;;

    +[0-9]*[^0-9]*) {
        normal_commands+="$(p "$opt" | sed 's/^.//' | chomp | pen-qne)"
        shift
    }
    ;;

    +[0-9]*) {
        GOTO_LINE="$(p "$opt" | pen-mcut -d+ -f2)"
        shift
    }
    ;;

    +*) {
        normal_commands+="$(p "$opt" | sed 's/^.//' | chomp | pen-qne)"
        shift
    }
    ;;

    *) break;
esac; done

apply() {
    f="$1"
    shift

    for (( i = 1; i <= $#; i++ )); do
        eval ARG=\${$i}
        printf -- "%s" "$ARG" | eval "$f"
    done
}

if [ -n "$normal_commands" ]; then
    normal_commands="$(p "$normal_commands" | pen-qne | pen-qne)"
    opts+=" -c $(cmd-nice-posix "normal $normal_commands") "
fi

if [ -n "$GOTO_LINE" ] && test -n "$GOTO_COLUMN"; then

    GOTO_COLUMN="$(apply "awk 1 | bc" "$GOTO_COLUMN + 1")"

    if test "$JUSTIFY_LEFT" = "y"; then
        LEFTNESS=" | normal! zH"
    fi

    opts+=" -c $(cmd-nice-posix "cal cursor($GOTO_LINE, $GOTO_COLUMN)$LEFTNESS") "
elif [ -n "$GOTO_LINE" ]; then
    opts+=" -c $(cmd-nice-posix "exe $GOTO_LINE") "
fi

if [ -n "$pattern" ]; then
    pattern="$(printf -- "%s" "$pattern" | pen-bs '/~')"

    ncmd="/$pattern"

    ncmd="$(p "silent! normal! $ncmd" | pen-qne)"
    # use q-cmd and not q
    ncmd="$(p "exe \"$ncmd\r\"" | q-cmd)"
    opts+=" -c $ncmd "
fi

test "$#" -gt 0 && last_arg="${@: -1}"
ext="${fp##*.}"

bn="$(basename "$fp")"

if test -n "$n_columns"; then
    n_columns=$((n_columns-1))
    if test "$n_columns" -gt "0"; then
        extra_commands+="|call AddColumns($n_columns)"
    fi
fi

if test "$NOCOLOR" = "y" || { test "$GLOBAL_SYNTAX_HIGHLIGHTING" = "" && { test "$bn" = "glossary.txt" || test "$ext" = "clql"; }; }; then
    extra_commands+="|syntax off | set nohlsearch | set t_Co=0"
fi

if test "$GLOBAL_SYNTAX_HIGHLIGHTING" = "y" || { test "$GLOBAL_SYNTAX_HIGHLIGHTING" = "" && { test "$bn" = "glossary.txt" || test "$ext" = "clql"; }; }; then
    extra_commands+="|windo silent! call GeneralSyntax()|au BufEnter * call GeneralSyntax()"
fi

# This will also be picked up inside nvimrc
# export GLOBAL_SYNTAX_HIGHLIGHTING

if test "$NOAUTOCHDIR" = "y" || stdin_exists; then
    echo "$extra_commands" | tee -a $TMPDIR/extra.txt &>/dev/null
    # Put it at the start because there might be Commands at the beginning. Otherwise, rtcmd will break
    # extra_commands+="|set noautochdir"
    extra_commands="set noautochdir|$extra_commands"
fi

if test "$ANSI" = "y"; then
    extra_commands+="|AnsiEsc"
fi

CMD="$(cmd "$@")"
CMD_FARGS="$(cmd "${fargs[@]}")"

cmd=" -c $(cmd-nice-posix "$extra_commands_prepend$extra_commands") $CMD_FARGS $opts $CMD"

# echo "$cmd"
# exit

if test -n "$vimrc"; then
    bin="$bin -u \"$vimrc\""
fi

if stdin_exists; then
    input="$(tr -d '\0' | pen-dos2unix)"

    cmd="$bin $cmd -"
    cmd="$(printf -- "%s" "$cmd" | pen-esc '`' | pen-ds vlast)"

    printf -- "%s\n" "$input" | vimevalcmd "$cmd"

    exit $?
fi

if test "$LOCATE_IT" = "y"; then
    w="$(locate "$1" | head -n 1)"
    r="$?"

    if [ "$r" -eq 0 ]; then

        shift

        CMD="$(cmd "$@")"

        cmd=" -c $(cmd-nice-posix "$extra_commands") $opts $CMD"

        vimevalcmd "$bin $cmd $w"
    fi
    exit $?
fi

if [ $# -eq 1 ]; then
    if ! [ -f "$1" ]; then
        w="$(which "$1")"
        r="$?"
        bn="pen-$(basename -- "$w")"
        w2="$(which "$bn")"
        if test -f "$w2"; then
            w="$w2"
        fi

        if [ "$r" -eq 0 ]; then

            shift

            CMD="$(cmd "$@")"

            cmd=" -c $(cmd-nice-posix "$extra_commands") $opts $CMD"

            cmd="$bin $cmd $w"
        else
            last_arg="${@: -1}"
            fp="$last_arg"

            if pl "$fp" | grep -q -P ':[^/].*$'; then
                fp="$(p "$last_arg" | cut -d : -f 1)"
                GOTO_LINE="$(p "$last_arg" | cut -d : -f 2)"
                GOTO_COLUMN=0
                opts+=" -c $(cmd-nice-posix "cal cursor($GOTO_LINE, $GOTO_COLUMN)") "
            fi

            ext="${fp##*.}"
            fn="${fp%.*}"

            if printf -- "%s\n" "$last_arg" | grep -q -P '^file:///'; then
                last_arg="$(printf -- "%s" "$last_arg" | sed 's=file://==')"
                set -- "${@:1:$(($#-1))}" # shift last arg
                set -- "$@" "$last_arg"

                cmd="$(cmd "$@")"

            fi

            if printf -- "%s" "$last_arg" | grep -q -P '^http.?://github.com'; then
                gc -notty "$last_arg" &>/dev/null
                last_arg="$(p "$last_arg" | sed "s=^http.\?://github.com=$MYGIT=" | sed "s=/\(blob\|tree\)/[a-z]\+==")"
                set -- "${@:1:$(($#-1))}" # shift last arg

                CMD="$(cmd "$@")"

                cmd=" -c $(cmd-nice-posix "$extra_commands") $opts $CMD"

                cmd="$bin $cmd $last_arg"
            else
                if printf -- "%s" "$last_arg" | grep -q -P '^http.?:'; then
                    tf_webpage="$(make-path-for-uri "$last_arg")"

                    set -- "${@:1:$(($#-1))}" # shift last arg

                    CMD="$(cmd "$@")"

                    cmd=" -c $(cmd-nice-posix "$extra_commands") $opts $CMD"

                    cmd="$bin $cmd $tf_webpage"
                else

                    cmd="$bin $cmd $fp"
                fi
            fi
        fi
    else
        rp="$(realpath "$1")"
        shift

        CMD="$(cmd "$@")"

        cmd=" -c $(cmd-nice-posix "$extra_commands") $opts $CMD"

        cmd="$bin $(cmd-nice-posix "$rp") $cmd"
    fi
else
    cmd=" -c $(cmd-nice-posix "$extra_commands") $CMD_FARGS $opts $CMD"

    cmd="$bin $cmd"
fi

cmd="$(printf -- "%s" "$cmd" | pen-esc '`' | pen-ds vlast)"

vimevalcmd "$cmd"
