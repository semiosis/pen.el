#!/bin/sh

deplist=""

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -t) {
        use_time=y
        shift
    }
    ;;

    -dep) {
        add_deps=y
        deplist="$deplist""$2"
        shift
        shift
    }
    ;;

    -bb) {
        use_babashka=y
        shift
    }
    ;;

    *) break;
esac; done

if test "$use_time" = "y"; then
    add_deps=y
    deplist="$deplist"'clj-time/clj-time {:mvn/version "0.14.2"}'
fi

if test "$use_babashka" = "y"; then
    add_deps=y
    deplist="$deplist"'babashka/fs {:mvn/version "0.3.17"}
babashka/process {:mvn/version "0.4.14"}
org.babashka/cli {:mvn/version "0.6.43"}
org.babashka/http-client {:mvn/version "0.1.8"}
org.babashka/json {:mvn/version "0.1.1"}
'
fi

#_DEPS is same format as deps.edn. Multiline is okay.
if test "$add_deps" = "y"; then
    DEPS="{:deps {
$deplist
}}"
fi

# This works:
# https://clojure.org/reference/clojure_cli
# user config directory, used to store user deps.edn, tool config, and cpcache for commands without a project deps.edn (default = ~/.clojure)
export CLJ_CONFIG="/root/.emacs.d/host/pen.el/scripts/clojure"

#_You can put other options here
OPTS='-J-Xms256m -J-Xmx256m -J-client'

# This works but I don't want to be forced to do this
# cd "/root/.emacs.d/host/pen.el/scripts/clojure"

script_fp="$1"
shift

runclojure() {
    if test -n "$DEPS"; then
        cmd-nice clojure $OPTS -Sdeps "$DEPS" -M "$@" | awk 1 | hls blue 1>&2
        exec clojure $OPTS -Sdeps "$DEPS" -M "$@"
    else
        cmd-nice clojure $OPTS -M "$@" | awk 1 | hls blue 1>&2
        exec clojure $OPTS -M "$@"
    fi
}

ns="$(cat "$script_fp" | scrape "^\\(ns [a-z._-]+\\b" | cut -d ' ' -f 2)"
has_main="$(cat "$script_fp" | scrape "^\\(defn -?main\\b" | cut -d ' ' -f 2)"

if test -n "$has_main"; then
    # See e:bbb
    # Differently from babashka, it seems that when I specify the name of the main function, it doesn't work
    # runclojure -m "$ns/$has_main" "$@"
    runclojure -m "$ns" "$@"
else
    runclojure "$script_fp" "$@"
fi
