#!/bin/bash
export TTY

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -pt) {
        PEN_PROMPT="$2"
        shift
        shift
    }
    ;;

    -help) {
        PEN_HELP="$2"
        shift
        shift
    }
    ;;

    -ov) {
        PEN_OVERLAY="$2"
        shift
        shift
    }
    ;;

    -pov) {
        PEN_PREOVERLAY="$2"
        shift
        shift
    }
    ;;

    -data) {
        PEN_EIPE_DATA="$2"
        shift
        shift
    }
    ;;

    *) break;
esac; done

tf_pipe_buffer="$(0</dev/null pen-tf pipe_buffer txt || echo /dev/null)"

cat > "$tf_pipe_buffer"

exec 3>&1

: ${TTY:="$(pen-tm-tty)"}

exec 0<"$TTY"
exec 1>"$TTY"

# Consider running a different pen instance if available
# emacs -nw -Q "$tf_pipe_buffer"
export PEN_NO_TM=y
# This must use the pool. That is because the client may be run from a prompt function (which synchronously reserves the emacs that is prompting)
# pen -notm -nw --pool "$tf_pipe_buffer"
# pen -notm -nw "$tf_pipe_buffer"

# Here, I *must* wait until I have available pool emacsclients
# This is essential to prevent hanging, currently

export PEN_PROMPT
export PEN_HELP
export PEN_OVERLAY
export PEN_PREOVERLAY
export PEN_EIPE_DATA
pen -notm -nw --pool "$tf_pipe_buffer"

exec 1>&3

# This hasn't failed on me yet
if test -f "$tf_pipe_buffer"; then
    cat "$tf_pipe_buffer"
else
    echo "File '$tf_pipe_buffer' does not exist" 1>&2
    pen-pak
fi

trap "rm $(cmd "$tf_pipe_buffer") 2>/dev/null" 0
